<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>集成Jimu报表</title>
      <link href="2021/08/04/backend/other/jimu-report/"/>
      <url>2021/08/04/backend/other/jimu-report/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://www.jimureport.com/">官网</a></li><li><a href="http://report.jeecg.com/2078875">官方文档</a></li></ul><h3 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h3><blockquote><p>见官网文档</p></blockquote><h3 id="集成时遇到的问题"><a href="#集成时遇到的问题" class="headerlink" title="集成时遇到的问题"></a>集成时遇到的问题</h3><ul><li>集成后启动报错，Unable to load cache item<pre><code class="textmate">解决方法: 去掉devtools即可</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三方集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringFramework源码学习</title>
      <link href="2021/07/26/backend/spring/framework/springframework-2/"/>
      <url>2021/07/26/backend/spring/framework/springframework-2/</url>
      
        <content type="html"><![CDATA[<h3 id="StartDemo"><a href="#StartDemo" class="headerlink" title="StartDemo"></a>StartDemo</h3><pre><code class="java">public class StartDemo &#123;   public static void main(String[] args) &#123;      ApplicationContext context =            new AnnotationConfigApplicationContext(&quot;com.my.config&quot;);      TestConfig testConfig = context.getBean(TestConfig.class);      System.out.println(&quot;==========&gt;main&quot;);      System.out.println(testConfig.getValue());   &#125;&#125;</code></pre><h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><ul><li>AnnotationConfigApplicationContext<pre><code class="text">根据包扫描对象</code></pre></li><li>RootBeanDefinition<pre><code class="text">记录扫描到的类的具体信息(描述类)</code></pre></li><li>BeanFactoryPostProcessor<pre><code class="text">接口，可自定义参与类初始化过程逻辑  工厂钩子，允许自定义修改应用程序上下文的 bean 定义，调整上下文底层 bean 工厂的 bean 属性值。</code></pre></li><li>BeanPostProcessor<pre><code class="text">后期处理器父类，有很多子类；不同子类提供了不同的实现方法，参与到bean初始化过程中  例：AutowiredAnnotationBeanPostProcessor</code></pre><h3 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h3><pre><code class="textmate">scan -&gt; beanPorcessor(描述bean信息) -&gt; 放到 configMap 中 -&gt; refresh -&gt; 通过bean工厂实例化类 -&gt; 放到单例池中</code></pre><h3 id="AnnotationConfigApplicationContext详解"><a href="#AnnotationConfigApplicationContext详解" class="headerlink" title="AnnotationConfigApplicationContext详解"></a>AnnotationConfigApplicationContext详解</h3></li><li>类图<br><img src="https://img-blog.csdnimg.cn/20210706100541307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rlc3Ryb3llcl9EcmVhbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="类图"></li><li>流程图<br><img src="https://img-blog.csdnimg.cn/20210706100708794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rlc3Ryb3llcl9EcmVhbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="执行流程"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 框架 </category>
          
          <category> springframework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL相关知识</title>
      <link href="2021/07/20/backend/storage/mysql/"/>
      <url>2021/07/20/backend/storage/mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Innodb引擎的4大特性"><a href="#Innodb引擎的4大特性" class="headerlink" title="Innodb引擎的4大特性"></a>Innodb引擎的4大特性</h3><blockquote><p><a href="https://www.cnblogs.com/zhs0/p/10528520.html">参考文档</a></p></blockquote><ul><li>插入缓冲</li><li>二次写</li><li>自适应哈希</li><li>预读</li></ul><h4 id="插入缓冲"><a href="#插入缓冲" class="headerlink" title="插入缓冲"></a>插入缓冲</h4><pre><code class="textmate">用于提升插入性能，分为Insert Buffer、Change Bufferchange buffering是insert buffer的加强，insert buffer只针对insert有效，change buffering对insert、delete、update(delete+insert)、purge都有效使用插入缓冲的条件：* 非聚集索引* 非唯一索引</code></pre>]]></content>
      
      
      <categories>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringFramework源码编译</title>
      <link href="2021/06/26/backend/spring/framework/springframework-1/"/>
      <url>2021/06/26/backend/spring/framework/springframework-1/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringFramework5-2-x编译步骤-Mac下"><a href="#SpringFramework5-2-x编译步骤-Mac下" class="headerlink" title="SpringFramework5.2.x编译步骤(Mac下)"></a>SpringFramework5.2.x编译步骤(Mac下)</h2><h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><ul><li>jdk1.8</li><li>Spring-Framework5.2.x 源码</li><li>Gradle 5.6.4</li><li>Idea2021</li></ul><h3 id="Gradle安装配置-编译工具"><a href="#Gradle安装配置-编译工具" class="headerlink" title="Gradle安装配置(编译工具)"></a>Gradle安装配置(编译工具)</h3><ul><li><a href="https://gradle.org/">Gradle官网</a></li><li><a href="https://gradle.org/releases/">下载页面</a></li></ul><h4 id="方式一、压缩包-推荐"><a href="#方式一、压缩包-推荐" class="headerlink" title="方式一、压缩包(推荐)"></a>方式一、压缩包(推荐)</h4><blockquote><p>建议下载源码中标识的gradle版本(源码gradle/wrapper/gradle-wrapper.properties中)</p></blockquote><pre><code class="textmate">1.下载压缩包，解压至~/software/文件夹下2.设置环境变量   echo $SHELL 先查看当前shell   /bin/bash 则修改 ~/.bash_profile 文件   /bin/zsh 则修改 ~/.zshrc 文件   添加以下配置:        export GRADLE_HOME=/Users/mac/software/gradle        export PATH=$PATH:$GRADLE_HOME/bin    source ~/.zshrc 或 source ~/.bash_profile 刷新3.验证安装  gradle -v</code></pre><ul><li>添加Gradle配置<pre><code class="groovy">allprojects&#123; repositories &#123;     def REPOSITORY_URL = &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;     all &#123; ArtifactRepository repo -&gt;         if(repo instanceof MavenArtifactRepository)&#123;             def url = repo.url.toString()             if (url.startsWith(&#39;https://repo1.maven.org/maven2&#39;) || url.startsWith(&#39;https://jcenter.bintray.com/&#39;)) &#123;                 project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;                 remove repo             &#125;         &#125;     &#125;     maven &#123;         url REPOSITORY_URL     &#125; &#125;&#125;</code></pre></li></ul><h4 id="方式二、brew安装"><a href="#方式二、brew安装" class="headerlink" title="方式二、brew安装"></a>方式二、brew安装</h4><blockquote><p>可能不是你想要的版本，注意！！！</p></blockquote><pre><code class="shell">brew install gradle</code></pre><h4 id="方式三、旧版本升级命令-没试过"><a href="#方式三、旧版本升级命令-没试过" class="headerlink" title="方式三、旧版本升级命令(没试过)"></a>方式三、旧版本升级命令(没试过)</h4><pre><code class="shell">./gradlew wrapper --gradle-version=7.1 --distribution-type=bin</code></pre><h3 id="Idea安装配置Gradle"><a href="#Idea安装配置Gradle" class="headerlink" title="Idea安装配置Gradle"></a>Idea安装配置Gradle</h3><pre><code class="textmate">1.搜索并安装插件     菜单: Preferences -&gt; Plugins    插件名(2个): Gradle / Gradle Extension2.配置    菜单: Preferences -&gt; Build -&gt; Build Tools -&gt; Gradle    配置项: 设置Gradle user home(仓库目录)</code></pre><h3 id="Idea编译项目"><a href="#Idea编译项目" class="headerlink" title="Idea编译项目"></a>Idea编译项目</h3><pre><code class="textmate">1.导入   File -&gt; Open -&gt; 打开 Spring-Framework5.2x源码中 build.gradle2.等待编译完成   正常情况下一次编译通过，不熟悉gradle的话建议先不要改 settings.gradle 和 build.gradle 内容，否则会编译失败；3.其他   出现其他异常先参考源码中 import-into-XXX.md 文档</code></pre><h3 id="新建项目测试"><a href="#新建项目测试" class="headerlink" title="新建项目测试"></a>新建项目测试</h3><ul><li>1.新建模块my-demo，类型选Gradle</li><li>2.将新建的模块加到项目中(idea自动新增)<pre><code class="textmate">settings.gradle 中新增 include &#39;my-demo&#39;</code></pre></li><li>3.引入模块<pre><code class="groovy">// my-demo/build.gradle中引入模块dependencies 下新增 compile(project(&quot;:spring-context&quot;))</code></pre></li><li>4.新建配置类及测试代码<pre><code class="java">//配置类//如果注解引入失败，则在@Componentpublic class TestConfig &#123;&#125;</code></pre></li></ul><p>//测试类，打印成功则说明编译成功<br>public class StartDemo {<br>    public static void main(String[] args) {<br>        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(“com.my.config”);<br>        System.out.println(context.getBean(TestConfig.class));<br>    }<br>}</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 框架 </category>
          
          <category> springframework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringClougGateway</title>
      <link href="2021/06/15/backend/spring/springcloud-gateway/"/>
      <url>2021/06/15/backend/spring/springcloud-gateway/</url>
      
        <content type="html"><![CDATA[<h3 id="文章收集"><a href="#文章收集" class="headerlink" title="文章收集"></a>文章收集</h3><ul><li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RC3/multi/multi_spring-cloud-gateway.html">SpringCloudGateway-2.1.0.RC3</a></li><li><a href="https://spring.io/projects/spring-cloud-gateway">SpringCloudGateway官网</a></li><li><a href="https://www.haoyizebo.com/posts/876ed1e8/">SpringCloudGateway(读取、修改RequestBody)(转)</a></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code class="yaml">spring:  application:    name: cloud-gateway  cloud:    httpclient:      connect-timeout: 20000      pool:        max-idle-time: 20000    #开启从注册中心动态创建路由的功能，利用微服务名进行路由#    discovery:#      locator:#        lower-case-service-id: true#        enabled: true    # 相关文档 https://www.cnblogs.com/crazymakercircle/p/11704077.html    # uri相同时，只有最后一个会生效    #一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发；    #predicates断言，可根据datetime、Cookie、Header、Host、Method、Path、Queryparam、RemoteAddr匹配    #filter: 支持PrefixPath、RewritePath、SetPath、RedirectTo、RemoveRequestHeader、    #RemoveResponseHeader、SetStatus、StripPrefix、RequestSize、Default-filters    gateway:      routes:      #根据url拦截      - id: service1_v1        uri: https://www.so.com/?quanso.com.cn        predicates:          - Path=/360#      - id: service1_v2#        uri: http://localhost:8080/api/v2#        predicates:#          - Path=/v2      #拦截v1请求，并带上/api，转发到8080端口上#      - id: service1_v3#        uri: http://localhost:8080#        predicates:#          - Path=/v1#        filters:#          - PrefixPath=/api      #predicates断言，可根据datetime/Cookie/Header/Host/Method/Path/Queryparam/RemoteAddr匹配      - id: queryParam-baidu-route        uri: https://www.baidu.com        predicates:          - Query=baidu      - id: queryParam-bing-route        uri: https://bing.com/        predicates:          - Query=bing, tr. #参数中包含bing,且值为tr开头的三位参数 才能匹配到#      - id: queryParam-release2-route#        uri: http://localhost:8080/api/v2#        predicates:#          - Path=/api#          - Weight=service2, 90#      - id: queryParam-head-route#        uri: http://localhost:8080#        predicates:#          - Header=Jump, 1001 #请求头中包含信息才校验通过#        filters:#          - PrefixPath=/api#      - id: queryParam-host-route#        uri: http://localhost:8080#        predicates:#          - Host=*.apix #请求头中包含信息才校验通过#        filters:#          - PrefixPath=/api      #测试StripPrefix#      - id: full-route#        uri: http://localhost:8080#        predicates:#          - Query=full#        filters:#          - PrefixPath=/full#          - StripPrefix=0      # 熔断降级#      - id: queryParam-fallback-route#        uri: http://localhost:8080#        predicates:#          - Path=/test#        filters:#          - name: Hystrix#            args:#              name: default#              fallbackUri: forward:/fallback#      - id: fallback-route#        uri: http://localhost:8080/fallback#        predicates:#          - Path=/fallback        # 金丝雀发布      - id: release1-route        uri: http://localhost:8080        predicates:          - Path=/v1          - Weight=service1, 50        filters:          - PrefixPath=/api      - id: release2-route        uri: http://localhost:8081        predicates:          - Path=/v1          - Weight=service1, 50        filters:          - PrefixPath=/api#hystrix.command.fallbackA.execution.isolation.thread.timeoutInMilliseconds: 5000# hystrix 信号量隔离，1.5秒后自动超时hystrix:  command:    default:      execution:        isolation:          strategy: SEMAPHORE          thread:            timeoutInMilliseconds: 1500</code></pre><h3 id="获取及改写RequestBody示例"><a href="#获取及改写RequestBody示例" class="headerlink" title="获取及改写RequestBody示例"></a>获取及改写RequestBody示例</h3><pre><code class="java">class DemoFilter implements GlobalFilter, Ordered&#123;    @Resource    private ServerCodecConfigurer configurer;    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        ServerRequest serverRequest = ServerRequest.create(exchange, configurer.getReaders());        // read &amp; modify body        Mono&lt;String&gt; modifiedBody = serverRequest.bodyToMono(String.class)                .flatMap(body -&gt; &#123;                    //例子：验签                    boolean checkFlag = paramSignCheck(jsonParam);                    if(!checkFlag)&#123;                        return Mono.error(new Exception(&quot;验签失败&quot;));                    &#125;                    return Mono.just(body);                &#125;);        BodyInserter bodyInserter = BodyInserters.fromPublisher(modifiedBody,String.class);        HttpHeaders headers = new HttpHeaders();        headers.putAll(exchange.getRequest().getHeaders());        //重要 不处理会导致请求失败        headers.remove(HttpHeaders.CONTENT_LENGTH);        CachedBodyOutputMessage outputMessage = new CachedBodyOutputMessage(exchange, headers);        return bodyInserter.insert(outputMessage, new BodyInserterContext())                .then(Mono.defer(() -&gt; &#123;                    ServerHttpRequestDecorator decorator = new ServerHttpRequestDecorator(                            exchange.getRequest()) &#123;                        @Override                        public HttpHeaders getHeaders() &#123;                            long contentLength = headers.getContentLength();                            HttpHeaders httpHeaders = new HttpHeaders();                            httpHeaders.putAll(super.getHeaders());                            if (contentLength &gt; 0) &#123;                                httpHeaders.setContentLength(contentLength);                            &#125;                            return httpHeaders;                        &#125;                        @Override                        public Flux&lt;DataBuffer&gt; getBody() &#123;                            return outputMessage.getBody();                        &#125;                    &#125;;                    ServerHttpResponse decoratedResponse = decorate(exchange, trace);                    return chain.filter(exchange.mutate().request(decorator).response(decoratedResponse).build());                &#125;));    &#125;&#125;</code></pre><h3 id="新增headers"><a href="#新增headers" class="headerlink" title="新增headers"></a>新增headers</h3><pre><code class="java">@Configurationpublic class AuthGatewayFilter implements GlobalFilter, Ordered &#123;    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        Consumer&lt;HttpHeaders&gt; httpHeaders = httpHeader -&gt; &#123;            // 存在相同的key,直接添加会报错            if(StringUtils.isBlank(httpHeader.getFirst(&quot;xxx&quot;)))&#123;                httpHeader.add(&quot;xxx&quot;, &quot;xxx&quot;);            &#125;        &#125;;        ServerHttpRequest serverHttpRequest = exchange.getRequest().mutate().headers(httpHeaders).build();        exchange = exchange.mutate().request(serverHttpRequest).build();        return chain.filter(exchange);    &#125;    @Override    public int getOrder() &#123;        return Ordered.HIGHEST_PRECEDENCE - 1;    &#125;&#125;</code></pre><h3 id="请求非json格式转jsondemo"><a href="#请求非json格式转jsondemo" class="headerlink" title="请求非json格式转jsondemo"></a>请求非json格式转jsondemo</h3><pre><code class="java">class Demo&#123;    /** application/x-www-form-urlencoded 转json **/    private Map&lt;String, Object&gt; decodeBody(String body) &#123;        return Arrays.stream(body.split(&quot;&amp;&quot;))                .map(s -&gt; s.split(&quot;=&quot;))                .collect(Collectors.toMap(arr -&gt; arr[0], arr -&gt; arr[1]));    &#125;    /** fomrData(非文件)转 json 数据 **/    private String parseFormData2Json(String requestParam)&#123;        if(StringUtils.isBlank(requestParam)                 &amp;&amp; !requestParam.contains(&quot;filename&quot;))&#123;            return requestParam;        &#125;        try&#123;            requestParam = requestParam.replace(&quot;-&quot;,&quot;&quot;).split(&quot;-&quot;)[0];            String code = requestParam.split(&quot;\n&quot;)[0];            requestParam = requestParam.replaceAll(code,&quot;&quot;)                    .replaceAll(&quot;ContentDisposition: formdata;&quot;,&quot;&quot;)                    .replaceAll(&quot;\n&quot;,&quot;&quot;)                    .replaceAll(&quot;name=&quot;,&quot;,&quot;)                    .replaceAll(&quot;\&quot;\r\r&quot;,&quot;\&quot;:\&quot;&quot;)                    .replaceFirst(&quot;,&quot;,&quot;&quot;)                    .replaceAll(&quot;\r&quot;,&quot;\&quot;&quot;)            ;            requestParam = &quot;&#123;&quot; + requestParam + &quot;\&quot;&#125;&quot;;        &#125; catch (Exception e)&#123;            e.printStackTrace();        &#125;        return requestParam;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 框架 </category>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用链监控-skywalking</title>
      <link href="2021/05/19/devops/skywalking/"/>
      <url>2021/05/19/devops/skywalking/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://skywalking.apache.org/">官网</a></li><li><a href="http://skywalking.apache.org/downloads/">下载地址</a></li><li><a href="https://www.jianshu.com/p/8b9aad4210c5">部署及使用文档(转)</a></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>重启<pre><code class="textmate">原脚本中没有杀掉旧进程，使用jps找到对应服务，然后kill掉再执行bin/startup.sh</code></pre></li><li>支持SpringCloudGateway<pre><code class="textmate">默认情况agent是不支持对spring-cloud-gateway的监控的，需要插件的支持。我们要将optional-plugins下的插件apm-spring-cloud-gateway-2.x-plugin-6.5.0.jar拷贝到plugins下</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio</title>
      <link href="2021/05/18/devops/istio/"/>
      <url>2021/05/18/devops/istio/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://istio.io/latest/zh/docs/examples/bookinfo/">官网</a></li><li><a href="https://www.jianshu.com/p/1f3f62ce3ea9">istio性能测试</a></li></ul><h3 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a>流量管理</h3><ul><li><p>配置基本请求路由</p><pre><code class="yaml">spec:hosts:  - reviewshttp:  - route:      - destination:          host: reviews          subset: v1</code></pre></li><li><p>按照请求头中用户信息过滤</p><pre><code class="yaml">spec:hosts:  - reviewshttp:  - match:      - headers:          end-user:            exact: jason    route:      - destination:          host: reviews          subset: v2  - match:      - headers:          end-user:            exact: aaa    route:      - destination:          host: reviews          subset: v2  - route:      - destination:          host: reviews          subset: v3</code></pre></li><li><p>故障注入-延迟(jason登录，访问6s后页面才加载出来)</p><pre><code class="yaml">spec:hosts:  - ratingshttp:  - fault:      delay:        fixedDelay: 7s # 7s延迟        percentage:          value: 100    match:      - headers:          end-user:            exact: jason    route:      - destination:          host: ratings          subset: v1  - route:      - destination:          host: ratings          subset: v1</code></pre></li><li><p>故障注入-异常(jason登录，50几率访问返回500)</p><pre><code class="yaml">spec:hosts:- ratingshttp:- match:  - headers:      end-user:        exact: jason  fault:    abort:      percentage:        value: 50      httpStatus: 500 #注入500错误  route:  - destination:      host: ratings      subset: v1- route:  - destination:      host: ratings      subset: v1</code></pre></li><li><p>流量转移</p><pre><code class="yaml">spec:hosts:  - reviewshttp:- route:  - destination:      host: reviews      subset: v1    weight: 50  - destination:      host: reviews      subset: v3    weight: 50</code></pre></li><li><p>设置请求超时(2s延迟)</p><pre><code class="yaml">spec:hosts:- ratingshttp:- fault:    delay:      percent: 100      fixedDelay: 2s  route:  - destination:      host: ratings      subset: v1</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="2021/04/28/frontend/vue/"/>
      <url>2021/04/28/frontend/vue/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-es6接入Echarts"><a href="#vue-es6接入Echarts" class="headerlink" title="vue+es6接入Echarts"></a>vue+es6接入Echarts</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><pre><code class="shell"># echarsnpm install echarts --save</code></pre><h4 id="2-实现图表下钻及还原demo"><a href="#2-实现图表下钻及还原demo" class="headerlink" title="2.实现图表下钻及还原demo"></a>2.实现图表下钻及还原demo</h4><pre><code class="textmate">&lt;template&gt;    &lt;div style=&quot;display: inline-block&quot; v-show=&quot;optionShow&quot; &gt;        &lt;div id=&quot;option&quot; :style=&quot;&#123;width: &#39;800px&#39;, height: &#39;600px&#39;&#125;&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div style=&quot;display: inline-block&quot; v-show=&quot;optionSecondShow&quot; &gt;        &lt;div id=&quot;secondOption&quot; :style=&quot;&#123;width: &#39;800px&#39;, height: &#39;600px&#39;&#125;&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import * as echarts from &#39;echarts&#39;;    export default &#123;        name: &#39;dashboard&#39;,        data() &#123;            return &#123;                optionShow: true,                // echarts报表                option: &#123;&#125;,                optionSecond: &#123;&#125;,            &#125;        &#125;,        created()&#123;        &#125;,        mounted()&#123;            //调用method中方法！！！            let that = this;            //渲染报表一            let myChart = echarts.init(document.getElementById(&#39;option&#39;))            that.initEcharts();            myChart.setOption(that.option);            //报表二            let myChartSecond = echarts.init(document.getElementById(&#39;secondOption&#39;))            //图表一下钻            myChart.on(&#39;click&#39;, function (params) &#123;                console.log(params.name,params.value,params.seriesName);                //重置值                that.secondShowFun()                myChartSecond.setOption(that.optionSecond)            &#125;);            //点击图表二还原数据            myChartSecond.getZr().on(&#39;click&#39;, function (event) &#123;                if (!event.target) &#123;                    that.initEcharts();                    myChart.setOption(that.option)                &#125;            &#125;);            //点击图表二下钻            myChartSecond.on(&#39;click&#39;, function (params) &#123;                console.log(params.name,params.value,params.seriesName);                //展示列表                that.showTabFun()            &#125;);        &#125;,        methods: &#123;            initEcharts()&#123;                this.optionShow = true;                this.optionSecondShow = false;                this.tableShow = false;                this.option = &#123;                    tooltip: &#123;                        trigger: &#39;axis&#39;,                        axisPointer: &#123;            // Use axis to trigger tooltip                            type: &#39;shadow&#39;        // &#39;shadow&#39; as default; can also be &#39;line&#39; or &#39;shadow&#39;                        &#125;                    &#125;,                    legend: &#123;                        data: [&#39;项目一&#39;, &#39;项目二&#39;, &#39;项目三&#39;]                    &#125;,                    grid: &#123;                        left: &#39;3%&#39;,                        right: &#39;4%&#39;,                        bottom: &#39;3%&#39;,                        containLabel: true                    &#125;,                    xAxis: &#123;                        type: &#39;value&#39;                    &#125;,                    yAxis: &#123;                        type: &#39;category&#39;,                        data: [&#39;user-center&#39;, &#39;user-auth&#39;, &#39;uaa-gateway&#39;, &#39;crm&#39;, &#39;ims&#39;, &#39;fms&#39;, &#39;cloud-gateway&#39;]                    &#125;,                    series: [                        &#123;                            name: &#39;项目一&#39;,                            type: &#39;bar&#39;,                            stack: &#39;total&#39;,                            label: &#123;                                show: true,                                valueAnimation: true                            &#125;,                            emphasis: &#123;                                focus: &#39;series&#39;                            &#125;,                            data: [320, 302, 301, 334, 390, 330, 320]                        &#125;,                        &#123;                            name: &#39;项目二&#39;,                            type: &#39;bar&#39;,                            stack: &#39;total&#39;,                            label: &#123;                                show: true,                                valueAnimation: true                            &#125;,                            emphasis: &#123;                                focus: &#39;series&#39;                            &#125;,                            data: [120, 132, 101, 134, 90, 230, 210]                        &#125;,                        &#123;                            name: &#39;项目三&#39;,                            type: &#39;bar&#39;,                            stack: &#39;total&#39;,                            label: &#123;                                show: true,                                valueAnimation: true                            &#125;,                            emphasis: &#123;                                focus: &#39;series&#39;                            &#125;,                            data: [220, 182, 191, 234, 290, 330, 310]                        &#125;                    ],                &#125;;            &#125;,            secondShowFun()&#123;                this.optionShow = false;                this.optionSecondShow = true;                this.optionSecond = &#123;                    tooltip: &#123;                        trigger: &#39;axis&#39;,                        axisPointer: &#123;            // Use axis to trigger tooltip                            type: &#39;shadow&#39;        // &#39;shadow&#39; as default; can also be &#39;line&#39; or &#39;shadow&#39;                        &#125;                    &#125;,                    legend: &#123;                        data: [&#39;分类一&#39;,&#39;分类二&#39;,&#39;分类三&#39;]                    &#125;,                    grid: &#123;                        left: &#39;3%&#39;,                        right: &#39;4%&#39;,                        bottom: &#39;3%&#39;,                        containLabel: true                    &#125;,                    xAxis: &#123;                        type: &#39;value&#39;                    &#125;,                    yAxis: &#123;                        type: &#39;category&#39;,                        data: [&#39;子项一&#39;, &#39;子项二&#39;, &#39;子项三&#39;]                    &#125;,                    series : [                        &#123;                            name: &#39;子项一&#39;,                            type: &#39;bar&#39;,                            stack: &#39;total&#39;,                            label: &#123;                                show: true                            &#125;,                            emphasis: &#123;                                focus: &#39;series&#39;                            &#125;,                            data: [10,2,3]                        &#125;,                        &#123;                            name: &#39;子项二&#39;,                            type: &#39;bar&#39;,                            stack: &#39;total&#39;,                            label: &#123;                                show: true                            &#125;,                            emphasis: &#123;                                focus: &#39;series&#39;                            &#125;,                            data: [1,3,4]                        &#125;,                        &#123;                            name: &#39;子项三&#39;,                            type: &#39;bar&#39;,                            stack: &#39;total&#39;,                            label: &#123;                                show: true                            &#125;,                            emphasis: &#123;                                focus: &#39;series&#39;                            &#125;,                            data: [2,5,6]                        &#125;,                    ],                &#125;;            &#125;,        &#125;    &#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;    .dashboard-editor-container &#123;        padding: 32px;        background-color: rgb(240, 242, 245);        position: relative;    .chart-wrapper &#123;        background: #fff;        padding: 16px 16px 0;        margin-bottom: 32px;    &#125;    &#125;    @media (max-width:1024px) &#123;        .chart-wrapper &#123;            padding: 8px;        &#125;    &#125;&lt;/style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维相关</title>
      <link href="2021/04/16/devops/docker/"/>
      <url>2021/04/16/devops/docker/</url>
      
        <content type="html"><![CDATA[<h3 id="K8S相关"><a href="#K8S相关" class="headerlink" title="K8S相关"></a>K8S相关</h3><ul><li><a href="https://k8s.imroc.io/troubleshooting/">k8s实践(转)</a></li><li><a href="https://www.processon.com/view/link/5e4662ade4b0d86ec4018e50#map">k8s问题定位手册(转)</a></li></ul><h3 id="Docker相关"><a href="#Docker相关" class="headerlink" title="Docker相关"></a>Docker相关</h3><ul><li><a href="https://dockerwebdev.com/tutorials/clean-up-docker/">清理Docker</a></li><li><a href="https://www.kubernetes.org.cn/kubernetes-pod">Kubernetes中文社区</a></li><li><a href="https://istio.io/latest/zh/docs/setup/getting-started/">Istio(ServiceMesh)</a></li><li><a href="https://kiali.io/documentation/latest/runtimes-monitoring/#_quarkus">Kiali</a></li></ul><h4 id="本地启动K8S"><a href="#本地启动K8S" class="headerlink" title="本地启动K8S"></a>本地启动K8S</h4><pre><code class="textmate">1.先下载安装docker desktop(建议3.2.2以上)    https://www.docker.com/products/docker-desktop2.安装好后启动docker desktop3.设置    3.1 Perferences ==&gt; Kubernetes ==&gt; 开启Enable Kubernetes，Show system containers    3.2 如果开启不了尝试手动下载k8s相关进行并重启docker desktop    3.3 下载与docker desktop中Kubernetes一致的版本        https://github.com/maguowei/k8s-docker-desktop-for-mac</code></pre><h4 id="docker设置"><a href="#docker设置" class="headerlink" title="docker设置"></a>docker设置</h4><pre><code class="textmate">1.设置开机自启    sudo systemctl enable xx2.配置docker容器自动重启    docker update xx --restart=always</code></pre><h4 id="清理Docker"><a href="#清理Docker" class="headerlink" title="清理Docker"></a>清理Docker</h4><pre><code class="textmate">https://dockerwebdev.com/tutorials/clean-up-docker</code></pre><h4 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h4><pre><code class="textmate">阿里云控制台-&gt;容器服务-&gt;镜像加速器-&gt;选择不同系统的命令并执行</code></pre><h4 id="Docker踩坑"><a href="#Docker踩坑" class="headerlink" title="Docker踩坑"></a>Docker踩坑</h4><pre><code class="textmate">1.目录挂载问题    如果要映射具体文件，需要先手工创建好，否则默认是作为文件夹创建的</code></pre><h3 id="虚拟机-VirtualBox"><a href="#虚拟机-VirtualBox" class="headerlink" title="虚拟机-VirtualBox"></a>虚拟机-VirtualBox</h3><h4 id="VirtualBox虚拟机镜像安装工具"><a href="#VirtualBox虚拟机镜像安装工具" class="headerlink" title="VirtualBox虚拟机镜像安装工具"></a>VirtualBox虚拟机镜像安装工具</h4><pre><code class="textmate">   vargrant 软件(有对应的镜像仓库)   vargrant init center/7  ---&gt; 会生成类似dockerfile的文件,支持修改配置   vargrant up --&gt; 启动，相当于点虚拟机开机   vargrant ssh  ---&gt; ssh链接虚拟机   vargrant reload ---&gt; 重启虚拟机</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试相关</title>
      <link href="2021/04/13/test/test/"/>
      <url>2021/04/13/test/test/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://blog.csdn.net/weixin_43767015/article/details/104758415">JMH-性能优化测试(转)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos</title>
      <link href="2021/04/13/backend/service/nacos/"/>
      <url>2021/04/13/backend/service/nacos/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">官方文档</a></li><li><a href="https://mp.weixin.qq.com/s/S8HI7DG5v9C2IfjXtkVjuQ">小白也能懂的 Nacos 服务模型介绍(转)</a> </li><li><a href="https://blog.csdn.net/wangwei19871103/article/details/105775039/">动态刷新原理(转)</a></li><li><a href="https://www.baidu.com/s?ie=UTF-8&wd=Raft%E7%AE%97%E6%B3%95">相关-Raft算法(转)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 服务治理 </category>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
            <tag> 动态配置 </tag>
            
            <tag> 注册中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="2021/04/05/devops/nginx/"/>
      <url>2021/04/05/devops/nginx/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://nginx.org/">官网</a></li><li><a href="https://www.runoob.com/linux/nginx-install-setup.html">菜鸟教程-Nginx 安装配置</a></li><li><a href="https://cloud.tencent.com/document/product/400/35244">Nginx服务器SSL证书安装部署-腾讯云</a></li></ul><h3 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h3><pre><code class="textmate">1.检测配置是否正常nginx -t 2.热部署配置nginx -s reload</code></pre><h3 id="ssl-nginx配置"><a href="#ssl-nginx配置" class="headerlink" title="ssl-nginx配置"></a>ssl-nginx配置</h3><pre><code class="textmate">具体参考云厂商ssl证书安装步骤1.下载ssl相关文件,服务器开启443端口权限2.解压后将文件夹Nginx中文件放到nginx安装目录下(或其他地方)3.添加nginx配置文件4.重启生效</code></pre><h3 id="同一域名不同服务配置"><a href="#同一域名不同服务配置" class="headerlink" title="同一域名不同服务配置"></a>同一域名不同服务配置</h3><pre><code class="textmate">server &#123;    listen       8888;    server_name  localhost;    location /service1/ &#123;         proxy_pass http://localhost:7001/;    &#125;    location /service2/ &#123;         proxy_pass http://localhost:7002/;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="2021/03/22/backend/spring/spring-boot/"/>
      <url>2021/03/22/backend/spring/spring-boot/</url>
      
        <content type="html"><![CDATA[<h3 id="文章收集"><a href="#文章收集" class="headerlink" title="文章收集"></a>文章收集</h3><ul><li><a href="https://www.jianshu.com/p/603d125f21b3">SpringBoot启动过程(转)</a></li><li><a href="https://www.processon.com/view/link/59812124e4b0de2518b32b6e">流程图(转)</a></li><li><a href="https://blog.csdn.net/youanyyou/article/details/103562907">@RefreshScope原理</a></li><li><a href="https://www.cnblogs.com/sword-successful/p/11383723.html">SpringBoot内置Tomcat启动源码分析</a></li></ul><h3 id="集成PageHelper"><a href="#集成PageHelper" class="headerlink" title="集成PageHelper"></a>集成PageHelper</h3><ul><li><p>配置</p><pre><code class="pom">&lt;!--基础框架包--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;  &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;  &lt;type&gt;pom&lt;/type&gt;  &lt;scope&gt;import&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;  &lt;version&gt;Hoxton.SR8&lt;/version&gt;  &lt;type&gt;pom&lt;/type&gt;  &lt;scope&gt;import&lt;/scope&gt;&lt;/dependency&gt;&lt;!--page helper依赖--&gt;&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter --&gt;&lt;dependency&gt;  &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;  &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;  &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt;</code></pre></li><li><p>使用</p><pre><code class="java">class XXService&#123;  public Result list(QueryParam param)&#123;      PageMethod.startPage(param.getPageNumber(),param.getPageSize());      List result = mapper.list(param);      PageInfo pageInfo = new PageInfo(result);      return PageDTO.result(pageInfo.getTotal(),result);  &#125;&#125;</code></pre></li><li><p>注意事项</p></li></ul><pre><code class="textmate">1.注意pom版本号2.使用pagehelper-spring-boot-starter pom后，不需要在yml中配置pagehelper相关参数，否则分页会有问题(亲测)  例如: 永远只在第一页</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 框架 </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象转换工具-Orika</title>
      <link href="2021/03/20/backend/java/utils/convert/orika/"/>
      <url>2021/03/20/backend/java/utils/convert/orika/</url>
      
        <content type="html"><![CDATA[<h2 id="Orika"><a href="#Orika" class="headerlink" title="Orika"></a>Orika</h2><ul><li><a href="http://orika-mapper.github.io/orika-docs/">官方文档</a></li></ul><h3 id="提供的能力"><a href="#提供的能力" class="headerlink" title="提供的能力"></a>提供的能力</h3><pre><code class="textmate">Orika为开发者提供了如下功能：1.映射复杂的、深层次结构性对象。2.通过将嵌套属性映射到顶级属性，“拉平”或“展开”对象。3.自动创建映射，并且在部分或所有映射上自定义。4.创建转换器，以完全控制对象图中的任何特定对象集合的映射——按类型，甚至是通过特定的属性名。5.处理代理或增强对象（如Hibernate或各种模拟框架）6.用一个配置应用双向映射。7.为一个目标抽象类或接口映射到具体的实现类。8.映射POJO属性到Lists, Arrays, and Maps。</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="pom引用"><a href="#pom引用" class="headerlink" title="pom引用"></a>pom引用</h4><pre><code class="textmate">&lt;!-- 方式一(推荐) --&gt;&lt;dependency&gt;    &lt;groupId&gt;net.rakugakibox.spring.boot&lt;/groupId&gt;    &lt;artifactId&gt;orika-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 方式二，需要在项目中加入配置类 --&gt;&lt;dependency&gt;    &lt;groupId&gt;ma.glasnost.orika&lt;/groupId&gt;    &lt;artifactId&gt;orika-core&lt;/artifactId&gt;    &lt;version&gt;1.5.4&lt;/version&gt;    &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;</code></pre><h4 id="方式二所需配置类-可选"><a href="#方式二所需配置类-可选" class="headerlink" title="方式二所需配置类(可选)"></a>方式二所需配置类(可选)</h4><pre><code class="java">/** * 可自定义转换规则 * **/@Configurationpublic class MapperFactoryAware &#123;    @Autowired    private MapperFactory mapperFactory;    @PostConstruct    public void init()&#123;        mapperFactory.getConverterFactory().registerConverter(new BooleanConvert());    &#125;    /** Boolean &lt;=&gt; Integer 互转 **/    private class BooleanConvert extends BidirectionalConverter&lt;Boolean,Integer&gt;&#123;        @Override        public Integer convertTo(Boolean source, Type&lt;Integer&gt; destinationType, MappingContext mappingContext) &#123;            return source ? 1 : 0;        &#125;        @Override        public Boolean convertFrom(Integer source, Type&lt;Boolean&gt; destinationType, MappingContext mappingContext) &#123;            return source == 1;        &#125;    &#125;&#125;</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="基础测试类"><a href="#基础测试类" class="headerlink" title="基础测试类"></a>基础测试类</h4><pre><code class="java">// dto对象@Getter@Setter@AllArgsConstructor@NoArgsConstructor@Builderpublic class UserInfoDTO &#123;    private String userId;    private String userName;    private String createTime;    private List&lt;String&gt; ids;    private String dtoName;    private Integer sex;&#125;// po对象@Getter@Setter@AllArgsConstructor@NoArgsConstructor@Builderpublic class UserInfo &#123;    private Integer userId;    private String userName;    private Date createTime;    private List&lt;Integer&gt; ids;    private String poName;    private Boolean sex;&#125;</code></pre><h4 id="简易demo-更多用法参考官方文档"><a href="#简易demo-更多用法参考官方文档" class="headerlink" title="简易demo(更多用法参考官方文档)"></a>简易demo(更多用法参考官方文档)</h4><pre><code class="java">@Slf4j@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,        classes = DemoApplication.class)public class ConvertTest&#123;    @Autowired    private MapperFacade mapperFacade;    @Autowired    private MapperFactory mapperFactory;    //简易案例，属性名相同，类型不同    @Test    public void testSimple()&#123;        UserInfo userInfo = UserInfo.builder()                .userId(10001)                .ids(Arrays.asList(1002,1003,1004,1005))                .userName(&quot;aaaa&quot;)                .createTime(new Date())                .build();        //po 2 dto        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);        log.info(&quot;po 2 dto =====&gt; &#123;&#125;&quot;, JSON.toJSONString(result));        //dto 2 po        UserInfo info = mapperFacade.map(result, UserInfo.class);        log.info(&quot;dto 2 po =====&gt; &#123;&#125;&quot;, JSON.toJSONString(info));        // pos 2 dtos        List&lt;UserInfo&gt; pos = new ArrayList&lt;&gt;();        pos.add(userInfo);        List&lt;UserInfoDTO&gt; dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(dtos));        // pos 2 dtos        pos = mapperFacade.mapAsList(dtos, UserInfo.class);        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(pos));    &#125;    //属性名不同，需要先在mapperFactory中设置，然后获取到mapperFacade再使用    @Test    public void testDiff()&#123;        UserInfo userInfo = UserInfo.builder()                .userId(10001)                .ids(Arrays.asList(1002,1003,1004,1005))                .userName(&quot;aaaa&quot;)                .createTime(new Date())                .poName(&quot;this is po&quot;)                .build();        //不同字段互转        mapperFactory.classMap(UserInfo.class, UserInfoDTO.class)                .field(&quot;poName&quot;, &quot;dtoName&quot;)                .byDefault()                .register();        MapperFacade mapperFacade = mapperFactory.getMapperFacade();        //po 2 dto        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);        log.info(&quot;po 2 dto =====&gt; &#123;&#125;&quot;, JSON.toJSONString(result));        //dto 2 po        UserInfo info = mapperFacade.map(result, UserInfo.class);        log.info(&quot;dto 2 po =====&gt; &#123;&#125;&quot;, JSON.toJSONString(info));        // pos 2 dtos        List&lt;UserInfo&gt; pos = new ArrayList&lt;&gt;();        pos.add(userInfo);        List&lt;UserInfoDTO&gt; dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(dtos));        // pos 2 dtos        pos = mapperFacade.mapAsList(dtos, UserInfo.class);        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(pos));    &#125;&#125;</code></pre><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><pre><code class="textmate">testSimple 执行结果:-po 2 dto =====&gt; &#123;&quot;createTime&quot;:&quot;Wed Jun 02 10:11:51 CST 2021&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;-dto 2 po =====&gt; &#123;&quot;createTime&quot;:1622650311000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;-pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:&quot;Wed Jun 02 10:11:51 CST 2021&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;]-pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:1622650311000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;]testDiff 执行结果:po 2 dto =====&gt; &#123;&quot;createTime&quot;:&quot;Sat Mar 20 14:30:46 CST 2021&quot;,&quot;dtoName&quot;:&quot;this is po&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;dto 2 po =====&gt; &#123;&quot;createTime&quot;:1616272246000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;poName&quot;:&quot;this is po&quot;,&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:&quot;Sat Mar 20 14:30:46 CST 2021&quot;,&quot;dtoName&quot;:&quot;this is po&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;]pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:1616272246000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;poName&quot;:&quot;this is po&quot;,&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LDAP学习笔记</title>
      <link href="2021/02/18/devops/ldap/"/>
      <url>2021/02/18/devops/ldap/</url>
      
        <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://www.openldap.org/">OpenLDAP</a></li><li><a href="https://www.cnblogs.com/xiaomifeng0510/p/9564688.html">LDAP-admin操作指南</a></li><li><a href="https://blog.csdn.net/weixin_30338461/article/details/98920690">CSDN-Demo</a></li><li><a href="http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/reference/">官方文档及例子(重要)</a></li><li><a href="http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/apidocs/">JAVA文档（重要）</a></li><li><a href="https://github.com/spring-projects/spring-ldap">GitHub（大量例子）</a></li></ul><h3 id="常用名词"><a href="#常用名词" class="headerlink" title="常用名词"></a>常用名词</h3><pre><code class="textmate">o– organization（组织-公司）ou – organization unit（组织单元-部门）c - countryName（国家）dc - domainComponent（域名）sn – suer name（真实名称）cn - common name（常用名称)</code></pre><h3 id="Docker部署LDAP"><a href="#Docker部署LDAP" class="headerlink" title="Docker部署LDAP"></a>Docker部署LDAP</h3><ul><li><p>ldap<br>```shell<br>#用户名 cn=admin,dc=company,dc=com<br>#密码 123456<br>#注意，\后面不能有空格<br>docker run \</p></li><li><p>p 389:389 \</p></li><li><p>p 636:636 \</p></li><li><p>-name my-ldap \</p></li><li><p>-network bridge \</p></li><li><p>-hostname openldap-host \</p></li><li><p>-env LDAP_ORGANISATION=”company” \</p></li><li><p>-env LDAP_DOMAIN=”company.com” \</p></li><li><p>-env LDAP_ADMIN_PASSWORD=”123456” \</p></li><li><p>-detach osixia/openldap</p><pre><code></code></pre></li><li><p>ldap-admin</p></li></ul><pre><code class="shell">#启动后浏览器访问http://localhost:8080docker run \-d \--privileged \-p 8080:80 \--name ldap-admin \--env PHPLDAPADMIN_HTTPS=false \--env PHPLDAPADMIN_LDAP_HOSTS=LDAP服务IP \--detach osixia/phpldapadmin</code></pre><h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><pre><code class="java">@Slf4jpublic class ldapService&#123;    public static void main(String[] args) &#123;        try &#123;            String bindUserDN = &quot;cn=admin,dc=company,dc=com&quot;;            //用户密码            String bindPassword = &quot;123456&quot;;            //ldap服务器IP            String url = &quot;ldap://127.0.0.1:389/dc=company,dc=com&quot;;            Hashtable&lt;String, String&gt; env = new Hashtable&lt;&gt;();            env.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);            env.put(javax.naming.Context.PROVIDER_URL, url);            env.put(javax.naming.Context.SECURITY_AUTHENTICATION, &quot;simple&quot;);            env.put(javax.naming.Context.SECURITY_PRINCIPAL, bindUserDN);            env.put(javax.naming.Context.SECURITY_CREDENTIALS, bindPassword);            env.put(&quot;java.naming.referral&quot;, &quot;follow&quot;);            DirContext ctx = new InitialDirContext(env);            log.info(&quot;ctx=&#123;&#125;&quot;, JSON.toJSONString(ctx));        &#125; catch (Exception e) &#123;            log.info(&quot;LDAP登录失败 userName=&#123;&#125;,passWord=&#123;&#125;,error=&#123;&#125;&quot;,username,password,e);        &#125;    &#125;&#125;</code></pre><h5 id="方式二-ldapTemplate"><a href="#方式二-ldapTemplate" class="headerlink" title="方式二(ldapTemplate)"></a>方式二(ldapTemplate)</h5><ul><li><p>配置</p><pre><code class="xml">&lt;!-- ldap --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-data-ldap&lt;/artifactId&gt;  &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><pre><code class="yaml"># LDAP连接配置,配置的base是不应该再加到节点的dn里面去的(dc=company,dc=com)spring:ldap:  urls: ldap://127.0.0.1:389  base: dc=company,dc=com  username: cn=admin,dc=company,dc=com  password: 123456</code></pre></li><li><p>代码(model)</p><pre><code class="java">@Getter@Setter@ToString@Entry(objectClasses = &#123;&quot;simpleSecurityObject&quot;, &quot;organizationalRole&quot;,&quot;top&quot;&#125;, base = &quot;ou=cmdb,ou=People&quot;)public class LdapPerson &#123;  @Id  @JsonIgnore  private Name dn;  /** 用户名 **/  @Attribute(name=&quot;cn&quot;)  private String personName;  @Attribute(name=&quot;sn&quot;)  private String sn;  @Attribute(name=&quot;email&quot;)  private String email;  /** 昵称 **/  @Attribute(name=&quot;displayName&quot;)  private String displayName;  @Attribute(name=&quot;password&quot;)  private String password;&#125;</code></pre></li><li><p>代码(dao)</p><pre><code class="java">@Slf4jpublic class PersonAttributesMapper implements AttributesMapper&lt;LdapPerson&gt; &#123;  @Override  public LdapPerson mapFromAttributes(Attributes attrs) throws NamingException &#123;      LdapPerson person = new LdapPerson();      person.setPersonName((String)attrs.get(&quot;cn&quot;).get());      //获取密码      byte[] bts = (byte[]) attrs.get(&quot;userpassword&quot;).get();      String password = &quot;&quot;;      for(byte bt : bts)&#123;          password = password + (char)bt;      &#125;      person.setPassword(password);      return person;  &#125;&#125;</code></pre></li><li><p>代码(service)</p><pre><code class="java">public class LoginService&#123;  //lookup查询(精确定位查询)  public AjaxResult&lt;LdapPerson&gt; ldapCheck(String username, String password) &#123;      String dn = String.format(userDN,username);      LdapPerson person = ldapTemplate.lookup(dn, new PersonAttributesMapper());      log.info(&quot;LDAP登录 username:&#123;&#125;,person=&#123;&#125;&quot;,username,JSON.toJSONString(person));      if(person == null)&#123;          return AjaxResult.error(&quot;账号不存在&quot;);      &#125;      if(!password.equals(person.getPassword()))&#123;          log.error(&quot;LDAP账号对应密码错误,username=&#123;&#125;,password=&#123;&#125;,realPwd=&#123;&#125;&quot;,username,password,person.getPassword());          return AjaxResult.error(&quot;密码错误&quot;);      &#125;      return AjaxResult.success(person);  &#125;  //search(遍历所有节点匹配)  public LdapPerson getLdapAccountByName(String name) &#123;      LdapQuery query = query()              .where(&quot;objectclass&quot;).is(objectclass)              .and(&quot;cn&quot;).is(name);      List&lt;LdapPerson&gt; persons = ldapTemplate.search(query,new PersonAttributesMapper());      if(CollectionUtils.isEmpty(persons))&#123;          return null;      &#125;      return persons.get(0);  &#125;&#125;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ldap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务常见问题排查</title>
      <link href="2021/02/09/devops/check/"/>
      <url>2021/02/09/devops/check/</url>
      
        <content type="html"><![CDATA[<h3 id="死锁问题排查"><a href="#死锁问题排查" class="headerlink" title="死锁问题排查"></a>死锁问题排查</h3><ul><li>模拟死锁</li></ul><pre><code class="java">@Slf4jpublic class ThreadTest &#123;    public static String a1 = &quot;a1&quot;;    public static String a2 = &quot;a2&quot;;    public static void main(String[] args) &#123;        new Thread(new PrintA()).start();        new Thread(new PrintB()).start();    &#125;&#125;</code></pre><pre><code class="java">@Slf4jclass PrintA implements Runnable&#123;    @SneakyThrows    @Override    public void run() &#123;        synchronized (ThreadTest.a1)&#123;            log.info(&quot;PrintA =====&gt; a1&quot;);            Thread.sleep(3000);            synchronized (ThreadTest.a2)&#123;                log.info(&quot;PrintA =====&gt; a2&quot;);            &#125;        &#125;    &#125;&#125;</code></pre><pre><code class="java">@Slf4jclass PrintB implements Runnable&#123;    @SneakyThrows    @Override    public void run() &#123;        synchronized (ThreadTest.a2)&#123;            log.info(&quot;PrintB =====&gt; a2&quot;);            Thread.sleep(3000);            synchronized (ThreadTest.a1)&#123;                log.info(&quot;PrintB =====&gt; a1&quot;);            &#125;        &#125;    &#125;&#125;</code></pre><ul><li>排查命令</li></ul><pre><code class="shell"># 查找到运行中java进程jps -l# 查看进程堆栈信息jstack pid# 查看服务gc情况jstat -gcutil pid 1000</code></pre><ul><li>工具</li></ul><pre><code class="textmate">1.gceasy网站 https://www.gceasy.io2.jconsole 或者 jvisualvm</code></pre><h3 id="频繁FullGC问题排查"><a href="#频繁FullGC问题排查" class="headerlink" title="频繁FullGC问题排查"></a>频繁FullGC问题排查</h3><ul><li>模拟频繁GC</li></ul><pre><code class="java">@Slf4jpublic class OOMTest extends TestCore &#123;    @Autowired    private ThreadPoolConfig poolConfig;    @Test    public void newInstance()&#123;        for(;;)&#123;            ConcurrentHashMap map = new ConcurrentHashMap&lt;&gt;(3000);            map.put(&quot;a&quot;,&quot;b&quot;);            log.info(&quot;&#123;&#125; size=&#123;&#125;&quot;,map.toString(),map.size());        &#125;    &#125;&#125;</code></pre><ul><li>排查</li></ul><pre><code class="textmate">1.配置项目启动参数    #出现 OOM 时生成堆 dump:     -XX:+HeapDumpOnOutOfMemoryError    #生成堆文件地址：    -XX:HeapDumpPath=/home/project/jvmlogs/2.查看哪些对象较大    jmap -histo pid | head -203.通过指令排查(堆栈较大的话可能会将系统卡死)    jmap -dump:file=文件名.dump [pid]    # format=b 指定为二进制文件    jmap -dump:format=b,file=文件名 [pid]</code></pre><ul><li>分析</li></ul><pre><code class="textmate">工具     1.jhat - jdk自带分析工具        jhat &lt;heap-dump-file&gt;  heap-dump-file 是文件的路径和文件名        执行后访问浏览器访问 http://localhost:7000/ 查看     2.Eclipse Memory Analyzer(MAT)    3.IBM Heap Analyzer</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPool详解</title>
      <link href="2021/02/09/backend/java/thread/threadPool/"/>
      <url>2021/02/09/backend/java/thread/threadPool/</url>
      
        <content type="html"><![CDATA[<h4 id="构造方法签名"><a href="#构造方法签名" class="headerlink" title="构造方法签名"></a>构造方法签名</h4><pre><code class="textmate">ThreadPoolExecutor(int corePoolSize,        int maximumPoolSize,        long keepAliveTime,        TimeUnit unit,        BlockingQueue&lt;Runnable&gt; workQueue,        ThreadFactory threadFactory,        RejectedExecutionHandler handler)corePoolSize - 池中所保存的线程数，包括空闲线程。maximumPoolSize - 池中允许的最大线程数。keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。unit - keepAliveTime参数的时间单位。workQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。threadFactory - 执行程序创建新线程时使用的工厂。handler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</code></pre><h4 id="官方封装好的线程池"><a href="#官方封装好的线程池" class="headerlink" title="官方封装好的线程池"></a>官方封装好的线程池</h4><pre><code class="textmate">ThreadPoolExecutor是Executors类的底层实现。1. newSingleThreadExecutor（单个后台线程）    创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。    此线程池保证所有任务的执行顺序按照任务的提交顺序执行。2.newFixedThreadPool（固定大小线程池）    创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，    如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。3. newCachedThreadPool（无界线程池，可以进行自动线程回收）    创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，    那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。    此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。4.newScheduledThreadPool    创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</code></pre><h4 id="排队策略"><a href="#排队策略" class="headerlink" title="排队策略"></a>排队策略</h4><pre><code class="textmate">排队有三种通用策略：1.直接提交    工作队列的默认选项是 SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，    则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。    直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。2.无界队列。    使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。    这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，    适合于使用无界队列；例如，在 Web页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。3.有界队列。    当使用有限的 maximumPoolSizes时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。    队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。    如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU使用率较高，    但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</code></pre><h4 id="BlockingQueue的选择"><a href="#BlockingQueue的选择" class="headerlink" title="BlockingQueue的选择"></a>BlockingQueue的选择</h4><pre><code class="textmate">例子一：使用直接提交策略，也即SynchronousQueue。    首先SynchronousQueue是无界的，也就是说他存数任务的能力是没有限制的，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加。例子二：使用无界队列策略，即LinkedBlockingQueue    corePoolSize大小的线程数会一直运行，忙完当前的，就从队列中拿任务开始运行。要防止任务疯长，比如任务运行的实行比较长例子三：有界队列，使用ArrayBlockingQueue。    这个是最为复杂的使用，所以JDK不推荐使用。与上面的相比，最大的特点便是可以防止资源耗尽的情况发生。假设，所有的任务都永远无法执行完。    对于首先来的A,B来说直接运行，接下来，如果来了C,D，他们会被放到queue中，如果接下来再来E,F，则增加线程运行E，F。但是如果再来任务，队列无法再接受了，    线程数也到达最大的限制了，所以就会使用拒绝策略来处理。</code></pre><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><pre><code class="textmate">在ThreadPoolExecutor中已经默认包含了4中拒绝策略1.CallerRunsPolicy    线程调用运行该任务的 execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;        if (!e.isShutdown()) &#123;             r.run();         &#125;    &#125;这个策略显然不想放弃执行任务。但是由于池中已经没有任何资源了，那么就直接使用调用该execute的线程本身来执行。2.AbortPolicy    处理程序遭到拒绝将抛出运行时RejectedExecutionException    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;       throw new RejectedExecutionException();    &#125;    这种策略直接抛出异常，丢弃任务。3.DiscardPolicy    不能执行的任务将被删除    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;&#125;    这种策略和AbortPolicy几乎一样，也是丢弃任务，只不过他不抛出异常。4.DiscardOldestPolicy    如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;        if (!e.isShutdown()) &#123;            e.getQueue().poll();            e.execute(r);        &#125;    &#125;    该策略就稍微复杂一些，在pool没有关闭的前提下首先丢掉缓存在队列中的最早的任务，然后重新尝试运行该任务。这个策略需要适当小心。    设想:如果其他线程都还在运行，那么新来任务踢掉旧任务，缓存在queue中，再来一个任务又会踢掉queue中最老任务。</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><pre><code class="textmate">总结：keepAliveTime和maximumPoolSize及BlockingQueue的类型均有关系。如果BlockingQueue是无界的，那么永远不会触发maximumPoolSize，自然keepAliveTime也就没有了意义。反之，如果核心数较小，有界BlockingQueue数值又较小，同时keepAliveTime又设的很小，如果任务频繁，那么系统就会频繁的申请回收线程</code></pre><h4 id="配置计算公式"><a href="#配置计算公式" class="headerlink" title="配置计算公式"></a>配置计算公式</h4><pre><code class="textmate">为了使CPU达到期望使用率，线程池的最优大小为线程个数 = cpu个数 * cpu利用率 * （1+ IO处理时间 / CPU处理时间)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 线程池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Kafka</title>
      <link href="2021/02/03/backend/mq/kafka/"/>
      <url>2021/02/03/backend/mq/kafka/</url>
      
        <content type="html"><![CDATA[<h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><h4 id="引用包"><a href="#引用包" class="headerlink" title="引用包"></a>引用包</h4><pre><code class="xml">&lt;!-- 设置了版本号，有可能会报错ClassNotFound --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code class="yaml">spring:  kafka:  topic: testTopic  bootstrap-servers: 127.0.0.1:9092  producer:    retries: 0    batch-size: 50    buffer-memory: 6554432    key-serializer: org.apache.kafka.common.serialization.StringSerializer    value-serializer: org.apache.kafka.common.serialization.StringSerializer    properties:      max:        request:          size: 5242880      linger.ms: 1</code></pre><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><pre><code class="java">@Slf4j@Componentpublic class MessageService&#123;    @Autowired    private KafkaTemplate kafkaTemplate;    @Value(&quot;$&#123;spring.kafka.topic&#125;&quot;)    private String topics;    public void sendSyncMessage(String resourceName)&#123;        try&#123;            kafkaTemplate.send(topics,resourceName);        &#125; catch (Exception e) &#123;            log.error(&quot;message send failed, error=&#123;&#125;&quot;, e);        &#125;    &#125;&#125;</code></pre><h4 id="监听消息"><a href="#监听消息" class="headerlink" title="监听消息"></a>监听消息</h4><pre><code class="java">@Slf4j@Componentpublic class MessageListener &#123;    @KafkaListener(topics = &#123;&quot;testTopic&quot;&#125;, groupId = &quot;testGroupId&quot;)    public void annul1(ConsumerRecord&lt;String, String&gt; record) &#123;        log.info(&quot;groupId = myContainer2, message = &quot; + record.toString());    &#125;&#125;</code></pre><h3 id="双kafka案例"><a href="#双kafka案例" class="headerlink" title="双kafka案例"></a>双kafka案例</h3><ul><li><a href="https://www.byteblogs.com/article/434">SpringBoot多kafka配置</a><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre><code class="yaml">spring:kafka:  kafka1:    bootstrap-servers: 127.0.0.1:9092    producer:      retries: 0      batch-size: 50      buffer-memory: 6554432      key-serializer: org.apache.kafka.common.serialization.StringSerializer      value-serializer: org.apache.kafka.common.serialization.StringSerializer      properties:        max:          request:            size: 5242880        linger.ms: 1  kafka2:    bootstrap-servers: 127.0.0.1:9092    producer:      retries: 0      batch-size: 50      buffer-memory: 6554432      key-serializer: org.apache.kafka.common.serialization.StringSerializer      value-serializer: org.apache.kafka.common.serialization.StringSerializer      properties:        max:          request:            size: 5242880        linger.ms: 1</code></pre></li></ul><h4 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h4><ul><li><p>实例1配置</p><pre><code class="java">@Configuration@EnableKafkapublic class Kafka1Config &#123;  @Bean(&quot;kafka1ExtListenerKafkaProperties&quot;)  @Primary  @ConfigurationProperties(prefix = &quot;spring.kafka.kafka1&quot;)  public KafkaProperties kafka1ExtListenerKafkaProperties() &#123;      return new KafkaProperties();  &#125;  @Bean(&quot;kafka1ListenerContainerFactory&quot;)  @Primary  KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;Integer, String&gt;&gt; kafkaListenerContainerFactory() &#123;      ConcurrentKafkaListenerContainerFactory&lt;Integer, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();      factory.setConsumerFactory(consumerFactory());      factory.setConcurrency(3);      factory.getContainerProperties().setPollTimeout(3000);      return factory;  &#125;  private ConsumerFactory&lt;Integer, String&gt; consumerFactory() &#123;      return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());  &#125;  private Map&lt;String, Object&gt; consumerConfigs() &#123;      return kafka1ExtListenerKafkaProperties().buildConsumerProperties();  &#125;  @Bean(&quot;kafkaTemplate&quot;)  @Primary  public KafkaTemplate&lt;String, String&gt; kafkaTemplate() &#123;      return new KafkaTemplate&lt;&gt;(producerFactory());  &#125;  private ProducerFactory&lt;String, String&gt; producerFactory() &#123;      DefaultKafkaProducerFactory&lt;String, String&gt; producerFactory = new DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());      return producerFactory;  &#125;  private Map&lt;String, Object&gt; producerConfigs() &#123;      return kafka1ExtListenerKafkaProperties().buildProducerProperties();  &#125;&#125;</code></pre></li><li><p>实例2配置</p><pre><code class="java">@Configuration@EnableKafkapublic class Kafka2Config &#123;  @Bean(&quot;kafka2ListenerKafkaProperties&quot;)  @ConfigurationProperties(prefix = &quot;spring.kafka.kafka2&quot;)  public KafkaProperties kafka2ListenerKafkaProperties() &#123;      return new KafkaProperties();  &#125;  @Bean(&quot;kafka2ListenerContainerFactory&quot;)  public KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;Integer, String&gt;&gt; kafka2ListenerContainerFactory() &#123;      ConcurrentKafkaListenerContainerFactory&lt;Integer, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();      factory.setConsumerFactory(consumerFactory());      factory.setConcurrency(3);      factory.getContainerProperties().setPollTimeout(3000);      return factory;  &#125;  /**   * 消费者工厂的bean   *   * @return   */  private ConsumerFactory&lt;Integer, String&gt; consumerFactory() &#123;      return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());  &#125;  private Map&lt;String, Object&gt; consumerConfigs() &#123;      return kafka2ListenerKafkaProperties().buildConsumerProperties();  &#125;  @Bean(&quot;kafka2Template&quot;)  public KafkaTemplate&lt;String, String&gt; kafka2Template() &#123;      return new KafkaTemplate&lt;&gt;(producerFactory());  &#125;  private ProducerFactory&lt;String, String&gt; producerFactory() &#123;      DefaultKafkaProducerFactory&lt;String, String&gt; producerFactory = new DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());      return producerFactory;  &#125;  private Map&lt;String, Object&gt; producerConfigs() &#123;      return kafka2ListenerKafkaProperties().buildProducerProperties();  &#125;&#125;</code></pre></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre><code class="java">@Slf4j@Servicepublic class MessageSendService&#123;    @Resource(name = &quot;kafkaTemplate&quot;)    private KafkaTemplate&lt;String, Object&gt; kafkaTemplate;    @Resource(name = &quot;kafkaTemplateForMonitor&quot;)    private KafkaTemplate&lt;String, Object&gt; kafkaTemplateForMonitor;    public boolean kafka1Send(String topic, String message) &#123;        try &#123;            if (kafkaMq) &#123;                kafkaTemplate.send(topic, message);            &#125;        &#125; catch (Exception e) &#123;            log.warn(&quot;kafka1 发送kafka消息失败 topic=&#123;&#125;,error=&#123;&#125;&quot;,topic,e);        &#125;        return true;    &#125;    public boolean kafka2Send(String topic, String message)&#123;        try &#123;            kafkaTemplateForMonitor.send(topic, message);        &#125; catch (Exception e) &#123;            log.warn(&quot;kafka2 发送kafka消息失败 topic=&#123;&#125;,error=&#123;&#125;&quot;,topic,e);        &#125;        return true;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 消息队列 </category>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> message </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="2021/02/02/backend/storage/redis/"/>
      <url>2021/02/02/backend/storage/redis/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis相关"><a href="#Redis相关" class="headerlink" title="Redis相关"></a>Redis相关</h3><h4 id="RedisTemplate配置"><a href="#RedisTemplate配置" class="headerlink" title="RedisTemplate配置"></a>RedisTemplate配置</h4><pre><code class="java">@Configuration@EnableCachingpublic class RedisConfig extends CachingConfigurerSupport &#123;    @Bean    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory)&#123;        RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;();        template.setConnectionFactory(connectionFactory);        //key的序列化方式        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();        // string的key序列化方式        template.setKeySerializer(stringRedisSerializer);        // hash的key也采用String的序列化方式        template.setHashKeySerializer(stringRedisSerializer);        //value的序列化方式        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);        ObjectMapper om = new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);        om.registerModule(new JavaTimeModule());        serializer.setObjectMapper(om);        //string的value序列化方式        template.setValueSerializer(serializer);        // hash的value序列化方式        template.setHashValueSerializer(stringRedisSerializer);        template.afterPropertiesSet();        return template;    &#125;&#125;</code></pre><h3 id="RedisTemplate-k-v序列化差异"><a href="#RedisTemplate-k-v序列化差异" class="headerlink" title="RedisTemplate k-v序列化差异"></a>RedisTemplate k-v序列化差异</h3><img src="https://im-fan.gitee.io/img/cache/redisTemplate-serialize.png"/><h3 id="RedisTemplate-操作hash"><a href="#RedisTemplate-操作hash" class="headerlink" title="RedisTemplate 操作hash"></a>RedisTemplate 操作hash</h3><pre><code class="java">//redis中的hash相当于java中的HashMapString key = &quot;key&quot;;Map&lt;String,String&gt; hashMap = new HashMap&lt;&gt;();hashMap.put(&quot;a&quot;,JSON.toJSONString(new Object()));hashMap.put(&quot;b&quot;,JSON.toJSONString(new Object()));//所有值redisTemplate.opsForHash().putAll(key,hashMap);//获取单个值List&lt;String&gt; hashKey = new ArrayList&lt;&gt;();hashKey.add(&quot;a&quot;); // 获取hash中的某个key下的值redisTemplate.opsForHash().multiGet(key,hashKey);//设置单个值String hk = &quot;hash 的key&quot;;String hv = &quot;hash 的value&quot;;redisTemplate.opsForHash().put(key,hk,hv);//删除keyString[] hkeys = &#123;hk&#125;;redisTemplate.opsForHash().delete(key, hkeys);</code></pre><h3 id="Redis原子操作的两种方式"><a href="#Redis原子操作的两种方式" class="headerlink" title="Redis原子操作的两种方式"></a>Redis原子操作的两种方式</h3><h4 id="Lua脚本"><a href="#Lua脚本" class="headerlink" title="Lua脚本"></a>Lua脚本</h4><pre><code class="shell">-- lua语法 https://www.runoob.com/lua/lua-tutorial.html-- 实现一个原子锁,存在key则返回失败,否则返回存储并返回成功-- 关键字必须大写 参数1:value 参数2:有效时长-- call 与 pcall区别  call执行错误就直接返回,pcall错误则返回一个带 err 域的 Lua 表(table),用于表示错误-- 存在则直接返回失败local val = redis.call(&quot;get&quot;,KEYS[1])-- 不存在,则获取锁if val then    return 0else    redis.call(&quot;set&quot;,KEYS[1],ARGV[1])    redis.call(&#39;expire&#39;,KEYS[1],ARGV[2])    return 1end</code></pre><pre><code class="java">@Servicepublic class LuaService &#123;    @Autowired    private RedisTemplate redisTemplate;    /**     * lua文件所在路径     * @parm key 键     * @param ttl 过期时间，秒     **/    public boolean getAtomLock(String key,long ttl)&#123;        String lockKey = &quot;my:lock:&quot; + key;        // lua脚本所在resource目录下的相对路径        String luaName = &quot;lua/atom_lock.lua&quot;;        // 执行 lua 脚本        DefaultRedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;();        // 指定 lua 脚本        redisScript.setScriptSource(new ResourceScriptSource(new ClassPathResource(luaName)));        // 指定返回类型        redisScript.setResultType(Long.class);        // 参数一：redisScript，参数二：key列表，参数三：arg（可多个）        Long result = (Long) redisTemplate.execute(redisScript, Collections.singletonList(lockKey),1,ttl);        return result != null &amp;&amp; result == 1L;    &#125;&#125;</code></pre><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><ul><li><p>execute方式</p><pre><code class="java">@Servicepublic class RedisService &#123;  @Autowired  private RedisTemplate redisTemplate;  /**   * 不存则在获取锁   * @param key   * @param value 值   * @param expire 过期时间，秒   * **/  public boolean setAndExpireIfAbsent(final String key, final String value, final long expire) &#123;      boolean isSuccess = (boolean) redisTemplate.execute((RedisCallback) connection -&gt; &#123;          Object object = connection.execute(&quot;set&quot;,                  key.getBytes(),                  value.getBytes(),                  SafeEncoder.encode(&quot;NX&quot;),                  SafeEncoder.encode(&quot;EX&quot;),                  Protocol.toByteArray(expire));          return null != object;      &#125;);      return isSuccess;  &#125;&#125;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle学习笔记</title>
      <link href="2021/01/21/backend/java/build/gradle/"/>
      <url>2021/01/21/backend/java/build/gradle/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://blog.csdn.net/gdeer/article/details/104815986">Gradle理解：configuration、dependency</a></li></ul><h3 id="关键字解释"><a href="#关键字解释" class="headerlink" title="关键字解释"></a>关键字解释</h3><table><thead><tr><th>关键字</th><th align="center">关键字解释</th><th>值</th><th align="center">值解释</th></tr></thead><tbody><tr><td>plugins</td><td align="center"></td><td>id</td><td align="center"></td></tr><tr><td>group</td><td align="center">定义模块</td><td></td><td align="center"></td></tr><tr><td>version</td><td align="center">模块版本号</td><td></td><td align="center"></td></tr><tr><td>sourceCompatibility</td><td align="center"></td><td></td><td align="center"></td></tr><tr><td>configurations</td><td align="center">不同的 configuration 用来引用不同领域</br>（或不同用途）的 dependencies</td><td></td><td align="center"></td></tr><tr><td>buildscript</td><td align="center">用于声明gradle自身依赖的插件，优先执行</td><td>ext</td><td align="center"></td></tr><tr><td></td><td align="center"></td><td>repositories</td><td align="center"></td></tr><tr><td></td><td align="center"></td><td>dependencies</td><td align="center"></td></tr><tr><td>allprojects</td><td align="center">对所有project的配置,包括root project</td><td>repositories</td><td align="center"></td></tr><tr><td>subprojects</td><td align="center">对所有Child Project的配置</td><td></td><td align="center"></td></tr><tr><td>repositories</td><td align="center">查找jar包顺序</td><td></td><td align="center"></td></tr><tr><td>dependencies</td><td align="center">定义依赖</td><td></td><td align="center"></td></tr><tr><td>test</td><td align="center">定义测试依赖信息</td><td></td><td align="center"></td></tr></tbody></table><h3 id="dependencies依赖关键字"><a href="#dependencies依赖关键字" class="headerlink" title="dependencies依赖关键字"></a>dependencies依赖关键字</h3><table><thead><tr><th>3+</th><th>2.+</th><th align="center">描述</th></tr></thead><tbody><tr><td>implementation</td><td></td><td align="center">所依赖的库仅可在当前module使用，编译速度快</td></tr><tr><td>api</td><td>compile</td><td align="center">所依赖的库可在整工程使用，编译速度较implementation慢</td></tr><tr><td>provided</td><td>compileOnly</td><td align="center">仅在编译时有效，不参与打包，一般在发布no jar的库时候会用到，很少用</td></tr><tr><td>apk</td><td>runtimeOnly</td><td align="center">仅在生成apk的时候参与打包，编译时不参与</td></tr><tr><td>testImplementation</td><td>testCompile</td><td align="center">仅在单元测试代码的编译以及最终打包测试apk时有效</td></tr><tr><td>debugImplementation</td><td>debugCompile</td><td align="center">仅在debug模式的编译和最终的debug apk打包时有效</td></tr><tr><td>releaseImplementation</td><td>releaseCompile</td><td align="center">仅在Release模式的编译和最终的Release apk打包时有效</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 项目编译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图</title>
      <link href="2020/12/25/framework/design/uml/"/>
      <url>2020/12/25/framework/design/uml/</url>
      
        <content type="html"><![CDATA[<h3 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h3><pre><code class="textmate">1.类  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。2.接口  用两层矩形框表示，第一层接口名及解释、第二层方法</code></pre><h3 id="常见的几种关系"><a href="#常见的几种关系" class="headerlink" title="常见的几种关系"></a>常见的几种关系</h3><pre><code class="textmate">1.泛化(Generalization)    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类2.依赖(Dependency)    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口3.关联(Association)    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头4.聚合(Aggregation)    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体5.组合(Composition)    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体6. 实现(Realization)    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。</code></pre><img src="https://im-fan.gitee.io/img/uml/uml-line.png" width="500" height="300"/><h3 id="示例-标识了所有关系"><a href="#示例-标识了所有关系" class="headerlink" title="示例-标识了所有关系"></a>示例-标识了所有关系</h3><img src="https://im-fan.gitee.io/img/uml/uml.png"/>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uml </tag>
            
            <tag> 类图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>COLA</title>
      <link href="2020/12/15/framework/cola/"/>
      <url>2020/12/15/framework/cola/</url>
      
        <content type="html"><![CDATA[<h3 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a>相关网址</h3><ul><li><a href="https://github.com/alibaba/COLA">COLA 4.0</a></li><li><a href="https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app">COLA 4.0：应用架构的最佳实践</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> COLA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus使用笔记</title>
      <link href="2020/12/10/backend/java/utils/mybatis-plus/"/>
      <url>2020/12/10/backend/java/utils/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://mp.baomidou.com/">官网</a></li></ul><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><pre><code class="yaml">#mybatis# 配置是否打印日志 true-打印  false-不打印# paginationInterceptor-true 改为false则分页功能无效sql:  performanceInterceptor: truemybatis-plus:  mapper-locations: classpath*:/mapper/**/*.xml  #实体扫描，多个package用逗号或者分号分隔  typeAliasesPackage: com.ruoyi.**.domain  global-config:    #数据库相关配置    db-config:      #主键类型  AUTO:&quot;数据库ID自增&quot;, INPUT:&quot;用户输入ID&quot;, ID_WORKER:&quot;全局唯一ID (数字类型唯一ID)&quot;, UUID:&quot;全局唯一ID UUID&quot;;      id-type: AUTO      #字段策略 IGNORED:&quot;忽略判断&quot;,NOT_NULL:&quot;非 NULL 判断&quot;),NOT_EMPTY:&quot;非空判断&quot;      field-strategy: NOT_NULL      #驼峰下划线转换      column-underline: true      logic-delete-value: -1      logic-not-delete-value: 0    banner: false  #原生配置  configuration:    #不加无法打印执行脚本及内容    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl    map-underscore-to-camel-case: true    cache-enabled: false    call-setters-on-nulls: true    jdbc-type-for-null: &#39;null&#39;</code></pre><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>1.selectOne() 查询出多条数据会报错</p><pre><code class="textmate">selectOne不是存在多条数据时只返回一条！！！报错信息： org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2解决方法:  1.手动添加  wrapper最后加上(最好带上排序，每次返回固定的值) .last(&quot;limit 1&quot;)  2.切面统一处理,如下</code></pre><pre><code class="java">@Aspect@Componentpublic class MybatisPlusAspect &#123;  // 配置织入点  @Pointcut(&quot;execution(public * com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(..))&quot;)  public void selectOneAspect() &#123;  &#125;  @Before(&quot;selectOneAspect()&quot;)  public void beforeSelect(JoinPoint point) &#123;      Object arg = point.getArgs()[0];      if (arg instanceof AbstractWrapper) &#123;          arg = (AbstractWrapper) arg;          ((AbstractWrapper) arg).last(&quot;limit 1&quot;);      &#125;  &#125;&#125;</code></pre></li></ul><h3 id="Idea生成代码插件推荐"><a href="#Idea生成代码插件推荐" class="headerlink" title="Idea生成代码插件推荐"></a>Idea生成代码插件推荐</h3><ul><li><a href="https://plugins.jetbrains.com/plugin/13847-easycode-mybatiscodehelper">EasyCode-MybatisCodeHelper</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2学习笔记</title>
      <link href="2020/11/17/framework/oauth2/"/>
      <url>2020/11/17/framework/oauth2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/lexburner/oauth2-demo">参考demo</a></li><li><a href="https://colobu.com/2017/04/28/oauth2-rfc6749/">OAuth2 RFC6749中文翻译</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0-阮一峰</a></li><li><a href="https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2">文档对应demo</a></li></ul><h4 id="框架相关"><a href="#框架相关" class="headerlink" title="框架相关"></a>框架相关</h4><ul><li>OAuth2<pre><code>解释：  OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，  如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。流程：  1、用户打开客户端，客户端要求授权。  2、用户同意客户端授权。  3、客户端使用上一步提供的授权，向服务器授权层申请令牌。  4、授权服务器对客户端进行认证后，同意发放令牌。  5、客户端使用令牌，向资源服务器申请资源。  6、资源服务器确认令牌，向客户端开放资源。</code></pre></li><li>LDAP<pre><code>解释：  LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、  浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。  LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，  用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。登录流程：  1、连接到LDAP服务器。  2、绑定到LDAP服务器。  3、在LDAP服务器上执行所需要的操作。  4、释放LDAP服务器的连接。</code></pre></li><li><a href="https://www.cnblogs.com/lihuidu/p/6495247.html">CAS(Central Authentication Service-中央式认证服务)</a><pre><code>SSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。CAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。CAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</code></pre></li><li>适用场景<pre><code>OAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。LDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。CAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。</code></pre></li></ul><h4 id="授权模式"><a href="#授权模式" class="headerlink" title="授权模式"></a>授权模式</h4><ul><li><p>授权码模式（authorization code）</p><pre><code>功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与&quot;服务提供商&quot;的认证服务器进行互动。</code></pre></li><li><p>简化模式（implicit）</p></li><li><p>密码模式（resource owner password credentials）</p></li><li><p>客户端模式（client credentials）</p></li><li><p>主要配置</p><pre><code>Oauth2ServerConfigWebSecurityConfigurer</code></pre></li></ul><h4 id="不同授权模式请求"><a href="#不同授权模式请求" class="headerlink" title="不同授权模式请求"></a>不同授权模式请求</h4><ul><li><p>授权码模式(在浏览器中访问接口)</p><pre><code>配置项：需要将返回地址添加到client中  clients.redirectUris(&quot;http://www.baidu.com&quot;)  GET http://localhost:8200/oauth/authorize?response_type=code&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123所需参数解释  response_type：表示授权类型，必选项，此处的值固定为&quot;code&quot;  client_id：表示客户端的ID，必选项  redirect_uri：表示重定向URI，可选项  scope：表示申请的权限范围，可选项  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre></li><li><p>简化模式(在浏览器中访问接口)</p><pre><code>请求地址  GET http://localhost:8200/oauth/authorize?response_type=token&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123&amp;scope=select参数解释：  response_type：表示授权类型，此处的值固定为&quot;token&quot;，必选项。  client_id：表示客户端的ID，必选项。  redirect_uri：表示重定向的URI，可选项。  scope：表示权限范围，可选项。  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre></li><li><p>password方式获取toke</p><pre><code>请求地址  POST http://localhost:8200/oauth/token?grant_type=password&amp;scope=select&amp;client_id=client_1&amp;client_secret=123456&amp;username=user_1&amp;password=123456返回信息  &#123;      &quot;access_token&quot;: &quot;39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63&quot;,      &quot;token_type&quot;: &quot;bearer&quot;,      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,      &quot;expires_in&quot;: 43021,      &quot;scope&quot;: &quot;select&quot;  &#125;参数解释  grant_type：表示授权类型，此处的值固定为&quot;password&quot;，必选项。  username：表示用户名，必选项。  password：表示用户的密码，必选项。  scope：表示权限范围，可选项。</code></pre></li><li><p>client方式获取access_token</p><pre><code>请求地址  POST http://localhost:8200/oauth/token?grant_type=client_credentials&amp;scope=select&amp;client_id=client_2&amp;client_secret=123456返回信息  &#123;      &quot;access_token&quot;: &quot;17fc17a9-83b2-41c3-8621-c727d8329bbd&quot;,      &quot;token_type&quot;: &quot;bearer&quot;,      &quot;expires_in&quot;: 42400,      &quot;scope&quot;: &quot;select&quot;  &#125;参数解释  granttype：表示授权类型，此处的值固定为&quot;clientcredentials&quot;，必选项。  scope：表示权限范围，可选项。</code></pre></li></ul><ul><li>刷新token<pre><code>请求地址  POST http://localhost:8200/oauth/token?grant_type=refresh_token&amp;refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&amp;client_id=client_2&amp;client_secret=123456返回信息  &#123;      &quot;access_token&quot;: &quot;e0e64627-f157-4718-81f0-069ca21549ad&quot;,      &quot;token_type&quot;: &quot;bearer&quot;,      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,      &quot;expires_in&quot;: 43199,      &quot;scope&quot;: &quot;select&quot;  &#125;</code></pre></li></ul><h4 id="请求业务接口"><a href="#请求业务接口" class="headerlink" title="请求业务接口"></a>请求业务接口</h4><ul><li>请求接口<pre><code>配置拦截：  HttpSecurity中配置 http.antMatchers(&quot;/user/**&quot;).authenticated()使用client方式获取的access_token  GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e接口可正常返回</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java解析Swagger文档接口及参数</title>
      <link href="2020/11/11/backend/java/utils/swagger/"/>
      <url>2020/11/11/backend/java/utils/swagger/</url>
      
        <content type="html"><![CDATA[<h3 id="相关依赖包"><a href="#相关依赖包" class="headerlink" title="相关依赖包"></a>相关依赖包</h3><pre><code class="xml">&lt;!--swagger依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;    &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;    &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;    &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;    &lt;version&gt;1.9.6&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;    &lt;version&gt;1.2.73&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="Swagger文档相关接口"><a href="#Swagger文档相关接口" class="headerlink" title="Swagger文档相关接口"></a>Swagger文档相关接口</h3><pre><code class="textmate">1.接口文档地址    https://localhost:8080/swagger-ui.html    https://localhost:8080/doc.html2.JSON格式接口数据(group参数由项目中swagger配置决定)    http://localhost:8080/v2/api-docs?group=V1版本</code></pre><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><pre><code class="java">/** * 加载swagger文档中的接口信息 * @Date 2020/11/6 11:31 * @Author fan**/public boolean loadSwaggerAPI(Integer lesseeId,String url)&#123;    try &#123;        log.info(&quot;开始加载Swagger文档,url=&#123;&#125;&quot;,url);        String result = OkhttpClientUtil.get(url);        JSONObject jsonObject = JSON.parseObject(result);        if(jsonObject == null)&#123;            return false;        &#125;        //移除对象描述信息        String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(&quot;info&quot;))).get(&quot;title&quot;);        JSONObject paths = (JSONObject) jsonObject.get(&quot;paths&quot;);        JSONObject definitions = (JSONObject) jsonObject.get(&quot;definitions&quot;);        Map&lt;String,JSONObject&gt; paramMap = JSONObject.toJavaObject(definitions,Map.class);        List&lt;PublicResourceInfo&gt; resourceInfos = new ArrayList&lt;&gt;();        for(Map.Entry&lt;String,Object&gt; entry :  paths.entrySet())&#123;            String apiUrl = entry.getKey();            String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);            JSONObject methodInfo = (JSONObject) entry.getValue();            for(Map.Entry&lt;String,Object&gt; methodEntry : methodInfo.entrySet())&#123;                String requestType = methodEntry.getKey().toUpperCase();                JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();                String apiName = String.valueOf(requestTypeInfo.get(&quot;summary&quot;));                String moduleName = StringUtils.join((List&lt;String&gt;)requestTypeInfo.get(&quot;tags&quot;),&quot;,&quot;);                PublicResourceInfo resourceInfo = new PublicResourceInfo();                resourceInfo.setPlatformNameCn(platform);                resourceInfo.setApiPath(apiUrl);                resourceInfo.setPerms(perms);                resourceInfo.setApiName(apiName);                resourceInfo.setRequestType(requestType);                resourceInfo.setModuleNameCn(moduleName);                //解析swagger-ui中的出参入参                JSONArray parameterJson = (JSONArray) requestTypeInfo.get(&quot;parameters&quot;);                Object requestParam = null;                Map&lt;String,Object&gt; requestParamMap = new HashMap&lt;&gt;();                if(parameterJson != null)&#123;                    for(Object object : parameterJson)&#123;                        JSONObject schema = (JSONObject) ((JSONObject) object).get(&quot;schema&quot;);                        if (schema != null)&#123;                            String ref = (String) schema.get(&quot;$ref&quot;);                            requestParam = parseRequestToJson(null,paramMap,ref);                        &#125; else &#123;                            String mapKey = (String) ((JSONObject) object).get(&quot;name&quot;);                            String type = ((JSONObject) object).getString(&quot;type&quot;);                            Object value = setValueByType(type,null);                            requestParamMap.put(mapKey,value);                        &#125;                    &#125;                &#125;                if(requestParam != null)&#123;                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));                &#125; else &#123;                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));                &#125;                //返回值类型都用标准类型，不解析其他格式                JSONObject response = (JSONObject) requestTypeInfo.get(&quot;responses&quot;);                Object responseResult = null;                if(response != null)&#123;                    JSONObject schema = (JSONObject) ((JSONObject)response.get(&quot;200&quot;)).get(&quot;schema&quot;);                    if(schema != null)&#123;                        String ref = (String) schema.get(&quot;$ref&quot;);                        responseResult = parseRequestToJson(null,paramMap,ref);                    &#125;                &#125;                if(responseResult != null)&#123;                    resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));                &#125;                resourceInfos.add(resourceInfo);            &#125;        &#125;        log.info(&quot;解析完成=====&gt;&#123;&#125;&quot;,JSONObject.toJSONString(resourceInfos));    &#125; catch (IOException e) &#123;        log.error(&quot;加载Swagger文档中接口失败，url=&#123;&#125;&quot;,url);        return false;    &#125;    return true;&#125;/** * 解析swagger-ui中出参和入参为json * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»» * @Date 2020/11/11 16:01 * @Author fan**/private Object parseRequestToJson(Map&lt;String,Integer&gt; forEachCache,Map&lt;String,JSONObject&gt; paramMap, String paramRef)&#123;    if(StringUtils.isBlank(paramRef))&#123;        return &quot;&quot;;    &#125;    //对象标识    String paramKey = paramRef.substring(paramRef.lastIndexOf(&quot;/&quot;)+1);    //控制递归次数，同一个对象循环超过1次就返回空    if(forEachCache == null)&#123;        forEachCache = new HashMap&lt;&gt;();    &#125;    Integer forEachCount = forEachCache.get(paramKey);    if(forEachCount != null &amp;&amp; forEachCount &gt;= 1)&#123;        return null;    &#125; else &#123;        forEachCache.put(paramKey,1);    &#125;    //对象值    JSONObject paramJson = paramMap.get(paramKey);    JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(&quot;properties&quot;)));    Map&lt;String,Object&gt; columnMap = new HashMap&lt;&gt;();    for(Map.Entry&lt;String,Object&gt; entry : propertiesJson.entrySet())&#123;        String key = entry.getKey();        Object value = new JSONObject();        JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));        String type = valueJson.getString(&quot;type&quot;);        Object obj = valueJson.get(&quot;items&quot;);        if(obj != null)&#123;            JSONObject property = JSONObject.parseObject(String.valueOf(obj));            String ref = (String) property.get(&quot;$ref&quot;);            //有下一级，则递归            if(StringUtils.isNotBlank(ref))&#123;                value = parseRequestToJson(forEachCache,paramMap,ref);            &#125;        &#125;        value = setValueByType(type,value);        columnMap.put(key,value);    &#125;    return columnMap;&#125;/**  根据参数类型设置value **/private Object setValueByType(String type,Object value)&#123;    if(&quot;array&quot;.equals(type))&#123;        JSONArray jsonArray = new JSONArray();        if(value == null)&#123;            value = new JSONObject();        &#125;        jsonArray.add(value);        return JSONArray.toJSONString(jsonArray);    &#125;    if(&quot;integer&quot;.equals(type))&#123;        return 0;    &#125;    if(&quot;boolean&quot;.equals(type))&#123;        return true;    &#125;    if(&quot;object&quot;.equals(type))&#123;        return value;    &#125;    return &quot;&quot;;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网常用语记录</title>
      <link href="2020/11/04/thinking/ali-words/"/>
      <url>2020/11/04/thinking/ali-words/</url>
      
        <content type="html"><![CDATA[<h3 id="二字动词"><a href="#二字动词" class="headerlink" title="二字动词"></a>二字动词</h3><pre><code class="textmate">复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、包装、重组、履约、响应、量化、发力、布局、联动、开拓、细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、辐射、围绕、复用、渗透、扩展、</code></pre><h3 id="二字名词"><a href="#二字名词" class="headerlink" title="二字名词"></a>二字名词</h3><pre><code class="textmate">漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、规模、场景、聚焦、维度、格局、形态、生态、话术、体系、认知、玩法、体感、感知、调性、心智、战役、合力、心力、赛道、因子、模型、载体、横向、通道、补位、链路、试点</code></pre><h3 id="三字名词"><a href="#三字名词" class="headerlink" title="三字名词"></a>三字名词</h3><pre><code class="textmate">颗粒度、感知度、方法论、组合拳、引爆点、点线面、精细化、差异化、平台化、结构化、影响力、耦合性、易用性、一致性、端到端、短平快</code></pre><h3 id="四字名词"><a href="#四字名词" class="headerlink" title="四字名词"></a>四字名词</h3><pre><code class="textmate">生命周期、价值转化、强化认知、资源倾斜、完善逻辑、抽离透传、复用打法、商业价值、商业模式、快速响应、定性定量、关键链路、去中心化、结果导向、垂直领域、如何收口、归因分析、体验度量、信息屏障</code></pre>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper搭建</title>
      <link href="2020/10/29/backend/service/zookeeper/"/>
      <url>2020/10/29/backend/service/zookeeper/</url>
      
        <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><blockquote><p><a href="https://zookeeper.apache.org/releases.html">官网</a></p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre><code class="textmate">1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class2.启动时注意端口号是否已经被占用</code></pre><h3 id="单机部署步骤"><a href="#单机部署步骤" class="headerlink" title="单机部署步骤"></a>单机部署步骤</h3><pre><code class="textmate">1.解压文件    tar -zxvf xxx-bin.tar.gz zookeeper2.修改配置    cd zookeeper/conf    cp zoo_sample.cfg zoo.cfg    vim zoo.cfg    修改以下配置项        dataDir= xxx/dataDir        dataLogDir= xxx/logs/zookeeper3.新增配置    cd xxx/dataDir    echo 1001&gt;myid4.启动    cd zookeeper/bin    ./zkServer.sh start / restart / stop / status</code></pre><h3 id="zookeeper数据查看工具"><a href="#zookeeper数据查看工具" class="headerlink" title="zookeeper数据查看工具"></a>zookeeper数据查看工具</h3><blockquote><p><a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip">下载地址</a></p></blockquote><ul><li>使用</li></ul><pre><code class="textmate">1.解压后进入build文件夹2.运行jar    nohup java -jar zookeeper-dev-ZooInspector.jar &amp;3.左上角连接按钮，输入zk地址并连接</code></pre><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>启动报ClassNotFound</p><pre><code class="textmate">重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的</code></pre></li><li><p>启动失败</p></li></ul><pre><code class="textmate">1.检查配置的文件夹路径和权限是否正常2.检查zookeeper是否已经被启动    ps -ef | grep zookeeper    kill进程3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 服务治理 </category>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册中心 </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel使用遇到的问题</title>
      <link href="2020/10/20/backend/java/utils/excel/"/>
      <url>2020/10/20/backend/java/utils/excel/</url>
      
        <content type="html"><![CDATA[<h3 id="导出设置标题格式"><a href="#导出设置标题格式" class="headerlink" title="导出设置标题格式"></a>导出设置标题格式</h3><ul><li><p>TitleHandler</p><pre><code class="java">public class TitleHandler implements CellWriteHandler&#123;  //操作列  private List&lt;Integer&gt; columnIndexs;  //颜色  private Short colorIndex;  public TitleHandler(List&lt;Integer&gt; columnIndexs, Short colorIndex) &#123;      this.columnIndexs = columnIndexs;      this.colorIndex = colorIndex;  &#125;  @Override  public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) &#123;  &#125;  @Override  public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;  &#125;  @Override  public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;  &#125;  @Override  public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;      if(isHead)&#123;          // 设置列宽          Sheet sheet = writeSheetHolder.getSheet();          sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);          writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));          Workbook workbook = writeSheetHolder.getSheet().getWorkbook();          // 设置标题字体样式          WriteCellStyle headWriteCellStyle = new WriteCellStyle();          WriteFont headWriteFont = new WriteFont();          headWriteFont.setFontName(&quot;宋体&quot;);          headWriteFont.setFontHeightInPoints((short)14);          headWriteFont.setBold(true);          if (CollectionUtils.isNotEmpty(columnIndexs) &amp;&amp;                  colorIndex != null &amp;&amp;                  columnIndexs.contains(cell.getColumnIndex())) &#123;              // 设置字体颜色              headWriteFont.setColor(colorIndex);          &#125;          headWriteCellStyle.setWriteFont(headWriteFont);          headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());          CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);          cell.setCellStyle(cellStyle);      &#125;  &#125;&#125;</code></pre></li><li><p>ExcelUtils</p><pre><code class="java">public class ExcelUtils &#123;  /** 导出Excel **/  public static void exportExcel(String fileName, String sheetName,Class clazz,                                 List data, HttpServletResponse response,                                 CellWriteHandler... cellWriteHandlers) throws IOException &#123;      response.setContentType(&quot;application/vnd.ms-excel&quot;);      response.setCharacterEncoding(&quot;utf-8&quot;);      fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;).replaceAll(&quot;\\+&quot;, &quot;%20&quot;);      response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);      // 列标题的策略      WriteCellStyle headWriteCellStyle = new WriteCellStyle();      // 单元格策略      WriteCellStyle contentWriteCellStyle = new WriteCellStyle();      // 初始化表格样式      HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);      ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)              .sheet(sheetName)              .registerWriteHandler(horizontalCellStyleStrategy);      if (null != cellWriteHandlers &amp;&amp; cellWriteHandlers.length &gt; 0) &#123;          for (int i = 0; i &lt; cellWriteHandlers.length; i++) &#123;              excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);          &#125;      &#125;      // 开始导出      excelWriterSheetBuilder.doWrite(data);  &#125;&#125;</code></pre></li><li><p>使用</p><pre><code class="java">/** 导出excel模板**/public void exportTemplate(List&lt;Integer&gt; ids,HttpServletResponse response)&#123;  try &#123;      List&lt;XXX&gt; result = getByIds(ids);      // 指定标红色的列      List&lt;Integer&gt; columns = Arrays.asList(0,1,2,3);      TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);      ExcelUtils.exportExcel(&quot;文件名&quot;,&quot;sheet名称&quot;,              XXX.class,result,response,titleHandler);  &#125; catch (IOException e) &#123;      log.warn(&quot;导出失败,error=&#123;&#125;&quot;,e);  &#125;&#125;</code></pre></li></ul><h3 id="设置中文文件名"><a href="#设置中文文件名" class="headerlink" title="设置中文文件名"></a>设置中文文件名</h3><pre><code class="java">// 代码中添加response.setContentType(&quot;application/vnd.ms-excel;charset=UTF-8&quot;);response.setCharacterEncoding(&quot;utf-8&quot;);response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</code></pre><h3 id="导出失败返回错误信息"><a href="#导出失败返回错误信息" class="headerlink" title="导出失败返回错误信息"></a>导出失败返回错误信息</h3><pre><code class="java">// 重写响应信息数据类型response.reset();response.setContentType(&quot;application/json&quot;);response.setCharacterEncoding(&quot;utf-8&quot;);try &#123;    response.getWriter().println(result);&#125; catch (IOException ioException) &#123;    log.warn(&quot;业务异常  msg=&#123;&#125;&quot;,ioException);&#125;</code></pre><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="导出成功但是后台日志报类型转换异常"><a href="#导出成功但是后台日志报类型转换异常" class="headerlink" title="导出成功但是后台日志报类型转换异常"></a>导出成功但是后台日志报类型转换异常</h4><pre><code class="textmate">错误日志    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;原因    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误解决方法    修改Controller中方法，改为 void 即可</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD-领域驱动设计</title>
      <link href="2020/10/09/framework/ddd/"/>
      <url>2020/10/09/framework/ddd/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw">有赞DDD实践</a></li><li><a href="https://www.processon.com/view/5e55d17ee4b069f82a120d06#map">DDD设计</a></li></ul><h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><pre><code class="textmate">六边形架构、洋葱架构、整洁架构、四色原型SIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，</code></pre><h4 id="六边形架构"><a href="#六边形架构" class="headerlink" title="六边形架构"></a>六边形架构</h4><ul><li><a href="http://alistair.cockburn.us/Hexagonal+architecture">起源文章</a></li><li><a href="https://www.jianshu.com/p/c6bb08d9c613">相关文章&amp;demo</a></li><li>摘要<pre><code class="textmate">六角架构的初衷是：允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。</code></pre></li></ul><h4 id="洋葱架构"><a href="#洋葱架构" class="headerlink" title="洋葱架构"></a>洋葱架构</h4><ul><li><a href="https://www.infoq.cn/article/2014/11/ddd-onion-architecture">在洋葱(Onion)架构中实现领域驱动设计</a></li><li>摘要<pre><code class="textmate">层级关系  Core ) Domain ) API ) Infrastructure )洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。  核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念  领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的  API 层是领域层的入口，它使用领域中的术语和对象。  基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。</code></pre></li></ul><h4 id="整洁架构"><a href="#整洁架构" class="headerlink" title="整洁架构"></a>整洁架构</h4><ul><li><a href="https://www.jianshu.com/p/b296ceea673b">阿里云-架构整洁之道</a></li></ul><h4 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h4><ul><li>cola4 </li><li>DDDLib  </li><li>Koala</li></ul><h4 id="四色原型-需求分析利器"><a href="#四色原型-需求分析利器" class="headerlink" title="四色原型-需求分析利器"></a>四色原型-需求分析利器</h4><img src="https://im-fan.gitee.io/img/ddd/four-color.png"/><pre><code class="textmate">概念    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联四色建模法包括    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示四色原型法设计领域模型的步骤：    1.根据需求，采用四色原型分析法建立一个初步的领域模型；    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；    5.走查需求场景，验证设计的领域模型的合理性。</code></pre><h4 id="标准项目模块解释"><a href="#标准项目模块解释" class="headerlink" title="标准项目模块解释"></a>标准项目模块解释</h4><pre><code class="textmate">1.Interface     对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto2.Application     应用层,包括服务层-service(主要作用是操作 聚合根+仓储)3.Domain    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository4.Infrastructure    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块</code></pre><h3 id="DDD核心概念"><a href="#DDD核心概念" class="headerlink" title="DDD核心概念"></a>DDD核心概念</h3><ul><li><p>实体</p></li><li><p>值对象</p></li><li><p>聚合</p></li><li><p>仓储</p></li><li><p>工厂</p></li><li><p>仓储</p><pre><code class="textmate">实体(Entities):具有唯一标识的对象值对象(Value Objects): 无需唯一标识的对象领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary工厂(Factories): 创建复杂对象,隐藏创建细节仓储(Repository): 提供查找和持久化对象的方法</code></pre></li><li><p>DDD架构图</p><img src="https://im-fan.gitee.io/img/ddd/ddd-framework.png"/></li></ul><h4 id="识别领域服务"><a href="#识别领域服务" class="headerlink" title="识别领域服务"></a>识别领域服务</h4><pre><code class="textmate">主要看它是否满足以下三个特征：    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。    2. 被执行的操作涉及到领域中的其他的对象。    3. 操作是无状态的。</code></pre><h4 id="仓储相关"><a href="#仓储相关" class="headerlink" title="仓储相关"></a>仓储相关</h4><ul><li>CQRS<pre><code class="textmate">将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal服务搭建</title>
      <link href="2020/10/02/backend/storage/canal/"/>
      <url>2020/10/02/backend/storage/canal/</url>
      
        <content type="html"><![CDATA[<h3 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a>相关网址</h3><ul><li><a href="https://github.com/alibaba/canal/wiki/Home">官网</a></li><li><a href="https://github.com/alibaba/canal/wiki/QuickStart">快速开始</a></li><li><a href="https://github.com/alibaba/canal/releases">Release下载</a></li><li><a href="https://hub.docker.com/r/canal/canal-server/tags/">Docker镜像地址</a></li><li><a href="https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart">Canal Admin QuickStart</a></li><li><a href="https://github.com/alibaba/canal/wiki/ClientExample">Canal Client Example</a></li></ul><h3 id="直接部署"><a href="#直接部署" class="headerlink" title="直接部署"></a>直接部署</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><pre><code class="textmate">1.下载安装包(点击上面Release)    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)2.解压&amp;配置    mkdir canal-deployer    mkdir canal-admin    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)3.修改Instance配置    cd cd canal-deployer/conf/example/instance.properties    参考官网或底部instance.peroperties配置4.多Instance - 可选    cd canal-deployer/conf    cp -R example example2    修改example2中配置5.配置canal-admin    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql    修改配置，配置所在位置 canal-admin/conf/application.yml    修改其中的数据库配置、端口号、用户名密码等-可选6.启动    6-1.canal-admin启动( 访问链接 localhost:80 )        sh ./canal-admin/bin/startup.sh    6-2.canal-server启动        sh ./canal-deployer/bin/startup.sh    6-3.日志所在文件夹        cd canal-deployer/logs</code></pre><h3 id="Docker搭建步骤"><a href="#Docker搭建步骤" class="headerlink" title="Docker搭建步骤"></a>Docker搭建步骤</h3><blockquote><p>docker方式部署,注意配置时mysql的IP地址</p></blockquote><h4 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h4><pre><code class="textmate">1.mysql  需要确认mysql已开启binlog设置2.拉取canal-server镜像  docker pull canal/canal-server:v1.1.43.下载docker启动脚本   wget https://github.com/alibaba/canal/blob/master/docker/run.sh4.修改启动脚本中数据库配置5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz   mkdir canal-admin   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin   修改conf/application.yml中数据库配置   初始化mysql脚本，conf/canal_manager.sql6.canal-client   参考 Canal Client Example</code></pre><h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><pre><code class="textmate">1.canal-server   运行 sh run.sh 会出现提示，复制提示后运行2.canal-admin   sh bin/startup.sh3.启动程序(canal-client)    成功后会打印出empty count : xx</code></pre><h4 id="CanalAdmin配置"><a href="#CanalAdmin配置" class="headerlink" title="CanalAdmin配置"></a>CanalAdmin配置</h4><ul><li><p>1.集群配置</p><pre><code class="yaml">#集群名-local#zk地址-127.0.0.1:2181 (可以不搭建zk)#以下为配置项# register ipcanal.register.ip =# canal admin configcanal.admin.manager = 127.0.0.1:8089canal.admin.port = 11110canal.admin.user = admincanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441</code></pre></li><li><p>2.Server管理</p><pre><code class="textmate">ServerIP-127.0.0.1 (同一集群下server ip不能重复)admin端口号-11110</code></pre></li><li><p>3.Instance管理</p><pre><code class="textmate">注意：Instance名称要与cancal-server容器中文件夹一致，默认有exampleInstance配置项参考官网或底部配置</code></pre></li></ul><h4 id="一个Canal服务读取多个MySQL实例-docker中操作"><a href="#一个Canal服务读取多个MySQL实例-docker中操作" class="headerlink" title="一个Canal服务读取多个MySQL实例(docker中操作)"></a>一个Canal服务读取多个MySQL实例(docker中操作)</h4><pre><code class="textmate">1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)    docker exec -it canal-server bash    ./stop.sh2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)    cd canal-server/conf    cp -R example example23.Canal Admin中添加新配置    Instance名称-example24.集成zookeeper    修改canal-server/conf/下配置canal.properties    canal.register.ip = zk服务器IP    canal.zkServers = zk服务器IP:2181</code></pre><h3 id="参考配置-基础版，其他配置参考官网"><a href="#参考配置-基础版，其他配置参考官网" class="headerlink" title="参考配置(基础版，其他配置参考官网)"></a>参考配置(基础版，其他配置参考官网)</h3><ul><li><p>canal.properties</p><pre><code class="yaml"># 用以下配置项是需要修改的，其他默认配置项保留原来设置# canal地址canal.register.ip = zk所在地址# zk配置，如果有用到则配置，没用到则保留默认设置canal.admin.register.auto = truecanal.admin.register.cluster = 192.168.154.231:2181canal.zkServers = 192.168.154.231:2181</code></pre></li><li><p>instance.properties</p><pre><code class="yaml"># 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)# 数据库配置canal.instance.master.address= 数据库IP:端口号canal.instance.dbUsername = 用户名 canal.instance.dbPassword = 密码canal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库canal.instance.connectionCharset = UTF-8canal.instance.tsdb.enable=false</code></pre></li></ul><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li><p>服务都启动成功，客户端拉不到变更日志</p><pre><code class="textmate">注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效参考配置 canalConnector.subscribe(&quot;sap_system\\..*,user_center\\..*&quot;)</code></pre></li><li><p>一个Canal-Service,多个client，运行时报错</p><pre><code class="textmate">改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL相关</title>
      <link href="2020/10/02/backend/storage/mysql-other/"/>
      <url>2020/10/02/backend/storage/mysql-other/</url>
      
        <content type="html"><![CDATA[<h3 id="存储引擎区别"><a href="#存储引擎区别" class="headerlink" title="存储引擎区别"></a>存储引擎区别</h3><ul><li>查看数据库支持的存储引擎<pre><code class="sql">show engines;</code></pre></li></ul><table><thead><tr><th>类型</th><th>磁盘文件</th><th>特性</th><th>适用场景</th></tr></thead><tbody><tr><td>FEDERATED</td><td></td><td>用来访问远程表存储引擎</td><td>访问远程表</td></tr><tr><td>MRG_MYISAM</td><td></td><td>把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表</td><td>可以用分区表替换merge表</td></tr><tr><td>MyISAM</td><td>.MDY数据)<br/> .MYI(索引)</td><td>主要的非实物处理存储引擎</td><td></td></tr><tr><td>BLACKHOLE</td><td></td><td>丢弃写操作，读操作返回空内容</td><td></td></tr><tr><td>CSV</td><td>.CSV(数据)<br/>.CSM(元数据)</td><td>存储数据时，会以逗号作为数据项之间的分割符号</td><td>不支持索引，数据存在为普通文本文件</td></tr><tr><td>MEMORY</td><td></td><td>置于内存的表</td><td></td></tr><tr><td>ARCHIVE</td><td></td><td>用于数据存档(行插入后不能再修改)</td><td>数据归档，大批量存储后不修改</td></tr><tr><td>InnoDB</td><td>.ibd(数据&amp;索引)</td><td>具备外键支持功能的事务处理引擎</td><td></td></tr><tr><td>PERFORMANCE_SCHEMA</td><td></td><td>用于监视MySQL服务器</td><td></td></tr><tr><td>NDB</td><td></td><td>集群存储引擎</td><td></td></tr><tr><td></td><td>TokuDB</td><td></td><td>存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB</td></tr></tbody></table><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><pre><code class="sql">1.表结构完全复制create table user_bak LIKE user;2.使用某些字段建表create table user_bak select now() as time ;3.建表时字段值强制转换create table user_bak select CAST(&#39;2019-8-01&#39; as UNSIGNED) as time;4.临时表解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除create temporary table user_bak  like user;drop temporary table user_bak;</code></pre><h3 id="Cast类型强制转换"><a href="#Cast类型强制转换" class="headerlink" title="Cast类型强制转换"></a>Cast类型强制转换</h3><pre><code class="sql">语法:     Cast(字段名 as 转换的类型 )支持的类型:    CHAR[(N)] 字符型     DATE 日期型    DATETIME 日期和时间型    DECIMAL float型    SIGNED int    TIME 时间型场景:    1.解决utf8字符查询时传入表情符，导致报错；</code></pre><h3 id="新建分区表"><a href="#新建分区表" class="headerlink" title="新建分区表"></a>新建分区表</h3><ul><li><p>示例</p><pre><code class="sql">create table user_bak (id int(11) UNSIGNED AUTO_INCREMENT ,`name` varchar(200) DEFAULT null COMMENT &#39;名称&#39;,rand_num int(11) DEFAULT NULL COMMENT &#39;随机数&#39;,birthday datetime default null comment &#39;生日&#39;,PRIMARY KEY (`id`,rand_num)) ENGINE = INNODB partition by RANGE (rand_num)(  PARTITION p0 VALUES less THAN (20),  PARTITION p1 VALUES less THAN (40),  PARTITION p2 VALUES less THAN (60),  PARTITION p3 VALUES less THAN (80),  PARTITION p4 VALUES less THAN MAXVALUE);</code></pre></li><li><p>注意点</p></li></ul><pre><code class="textmate">1.PRIMARY必须包含分区的字段2.不能单独创建分区，建表时就要创建</code></pre><ul><li>常见异常</li></ul><pre><code class="textmate">1.ERROR 1064  不能单独创建分区解决：建表时就要把分区创建好2.ERROR 1503 主键必须包含分区函数中所有列解决：创建分区的字段必须放在主键索引中</code></pre><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><pre><code class="sql">-- 1.ALL - 查询返回单个结果,类似in操作select * from user_bak where (id) &gt;= ALL(select id from user_bak where id = 10)-- 2.ANY &amp; SUM -效果一样,类似or操作select * from user_bak where (name,id) = SOME(select name,id from user_bak where id = 1 or name = &#39;eee&#39;)</code></pre><h3 id="FullText全文搜索"><a href="#FullText全文搜索" class="headerlink" title="FullText全文搜索"></a>FullText全文搜索</h3><ul><li>全文搜索类型</li></ul><pre><code class="textmate">1.自然语言搜索-搜索包含匹配词的信息2.布尔模式搜索-3.查询扩展搜索</code></pre><ul><li>创建索引需要满足的条件</li></ul><pre><code class="textmate">1.表类型为MyISAM,version5.6以后引入了对InnoDB支持2.字段类型只能是char/varchar/text类型3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来4.停用词会被过滤掉(the/after/other等)5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)</code></pre><ul><li>语法</li></ul><pre><code class="sql">-- 自然语言select *,match(`name`) against(&#39;good boy&#39;) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;);-- 布尔模式select *,match(`name`) against(&#39;good boy&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39; in boolean MODE);-- 内容顺序完全匹配select *,match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE);-- 扩展查询select *,match(`name`) against(&#39;good boy&#39; with query expansion) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;  with query expansion);</code></pre><ul><li>修改查询字符长度</li></ul><pre><code class="textmate">1.my.cnf文件中ft_min_word_len2.重建FullText索引或者快速修复repair table table_name quick;</code></pre><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="有字符集有关的系统设置"><a href="#有字符集有关的系统设置" class="headerlink" title="有字符集有关的系统设置"></a>有字符集有关的系统设置</h3><pre><code class="yaml">character_set_system 用于存储的字符集character_set_server 服务器默认字符集collation_server  系统排序规则character_set_database 数据库字符集collation_database  数据库排序规则character_set_client 客户端向服务器发送SQL时使用的字符集character_set_result 表示服务器返回结果时使用的字符集character_set_connection 连接时使用的字符串character_set_filesystem 文件系统字符集</code></pre><h3 id="空间值"><a href="#空间值" class="headerlink" title="空间值"></a>空间值</h3><pre><code class="textmate">OpenGIS规范point 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎point(xxxx,xxxx)</code></pre><h3 id="模糊匹配查询"><a href="#模糊匹配查询" class="headerlink" title="模糊匹配查询"></a>模糊匹配查询</h3><pre><code class="textmate">1.like    % 匹配任意数量的字符序列    _ 只能匹配单个字符    \%  \_  转义2.REGEXP-正则查询</code></pre><h3 id="新建用户后授权"><a href="#新建用户后授权" class="headerlink" title="新建用户后授权"></a>新建用户后授权</h3><pre><code class="sql">-- %表示所有IP可连接CREATE USER `用户名`@`%` IDENTIFIED BY &#39;密码&#39;;grant all privileges on jwgateway.* to &#39;用户名&#39;@&#39;%&#39; identified by &#39;密码&#39;;select * from mysql.user;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象转换工具-MapStruct</title>
      <link href="2020/10/02/backend/java/utils/convert/map-struct/"/>
      <url>2020/10/02/backend/java/utils/convert/map-struct/</url>
      
        <content type="html"><![CDATA[<h2 id="MapStruct"><a href="#MapStruct" class="headerlink" title="MapStruct"></a>MapStruct</h2><p><a href="http://mapstruct.org/">MapStruct</a>是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。<br>生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。</p><h3 id="如何接入MapStruct"><a href="#如何接入MapStruct" class="headerlink" title="如何接入MapStruct"></a>如何接入MapStruct</h3><ul><li><a href="http://mapstruct.org/documentation/installation/">官网文档</a></li></ul><p>IDEA Support: <a href="https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions">https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions</a></p><h3 id="Java-Bean属性拷贝性能对比"><a href="#Java-Bean属性拷贝性能对比" class="headerlink" title="Java Bean属性拷贝性能对比"></a>Java Bean属性拷贝性能对比</h3><p>get/set &gt;= <a href="http://mapstruct.org/">MapStruct</a> &gt; <a href="https://jmapper-framework.github.io/jmapper-core/">JMapper</a>  &gt;  <a href="https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java">“beanCopier(cglib)”</a> &gt; Orika &gt; ModelMapper &gt; Spring BeanUtils &gt; Dozer &gt; Apache BeanUtils</p><p>性能对比数据来源：</p><ul><li><a href="https://www.baeldung.com/java-performance-mapping-frameworks">https://www.baeldung.com/java-performance-mapping-frameworks</a></li><li><a href="https://java.libhunt.com/categories/337-bean-mapping">https://java.libhunt.com/categories/337-bean-mapping</a></li></ul><p>说明：</p><ul><li>get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。</li><li>beanCopier 性能较高，属性名和类型有较高的匹配要求。</li><li>MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。</li><li>Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。</li><li>Spring BeanUtils 性能一般，只能支持相关名称的拷贝。</li><li>Dozer 性能差，使用简单，编写xml不方便。</li><li>Apache BeanUtils 性能差。</li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>实例代码:</p><pre><code class="java">/*** 定义对象之间转换Mapper * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口 *     @Mapper *     componentModel ：主要是指定实现类的类型， *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象 *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入 *     uses 使用用户自定义转换器 * *     http://mapstruct.org/documentation/stable/reference/html/ *///@Mapper(componentModel = &quot;spring&quot;,uses = &#123;DateHandWritten.class&#125;)@Mapper(        uses = &#123;DateHandWritten.class, UserNameHandWritten.class&#125;,        imports = &#123;LocalDateUtil.class&#125;        )public interface PersonMapper &#123;    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);    @Mappings(&#123;            //@Mapping(source = &quot;name&quot;,target = &quot;name&quot;,ignore = true),            @Mapping(target = &quot;birthExpressionFormat&quot;, expression = &quot;java(LocalDateUtil.getDateNow().toString())&quot;),            @Mapping(source = &quot;name&quot;,target = &quot;address.name&quot;),            @Mapping(source = &quot;price&quot;,target = &quot;price&quot;,numberFormat = &quot;#.00&quot;),            @Mapping(source = &quot;birthDate&quot;,target = &quot;birthDateFormat&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)    &#125;)    /***     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性     *     source：源属性     *     target：目标属性     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式     *     ignore: 忽略这个字段     * @Mappings：配置多个@Mapping     */    PersonDto toDto(Person person);    @InheritConfiguration(name = &quot;toDto&quot;)    List&lt;PersonDto&gt; toDtos(List&lt;Person&gt; person);    /*@InheritInverseConfiguration()    PersonDto fromDto(Person person);*/    /**     * @InheritConfiguration 用于继承配置     * */  /*  @InheritConfiguration(name = &quot;toDto&quot;)    void update(Person person, @MappingTarget PersonDto personDto);*/&#125;/**定义自定义转换规则*/public class DateHandWritten &#123;    public String asString(Date date) &#123;        return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )            .format( date ) : null;    &#125;    public Date asDate(String date) &#123;        try &#123;            return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )                .parse( date ) : null;        &#125;        catch ( ParseException e ) &#123;            throw new RuntimeException( e );        &#125;    &#125;&#125;/**定义自定义转换规则*/public class UserNameHandWritten &#123;    public String asUsername(String username) &#123;        return  &quot;被修改后的name&quot;;    &#125; &#125;/***使用实例*/public class MapStructTest &#123;    @Test    public void personTest()&#123;        Person person = buildPerson();        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);        System.out.println(JSON.toJSONString(personDto));        /**        * &#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573411245,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:31 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;        * */    &#125;    @Test    public void personListTest()&#123;        Person person = buildPerson();        List&lt;PersonDto&gt; personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));        System.out.println(JSON.toJSONString(personDtos));        /**        * [&#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573439123,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:59 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;]        * */    &#125;    private Person buildPerson()&#123;        Address a = new Address();        a.setName(&quot;demo&quot;);        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(&quot;中国人&quot;).addresses(Lists.newArrayList(a)).build();    &#125;&#125;</code></pre><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14种常用设计模式</title>
      <link href="2020/10/02/framework/design-model/"/>
      <url>2020/10/02/framework/design-model/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://www.runoob.com/design-pattern">菜鸟教程</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect">设计模式在Spring框架中的良好实践</a><br><a href="https://github.com/im-fan/my-design-mode.git">实现的demo</a></p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><img class="magplus" title="设计模式类型" src="https://im-fan.gitee.io/img/design-model/design-model-type.jpg" alt="设计模式类型" width="700" height="840"><h3 id="设计模式实践的关系"><a href="#设计模式实践的关系" class="headerlink" title="设计模式实践的关系"></a>设计模式实践的关系</h3><img class="magplus" title="设计模式之间的关系" src="http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt="设计模式之间的关系" width="700" height="840"><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><pre><code>1、开闭原则（Open Close Principle）    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。2、里氏代换原则（Liskov Substitution Principle）    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。3、依赖倒转原则（Dependence Inversion Principle）    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。4、接口隔离原则（Interface Segregation Principle）    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。5、迪米特法则，又称最少知道原则（Demeter Principle）    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。6、合成复用原则（Composite Reuse Principle）    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</code></pre><h2 id="模式详解"><a href="#模式详解" class="headerlink" title="模式详解"></a>模式详解</h2><h3 id="1-策略模式-Strategy"><a href="#1-策略模式-Strategy" class="headerlink" title="1.策略模式(Strategy)"></a>1.策略模式(Strategy)</h3><pre><code>定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</code></pre><ul><li>示例图片<br/><img src="http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg" /></li></ul><h3 id="2-简单工厂模式-Simple-Factory"><a href="#2-简单工厂模式-Simple-Factory" class="headerlink" title="2.简单工厂模式( Simple Factory )"></a>2.简单工厂模式( Simple Factory )</h3><pre><code>定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；</code></pre><h3 id="3-工厂模式-Factory"><a href="#3-工厂模式-Factory" class="headerlink" title="3.工厂模式( Factory )"></a>3.工厂模式( Factory )</h3><pre><code>针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品</code></pre><h3 id="4-抽象工厂模式-Abstract-Factory"><a href="#4-抽象工厂模式-Abstract-Factory" class="headerlink" title="4.抽象工厂模式( Abstract Factory )"></a>4.抽象工厂模式( Abstract Factory )</h3><pre><code>https://blog.csdn.net/hguisu/article/details/7505909应对产品族概念而生，属于创建型模式区别简单工厂 ：用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）     例：造了一个工厂，只能生产 宝马和比亚迪汽车；如果需要制造其他车系，工厂要改造升级工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）     例：根据工厂图纸造了两个工厂，分别生产宝马和比亚迪汽车；如果需要制造其他车系，按照图纸再造一个工厂； 但无法生产除了车以外的其他产品抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）    例：收购了个汽车空调厂，将工厂图纸和空调厂图纸合并成一个图纸；建新厂时按照新的图纸，先建造出有空调+汽车生产线的厂，在利用不同生产线生产汽车和对应的汽车空调；如果需要一个五菱车厂，不支持单独建五菱车厂，但是可以新建带空调的五菱车厂1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.</code></pre><img src="https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg" alt="抽象工厂模式的 UML 图"><h3 id="5-装饰器模式-Decorator"><a href="#5-装饰器模式-Decorator" class="headerlink" title="5.装饰器模式( Decorator )"></a>5.装饰器模式( Decorator )</h3><pre><code>动态的给一个对象添加一些额外的功能，属于结构型模式优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。缺点：多层装饰比较复杂。使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。注意事项：可代替继承。其他：下图，RedShapeDecorator extends ShapeDecorator</code></pre><img src="http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg" alt="装饰器模式的UML图"/><h3 id="6-代理模式-Proxy"><a href="#6-代理模式-Proxy" class="headerlink" title="6.代理模式( Proxy )"></a>6.代理模式( Proxy )</h3><pre><code>封装被代理对象并限制外界对被代理对象的访问，属于结构型模式关键代码：实现与被代理类组合。优点： 1、职责清晰。 2、高扩展性。 3、智能化。缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。注意事项：1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</code></pre><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg" alt="代理模式的UML图"><h3 id="7-模板方法模式-Template"><a href="#7-模板方法模式-Template" class="headerlink" title="7.模板方法模式( Template )"></a>7.模板方法模式( Template )</h3><pre><code>1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。</code></pre><img src="http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="模板模式的 UML 图"><h3 id="8-外观模式-Facade"><a href="#8-外观模式-Facade" class="headerlink" title="8.外观模式( Facade )"></a>8.外观模式( Facade )</h3><pre><code>为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式简单理解：电脑开机关机启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</code></pre><h3 id="9-适配器模式-Adapter"><a href="#9-适配器模式-Adapter" class="headerlink" title="9.适配器模式( Adapter )"></a>9.适配器模式( Adapter )</h3><pre><code>将一个类的接口转换成客户希望的另一个接口。属于结构型模式简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。缺点：1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</code></pre><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png" alt="适配器模式的UML图"><h3 id="10-桥接模式-Bridge"><a href="#10-桥接模式-Bridge" class="headerlink" title="10.桥接模式( Bridge )"></a>10.桥接模式( Bridge )</h3><pre><code>将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</code></pre><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg" alt="桥接模式的UML图"><h3 id="11-建造者模式-Builder"><a href="#11-建造者模式-Builder" class="headerlink" title="11.建造者模式( Builder )"></a>11.建造者模式( Builder )</h3><pre><code>使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式优点： 1、建造者独立，易扩展。 2、便于控制细节风险。缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</code></pre><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg" alt="建造者模式的UML图"><h3 id="12-观察者模式-Observer"><a href="#12-观察者模式-Observer" class="headerlink" title="12.观察者模式( Observer )"></a>12.观察者模式( Observer )</h3><pre><code>定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。缺点：    1、观察者太多时，通知观察者会耗时比较久    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。    3、观察者模式仅仅只是知道观察目标发生了变化。注意事项：    1、JAVA 中已经有了对观察者模式的支持类。    2、避免循环引用。    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</code></pre><img src="http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg" alt="观察者模式的 UML 图"><h3 id="13-单例模式-Singleton"><a href="#13-单例模式-Singleton" class="headerlink" title="13.单例模式( Singleton )"></a>13.单例模式( Singleton )</h3><pre><code>保证一个类仅有一个实例,并提供一个访问它的全局控制点.优点：1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。2、避免对资源的多重占用（比如写文件操作）。   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。单例模式的几种实现方式1.懒汉式，线程不安全   不加锁 synchronized，所以严格意义上它并不算单例模式。这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作2.懒汉式，线程安全    加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。    优点：第一次调用才初始化，避免内存浪费。    缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。3、饿汉式    优点：没有加锁，执行效率会提高。    缺点：类加载时就初始化，浪费内存。4、双检锁/双重校验锁（DCL，即 double-checked locking）    这种方式采用双锁机制，安全且在多线程情况下能保持高性能。getInstance() 的性能对应用程序很关键。5、登记式/静态内部类    这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。6、枚举    这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</code></pre><h3 id="14-命令模式-Command"><a href="#14-命令模式-Command" class="headerlink" title="14.命令模式( Command )"></a>14.命令模式( Command )</h3><pre><code>将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化优点：1、降低了系统耦合度。2、新的命令可以很容易添加到系统中去。缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</code></pre><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg" alt="命令模式的 UML 图">]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读</title>
      <link href="2020/10/02/thinking/book/"/>
      <url>2020/10/02/thinking/book/</url>
      
        <content type="html"><![CDATA[<h3 id="技术书"><a href="#技术书" class="headerlink" title="技术书"></a>技术书</h3><ul><li>《Netty、Zookeeper、Redis高并发实战》</li></ul><h3 id="思考方式"><a href="#思考方式" class="headerlink" title="思考方式"></a>思考方式</h3><ul><li><a href="https://www.toutiao.com/i6619057728725729800/">结构化思维</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件推荐</title>
      <link href="2020/10/02/other/software/"/>
      <url>2020/10/02/other/software/</url>
      
        <content type="html"><![CDATA[<h3 id="Mac软件-amp-工具网站"><a href="#Mac软件-amp-工具网站" class="headerlink" title="Mac软件&amp;工具网站"></a>Mac软件&amp;工具网站</h3><table><thead><tr><th>主要功能</th><th>软件名</th><th>相关网址</th></tr></thead><tbody><tr><td>图片编辑器</td><td>PixelStyle</td><td></td></tr><tr><td>视频播放</td><td>IINA</td><td></td></tr><tr><td>录屏软件</td><td>LICEcap</td><td></td></tr><tr><td>文件比较</td><td>Beyond Compare</td><td></td></tr><tr><td>Markdown编辑工具</td><td>Haroopad</td><td></td></tr><tr><td>Mac包管理工具</td><td>Homebrew</td><td></td></tr><tr><td>Mac破解软件</td><td></td><td><a href="https://xclient.info/">https://xclient.info</a></td></tr><tr><td>相似网站查询</td><td></td><td><a href="https://www.similarsites.com/">https://www.similarsites.com</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="2020/09/30/other/hexo/"/>
      <url>2020/09/30/other/hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网</p></blockquote><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://hexo.io/zh-cn/">Hexo官网</a></li><li><a href="https://hexo.io/themes/">官网主题</a></li><li><a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo主题</a></li><li><a href="https://yelog.org/2017/03/13/3-hexo-logs/">3-hexo主题相关文档</a></li></ul><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><blockquote><p>mac用户推荐先安装Homebrew，通过Homebrew安装一下软件</p></blockquote><ul><li><a href="https://brew.sh/">Homebrew</a></li><li>安装Git</li><li>安装Node.js</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre><code class="textmate">npm install -g hexo-cli</code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><pre><code class="shell">注：my-hexo - 项目名/项目文件夹名hexo init my-hexocd my-hexonpm install</code></pre><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li><p>目录</p><pre><code class="textmate">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre></li><li><p>目录介绍</p></li></ul><pre><code class="textmate">1._config.yml网站的 配置 信息，您可以在此配置大部分的参数2.package.json应用程序的信息。3.scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。4.source资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。5.themes主题 文件夹。Hexo 会根据主题来生成静态页面。</code></pre><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><ul><li><a href="https://hexo.io/themes/">官网主题</a></li><li>本博客使用的主题 <a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo</a></li></ul><pre><code class="textmate">1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo2.修改配置修改hexo根目录的_config.yml，theme: 3-hexo3.主题更新cd themes/3-hexogit pull在此感谢提供主题的作者</code></pre><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><ul><li>常用文档命令</li></ul><pre><code class="textmate">1.新建文档hexo new [layout] &lt;title&gt;2.新建草稿文档hexo new [layout] &lt;title&gt;3.草稿&lt;-&gt;发布hexo publish [layout] &lt;title&gt;</code></pre><ul><li><p>参数介绍</p><table><thead><tr><th>参数</th><th>值</th><th>作用</th><th>生成文件的路径</th></tr></thead><tbody><tr><td>layout</td><td>post</td><td>正式发表的文章</td><td>source/_posts</td></tr><tr><td>layout</td><td>page</td><td>静态页面</td><td>source</td></tr><tr><td>layout</td><td>draft</td><td>草稿</td><td>source/_drafts</td></tr><tr><td>title</td><td>-</td><td>文章标题&amp;文件名</td><td>-</td></tr></tbody></table></li><li><p>文档头部信息格式</p></li></ul><pre><code class="textmate">---title: Javadate: 2020-09-30 14:51:20tags: - Javacategories: - Java- 笔记---</code></pre><ul><li>文档头部信息解释</li></ul><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>tags</td><td>标签，可多个</td></tr><tr><td>categories</td><td>分类菜单，可定义多级</td></tr><tr><td>keywords</td><td>网站的关键词。支援多个关键词。</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td></tr></tbody></table><h3 id="运行-amp-发布"><a href="#运行-amp-发布" class="headerlink" title="运行&amp;发布"></a>运行&amp;发布</h3><ul><li>本地运行<pre><code class="textmate">npm run server</code></pre></li><li>编译&amp;部署<pre><code class="textmate">hexo clean hexo generate编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
