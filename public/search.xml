<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>互联网常用语记录</title>
      <link href="2020/11/04/thinking/ali-words/"/>
      <url>2020/11/04/thinking/ali-words/</url>
      
        <content type="html"><![CDATA[<h3 id="二字动词"><a href="#二字动词" class="headerlink" title="二字动词"></a>二字动词</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、</span><br><span class="line">包装、重组、履约、响应、量化、发力、布局、联动、开拓、</span><br><span class="line">细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、</span><br><span class="line">集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、</span><br><span class="line">提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、</span><br><span class="line">辐射、围绕、复用、渗透、扩展、</span><br></pre></td></tr></table></figure><h3 id="二字名词"><a href="#二字名词" class="headerlink" title="二字名词"></a>二字名词</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、</span><br><span class="line">规模、场景、聚焦、维度、格局、形态、生态、话术、</span><br><span class="line">体系、认知、玩法、体感、感知、调性、心智、战役、</span><br><span class="line">合力、心力、赛道、因子、模型、载体、横向、通道、</span><br><span class="line">补位、链路、试点</span><br></pre></td></tr></table></figure><h3 id="三字名词"><a href="#三字名词" class="headerlink" title="三字名词"></a>三字名词</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">颗粒度、感知度、方法论、组合拳、引爆点、点线面、</span><br><span class="line">精细化、差异化、平台化、结构化、影响力、耦合性、</span><br><span class="line">易用性、一致性、端到端、短平快</span><br></pre></td></tr></table></figure><h3 id="四字名词"><a href="#四字名词" class="headerlink" title="四字名词"></a>四字名词</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生命周期、价值转化、强化认知、资源倾斜、完善逻辑、</span><br><span class="line">抽离透传、复用打法、商业价值、商业模式、快速响应、</span><br><span class="line">定性定量、关键链路、去中心化、结果导向、垂直领域、</span><br><span class="line">如何收口、归因分析、体验度量、信息屏障</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 常用语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper搭建</title>
      <link href="2020/10/29/backend/service/zookeeper/"/>
      <url>2020/10/29/backend/service/zookeeper/</url>
      
        <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://zookeeper.apache.org/releases.html">官网</a></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class</span><br><span class="line">2.启动时注意端口号是否已经被占用</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单机部署步骤"><a href="#单机部署步骤" class="headerlink" title="单机部署步骤"></a>单机部署步骤</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.解压文件</span><br><span class="line">    tar -zxvf xxx-bin.tar.gz zookeeper</span><br><span class="line">2.修改配置</span><br><span class="line">    cd zookeeper/conf</span><br><span class="line">    cp zoo_sample.cfg zoo.cfg</span><br><span class="line">    vim zoo.cfg</span><br><span class="line">    修改以下配置项</span><br><span class="line">        dataDir= xxx/dataDir</span><br><span class="line">        dataLogDir= xxx/logs/zookeeper</span><br><span class="line">        </span><br><span class="line">3.新增配置</span><br><span class="line">    cd xxx/dataDir</span><br><span class="line">    echo 1001&gt;myid</span><br><span class="line"></span><br><span class="line">4.启动</span><br><span class="line">    cd zookeeper/bin</span><br><span class="line">    ./zkServer.sh start / restart / stop / status</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="zookeeper数据查看工具"><a href="#zookeeper数据查看工具" class="headerlink" title="zookeeper数据查看工具"></a>zookeeper数据查看工具</h3><ul><li><a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip">下载地址</a></li><li>使用<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.解压后进入build文件夹</span><br><span class="line">2.运行jar</span><br><span class="line">    nohup java -jar zookeeper-dev-ZooInspector.jar &amp;</span><br><span class="line">3.左上角连接按钮，输入zk地址并连接</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>启动报ClassNotFound</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的</span><br></pre></td></tr></table></figure></li><li><p>启动失败</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.检查配置的文件夹路径和权限是否正常</span><br><span class="line">2.检查zookeeper是否已经被启动</span><br><span class="line">    ps -ef | grep zookeeper</span><br><span class="line">    kill进程</span><br><span class="line">3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务搭建 </category>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel使用遇到的问题</title>
      <link href="2020/10/20/backend/java/utils/excel/"/>
      <url>2020/10/20/backend/java/utils/excel/</url>
      
        <content type="html"><![CDATA[<h3 id="设置中文文件名"><a href="#设置中文文件名" class="headerlink" title="设置中文文件名"></a>设置中文文件名</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 代码中添加</span><br><span class="line">response.setContentType(&quot;application/vnd.ms-excel;charset=UTF-8&quot;);</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#x27;&#x27;&quot; + fileName + &quot;.xlsx&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="导出失败返回错误信息"><a href="#导出失败返回错误信息" class="headerlink" title="导出失败返回错误信息"></a>导出失败返回错误信息</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 重写响应信息数据类型</span><br><span class="line">response.reset();</span><br><span class="line">response.setContentType(&quot;application/json&quot;);</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">    response.getWriter().println(result);</span><br><span class="line">&#125; catch (IOException ioException) &#123;</span><br><span class="line">    log.warn(&quot;业务异常  msg=&#123;&#125;&quot;,ioException);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导出成功但是后台日志报类型转换异常"><a href="#导出成功但是后台日志报类型转换异常" class="headerlink" title="导出成功但是后台日志报类型转换异常"></a>导出成功但是后台日志报类型转换异常</h3><ul><li>错误日志<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#x27;application/vnd.ms-excel;charset=utf-8&#x27;</span><br><span class="line">org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#x27;application/vnd.ms-excel;charset=utf-8&#x27;</span><br></pre></td></tr></table></figure></li><li>原因<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误</span><br></pre></td></tr></table></figure></li><li>解决方法<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改Controller中方法，改为 void 即可</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD</title>
      <link href="2020/10/09/framework/ddd/"/>
      <url>2020/10/09/framework/ddd/</url>
      
        <content type="html"><![CDATA[<h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">六边形架构、洋葱架构、整洁架构</span><br><span class="line"></span><br><span class="line">SIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。</span><br><span class="line"></span><br><span class="line">在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
          <category> DDD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal-Docker搭建</title>
      <link href="2020/10/02/backend/database/canal/"/>
      <url>2020/10/02/backend/database/canal/</url>
      
        <content type="html"><![CDATA[<h3 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a>相关网址</h3><ul><li><a href="https://github.com/alibaba/canal/wiki/Home">官网</a></li><li><a href="https://github.com/alibaba/canal/wiki/QuickStart">快速开始</a></li><li><a href="https://hub.docker.com/r/canal/canal-server/tags/">Docker镜像地址</a></li><li><a href="https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart">Canal Admin QuickStart</a></li><li><a href="https://github.com/alibaba/canal/wiki/ClientExample">Canal Client Example</a></li></ul><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ul><li>推荐docker方式部署,注意配置时mysql的IP地址<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.mysql</span><br><span class="line">  需要确认mysql已开启binlog设置</span><br><span class="line">2.拉取canal-server镜像</span><br><span class="line">  docker pull canal/canal-server:v1.1.4</span><br><span class="line">3.下载docker启动脚本</span><br><span class="line">   wget https://github.com/alibaba/canal/blob/master/docker/run.sh</span><br><span class="line">4.修改启动脚本中数据库配置</span><br><span class="line"></span><br><span class="line">5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选</span><br><span class="line">   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz</span><br><span class="line">   mkdir canal-admin</span><br><span class="line">   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin</span><br><span class="line">   修改conf/application.yml中数据库配置</span><br><span class="line">   初始化mysql脚本，conf/canal_manager.sql</span><br><span class="line">   </span><br><span class="line">6.canal-client</span><br><span class="line">   参考 Canal Client Example</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.canal-server</span><br><span class="line">   运行 sh run.sh 会出现提示，复制提示后运行</span><br><span class="line">2.canal-admin</span><br><span class="line">   sh bin/startup.sh</span><br><span class="line">3.启动程序(canal-client)</span><br><span class="line">    成功后会打印出empty count : xx</span><br></pre></td></tr></table></figure><h4 id="CanalAdmin配置"><a href="#CanalAdmin配置" class="headerlink" title="CanalAdmin配置"></a>CanalAdmin配置</h4><ul><li><p>1.集群配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">集群名-local</span><br><span class="line">zk地址-127.0.0.1:2181 (可以不搭建zk)</span><br><span class="line">以下为配置项</span><br><span class="line">    # register ip</span><br><span class="line">    canal.register.ip =</span><br><span class="line">    # canal admin config</span><br><span class="line">    canal.admin.manager = 127.0.0.1:8089</span><br><span class="line">    canal.admin.port = 11110</span><br><span class="line">    canal.admin.user = admin</span><br><span class="line">    canal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441</span><br><span class="line">    # admin auto register</span><br><span class="line">    canal.admin.register.auto = true</span><br><span class="line">    canal.admin.register.cluster =</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>2.Server管理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServerIP-127.0.0.1 (同一集群下server ip不能重复)</span><br><span class="line">admin端口号-11110</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>3.Instance管理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">注意：Instance名称要与cancal-server容器中文件夹一致，默认有example</span><br><span class="line">Instance配置项</span><br><span class="line">    ## mysql serverId</span><br><span class="line">    canal.instance.mysql.slaveId = 1002</span><br><span class="line">    #position info，需要改成自己的数据库信息</span><br><span class="line">    canal.instance.master.address = 127.0.0.1:3306</span><br><span class="line">    #username/password，需要改成自己的数据库信息</span><br><span class="line">    canal.instance.dbUsername = root  </span><br><span class="line">    canal.instance.dbPassword = 123456</span><br><span class="line">    canal.instance.connectionCharset = UTF-8</span><br><span class="line">    #table regex，过滤规则</span><br><span class="line">    canal.instance.filter.regex = .\*\\\\..\*</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="一个Canal服务读取多个MySQL实例-docker中操作"><a href="#一个Canal服务读取多个MySQL实例-docker中操作" class="headerlink" title="一个Canal服务读取多个MySQL实例(docker中操作)"></a>一个Canal服务读取多个MySQL实例(docker中操作)</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)</span><br><span class="line">docker exec -it canal-server bash</span><br><span class="line">./stop.sh</span><br><span class="line"></span><br><span class="line">2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)</span><br><span class="line">cd canal-server/conf</span><br><span class="line">cp -R example example2</span><br><span class="line"></span><br><span class="line">3.Canal Admin中添加新配置</span><br><span class="line">   Instance名称-example2</span><br><span class="line"></span><br><span class="line">4.集成zookeeper</span><br><span class="line">修改canal-server/conf/下配置canal.properties</span><br><span class="line">canal.register.ip = zk服务器IP</span><br><span class="line">canal.zkServers = zk服务器IP:2181</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Canal搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL相关</title>
      <link href="2020/10/02/backend/database/mysql-other/"/>
      <url>2020/10/02/backend/database/mysql-other/</url>
      
        <content type="html"><![CDATA[<h3 id="存储引擎区别"><a href="#存储引擎区别" class="headerlink" title="存储引擎区别"></a>存储引擎区别</h3><ul><li>查看数据库支持的存储引擎<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>类型</th><th>磁盘文件</th><th>特性</th><th>适用场景</th></tr></thead><tbody><tr><td>FEDERATED</td><td></td><td>用来访问远程表存储引擎</td><td>访问远程表</td></tr><tr><td>MRG_MYISAM</td><td></td><td>把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表</td><td>可以用分区表替换merge表</td></tr><tr><td>MyISAM</td><td>.MDY数据)<br/> .MYI(索引)</td><td>主要的非实物处理存储引擎</td><td></td></tr><tr><td>BLACKHOLE</td><td></td><td>丢弃写操作，读操作返回空内容</td><td></td></tr><tr><td>CSV</td><td>.CSV(数据)<br/>.CSM(元数据)</td><td>存储数据时，会以逗号作为数据项之间的分割符号</td><td>不支持索引，数据存在为普通文本文件</td></tr><tr><td>MEMORY</td><td></td><td>置于内存的表</td><td></td></tr><tr><td>ARCHIVE</td><td></td><td>用于数据存档(行插入后不能再修改)</td><td>数据归档，大批量存储后不修改</td></tr><tr><td>InnoDB</td><td>.ibd(数据&amp;索引)</td><td>具备外键支持功能的事务处理引擎</td><td></td></tr><tr><td>PERFORMANCE_SCHEMA</td><td></td><td>用于监视MySQL服务器</td><td></td></tr><tr><td>NDB</td><td></td><td>集群存储引擎</td><td></td></tr><tr><td></td><td>TokuDB</td><td></td><td>存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB</td></tr></tbody></table><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.表结构完全复制</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_bak <span class="keyword">LIKE</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line">2.使用某些字段建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_bak <span class="keyword">select</span> <span class="keyword">now</span>() <span class="keyword">as</span> <span class="built_in">time</span> ;</span><br><span class="line"></span><br><span class="line">3.建表时字段值强制转换</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_bak <span class="keyword">select</span> <span class="keyword">CAST</span>(<span class="string">&#x27;2019-8-01&#x27;</span> <span class="keyword">as</span> <span class="keyword">UNSIGNED</span>) <span class="keyword">as</span> <span class="built_in">time</span>;</span><br><span class="line"></span><br><span class="line">4.临时表</span><br><span class="line">解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> user_bak  <span class="keyword">like</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">temporary</span> <span class="keyword">table</span> user_bak;</span><br></pre></td></tr></table></figure><h3 id="Cast类型强制转换"><a href="#Cast类型强制转换" class="headerlink" title="Cast类型强制转换"></a>Cast类型强制转换</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法: </span><br><span class="line">    Cast(字段名 as 转换的类型 )</span><br><span class="line"></span><br><span class="line">支持的类型:</span><br><span class="line">    CHAR[(N)] 字符型 </span><br><span class="line">    DATE 日期型</span><br><span class="line">    DATETIME 日期和时间型</span><br><span class="line">    DECIMAL float型</span><br><span class="line">    SIGNED int</span><br><span class="line">    TIME 时间型</span><br><span class="line"></span><br><span class="line">场景:</span><br><span class="line">    1.解决utf8字符查询时传入表情符，导致报错；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="新建分区表"><a href="#新建分区表" class="headerlink" title="新建分区表"></a>新建分区表</h3><ul><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_bak (</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">UNSIGNED</span> AUTO_INCREMENT ,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line"> rand_num <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;随机数&#x27;</span>,</span><br><span class="line"> birthday datetime <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>,rand_num)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">RANGE</span> (rand_num)</span><br><span class="line">(</span><br><span class="line"><span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> <span class="keyword">less</span> <span class="keyword">THAN</span> (<span class="number">20</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">less</span> <span class="keyword">THAN</span> (<span class="number">40</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> <span class="keyword">less</span> <span class="keyword">THAN</span> (<span class="number">60</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> <span class="keyword">less</span> <span class="keyword">THAN</span> (<span class="number">80</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> <span class="keyword">less</span> <span class="keyword">THAN</span> MAXVALUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>注意点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.PRIMARY必须包含分区的字段</span><br><span class="line">2.不能单独创建分区，建表时就要创建</span><br></pre></td></tr></table></figure></li><li><p>常见异常</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.ERROR 1064  不能单独创建分区</span><br><span class="line">解决：建表时就要把分区创建好</span><br><span class="line"></span><br><span class="line">2.ERROR 1503 主键必须包含分区函数中所有列</span><br><span class="line">解决：创建分区的字段必须放在主键索引中</span><br></pre></td></tr></table></figure></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.ALL - 查询返回单个结果,类似in操作</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_bak <span class="keyword">where</span> (<span class="keyword">id</span>) </span><br><span class="line">&gt;= <span class="keyword">ALL</span>(<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> user_bak <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="keyword">ANY</span> &amp; <span class="keyword">SUM</span> -效果一样,类似<span class="keyword">or</span>操作</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_bak <span class="keyword">where</span> (<span class="keyword">name</span>,<span class="keyword">id</span>) </span><br><span class="line">= <span class="keyword">SOME</span>(<span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">id</span> <span class="keyword">from</span> user_bak <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">or</span> <span class="keyword">name</span> = <span class="string">&#x27;eee&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="FullText全文搜索"><a href="#FullText全文搜索" class="headerlink" title="FullText全文搜索"></a>FullText全文搜索</h3><ul><li><p>全文搜索类型</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.自然语言搜索-搜索包含匹配词的信息</span><br><span class="line">2.布尔模式搜索-</span><br><span class="line">3.查询扩展搜索</span><br></pre></td></tr></table></figure></li><li><p>创建索引需要满足的条件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.表类型为MyISAM,version5.6以后引入了对InnoDB支持</span><br><span class="line">2.字段类型只能是char/varchar/text类型</span><br><span class="line">3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来</span><br><span class="line">4.停用词会被过滤掉(the/after/other等)</span><br><span class="line">5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)</span><br></pre></td></tr></table></figure></li><li><p>语法</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.自然语言</span><br><span class="line">select *,match(`name`) against(&#x27;good boy&#x27;) </span><br><span class="line">as &#x27;percentage&#x27; from `user` where match(`name`) against(&#x27;good boy&#x27;);</span><br><span class="line"></span><br><span class="line">2.布尔模式</span><br><span class="line">select *,match(`name`) against(&#x27;good boy&#x27; in boolean MODE) as &#x27;percentage&#x27; from `user` where match(`name`) against(&#x27;good boy&#x27; in boolean MODE);</span><br><span class="line"></span><br><span class="line">-- 内容顺序完全匹配</span><br><span class="line">select *,match(`name`) against(&#x27;&quot;good boy&quot;&#x27; in boolean MODE) as &#x27;percentage&#x27; from `user` where match(`name`) against(&#x27;&quot;good boy&quot;&#x27; in boolean MODE);</span><br><span class="line"></span><br><span class="line">3.扩展查询</span><br><span class="line">select *,match(`name`) against(&#x27;good boy&#x27; with query expansion) as &#x27;percentage&#x27; from `user` where match(`name`) against(&#x27;good boy&#x27;  with query expansion);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改查询字符长度</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.my.cnf文件中ft_min_word_len</span><br><span class="line">2.重建FullText索引或者快速修复</span><br><span class="line">repair table table_name quick;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="有字符集有关的系统设置"><a href="#有字符集有关的系统设置" class="headerlink" title="有字符集有关的系统设置"></a>有字符集有关的系统设置</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">character_set_system 用于存储的字符集</span><br><span class="line"></span><br><span class="line">character_set_server 服务器默认字符集</span><br><span class="line">collation_server  系统排序规则</span><br><span class="line">character_set_database 数据库字符集</span><br><span class="line">collation_database  数据库排序规则</span><br><span class="line">character_set_client 客户端向服务器发送SQL时使用的字符集</span><br><span class="line">character_set_result 表示服务器返回结果时使用的字符集</span><br><span class="line">character_set_connection 连接时使用的字符串</span><br><span class="line">character_set_filesystem 文件系统字符集</span><br></pre></td></tr></table></figure><h3 id="空间值"><a href="#空间值" class="headerlink" title="空间值"></a>空间值</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenGIS规范</span><br><span class="line">point 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎</span><br><span class="line">point(xxxx,xxxx)</span><br></pre></td></tr></table></figure><h3 id="模糊匹配查询"><a href="#模糊匹配查询" class="headerlink" title="模糊匹配查询"></a>模糊匹配查询</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.like</span><br><span class="line">    % 匹配任意数量的字符序列</span><br><span class="line">    _ 只能匹配单个字符</span><br><span class="line">    \%  \_  转义</span><br><span class="line">2.REGEXP-正则查询</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="新建用户后授权"><a href="#新建用户后授权" class="headerlink" title="新建用户后授权"></a>新建用户后授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- %表示所有IP可连接</span><br><span class="line">CREATE USER &#96;用户名&#96;@&#96;%&#96; IDENTIFIED BY &#39;密码&#39;;</span><br><span class="line">grant all privileges on jwgateway.* to &#39;用户名&#39;@&#39;%&#39; identified by &#39;密码&#39;;</span><br><span class="line">select * from mysql.user;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapStruct</title>
      <link href="2020/10/02/backend/java/utils/map-struct/"/>
      <url>2020/10/02/backend/java/utils/map-struct/</url>
      
        <content type="html"><![CDATA[<h2 id="MapStruct"><a href="#MapStruct" class="headerlink" title="MapStruct"></a>MapStruct</h2><p><a href="http://mapstruct.org/">MapStruct</a>是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。<br>生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。</p><h3 id="如何接入MapStruct"><a href="#如何接入MapStruct" class="headerlink" title="如何接入MapStruct"></a>如何接入MapStruct</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">maidao-commons 已经完成对[MapStruct 的mvn依赖](http://mapstruct.org/documentation/installation/)，并解决了与swagger2的兼容问题。</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maidao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maidao-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA Support: <a href="https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions">https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions</a></p><h3 id="Java-Bean属性拷贝性能对比"><a href="#Java-Bean属性拷贝性能对比" class="headerlink" title="Java Bean属性拷贝性能对比"></a>Java Bean属性拷贝性能对比</h3><p>get/set &gt;= <a href="http://mapstruct.org/">MapStruct</a> &gt; <a href="https://jmapper-framework.github.io/jmapper-core/">JMapper</a>  &gt;  <a href="https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java">“beanCopier(cglib)”</a> &gt; Orika &gt; ModelMapper &gt; Spring BeanUtils &gt; Dozer &gt; Apache BeanUtils</p><p>性能对比数据来源：</p><ul><li><a href="https://www.baeldung.com/java-performance-mapping-frameworks">https://www.baeldung.com/java-performance-mapping-frameworks</a></li><li><a href="https://java.libhunt.com/categories/337-bean-mapping">https://java.libhunt.com/categories/337-bean-mapping</a></li></ul><p>说明：</p><ul><li>get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。</li><li>beanCopier 性能较高，属性名和类型有较高的匹配要求。</li><li>MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。</li><li>Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。</li><li>Spring BeanUtils 性能一般，只能支持相关名称的拷贝。</li><li>Dozer 性能差，使用简单，编写xml不方便。</li><li>Apache BeanUtils 性能差。</li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>实例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义对象之间转换Mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span> 只有在接口加上这个注解， MapStruct 才会去实现该接口</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Mapper</span></span></span><br><span class="line"><span class="comment"> *     componentModel ：主要是指定实现类的类型，</span></span><br><span class="line"><span class="comment"> *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象</span></span><br><span class="line"><span class="comment"> *         -  spring：在接口的实现类上自动添加注解 <span class="doctag">@Component</span>，可通过 <span class="doctag">@Autowired</span> 方式注入</span></span><br><span class="line"><span class="comment"> *     uses 使用用户自定义转换器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://mapstruct.org/documentation/stable/reference/html/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Mapper(componentModel = &quot;spring&quot;,uses = &#123;DateHandWritten.class&#125;)</span></span><br><span class="line"><span class="meta">@Mapper(</span></span><br><span class="line"><span class="meta">        uses = &#123;DateHandWritten.class, UserNameHandWritten.class&#125;,</span></span><br><span class="line"><span class="meta">        imports = &#123;LocalDateUtil.class&#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mappings(&#123;</span></span><br><span class="line"><span class="meta">            //@Mapping(source = &quot;name&quot;,target = &quot;name&quot;,ignore = true),</span></span><br><span class="line"><span class="meta">            @Mapping(target = &quot;birthExpressionFormat&quot;, expression = &quot;java(LocalDateUtil.getDateNow().toString())&quot;),</span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;name&quot;,target = &quot;address.name&quot;),</span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;price&quot;,target = &quot;price&quot;,numberFormat = &quot;#.00&quot;),</span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;birthDate&quot;,target = &quot;birthDateFormat&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Mapping</span>：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性</span></span><br><span class="line"><span class="comment">     *     source：源属性</span></span><br><span class="line"><span class="comment">     *     target：目标属性</span></span><br><span class="line"><span class="comment">     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式</span></span><br><span class="line"><span class="comment">     *     ignore: 忽略这个字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Mappings</span>：配置多个<span class="doctag">@Mapping</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PersonDto <span class="title">toDto</span><span class="params">(Person person)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InheritConfiguration(name = &quot;toDto&quot;)</span></span><br><span class="line">    <span class="function">List&lt;PersonDto&gt; <span class="title">toDtos</span><span class="params">(List&lt;Person&gt; person)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@InheritInverseConfiguration()</span></span><br><span class="line"><span class="comment">    PersonDto fromDto(Person person);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@InheritConfiguration</span> 用于继承配置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">  <span class="comment">/*  @InheritConfiguration(name = &quot;toDto&quot;)</span></span><br><span class="line"><span class="comment">    void update(Person person, @MappingTarget PersonDto personDto);*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**定义自定义转换规则*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHandWritten</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asString</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date != <span class="keyword">null</span> ? <span class="keyword">new</span> SimpleDateFormat( <span class="string">&quot;yyyy-MM-dd&quot;</span> )</span><br><span class="line">            .format( date ) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">asDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> date != <span class="keyword">null</span> ? <span class="keyword">new</span> SimpleDateFormat( <span class="string">&quot;yyyy-MM-dd&quot;</span> )</span><br><span class="line">                .parse( date ) : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ParseException e ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( e );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**定义自定义转换规则*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNameHandWritten</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;被修改后的name&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***使用实例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapStructTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = buildPerson();</span><br><span class="line">        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);</span><br><span class="line">        System.out.println(JSON.toJSONString(personDto));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * &#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573411245,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:31 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personListTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = buildPerson();</span><br><span class="line">        List&lt;PersonDto&gt; personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));</span><br><span class="line">        System.out.println(JSON.toJSONString(personDtos));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * [&#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573439123,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:59 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;]</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Person <span class="title">buildPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Address a = <span class="keyword">new</span> Address();</span><br><span class="line">        a.setName(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Person.builder().birthDate(<span class="keyword">new</span> Date()).price(BigDecimal.valueOf(<span class="number">2.347</span>)).name(<span class="string">&quot;中国人&quot;</span>).addresses(Lists.newArrayList(a)).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14种常用设计模式</title>
      <link href="2020/10/02/framework/design-model/"/>
      <url>2020/10/02/framework/design-model/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.runoob.com&#x2F;design-pattern</span><br><span class="line">设计模式在 Spring 框架中的良好实践</span><br><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s?__biz&#x3D;MzI4ODQ3NjE2OA&#x3D;&#x3D;&amp;mid&#x3D;2247485687&amp;idx&#x3D;2&amp;sn&#x3D;d1a405491311488c576197b556d357ec&amp;chksm&#x3D;ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&amp;mpshare&#x3D;1&amp;scene&#x3D;1&amp;srcid&#x3D;&amp;sharer_sharetime&#x3D;1570684867528&amp;sharer_shareid&#x3D;4c8872b4436b495590f58ccf1453ba58&amp;rd2werd&#x3D;1#wechat_redirect</span><br></pre></td></tr></table></figure><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设计模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，还有另一类设计模式：J2EE 设计模式。</span><br><span class="line"></span><br><span class="line">## 创建型模式</span><br><span class="line">这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</span><br><span class="line"></span><br><span class="line">## 结构型模式</span><br><span class="line">这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</span><br><span class="line"></span><br><span class="line">## 行为型模式</span><br><span class="line">这些设计模式特别关注对象之间的通信。</span><br><span class="line"></span><br><span class="line">详情见：http:&#x2F;&#x2F;www.runoob.com&#x2F;design-pattern&#x2F;design-pattern-intro.html</span><br></pre></td></tr></table></figure><h3 id="设计模式实践的关系"><a href="#设计模式实践的关系" class="headerlink" title="设计模式实践的关系"></a>设计模式实践的关系</h3><img class="magplus" title="设计模式之间的关系" src="http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt="设计模式之间的关系" width="700" height="840"><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、开闭原则（Open Close Principle）</span><br><span class="line"></span><br><span class="line">开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</span><br><span class="line"></span><br><span class="line">2、里氏代换原则（Liskov Substitution Principle）</span><br><span class="line"></span><br><span class="line">里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</span><br><span class="line"></span><br><span class="line">3、依赖倒转原则（Dependence Inversion Principle）</span><br><span class="line"></span><br><span class="line">这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</span><br><span class="line"></span><br><span class="line">4、接口隔离原则（Interface Segregation Principle）</span><br><span class="line"></span><br><span class="line">这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</span><br><span class="line"></span><br><span class="line">5、迪米特法则，又称最少知道原则（Demeter Principle）</span><br><span class="line"></span><br><span class="line">最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</span><br><span class="line"></span><br><span class="line">6、合成复用原则（Composite Reuse Principle）</span><br><span class="line"></span><br><span class="line">合成复用原则是指：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</span><br></pre></td></tr></table></figure><h2 id="模式详解"><a href="#模式详解" class="headerlink" title="模式详解"></a>模式详解</h2><h3 id="1-策略模式-Strategy"><a href="#1-策略模式-Strategy" class="headerlink" title="1.策略模式(Strategy)"></a>1.策略模式(Strategy)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式</span><br><span class="line">混合使用(https:&#x2F;&#x2F;blog.csdn.net&#x2F;pengpegV5yaya&#x2F;article&#x2F;details&#x2F;25189253)</span><br><span class="line">优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</span><br><span class="line">缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。</span><br><span class="line">注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</span><br></pre></td></tr></table></figure><ul><li>示例图片<br/><img src="http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg" /></li></ul><h3 id="2-简单工厂模式-Simple-Factory"><a href="#2-简单工厂模式-Simple-Factory" class="headerlink" title="2.简单工厂模式( Simple Factory )"></a>2.简单工厂模式( Simple Factory )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义一个用以创建对象的工厂, 根据不同的条件[传参&#x2F;反射]生成不同的对象，属于创建型模式</span><br><span class="line"></span><br><span class="line">- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。</span><br><span class="line">- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；</span><br></pre></td></tr></table></figure><h3 id="3-工厂模式-Factory"><a href="#3-工厂模式-Factory" class="headerlink" title="3.工厂模式( Factory )"></a>3.工厂模式( Factory )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品</span><br></pre></td></tr></table></figure><h3 id="4-抽象工厂模式-Abstract-Factory"><a href="#4-抽象工厂模式-Abstract-Factory" class="headerlink" title="4.抽象工厂模式( Abstract Factory )"></a>4.抽象工厂模式( Abstract Factory )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;hguisu&#x2F;article&#x2F;details&#x2F;7505909</span><br><span class="line">应对产品族概念而生，属于创建型模式</span><br><span class="line"></span><br><span class="line">区别</span><br><span class="line">简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）</span><br><span class="line">工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）</span><br><span class="line">抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）</span><br><span class="line"></span><br><span class="line">1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。</span><br><span class="line">2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。</span><br><span class="line">3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。</span><br><span class="line">4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。</span><br><span class="line"></span><br><span class="line">最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg" alt="抽象工厂模式的 UML 图"><h3 id="5-装饰者模式-Decorator"><a href="#5-装饰者模式-Decorator" class="headerlink" title="5.装饰者模式( Decorator )"></a>5.装饰者模式( Decorator )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">动态的给一个对象添加一些额外的功能，属于结构型模式</span><br><span class="line">优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</span><br><span class="line">缺点：多层装饰比较复杂。</span><br><span class="line">使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。</span><br><span class="line">注意事项：可代替继承。</span><br><span class="line"></span><br><span class="line">其他：下图，RedShapeDecorator extends ShapeDecorator</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg" alt="装饰器模式的 UML 图"/><h3 id="6-代理模式-Proxy"><a href="#6-代理模式-Proxy" class="headerlink" title="6.代理模式( Proxy )"></a>6.代理模式( Proxy )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">封装被代理对象并限制外界对被代理对象的访问，属于结构型模式</span><br><span class="line">关键代码：实现与被代理类组合。</span><br><span class="line">优点： 1、职责清晰。 2、高扩展性。 3、智能化。</span><br><span class="line">缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</span><br><span class="line">注意事项：</span><br><span class="line">1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</span><br><span class="line">2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/proxy_pattern_uml_diagram.jpg" alt="代理模式的 UML 图"><h3 id="7-模板方法模式-Template"><a href="#7-模板方法模式-Template" class="headerlink" title="7.模板方法模式( Template )"></a>7.模板方法模式( Template )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中</span><br><span class="line">2.一个抽象类公开定义了执行它的方法的方式&#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。</span><br><span class="line"></span><br><span class="line">优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</span><br><span class="line">缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</span><br><span class="line">使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</span><br><span class="line">注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="模板模式的 UML 图"><h3 id="8-外观模式-Facade"><a href="#8-外观模式-Facade" class="headerlink" title="8.外观模式( Facade )"></a>8.外观模式( Facade )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式</span><br><span class="line">简单理解：电脑开机关机</span><br><span class="line">启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘</span><br><span class="line">关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU</span><br><span class="line">优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</span><br><span class="line">缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</span><br><span class="line">使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。</span><br><span class="line">注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/facade_pattern_uml_diagram.jpg" alt="外观模式的 UML 图"><h3 id="9-适配器模式-Adapter"><a href="#9-适配器模式-Adapter" class="headerlink" title="9.适配器模式( Adapter )"></a>9.适配器模式( Adapter )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">将一个类的接口转换成客户希望的另一个接口。属于结构型模式</span><br><span class="line">简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务</span><br><span class="line">优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。</span><br><span class="line">缺点：</span><br><span class="line">1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。</span><br><span class="line">2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</span><br><span class="line"></span><br><span class="line">使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</span><br><span class="line"></span><br><span class="line">注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/adapter_pattern_uml_diagram.jpg" alt="适配器模式的 UML 图"><h3 id="10-桥接模式-Bridge"><a href="#10-桥接模式-Bridge" class="headerlink" title="10.桥接模式( Bridge )"></a>10.桥接模式( Bridge )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式</span><br><span class="line"></span><br><span class="line">优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</span><br><span class="line"></span><br><span class="line">缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</span><br><span class="line"></span><br><span class="line">使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</span><br><span class="line"></span><br><span class="line">注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/bridge_pattern_uml_diagram.jpg" alt="桥接模式的 UML 图"><h3 id="11-建造者模式-Builder"><a href="#11-建造者模式-Builder" class="headerlink" title="11.建造者模式( Builder )"></a>11.建造者模式( Builder )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式</span><br><span class="line"></span><br><span class="line">优点： 1、建造者独立，易扩展。 2、便于控制细节风险。</span><br><span class="line">缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</span><br><span class="line">注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/builder_pattern_uml_diagram.jpg" alt="建造者模式的 UML 图"><h3 id="12-观察者模式-Observer"><a href="#12-观察者模式-Observer" class="headerlink" title="12.观察者模式( Observer )"></a>12.观察者模式( Observer )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。</span><br><span class="line"></span><br><span class="line">优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">    1、观察者太多时，通知观察者会耗时比较久</span><br><span class="line">    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</span><br><span class="line">    3、观察者模式仅仅只是知道观察目标发生了变化。</span><br><span class="line">注意事项：</span><br><span class="line">    1、JAVA 中已经有了对观察者模式的支持类。</span><br><span class="line">    2、避免循环引用。</span><br><span class="line">    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg" alt="观察者模式的 UML 图"><h3 id="13-单例模式-Singleton"><a href="#13-单例模式-Singleton" class="headerlink" title="13.单例模式( Singleton )"></a>13.单例模式( Singleton )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">保证一个类仅有一个实例,并提供一个访问它的全局控制点.</span><br><span class="line">优点：</span><br><span class="line">1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</span><br><span class="line">2、避免对资源的多重占用（比如写文件操作）。</span><br><span class="line">   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</span><br><span class="line">单例模式的几种实现方式</span><br><span class="line">1.懒汉式，线程不安全</span><br><span class="line">   不加锁 synchronized，所以严格意义上它并不算单例模式。</span><br><span class="line">这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作</span><br><span class="line">2.懒汉式，线程安全</span><br><span class="line">加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。</span><br><span class="line">优点：第一次调用才初始化，避免内存浪费。</span><br><span class="line">缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</span><br><span class="line">getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</span><br><span class="line">3、饿汉式</span><br><span class="line">优点：没有加锁，执行效率会提高。</span><br><span class="line">缺点：类加载时就初始化，浪费内存。</span><br><span class="line">4、双检锁&#x2F;双重校验锁（DCL，即 double-checked locking）</span><br><span class="line">这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</span><br><span class="line">getInstance() 的性能对应用程序很关键。</span><br><span class="line">5、登记式&#x2F;静态内部类</span><br><span class="line">这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</span><br><span class="line">6、枚举</span><br><span class="line">这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</span><br><span class="line"></span><br><span class="line">经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</span><br></pre></td></tr></table></figure><h3 id="14-命令模式-Command"><a href="#14-命令模式-Command" class="headerlink" title="14.命令模式( Command )"></a>14.命令模式( Command )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化</span><br><span class="line">优点：</span><br><span class="line">1、降低了系统耦合度。</span><br><span class="line">2、新的命令可以很容易添加到系统中去。</span><br><span class="line">缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</span><br></pre></td></tr></table></figure><img src="http://www.runoob.com/wp-content/uploads/2014/08/command_pattern_uml_diagram.jpg" alt="命令模式的 UML 图">]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读</title>
      <link href="2020/10/02/thinking/book/"/>
      <url>2020/10/02/thinking/book/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>网址</strong><ul><li><a href="https://www.toutiao.com/i6619057728725729800/">结构化思维</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件推荐</title>
      <link href="2020/10/02/tools/software/"/>
      <url>2020/10/02/tools/software/</url>
      
        <content type="html"><![CDATA[<h3 id="Mac软件-amp-工具网站"><a href="#Mac软件-amp-工具网站" class="headerlink" title="Mac软件&amp;工具网站"></a>Mac软件&amp;工具网站</h3><table><thead><tr><th>主要功能</th><th>软件名</th><th>相关网址</th></tr></thead><tbody><tr><td>图片编辑器</td><td>PixelStyle</td><td></td></tr><tr><td>视频播放</td><td>IINA</td><td></td></tr><tr><td>录屏软件</td><td>LICEcap</td><td></td></tr><tr><td>文件比较</td><td>Beyond Compare</td><td></td></tr><tr><td>Markdown编辑工具</td><td>Haroopad</td><td></td></tr><tr><td>Mac包管理工具</td><td>Homebrew</td><td></td></tr><tr><td>Mac破解软件</td><td></td><td><a href="https://xclient.info/">https://xclient.info</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="2020/09/30/tools/hexo/"/>
      <url>2020/09/30/tools/hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网</p></blockquote><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://hexo.io/zh-cn/">Hexo官网</a></li><li><a href="https://hexo.io/themes/">官网主题</a></li><li><a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo主题</a></li><li><a href="https://yelog.org/2017/03/13/3-hexo-logs/">3-hexo主题相关文档</a></li></ul><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><blockquote><p>mac用户推荐先安装Homebrew，通过Homebrew安装一下软件</p></blockquote><ul><li><a href="https://brew.sh/">Homebrew</a></li><li>安装Git</li><li>安装Node.js</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li>安装完全包<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注：my-hexo - 项目名/项目文件夹名</span><br><span class="line">hexo init my-hexo</span><br><span class="line">cd my-hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li>目录<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></li><li>目录介绍<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1._config.yml</span><br><span class="line">网站的 配置 信息，您可以在此配置大部分的参数</span><br><span class="line">2.package.json</span><br><span class="line">应用程序的信息。</span><br><span class="line">3.scaffolds</span><br><span class="line">模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span><br><span class="line">4.source</span><br><span class="line">资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</span><br><span class="line">5.themes</span><br><span class="line">主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3></li><li><a href="https://hexo.io/themes/">官网主题</a></li><li>本博客使用的主题 <a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo</a><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)</span><br><span class="line">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class="line">2.修改配置</span><br><span class="line">修改hexo根目录的_config.yml，theme: 3-hexo</span><br><span class="line">3.主题更新</span><br><span class="line">cd themes/3-hexo</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">在此感谢提供主题的作者</span><br></pre></td></tr></table></figure></li></ul><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><ul><li><p>常用文档命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.新建文档</span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">2.新建草稿文档</span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">3.草稿&lt;-&gt;发布</span><br><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li><p>参数介绍</p><table><thead><tr><th>参数</th><th>值</th><th>作用</th><th>生成文件的路径</th></tr></thead><tbody><tr><td>layout</td><td>post</td><td>正式发表的文章</td><td>source/_posts</td></tr><tr><td>layout</td><td>page</td><td>静态页面</td><td>source</td></tr><tr><td>layout</td><td>draft</td><td>草稿</td><td>source/_drafts</td></tr><tr><td>title</td><td>-</td><td>文章标题&amp;文件名</td><td>-</td></tr></tbody></table></li><li><p>文档头部信息格式</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Java</span><br><span class="line">date: 2020-09-30 14:51:20</span><br><span class="line">tags: </span><br><span class="line">- Java</span><br><span class="line">categories: </span><br><span class="line">- Java</span><br><span class="line">- 笔记</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>文档头部信息解释</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>tags</td><td>标签，可多个</td></tr><tr><td>categories</td><td>分类菜单，可定义多级</td></tr><tr><td>keywords</td><td>网站的关键词。支援多个关键词。</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td></tr></tbody></table></li></ul><h3 id="运行-amp-发布"><a href="#运行-amp-发布" class="headerlink" title="运行&amp;发布"></a>运行&amp;发布</h3><ul><li>本地运行<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></li><li>编译&amp;部署<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo generate</span><br><span class="line">编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 博客工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
