{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/moon.jpg","path":"img/moon.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/road.png","path":"img/road.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/cache/redisTemplate-serialize.png","path":"img/cache/redisTemplate-serialize.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/ddd/ddd-framework.png","path":"img/ddd/ddd-framework.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/ddd/four-color.png","path":"img/ddd/four-color.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/design-model/design-model-type.jpg","path":"img/design-model/design-model-type.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/uml/uml-line.png","path":"img/uml/uml-line.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/uml/uml.png","path":"img/uml/uml.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1601438273000},{"_id":"themes/3-hexo/.gitignore","hash":"86a50fa08e69cab561892aa5edef24f9081bbde1","modified":1601438273000},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1601438273000},{"_id":"themes/3-hexo/README.md","hash":"a9704a2f258df66cdd4f1ff4c96be972c7052e78","modified":1601445159000},{"_id":"themes/3-hexo/_config.yml","hash":"6cf7f86db3262378a26b8ed99d7707b9904a8a45","modified":1641448868133},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"d2c6d86fe2ff03e6ee9bbc16dff8efe5b47ac297","modified":1601438273000},{"_id":"themes/3-hexo/languages/en.yml","hash":"53ae29ae1237fc7822df85a6d2f8da6f0078625e","modified":1601438273000},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1601438273000},{"_id":"themes/3-hexo/layout/index.ejs","hash":"80c70add8883741a70678ed55ee021cf98a212c9","modified":1603186032000},{"_id":"themes/3-hexo/layout/post.ejs","hash":"e1f635d2822b98035e690a5da9b7c7b9d96bc34b","modified":1603185928000},{"_id":"themes/3-hexo/layout/indexs.md","hash":"23e1a09a69b8c0cd86a8b7182661751b91c4c968","modified":1641795370038},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1601438273000},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"d82da8529e63925bbe6a015e2d4d5841f3202073","modified":1627286489000},{"_id":"themes/3-hexo/source/css/style.styl","hash":"8a533bbcf602209a077bc3001481b205d39ab1b4","modified":1601445003000},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1601438273000},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1601438273000},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1601438273000},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1601438273000},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1601438273000},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1601438273000},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1601438273000},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1601438273000},{"_id":"themes/3-hexo/source/js/script.js","hash":"03fc06177b47fd6bac7ae393f9712c726272467b","modified":1601438273000},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"2afeac04cbcfdb4c876345a10121f059417b1d46","modified":1601619971000},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1609137408000},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"97dab221e6150880caa89baabb82854c98fc5b79","modified":1601619823000},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"a734c26d86da6697003ed27672c1b9b82b216c82","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"ed479aa9affee3b02a76da06de45a7c40a97a706","modified":1601518976000},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"d0b84370ca81c3baa02a05613ff040003acd2985","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"1251a2f965984eb605376be0ca4cf2a40c8c63c3","modified":1601455224000},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"3f9d91215ff36a6bcdaaf86e5b028dafc5a6a6fc","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1601438273000},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1601438273000},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"49a66e262d8f5196a14c4a30fd752dced69e6140","modified":1601454359000},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"cb6d7cc1ba37bdffd248c61fd6b8b26ce44b9ee5","modified":1601622673000},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1601438273000},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1601438273000},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"13b0174ac8f7dded790c160266bac10a0a4b579f","modified":1601522192000},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1601438273000},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1601438273000},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"2848081c36377b47ff87686f7464a624bd991b88","modified":1601623438000},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1601438273000},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"b0c4397ff8258b4de121ae7f4993dad1cef44f30","modified":1601622829000},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1601438273000},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1601438273000},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1601438273000},{"_id":"themes/3-hexo/source/img/cache/redisTemplate-serialize.png","hash":"befbf5f80d088f754be6a5ce3bfbe2709f1c2a8c","modified":1612267455000},{"_id":"themes/3-hexo/source/img/ddd/four-color.png","hash":"40cae7376e963aa4e978055a81c301a7179ed0a7","modified":1606919368000},{"_id":"themes/3-hexo/source/img/uml/uml-line.png","hash":"e8c82f1b6afb89bb14abef8e8492eefc6a56a42b","modified":1608895018000},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1609137578000},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/comments/giteement.ejs","hash":"9675f488eb1c6ceb93321009fa5a2eae5a4c949b","modified":1609137682000},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1601438273000},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"c76773b96860940083baf16470b7b80ac098e645","modified":1601438273000},{"_id":"themes/3-hexo/source/img/moon.jpg","hash":"21c3a55fea9ba6648719007bdd988928e4cec911","modified":1601520694000},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1601438273000},{"_id":"themes/3-hexo/source/img/design-model/design-model-type.jpg","hash":"16f2174838bbf81a207117a7cbdb7e12a7448d9d","modified":1608954099000},{"_id":"themes/3-hexo/source/img/uml/uml.png","hash":"11754a8f76a759f2d798dfe8a73fad9468c45012","modified":1608894989000},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1601438273000},{"_id":"themes/3-hexo/source/img/ddd/ddd-framework.png","hash":"4044ccda34b32aea7feb45e38c00a849ed400d3c","modified":1608279088000},{"_id":"source/_drafts/idea.md","hash":"9f1aa0e886624b2819994c9937d43e03b3bb1ad1","modified":1606456356000},{"_id":"source/_drafts/oauth2.md","hash":"e85802756bdbb9792612bf4a6d784c62c5dc2e08","modified":1626936675000},{"_id":"source/_drafts/mybatis.md","hash":"befd453ede7df0e88cf01a96301c044c685ee353","modified":1629337016000},{"_id":"source/_drafts/java.md","hash":"7918c1f37b417c07ba6181a4604e457ad075c126","modified":1630908800000},{"_id":"source/_drafts/user.md","hash":"3d5c44b3e8f8bb293a7d2be1b857d5e00b1bdd6d","modified":1630996093000},{"_id":"source/_drafts/year-end.md","hash":"8933ee649988464098a1d2f4e8fe5c834ead3b49","modified":1642064168072},{"_id":"source/_posts/frontend/vue.md","hash":"ee9a60401bd483da6c1979675a06cd931dc84eb6","modified":1627286014000},{"_id":"source/_posts/framework/cola.md","hash":"ea06932180e3336fd5976980a744fcdfba67feae","modified":1608020699000},{"_id":"source/_posts/devops/arthas.md","hash":"50a12d7ad8383767736fa66825c1de5fc13c8968","modified":1636618021000},{"_id":"source/_posts/framework/oauth2.md","hash":"55d19c8621ec93adf17228bec579822d571f28f3","modified":1608970412000},{"_id":"source/_posts/devops/check.md","hash":"a504f305bfb669e62221ef88af149a1cf88388b5","modified":1634091916000},{"_id":"source/_posts/framework/design-model.md","hash":"499f53070aa776fa3782c3f8fa3cda3571e8c275","modified":1609236074000},{"_id":"source/_posts/devops/docker.md","hash":"f0afc31a1a9544f79b01823513bb481413bc1a6c","modified":1627286354000},{"_id":"source/_posts/devops/istio.md","hash":"8f77b358e44766d132c098419e306365598703e3","modified":1627286354000},{"_id":"source/_posts/devops/ldap.md","hash":"29371e0daa9f9d1b79a9f159ac05df49f410850b","modified":1627286354000},{"_id":"source/_posts/framework/ddd.md","hash":"9d3f55358f1345e95f16053b7e885efff9df89d6","modified":1638966062000},{"_id":"source/_posts/devops/nginx.md","hash":"9183559bd9225047eef20d30e64886acd1c49572","modified":1634033856000},{"_id":"source/_posts/devops/skywalking.md","hash":"c8ed622eb8922f7fdf9287dbc6047294e3d0ec27","modified":1627286354000},{"_id":"source/_posts/other/software.md","hash":"4c548d908cef3f69753c019b782b2e6761434762","modified":1640779551145},{"_id":"source/_posts/other/hexo.md","hash":"71dc68f08e45913ba30b2ec026f5831fef1ee80a","modified":1641448942504},{"_id":"source/_posts/thinking/ali-words.md","hash":"0a76d50f3d5c50f207ea8ee7a21ecf86569c63f9","modified":1627286354000},{"_id":"source/_posts/thinking/book.md","hash":"7f330a3e264e3711c67a009a6db6f8c1920fc8c9","modified":1631240411000},{"_id":"source/_posts/backend/other/jimu-report.md","hash":"1ba5a809bdcf94fc66a78b8f50744053f065e5e7","modified":1628073723000},{"_id":"source/_posts/thinking/tv.md","hash":"09e2cc5acabeeae5305b592220d27c6832dbe0ba","modified":1642064104630},{"_id":"source/_posts/test/test.md","hash":"4f6827a1928aa5f73fa2fc0ba335eb429a91a8c3","modified":1636969914000},{"_id":"source/_posts/backend/mq/kafka.md","hash":"cc5e597d28b8788bd10e22231fa6c80b909e0223","modified":1629337077000},{"_id":"source/_posts/backend/mq/rocketmq.md","hash":"5aba8d35245e5e564fcfc744f00e2fa74dcf9d46","modified":1645501253643},{"_id":"source/_posts/backend/other/swagger.md","hash":"bd727589f9e3694368fe708e3ff5f3a83b0a5b42","modified":1640779602894},{"_id":"source/_posts/backend/service/nacos.md","hash":"8bf401c01f39073a5b78889b21974e92e7c55ce9","modified":1635323630000},{"_id":"source/_posts/framework/design/uml.md","hash":"837a5330626a5ab92a49e180d316e3b98160e694","modified":1632813322000},{"_id":"source/_posts/backend/service/zookeeper.md","hash":"c319577aec80b8141a64f2733ba999c450af4500","modified":1635328600000},{"_id":"source/_posts/backend/spring/spring-boot.md","hash":"454c610767ed9a0cd3f1674e41e52b76076aeff4","modified":1635133874000},{"_id":"source/_posts/backend/spring/springcloud-gateway.md","hash":"29dd3bb8623327d134f4ca680f35077497a978c3","modified":1629337016000},{"_id":"source/_posts/backend/storage/es.md","hash":"d62d9dd401029ab8ead3a2815b433e0c39615425","modified":1644903921059},{"_id":"source/_posts/backend/storage/mysql.md","hash":"4b10dc0f9e4a141a3ed003a0d634f8fd47db5aca","modified":1631512699000},{"_id":"source/_posts/backend/storage/mysql-other.md","hash":"e9a06a5c6f8da96062f94a499b773de669ffb117","modified":1634010754000},{"_id":"source/_posts/backend/storage/canal.md","hash":"a8b9ba49110a30ec75fdcb65c9d0ff2d3488cb12","modified":1635215003000},{"_id":"source/_posts/backend/storage/redis.md","hash":"da4a0ef9badc52ae3f9c0e7343bac5a4a68f4dff","modified":1627285108000},{"_id":"source/_posts/backend/java/build/gradle.md","hash":"9b832069da84ec8d990cb990a20cd5c69ede0b32","modified":1611207847000},{"_id":"source/_posts/backend/java/algorithm/book1.md","hash":"42f4d96ba1244be559b5930f7ecf4881631fa6a3","modified":1642064102157},{"_id":"source/_posts/backend/java/netty/io.md","hash":"8e976fc0ebfc6e90e0162cd904353a3f6bb2a982","modified":1635774835000},{"_id":"source/_posts/backend/java/utils/excel.md","hash":"04ebc789a764c7b78f950e81c1b9f0ab428a372f","modified":1632476201000},{"_id":"source/_posts/backend/java/utils/swagger.md","hash":"7c6d9c0b42e436bc1bd4f998ec196385def40c68","modified":1641967598271},{"_id":"source/_posts/backend/java/utils/mybatis-plus.md","hash":"54a4c312ed82e1c7600eae72284b1a2af717630a","modified":1616222431000},{"_id":"source/_posts/backend/java/thread/concurrent.md","hash":"9e66f925cbc423c923ca24ee0fde6b57b774bc7c","modified":1637584131000},{"_id":"source/_posts/backend/java/utils/convert/map-struct.md","hash":"8ea52cf949c1275e132ed3e5f14a5c0b314657c4","modified":1616222284000},{"_id":"source/_posts/backend/java/thread/threadPool.md","hash":"b32e9d76e1d480bb3f71c8af84c09bd0d120dcb1","modified":1612852049000},{"_id":"source/_posts/backend/spring/framework/springframework-2.md","hash":"d64fbddac18a65ed6f2405b9d61cf57c1ab72afd","modified":1629337305000},{"_id":"source/_posts/backend/spring/framework/springframework-1.md","hash":"63a2d04bbca9c78f111517a64d42803d0e24a46a","modified":1629337016000},{"_id":"source/_posts/backend/java/utils/convert/orika.md","hash":"a76466b868508136cce892435bee5cd2e1c13a2d","modified":1622599936000},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"a75ead28e6a1fab2a006cc7332ca2d2e868ce8e1","modified":1601438273000},{"_id":"themes/3-hexo/source/img/road.png","hash":"dbca25351cc63ca6feb690dd368f58e8d71543ba","modified":1601450845000},{"_id":"public/search.xml","hash":"7bedc9797ed9d5052e3ef2cf0d0a23470f461f24","modified":1645501262199},{"_id":"public/2022/01/13/backend/java/algorithm/book1/index.html","hash":"6f463cd5cf72de1ae1dd0ac2a5e244eae552dbba","modified":1645501262199},{"_id":"public/2022/01/10/thinking/tv/index.html","hash":"00b285f08bfb54b84e99525fa9c91defcb6ca516","modified":1645501262199},{"_id":"public/2022/02/15/backend/storage/es/index.html","hash":"5e5c3f4278e3816ea99fd6f4050c68c218a3c604","modified":1645501262199},{"_id":"public/2021/11/25/backend/other/swagger/index.html","hash":"3ccf54e9af158d755c3cb67f53be7aa5ce2b37ca","modified":1645501262199},{"_id":"public/2021/11/15/test/test/index.html","hash":"1b44eb40b23866a47b8e61d8ff46ce4493e562aa","modified":1645501262199},{"_id":"public/2021/11/22/backend/java/thread/concurrent/index.html","hash":"26a6b88f00168b840ded3dfb3994b2601a333289","modified":1645501262199},{"_id":"public/2021/10/13/devops/arthas/index.html","hash":"32635b56c181cf4373ec83d3ce4fa1bbe3548bde","modified":1645501262199},{"_id":"public/2021/08/11/backend/java/netty/io/index.html","hash":"98fbf9f53f445cd52bab67252b52a123bf826e00","modified":1645501262199},{"_id":"public/2021/08/04/backend/other/jimu-report/index.html","hash":"8b60decce95c935c322790f844ab5751279e3ab5","modified":1645501262199},{"_id":"public/2021/07/26/backend/spring/framework/springframework-2/index.html","hash":"f6fa7247b5c0cfce922d84210bd14c8488028130","modified":1645501262199},{"_id":"public/2021/07/20/backend/storage/mysql/index.html","hash":"1262f08320b57cbb80152336a56aa3ab43ad8800","modified":1645501262199},{"_id":"public/2021/06/26/backend/spring/framework/springframework-1/index.html","hash":"a8f7bdfef0b0c54da2032f97430002b4a213d682","modified":1645501262199},{"_id":"public/2021/06/15/backend/spring/springcloud-gateway/index.html","hash":"872fe446056efaab4049490129accca1e7160af2","modified":1645501262199},{"_id":"public/2021/04/28/frontend/vue/index.html","hash":"9921fbef280344038cef73c5a8f1b872bd572b08","modified":1645501262199},{"_id":"public/2021/05/19/devops/skywalking/index.html","hash":"13078fac144f38790f68c0c03615054d44bbc3f9","modified":1645501262199},{"_id":"public/2021/05/18/devops/istio/index.html","hash":"472397881fa8102bbd8eb55c1be555550ea47bf1","modified":1645501262199},{"_id":"public/2021/04/16/devops/docker/index.html","hash":"3148690db5388db070ee8be4fe9ba4693943a93f","modified":1645501262199},{"_id":"public/2021/04/13/backend/service/nacos/index.html","hash":"e3357b4a01bc1f44d89c43fa8e3ab535892b6d7a","modified":1645501262199},{"_id":"public/2021/04/05/devops/nginx/index.html","hash":"2e548b036897cd7479631909e4f53c6000e50c7b","modified":1645501262199},{"_id":"public/2021/03/20/backend/java/utils/convert/orika/index.html","hash":"11365dd0339efe528e3fd3741bd09e9d8bdf76ca","modified":1645501262199},{"_id":"public/2021/03/22/backend/spring/spring-boot/index.html","hash":"2f2585343194c9c05072a1c5b41746ec2fedc7eb","modified":1645501262199},{"_id":"public/2021/02/18/devops/ldap/index.html","hash":"575a22b7a3799db0bd39edad1e1fac0b5dcfb0e5","modified":1645501262199},{"_id":"public/2021/02/09/devops/check/index.html","hash":"54eb9ebeb26c114c496f7d5abc1160d5778a13b1","modified":1645501262199},{"_id":"public/2021/02/09/backend/java/thread/threadPool/index.html","hash":"66af29e4b49fdf976af4468ec7b3ec5019e627b7","modified":1645501262199},{"_id":"public/2021/02/03/backend/mq/kafka/index.html","hash":"d7b85861211a24816715758958f434efd230471d","modified":1645501262199},{"_id":"public/2021/02/03/backend/mq/rocketmq/index.html","hash":"bcf75c6e735a3d6643a68e44dd90e51009fb17ff","modified":1645501262199},{"_id":"public/2021/01/21/backend/java/build/gradle/index.html","hash":"d159c5793197c078041dec39513484a0167ace88","modified":1645501262199},{"_id":"public/2021/02/02/backend/storage/redis/index.html","hash":"fd6b1675dca2167f8af38547a0078237df963de5","modified":1645501262199},{"_id":"public/2020/12/25/framework/design/uml/index.html","hash":"4fca9173132a4be727db7337f38007e0abc5b1ea","modified":1645501262199},{"_id":"public/2020/11/17/framework/oauth2/index.html","hash":"30d07dde7869c6174ba59363730304a82db7dc32","modified":1645501262199},{"_id":"public/2020/11/11/backend/java/utils/swagger/index.html","hash":"3b32a4a5dcd9b0b24a0a6ab5d0102b4a92f83b70","modified":1645501262199},{"_id":"public/2020/11/04/thinking/ali-words/index.html","hash":"25361ad6034e582bdc85dac7eacb2e6cbbbed471","modified":1645501262199},{"_id":"public/2020/12/10/backend/java/utils/mybatis-plus/index.html","hash":"f40f61ca42894afe7c41063211d3d2230fe90b2b","modified":1645501262199},{"_id":"public/2020/12/15/framework/cola/index.html","hash":"23d27e37d068f71dec93bda801c52dea805dc5d6","modified":1645501262199},{"_id":"public/2020/10/29/backend/service/zookeeper/index.html","hash":"158845be9bf54bcdbce819118bf89225f8ed9720","modified":1645501262199},{"_id":"public/2020/10/20/backend/java/utils/excel/index.html","hash":"eee7eb30b7a14a0cbba0c7c5b3c5e2da47d8d3b1","modified":1645501262199},{"_id":"public/2020/10/09/framework/ddd/index.html","hash":"7dd3892b833eb48c82d88ae7fca6ddb97a387266","modified":1645501262199},{"_id":"public/2020/10/02/framework/design-model/index.html","hash":"353fe8f1049fc80948cf146ab2005532aa16453d","modified":1645501262199},{"_id":"public/2020/10/02/backend/storage/mysql-other/index.html","hash":"1bc91619a16baef973ae6cafb94cb4d4c064402e","modified":1645501262199},{"_id":"public/2020/10/02/backend/storage/canal/index.html","hash":"96c68b2c574ab5019befdd248391f68191527d59","modified":1645501262199},{"_id":"public/2020/10/02/backend/java/utils/convert/map-struct/index.html","hash":"dd92ab5ae406b7a4b2b7493199d8735d62abc019","modified":1645501262199},{"_id":"public/2020/10/02/thinking/book/index.html","hash":"71efb94faed34d4f6ba4124ef44de20804737878","modified":1645501262199},{"_id":"public/2020/10/02/other/software/index.html","hash":"2ac5a7c4e7c575db1986845a6849cbd52cf09f5e","modified":1645501262199},{"_id":"public/2020/09/30/other/hexo/index.html","hash":"300365bd6773cd0ef804fdd531965e93281f6e1b","modified":1645501262199},{"_id":"public/archives/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/page/2/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/page/3/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/page/4/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/page/5/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2020/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2020/page/2/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2020/09/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2020/10/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2020/11/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2020/12/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/page/3/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/page/2/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/02/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/01/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/03/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/05/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/04/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/07/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/08/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/06/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/10/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2021/11/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2022/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2022/01/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/archives/2022/02/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/page/2/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/思考/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/前端/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/框架/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/架构/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/运维/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/其他/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/测试/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/三方集成/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/摘要/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/消息队列/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/接口文档/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/服务治理/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/存储/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/项目编译/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/工具/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/数据结构与算法/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/io/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/高并发/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/categories/后端/线程池/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/oauth2/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/COLA/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/设计模式/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/vue/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/DDD/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/arthas/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/devops/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/docker/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/skywalking/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/istio/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/ldap/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/nginx/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/tool/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/常用语/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/思维/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/test/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/三方集成/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/message/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/kafka/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/nacos/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/动态配置/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/注册中心/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/zookeeper/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/接口文档/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/分布式锁/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/rocketmq/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/gateway/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/技术文档/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/springboot/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/mysql/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/canal/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/es/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/cache/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/项目编译/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/utils/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/数据结构与算法/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/io/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/高并发/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/线程池/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/tags/SpringFramework/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/page/2/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/page/3/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/page/5/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/page/4/index.html","hash":"e98c619b5cf5d1d208cc0d9f18ed5eba85a6e584","modified":1645501262199},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1645501262199},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1645501262199},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1645501262199},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1645501262199},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1645501262199},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1645501262199},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1645501262199},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1645501262199},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1645501262199},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1645501262199},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1645501262199},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1645501262199},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1645501262199},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1645501262199},{"_id":"public/img/cache/redisTemplate-serialize.png","hash":"befbf5f80d088f754be6a5ce3bfbe2709f1c2a8c","modified":1645501262199},{"_id":"public/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1645501262199},{"_id":"public/img/ddd/four-color.png","hash":"40cae7376e963aa4e978055a81c301a7179ed0a7","modified":1645501262199},{"_id":"public/img/uml/uml-line.png","hash":"e8c82f1b6afb89bb14abef8e8492eefc6a56a42b","modified":1645501262199},{"_id":"public/img/moon.jpg","hash":"21c3a55fea9ba6648719007bdd988928e4cec911","modified":1645501262199},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1645501262199},{"_id":"public/img/design-model/design-model-type.jpg","hash":"16f2174838bbf81a207117a7cbdb7e12a7448d9d","modified":1645501262199},{"_id":"public/img/uml/uml.png","hash":"11754a8f76a759f2d798dfe8a73fad9468c45012","modified":1645501262199},{"_id":"public/css/mobile.css","hash":"55bbb9303075ccbab2c75744b2486d9f0e247be8","modified":1645501262199},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1645501262199},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1645501262199},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1645501262199},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1645501262199},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1645501262199},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1645501262199},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1645501262199},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1645501262199},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1645501262199},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1645501262199},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1645501262199},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1645501262199},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1645501262199},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1645501262199},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1645501262199},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1645501262199},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1645501262199},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1645501262199},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1645501262199},{"_id":"public/js/script.js","hash":"03fc06177b47fd6bac7ae393f9712c726272467b","modified":1645501262199},{"_id":"public/css/style.css","hash":"47e6996707d9e4028cb4641a4451af7ec46b9cf4","modified":1645501262199},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1645501262199},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1645501262199},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1645501262199},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1645501262199},{"_id":"public/js/gitalk.js","hash":"a75ead28e6a1fab2a006cc7332ca2d2e868ce8e1","modified":1645501262199},{"_id":"public/img/ddd/ddd-framework.png","hash":"4044ccda34b32aea7feb45e38c00a849ed400d3c","modified":1645501262199},{"_id":"public/img/road.png","hash":"dbca25351cc63ca6feb690dd368f58e8d71543ba","modified":1645501262199}],"Category":[{"name":"后端","_id":"ckzxkyrxm0003jrnvh9cxcjxo"},{"name":"java","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyrxq000ijrnvboyrft96"},{"name":"思考","_id":"ckzxkyrxr000njrnv50i8fp3c"},{"name":"前端","_id":"ckzxkyrxt000ujrnvcsp4cipd"},{"name":"框架","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyrxu0011jrnv98ee1uye"},{"name":"架构","_id":"ckzxkyrxu0018jrnv1uuahlbt"},{"name":"安全","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyrxw001kjrnv55oiecq7"},{"name":"运维","_id":"ckzxkyrxz0025jrnvape7f8qi"},{"name":"其他","_id":"ckzxkyry3003ejrnv4s707ygt"},{"name":"测试","_id":"ckzxkyry4003njrnv8m2mc5rz"},{"name":"三方集成","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry4003sjrnvf44f62zh"},{"name":"摘要","_id":"ckzxkyry4003wjrnvbqbgexnl"},{"name":"消息队列","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry50040jrnv7dyqeoop"},{"name":"接口文档","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry50044jrnv8tbg5y9k"},{"name":"服务治理","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry50049jrnvcc2kf6x3"},{"name":"存储","_id":"ckzxkyry6004ljrnvaqmpfx3t"},{"name":"项目编译","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry70058jrnv9w4ygdzz"},{"name":"工具","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry7005djrnvek9q1bgt"},{"name":"数据结构与算法","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry7005ijrnve1xre3h2"},{"name":"io","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry8005qjrnv1svi7rfg"},{"name":"高并发","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryc006qjrnv7j2r85rx"},{"name":"线程池","parent":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryc006ujrnv75sw9k86"}],"Data":[],"Page":[],"Post":[{"_content":"### idea无限试用(2020.1.4可用，其他不知道)\n- mac\n```shell script\n#!/bin/sh\n# reset jetbrains ide evals\n\nOS_NAME=$(uname -s)\nJB_PRODUCTS=\"IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode\"\n\nif [ $OS_NAME == \"Darwin\" ]; then\n\techo 'macOS:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/Library/Preferences/${PRD}*/eval\n    \trm -rf ~/Library/Application\\ Support/JetBrains/${PRD}*/eval\n\tdone\nelif [ $OS_NAME == \"Linux\" ]; then\n\techo 'Linux:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/.${PRD}*/config/eval\n\tdone\nelse\n\techo 'unsupport'\n\texit\nfi\n\necho 'done.'\n```\n\n- windows\n```shell script\nSet oShell = CreateObject(\"WScript.Shell\")\nSet oFS = CreateObject(\"Scripting.FileSystemObject\")\nsHomeFolder = oShell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\nsJBDataFolder = oShell.ExpandEnvironmentStrings(\"%APPDATA%\") + \"\\JetBrains\"\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = \"\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*\"\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n\tbMatch = re.Test(file.Name)\n    If Not bMatch Then\n\t\tExit Sub\n\tEnd If\n\n\tIf oFS.FolderExists(sEvalPath) Then\n\t\toFS.DeleteFolder sEvalPath, True \n\tEnd If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n\tFor Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n    \tremoveEval oFile, sHomeFolder + \"\\\" + oFile.Name + \"\\config\\eval\"\n\tNext\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n\tFor Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n\t    removeEval oFile, sJBDataFolder + \"\\\" + oFile.Name + \"\\eval\"\n\tNext\nEnd If\n\nMsgBox \"done\"\n```","source":"_drafts/idea.md","raw":"### idea无限试用(2020.1.4可用，其他不知道)\n- mac\n```shell script\n#!/bin/sh\n# reset jetbrains ide evals\n\nOS_NAME=$(uname -s)\nJB_PRODUCTS=\"IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode\"\n\nif [ $OS_NAME == \"Darwin\" ]; then\n\techo 'macOS:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/Library/Preferences/${PRD}*/eval\n    \trm -rf ~/Library/Application\\ Support/JetBrains/${PRD}*/eval\n\tdone\nelif [ $OS_NAME == \"Linux\" ]; then\n\techo 'Linux:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/.${PRD}*/config/eval\n\tdone\nelse\n\techo 'unsupport'\n\texit\nfi\n\necho 'done.'\n```\n\n- windows\n```shell script\nSet oShell = CreateObject(\"WScript.Shell\")\nSet oFS = CreateObject(\"Scripting.FileSystemObject\")\nsHomeFolder = oShell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\nsJBDataFolder = oShell.ExpandEnvironmentStrings(\"%APPDATA%\") + \"\\JetBrains\"\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = \"\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*\"\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n\tbMatch = re.Test(file.Name)\n    If Not bMatch Then\n\t\tExit Sub\n\tEnd If\n\n\tIf oFS.FolderExists(sEvalPath) Then\n\t\toFS.DeleteFolder sEvalPath, True \n\tEnd If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n\tFor Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n    \tremoveEval oFile, sHomeFolder + \"\\\" + oFile.Name + \"\\config\\eval\"\n\tNext\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n\tFor Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n\t    removeEval oFile, sJBDataFolder + \"\\\" + oFile.Name + \"\\eval\"\n\tNext\nEnd If\n\nMsgBox \"done\"\n```","slug":"idea","published":0,"date":"2020-11-27T05:52:36.000Z","updated":"2020-11-27T05:52:36.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxi0000jrnv0d1k8qqa","content":"<h3 id=\"idea无限试用-2020-1-4可用，其他不知道\"><a href=\"#idea无限试用-2020-1-4可用，其他不知道\" class=\"headerlink\" title=\"idea无限试用(2020.1.4可用，其他不知道)\"></a>idea无限试用(2020.1.4可用，其他不知道)</h3><ul>\n<li>mac<pre><code class=\"shell\">#!/bin/sh\n# reset jetbrains ide evals\n</code></pre>\n</li>\n</ul>\n<p>OS_NAME=$(uname -s)<br>JB_PRODUCTS=”IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode”</p>\n<p>if [ $OS_NAME == “Darwin” ]; then<br>    echo ‘macOS:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/Library/Preferences/$&#123;PRD&#125;*/eval\n    rm -rf ~/Library/Application\\ Support/JetBrains/$&#123;PRD&#125;*/eval\ndone</code></pre>\n<p>elif [ $OS_NAME == “Linux” ]; then<br>    echo ‘Linux:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/.$&#123;PRD&#125;*/config/eval\ndone</code></pre>\n<p>else<br>    echo ‘unsupport’<br>    exit<br>fi</p>\n<p>echo ‘done.’</p>\n<pre><code>\n- windows\n```shell script\nSet oShell = CreateObject(&quot;WScript.Shell&quot;)\nSet oFS = CreateObject(&quot;Scripting.FileSystemObject&quot;)\nsHomeFolder = oShell.ExpandEnvironmentStrings(&quot;%USERPROFILE%&quot;)\nsJBDataFolder = oShell.ExpandEnvironmentStrings(&quot;%APPDATA%&quot;) + &quot;\\JetBrains&quot;\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = &quot;\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*&quot;\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n    bMatch = re.Test(file.Name)\n    If Not bMatch Then\n        Exit Sub\n    End If\n\n    If oFS.FolderExists(sEvalPath) Then\n        oFS.DeleteFolder sEvalPath, True \n    End If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n    For Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n        removeEval oFile, sHomeFolder + &quot;\\&quot; + oFile.Name + &quot;\\config\\eval&quot;\n    Next\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n    For Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n        removeEval oFile, sJBDataFolder + &quot;\\&quot; + oFile.Name + &quot;\\eval&quot;\n    Next\nEnd If\n\nMsgBox &quot;done&quot;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"idea无限试用-2020-1-4可用，其他不知道\"><a href=\"#idea无限试用-2020-1-4可用，其他不知道\" class=\"headerlink\" title=\"idea无限试用(2020.1.4可用，其他不知道)\"></a>idea无限试用(2020.1.4可用，其他不知道)</h3><ul>\n<li>mac<pre><code class=\"shell\">#!/bin/sh\n# reset jetbrains ide evals\n</code></pre>\n</li>\n</ul>\n<p>OS_NAME=$(uname -s)<br>JB_PRODUCTS=”IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode”</p>\n<p>if [ $OS_NAME == “Darwin” ]; then<br>    echo ‘macOS:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/Library/Preferences/$&#123;PRD&#125;*/eval\n    rm -rf ~/Library/Application\\ Support/JetBrains/$&#123;PRD&#125;*/eval\ndone</code></pre>\n<p>elif [ $OS_NAME == “Linux” ]; then<br>    echo ‘Linux:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/.$&#123;PRD&#125;*/config/eval\ndone</code></pre>\n<p>else<br>    echo ‘unsupport’<br>    exit<br>fi</p>\n<p>echo ‘done.’</p>\n<pre><code>\n- windows\n```shell script\nSet oShell = CreateObject(&quot;WScript.Shell&quot;)\nSet oFS = CreateObject(&quot;Scripting.FileSystemObject&quot;)\nsHomeFolder = oShell.ExpandEnvironmentStrings(&quot;%USERPROFILE%&quot;)\nsJBDataFolder = oShell.ExpandEnvironmentStrings(&quot;%APPDATA%&quot;) + &quot;\\JetBrains&quot;\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = &quot;\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*&quot;\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n    bMatch = re.Test(file.Name)\n    If Not bMatch Then\n        Exit Sub\n    End If\n\n    If oFS.FolderExists(sEvalPath) Then\n        oFS.DeleteFolder sEvalPath, True \n    End If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n    For Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n        removeEval oFile, sHomeFolder + &quot;\\&quot; + oFile.Name + &quot;\\config\\eval&quot;\n    Next\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n    For Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n        removeEval oFile, sJBDataFolder + &quot;\\&quot; + oFile.Name + &quot;\\eval&quot;\n    Next\nEnd If\n\nMsgBox &quot;done&quot;</code></pre>\n"},{"title":"Java","description":"java基础","date":"2021-09-06T06:13:08.000Z","_content":"\n\n### Java\n- [jdk9-jdk16(转)](https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&mid=2247522266&idx=1&sn=2bf8c094a4e80e91366d2db7493f1fd0&chksm=ce0e2059f979a94f4725f35155e11d95d6d187b1079462ee5835598ef557b772946d49e03cce&scene=132#wechat_redirect)\n","source":"_drafts/java.md","raw":"---\ntitle: Java\ndescription: java基础\ndate: 2021-09-06 14:13:08\ntags:\n- java\ncategories:\n- 后端\n- java\n---\n\n\n### Java\n- [jdk9-jdk16(转)](https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&mid=2247522266&idx=1&sn=2bf8c094a4e80e91366d2db7493f1fd0&chksm=ce0e2059f979a94f4725f35155e11d95d6d187b1079462ee5835598ef557b772946d49e03cce&scene=132#wechat_redirect)\n","slug":"java","published":0,"updated":"2021-09-06T06:13:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxk0001jrnvaw4vfx61","content":"<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&mid=2247522266&idx=1&sn=2bf8c094a4e80e91366d2db7493f1fd0&chksm=ce0e2059f979a94f4725f35155e11d95d6d187b1079462ee5835598ef557b772946d49e03cce&scene=132#wechat_redirect\">jdk9-jdk16(转)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&mid=2247522266&idx=1&sn=2bf8c094a4e80e91366d2db7493f1fd0&chksm=ce0e2059f979a94f4725f35155e11d95d6d187b1079462ee5835598ef557b772946d49e03cce&scene=132#wechat_redirect\">jdk9-jdk16(转)</a></li>\n</ul>\n"},{"title":"SpringBoot多数据源","date":"2021-08-17T08:58:00.000Z","_content":"\n- [SpringBoot多数据源(转)](https://www.jianshu.com/p/b2f818b742a2)\n\n### 核心类\n- DynamicDataSource\n","source":"_drafts/mybatis.md","raw":"---\ntitle: SpringBoot多数据源\ndate: 2021-08-17 16:58:00\ntags:\n- 多数据源\ncategories:\n- 后端\n- 框架\n---\n\n- [SpringBoot多数据源(转)](https://www.jianshu.com/p/b2f818b742a2)\n\n### 核心类\n- DynamicDataSource\n","slug":"mybatis","published":0,"updated":"2021-08-19T01:36:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxl0002jrnv9n5x955v","content":"<ul>\n<li><a href=\"https://www.jianshu.com/p/b2f818b742a2\">SpringBoot多数据源(转)</a></li>\n</ul>\n<h3 id=\"核心类\"><a href=\"#核心类\" class=\"headerlink\" title=\"核心类\"></a>核心类</h3><ul>\n<li>DynamicDataSource</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://www.jianshu.com/p/b2f818b742a2\">SpringBoot多数据源(转)</a></li>\n</ul>\n<h3 id=\"核心类\"><a href=\"#核心类\" class=\"headerlink\" title=\"核心类\"></a>核心类</h3><ul>\n<li>DynamicDataSource</li>\n</ul>\n"},{"title":"Oauth2","description":"鉴权框架","date":"2020-11-08T02:37:12.000Z","_content":"\n### 安全框架\n- [SpringSecurity](https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security)\n- [Oauth2](https://oauth.net/2/)\n- [LDAP](http://www.ldap.org.cn/)\n\n### 自定义获取token逻辑\n- 添加配置\n```textmate\n在自定义AuthorizationServerConfigurerAdapter的继承类中，添加配置\nendpoints.pathMapping(\"/oauth/token\", \"/my/login\");\n```\n- Controller\n```java\nclass UserController{\n    /**\n     * 只有映射的接口，security框架才会将principal信息填充进去\n     * parameters: 生成token所需的入参; \n     * principal: 安全框架所需用户信息\n     */\n    @ApiOperation(value = \"获取token接口\", notes = \"用于获取token接口\")\n    @PostMapping(value = \"/my/login\")\n    public Result<LoginReslut> login(@RequestParam Map<String, String> parameters,\n                                Principal principal){\n        return xxx;\n    }\n}\n```\n","source":"_drafts/oauth2.md","raw":"---\ntitle: Oauth2\ndescription: 鉴权框架 \ndate: 2020-11-08 10:37:12\ntags:\n- oauth2\ncategories:\n- 后端\n- 安全\n---\n\n### 安全框架\n- [SpringSecurity](https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security)\n- [Oauth2](https://oauth.net/2/)\n- [LDAP](http://www.ldap.org.cn/)\n\n### 自定义获取token逻辑\n- 添加配置\n```textmate\n在自定义AuthorizationServerConfigurerAdapter的继承类中，添加配置\nendpoints.pathMapping(\"/oauth/token\", \"/my/login\");\n```\n- Controller\n```java\nclass UserController{\n    /**\n     * 只有映射的接口，security框架才会将principal信息填充进去\n     * parameters: 生成token所需的入参; \n     * principal: 安全框架所需用户信息\n     */\n    @ApiOperation(value = \"获取token接口\", notes = \"用于获取token接口\")\n    @PostMapping(value = \"/my/login\")\n    public Result<LoginReslut> login(@RequestParam Map<String, String> parameters,\n                                Principal principal){\n        return xxx;\n    }\n}\n```\n","slug":"oauth2","published":0,"updated":"2021-07-22T06:51:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxm0005jrnvht5cgha2","content":"<h3 id=\"安全框架\"><a href=\"#安全框架\" class=\"headerlink\" title=\"安全框架\"></a>安全框架</h3><ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security\">SpringSecurity</a></li>\n<li><a href=\"https://oauth.net/2/\">Oauth2</a></li>\n<li><a href=\"http://www.ldap.org.cn/\">LDAP</a></li>\n</ul>\n<h3 id=\"自定义获取token逻辑\"><a href=\"#自定义获取token逻辑\" class=\"headerlink\" title=\"自定义获取token逻辑\"></a>自定义获取token逻辑</h3><ul>\n<li>添加配置<pre><code class=\"textmate\">在自定义AuthorizationServerConfigurerAdapter的继承类中，添加配置\nendpoints.pathMapping(&quot;/oauth/token&quot;, &quot;/my/login&quot;);</code></pre>\n</li>\n<li>Controller<pre><code class=\"java\">class UserController&#123;\n  /**\n   * 只有映射的接口，security框架才会将principal信息填充进去\n   * parameters: 生成token所需的入参; \n   * principal: 安全框架所需用户信息\n   */\n  @ApiOperation(value = &quot;获取token接口&quot;, notes = &quot;用于获取token接口&quot;)\n  @PostMapping(value = &quot;/my/login&quot;)\n  public Result&lt;LoginReslut&gt; login(@RequestParam Map&lt;String, String&gt; parameters,\n                              Principal principal)&#123;\n      return xxx;\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安全框架\"><a href=\"#安全框架\" class=\"headerlink\" title=\"安全框架\"></a>安全框架</h3><ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security\">SpringSecurity</a></li>\n<li><a href=\"https://oauth.net/2/\">Oauth2</a></li>\n<li><a href=\"http://www.ldap.org.cn/\">LDAP</a></li>\n</ul>\n<h3 id=\"自定义获取token逻辑\"><a href=\"#自定义获取token逻辑\" class=\"headerlink\" title=\"自定义获取token逻辑\"></a>自定义获取token逻辑</h3><ul>\n<li>添加配置<pre><code class=\"textmate\">在自定义AuthorizationServerConfigurerAdapter的继承类中，添加配置\nendpoints.pathMapping(&quot;/oauth/token&quot;, &quot;/my/login&quot;);</code></pre>\n</li>\n<li>Controller<pre><code class=\"java\">class UserController&#123;\n  /**\n   * 只有映射的接口，security框架才会将principal信息填充进去\n   * parameters: 生成token所需的入参; \n   * principal: 安全框架所需用户信息\n   */\n  @ApiOperation(value = &quot;获取token接口&quot;, notes = &quot;用于获取token接口&quot;)\n  @PostMapping(value = &quot;/my/login&quot;)\n  public Result&lt;LoginReslut&gt; login(@RequestParam Map&lt;String, String&gt; parameters,\n                              Principal principal)&#123;\n      return xxx;\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n"},{"_content":"## 用户系统设计\n### RBAC 和 ABAC的优势及劣势\n- [相关链接](https://mp.weixin.qq.com/s/bG_7bIIO7NUNC1j0fP1TGQ)\n```textmate\n我们在前面文章中说过，RBAC在应对复杂场景的时候会显得很吃力，但是它有没有好处呢？答案是当然有，它的好处显而易见就是简单且容易理解，我们很容易想象，一般不是开发者的这种用户创建一个角色是多么的容易，但是你如果让他去写一个策略的json，那他怕是要骂娘，因为一般人根本都不知道json是干嘛的，所以就更不可能会写json。\n\nABAC的优点就是RBAC的缺点，它可以胜任在复杂场景下的鉴权工作，但是不知道读者们注意到了上面的json中没有菜单信息 这一点了没，往具体的说就是如果你的系统使用的是个很纯粹的ABAC权限模型，那么，你的系统是不具备管控用户可以渲染的菜单的能力的，这时候肯定有人说，我可以通过一个人的所绑定的策略（ABAC中policy一般都是分配给人的）计算出他能访问的所有API然后去渲染API所绑定的菜单呀，这个想法其实是大错特错的，一方面，因为policy中有的条件是动态的，比如时间，如果纯粹靠计算来的话，那么这一刻和下一刻看到的菜单很有可能是不一样的（因为时间可能也是一种条件），另一方面就是，API和菜单往往不是一一对应关系，也就是说，API上面可能绑定了多个菜单，这时候就会有粒度的问题。\n```\n","source":"_drafts/user.md","raw":"## 用户系统设计\n### RBAC 和 ABAC的优势及劣势\n- [相关链接](https://mp.weixin.qq.com/s/bG_7bIIO7NUNC1j0fP1TGQ)\n```textmate\n我们在前面文章中说过，RBAC在应对复杂场景的时候会显得很吃力，但是它有没有好处呢？答案是当然有，它的好处显而易见就是简单且容易理解，我们很容易想象，一般不是开发者的这种用户创建一个角色是多么的容易，但是你如果让他去写一个策略的json，那他怕是要骂娘，因为一般人根本都不知道json是干嘛的，所以就更不可能会写json。\n\nABAC的优点就是RBAC的缺点，它可以胜任在复杂场景下的鉴权工作，但是不知道读者们注意到了上面的json中没有菜单信息 这一点了没，往具体的说就是如果你的系统使用的是个很纯粹的ABAC权限模型，那么，你的系统是不具备管控用户可以渲染的菜单的能力的，这时候肯定有人说，我可以通过一个人的所绑定的策略（ABAC中policy一般都是分配给人的）计算出他能访问的所有API然后去渲染API所绑定的菜单呀，这个想法其实是大错特错的，一方面，因为policy中有的条件是动态的，比如时间，如果纯粹靠计算来的话，那么这一刻和下一刻看到的菜单很有可能是不一样的（因为时间可能也是一种条件），另一方面就是，API和菜单往往不是一一对应关系，也就是说，API上面可能绑定了多个菜单，这时候就会有粒度的问题。\n```\n","slug":"user","published":0,"date":"2021-09-07T06:28:13.000Z","updated":"2021-09-07T06:28:13.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxn0006jrnvcqyxcp41","content":"<h2 id=\"用户系统设计\"><a href=\"#用户系统设计\" class=\"headerlink\" title=\"用户系统设计\"></a>用户系统设计</h2><h3 id=\"RBAC-和-ABAC的优势及劣势\"><a href=\"#RBAC-和-ABAC的优势及劣势\" class=\"headerlink\" title=\"RBAC 和 ABAC的优势及劣势\"></a>RBAC 和 ABAC的优势及劣势</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/bG_7bIIO7NUNC1j0fP1TGQ\">相关链接</a><pre><code class=\"textmate\">我们在前面文章中说过，RBAC在应对复杂场景的时候会显得很吃力，但是它有没有好处呢？答案是当然有，它的好处显而易见就是简单且容易理解，我们很容易想象，一般不是开发者的这种用户创建一个角色是多么的容易，但是你如果让他去写一个策略的json，那他怕是要骂娘，因为一般人根本都不知道json是干嘛的，所以就更不可能会写json。\n</code></pre>\n</li>\n</ul>\n<p>ABAC的优点就是RBAC的缺点，它可以胜任在复杂场景下的鉴权工作，但是不知道读者们注意到了上面的json中没有菜单信息 这一点了没，往具体的说就是如果你的系统使用的是个很纯粹的ABAC权限模型，那么，你的系统是不具备管控用户可以渲染的菜单的能力的，这时候肯定有人说，我可以通过一个人的所绑定的策略（ABAC中policy一般都是分配给人的）计算出他能访问的所有API然后去渲染API所绑定的菜单呀，这个想法其实是大错特错的，一方面，因为policy中有的条件是动态的，比如时间，如果纯粹靠计算来的话，那么这一刻和下一刻看到的菜单很有可能是不一样的（因为时间可能也是一种条件），另一方面就是，API和菜单往往不是一一对应关系，也就是说，API上面可能绑定了多个菜单，这时候就会有粒度的问题。</p>\n<pre><code></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用户系统设计\"><a href=\"#用户系统设计\" class=\"headerlink\" title=\"用户系统设计\"></a>用户系统设计</h2><h3 id=\"RBAC-和-ABAC的优势及劣势\"><a href=\"#RBAC-和-ABAC的优势及劣势\" class=\"headerlink\" title=\"RBAC 和 ABAC的优势及劣势\"></a>RBAC 和 ABAC的优势及劣势</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/bG_7bIIO7NUNC1j0fP1TGQ\">相关链接</a><pre><code class=\"textmate\">我们在前面文章中说过，RBAC在应对复杂场景的时候会显得很吃力，但是它有没有好处呢？答案是当然有，它的好处显而易见就是简单且容易理解，我们很容易想象，一般不是开发者的这种用户创建一个角色是多么的容易，但是你如果让他去写一个策略的json，那他怕是要骂娘，因为一般人根本都不知道json是干嘛的，所以就更不可能会写json。\n</code></pre>\n</li>\n</ul>\n<p>ABAC的优点就是RBAC的缺点，它可以胜任在复杂场景下的鉴权工作，但是不知道读者们注意到了上面的json中没有菜单信息 这一点了没，往具体的说就是如果你的系统使用的是个很纯粹的ABAC权限模型，那么，你的系统是不具备管控用户可以渲染的菜单的能力的，这时候肯定有人说，我可以通过一个人的所绑定的策略（ABAC中policy一般都是分配给人的）计算出他能访问的所有API然后去渲染API所绑定的菜单呀，这个想法其实是大错特错的，一方面，因为policy中有的条件是动态的，比如时间，如果纯粹靠计算来的话，那么这一刻和下一刻看到的菜单很有可能是不一样的（因为时间可能也是一种条件），另一方面就是，API和菜单往往不是一一对应关系，也就是说，API上面可能绑定了多个菜单，这时候就会有粒度的问题。</p>\n<pre><code></code></pre>\n"},{"title":"阅读","description":"思考 阅读","date":"2022-01-13T06:44:10.000Z","_content":"\n## 总结\n\n### 2022\n#### 目标\n[ ] 找到一份稳定收入的副业\n[ ] 坚持写文章\n[ ] 出去旅游一次\n[ ] 持续阅读\n[ ] 买车\n\n\n### 2021\n#### 目标\n[√] 考PMP\n[x] 找到一份稳定收入的副业\n[x] 开始写文章\n[x] 出去旅游一次\n[√] 养成读书的习惯(技术、职业规划、思考、理财)\n[√] 换一份工作\n\n#### 完成情况\n```textmate\n\t1.关于考证: 考PMP证一方面是为了看看自己是否有自制力，另一方面也是为了持续提升自己；通过学习掌握相关方法论，并\n    能提高自己在日常工作中的效率，提升整体项目组的主动性，促进项目成功；试试证明学习与实践中间还有比较大的差距，\n    还需不断学习、思考，将方法应用到具体项目中。\n    \n    2.关于副业: 找一份副业的念头一直有，更近一步是让副业收入能支撑自己日常开销和房贷。疫情持续太久，未来方向不明，\n    行业危机四伏，为了给自己一份保障；虽然接了一个月的私活少赚了点，但是过程真的是心累；复盘过自身的资源，基本没啥资源。。。。 \n    现在看貌似只有在知名网站上持续更新文章，看看有没有恰饭机会这样；过程中也学习了一些技能(PPT、简单视频剪辑)，\n    总体还是收获不小，虽然目标没达到，过程也是很好的\n\n    3.关于写文章: 更偏向记录,写文章是为了整理并记录自己学过的东西，好记性不如烂笔头，况且我的记忆力不是那么多好；除了经常用的东\n    西，其他知识点看完过一段时间就记忆就模糊了。为了不遗忘学过的东西，在学习过程中记录、摘要、总结一些东西沉淀下来，空闲了翻翻看看，强化记忆。\n    日积月累，感觉自己也要成为一个大牛了呢(终极目标)\n    \n    4.工作到现在，真正算的上旅游的次数一只手就能数得过来；有时间就想去其他地方看看，看看沿途的风景、看看\n    当地的景色，给人生中留下一点不一样的记忆；原本打算一年至少出去一次吧，结果疫情反反复复，再加上各种事情，一拖再拖，结果一年过去了。。。 \n    明年一定要完成这个目标！！！\n    \n    5.关于读书: 约长大约觉得读书的重要性，相当于高手们把他们的大招和毕生绝学都告诉你了，你却视而不见，还\n    抱怨说这一路打怪升级咋这么难(个人观点)；我不限制自己读书的方向，觉得有兴趣就读，兴趣不大的慢慢读，没兴趣但是有用硬着头皮读；\n    读书为了提升技能、提高思考高度和深度、为了让能更加看清人生、生活、资本的本质\n    \n    6.关于换工作: 如果干的开心、工资还不错的话，一般没有人想频繁的换工作吧？我很想在一个公司能长时间待下去，但总是因为各种原因不得不换工作；\n    虽然这份工作也不是那么的忙，还能每天和媳妇一起上下班(开心);无奈公司业务没啥起色，为了生计不想坐以待毙。从直属领导离职后就开始准备，\n    陆陆续续3-4个月面试了估计有十几家吧，公司有大有小，最心意的是某物，结果二面后没信了；后来同事介绍了个公司，综合看还不错就入职了，现在总体感受还不错\n\n\t总之大目标就是健康、快乐的活着，顺便挣点钱养家\n\n```\n\n","source":"_drafts/year-end.md","raw":"---\ntitle: 阅读\ndescription: 思考 阅读\ndate: 2022-01-13 14:44:10\ntags:\n- 总结\ncategories:\n- 思考\n---\n\n## 总结\n\n### 2022\n#### 目标\n[ ] 找到一份稳定收入的副业\n[ ] 坚持写文章\n[ ] 出去旅游一次\n[ ] 持续阅读\n[ ] 买车\n\n\n### 2021\n#### 目标\n[√] 考PMP\n[x] 找到一份稳定收入的副业\n[x] 开始写文章\n[x] 出去旅游一次\n[√] 养成读书的习惯(技术、职业规划、思考、理财)\n[√] 换一份工作\n\n#### 完成情况\n```textmate\n\t1.关于考证: 考PMP证一方面是为了看看自己是否有自制力，另一方面也是为了持续提升自己；通过学习掌握相关方法论，并\n    能提高自己在日常工作中的效率，提升整体项目组的主动性，促进项目成功；试试证明学习与实践中间还有比较大的差距，\n    还需不断学习、思考，将方法应用到具体项目中。\n    \n    2.关于副业: 找一份副业的念头一直有，更近一步是让副业收入能支撑自己日常开销和房贷。疫情持续太久，未来方向不明，\n    行业危机四伏，为了给自己一份保障；虽然接了一个月的私活少赚了点，但是过程真的是心累；复盘过自身的资源，基本没啥资源。。。。 \n    现在看貌似只有在知名网站上持续更新文章，看看有没有恰饭机会这样；过程中也学习了一些技能(PPT、简单视频剪辑)，\n    总体还是收获不小，虽然目标没达到，过程也是很好的\n\n    3.关于写文章: 更偏向记录,写文章是为了整理并记录自己学过的东西，好记性不如烂笔头，况且我的记忆力不是那么多好；除了经常用的东\n    西，其他知识点看完过一段时间就记忆就模糊了。为了不遗忘学过的东西，在学习过程中记录、摘要、总结一些东西沉淀下来，空闲了翻翻看看，强化记忆。\n    日积月累，感觉自己也要成为一个大牛了呢(终极目标)\n    \n    4.工作到现在，真正算的上旅游的次数一只手就能数得过来；有时间就想去其他地方看看，看看沿途的风景、看看\n    当地的景色，给人生中留下一点不一样的记忆；原本打算一年至少出去一次吧，结果疫情反反复复，再加上各种事情，一拖再拖，结果一年过去了。。。 \n    明年一定要完成这个目标！！！\n    \n    5.关于读书: 约长大约觉得读书的重要性，相当于高手们把他们的大招和毕生绝学都告诉你了，你却视而不见，还\n    抱怨说这一路打怪升级咋这么难(个人观点)；我不限制自己读书的方向，觉得有兴趣就读，兴趣不大的慢慢读，没兴趣但是有用硬着头皮读；\n    读书为了提升技能、提高思考高度和深度、为了让能更加看清人生、生活、资本的本质\n    \n    6.关于换工作: 如果干的开心、工资还不错的话，一般没有人想频繁的换工作吧？我很想在一个公司能长时间待下去，但总是因为各种原因不得不换工作；\n    虽然这份工作也不是那么的忙，还能每天和媳妇一起上下班(开心);无奈公司业务没啥起色，为了生计不想坐以待毙。从直属领导离职后就开始准备，\n    陆陆续续3-4个月面试了估计有十几家吧，公司有大有小，最心意的是某物，结果二面后没信了；后来同事介绍了个公司，综合看还不错就入职了，现在总体感受还不错\n\n\t总之大目标就是健康、快乐的活着，顺便挣点钱养家\n\n```\n\n","slug":"year-end","published":0,"updated":"2022-01-13T08:56:08.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxn0007jrnv3xfu5msn","content":"<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"2022\"><a href=\"#2022\" class=\"headerlink\" title=\"2022\"></a>2022</h3><h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>[ ] 找到一份稳定收入的副业<br>[ ] 坚持写文章<br>[ ] 出去旅游一次<br>[ ] 持续阅读<br>[ ] 买车</p>\n<h3 id=\"2021\"><a href=\"#2021\" class=\"headerlink\" title=\"2021\"></a>2021</h3><h4 id=\"目标-1\"><a href=\"#目标-1\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>[√] 考PMP<br>[x] 找到一份稳定收入的副业<br>[x] 开始写文章<br>[x] 出去旅游一次<br>[√] 养成读书的习惯(技术、职业规划、思考、理财)<br>[√] 换一份工作</p>\n<h4 id=\"完成情况\"><a href=\"#完成情况\" class=\"headerlink\" title=\"完成情况\"></a>完成情况</h4><pre><code class=\"textmate\">    1.关于考证: 考PMP证一方面是为了看看自己是否有自制力，另一方面也是为了持续提升自己；通过学习掌握相关方法论，并\n    能提高自己在日常工作中的效率，提升整体项目组的主动性，促进项目成功；试试证明学习与实践中间还有比较大的差距，\n    还需不断学习、思考，将方法应用到具体项目中。\n\n    2.关于副业: 找一份副业的念头一直有，更近一步是让副业收入能支撑自己日常开销和房贷。疫情持续太久，未来方向不明，\n    行业危机四伏，为了给自己一份保障；虽然接了一个月的私活少赚了点，但是过程真的是心累；复盘过自身的资源，基本没啥资源。。。。 \n    现在看貌似只有在知名网站上持续更新文章，看看有没有恰饭机会这样；过程中也学习了一些技能(PPT、简单视频剪辑)，\n    总体还是收获不小，虽然目标没达到，过程也是很好的\n\n    3.关于写文章: 更偏向记录,写文章是为了整理并记录自己学过的东西，好记性不如烂笔头，况且我的记忆力不是那么多好；除了经常用的东\n    西，其他知识点看完过一段时间就记忆就模糊了。为了不遗忘学过的东西，在学习过程中记录、摘要、总结一些东西沉淀下来，空闲了翻翻看看，强化记忆。\n    日积月累，感觉自己也要成为一个大牛了呢(终极目标)\n\n    4.工作到现在，真正算的上旅游的次数一只手就能数得过来；有时间就想去其他地方看看，看看沿途的风景、看看\n    当地的景色，给人生中留下一点不一样的记忆；原本打算一年至少出去一次吧，结果疫情反反复复，再加上各种事情，一拖再拖，结果一年过去了。。。 \n    明年一定要完成这个目标！！！\n\n    5.关于读书: 约长大约觉得读书的重要性，相当于高手们把他们的大招和毕生绝学都告诉你了，你却视而不见，还\n    抱怨说这一路打怪升级咋这么难(个人观点)；我不限制自己读书的方向，觉得有兴趣就读，兴趣不大的慢慢读，没兴趣但是有用硬着头皮读；\n    读书为了提升技能、提高思考高度和深度、为了让能更加看清人生、生活、资本的本质\n\n    6.关于换工作: 如果干的开心、工资还不错的话，一般没有人想频繁的换工作吧？我很想在一个公司能长时间待下去，但总是因为各种原因不得不换工作；\n    虽然这份工作也不是那么的忙，还能每天和媳妇一起上下班(开心);无奈公司业务没啥起色，为了生计不想坐以待毙。从直属领导离职后就开始准备，\n    陆陆续续3-4个月面试了估计有十几家吧，公司有大有小，最心意的是某物，结果二面后没信了；后来同事介绍了个公司，综合看还不错就入职了，现在总体感受还不错\n\n    总之大目标就是健康、快乐的活着，顺便挣点钱养家\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"2022\"><a href=\"#2022\" class=\"headerlink\" title=\"2022\"></a>2022</h3><h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>[ ] 找到一份稳定收入的副业<br>[ ] 坚持写文章<br>[ ] 出去旅游一次<br>[ ] 持续阅读<br>[ ] 买车</p>\n<h3 id=\"2021\"><a href=\"#2021\" class=\"headerlink\" title=\"2021\"></a>2021</h3><h4 id=\"目标-1\"><a href=\"#目标-1\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>[√] 考PMP<br>[x] 找到一份稳定收入的副业<br>[x] 开始写文章<br>[x] 出去旅游一次<br>[√] 养成读书的习惯(技术、职业规划、思考、理财)<br>[√] 换一份工作</p>\n<h4 id=\"完成情况\"><a href=\"#完成情况\" class=\"headerlink\" title=\"完成情况\"></a>完成情况</h4><pre><code class=\"textmate\">    1.关于考证: 考PMP证一方面是为了看看自己是否有自制力，另一方面也是为了持续提升自己；通过学习掌握相关方法论，并\n    能提高自己在日常工作中的效率，提升整体项目组的主动性，促进项目成功；试试证明学习与实践中间还有比较大的差距，\n    还需不断学习、思考，将方法应用到具体项目中。\n\n    2.关于副业: 找一份副业的念头一直有，更近一步是让副业收入能支撑自己日常开销和房贷。疫情持续太久，未来方向不明，\n    行业危机四伏，为了给自己一份保障；虽然接了一个月的私活少赚了点，但是过程真的是心累；复盘过自身的资源，基本没啥资源。。。。 \n    现在看貌似只有在知名网站上持续更新文章，看看有没有恰饭机会这样；过程中也学习了一些技能(PPT、简单视频剪辑)，\n    总体还是收获不小，虽然目标没达到，过程也是很好的\n\n    3.关于写文章: 更偏向记录,写文章是为了整理并记录自己学过的东西，好记性不如烂笔头，况且我的记忆力不是那么多好；除了经常用的东\n    西，其他知识点看完过一段时间就记忆就模糊了。为了不遗忘学过的东西，在学习过程中记录、摘要、总结一些东西沉淀下来，空闲了翻翻看看，强化记忆。\n    日积月累，感觉自己也要成为一个大牛了呢(终极目标)\n\n    4.工作到现在，真正算的上旅游的次数一只手就能数得过来；有时间就想去其他地方看看，看看沿途的风景、看看\n    当地的景色，给人生中留下一点不一样的记忆；原本打算一年至少出去一次吧，结果疫情反反复复，再加上各种事情，一拖再拖，结果一年过去了。。。 \n    明年一定要完成这个目标！！！\n\n    5.关于读书: 约长大约觉得读书的重要性，相当于高手们把他们的大招和毕生绝学都告诉你了，你却视而不见，还\n    抱怨说这一路打怪升级咋这么难(个人观点)；我不限制自己读书的方向，觉得有兴趣就读，兴趣不大的慢慢读，没兴趣但是有用硬着头皮读；\n    读书为了提升技能、提高思考高度和深度、为了让能更加看清人生、生活、资本的本质\n\n    6.关于换工作: 如果干的开心、工资还不错的话，一般没有人想频繁的换工作吧？我很想在一个公司能长时间待下去，但总是因为各种原因不得不换工作；\n    虽然这份工作也不是那么的忙，还能每天和媳妇一起上下班(开心);无奈公司业务没啥起色，为了生计不想坐以待毙。从直属领导离职后就开始准备，\n    陆陆续续3-4个月面试了估计有十几家吧，公司有大有小，最心意的是某物，结果二面后没信了；后来同事介绍了个公司，综合看还不错就入职了，现在总体感受还不错\n\n    总之大目标就是健康、快乐的活着，顺便挣点钱养家\n</code></pre>\n"},{"title":"vue","description":"vue","date":"2021-04-28T03:44:02.000Z","_content":"\n### vue+es6接入Echarts\n#### 1.安装\n```shell\n# echars\nnpm install echarts --save\n```\n\n#### 2.实现图表下钻及还原demo\n```textmate\n<template>\n    <div style=\"display: inline-block\" v-show=\"optionShow\" >\n        <div id=\"option\" :style=\"{width: '800px', height: '600px'}\"></div>\n    </div>\n\n    <div style=\"display: inline-block\" v-show=\"optionSecondShow\" >\n        <div id=\"secondOption\" :style=\"{width: '800px', height: '600px'}\"></div>\n    </div>\n</template>\n\n<script>\n    import * as echarts from 'echarts';\n    export default {\n        name: 'dashboard',\n        data() {\n            return {\n                optionShow: true,\n                // echarts报表\n                option: {},\n                optionSecond: {},\n            }\n        },\n        created(){\n        },\n        mounted(){\n            //调用method中方法！！！\n            let that = this;\n\n            //渲染报表一\n            let myChart = echarts.init(document.getElementById('option'))\n            that.initEcharts();\n            myChart.setOption(that.option);\n\n            //报表二\n            let myChartSecond = echarts.init(document.getElementById('secondOption'))\n            //图表一下钻\n            myChart.on('click', function (params) {\n                console.log(params.name,params.value,params.seriesName);\n\n                //重置值\n                that.secondShowFun()\n                myChartSecond.setOption(that.optionSecond)\n            });\n\n            //点击图表二还原数据\n            myChartSecond.getZr().on('click', function (event) {\n                if (!event.target) {\n                    that.initEcharts();\n                    myChart.setOption(that.option)\n                }\n            });\n\n            //点击图表二下钻\n            myChartSecond.on('click', function (params) {\n                console.log(params.name,params.value,params.seriesName);\n\n                //展示列表\n                that.showTabFun()\n            });\n\n        },\n        methods: {\n            initEcharts(){\n                this.optionShow = true;\n                this.optionSecondShow = false;\n                this.tableShow = false;\n                this.option = {\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {            // Use axis to trigger tooltip\n                            type: 'shadow'        // 'shadow' as default; can also be 'line' or 'shadow'\n                        }\n                    },\n                    legend: {\n                        data: ['项目一', '项目二', '项目三']\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    xAxis: {\n                        type: 'value'\n                    },\n                    yAxis: {\n                        type: 'category',\n                        data: ['user-center', 'user-auth', 'uaa-gateway', 'crm', 'ims', 'fms', 'cloud-gateway']\n                    },\n                    series: [\n                        {\n                            name: '项目一',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true,\n                                valueAnimation: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [320, 302, 301, 334, 390, 330, 320]\n                        },\n                        {\n                            name: '项目二',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true,\n                                valueAnimation: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [120, 132, 101, 134, 90, 230, 210]\n                        },\n                        {\n                            name: '项目三',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true,\n                                valueAnimation: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [220, 182, 191, 234, 290, 330, 310]\n                        }\n                    ],\n                };\n            },\n            secondShowFun(){\n                this.optionShow = false;\n                this.optionSecondShow = true;\n                this.optionSecond = {\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {            // Use axis to trigger tooltip\n                            type: 'shadow'        // 'shadow' as default; can also be 'line' or 'shadow'\n                        }\n                    },\n                    legend: {\n                        data: ['分类一','分类二','分类三']\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    xAxis: {\n                        type: 'value'\n                    },\n                    yAxis: {\n                        type: 'category',\n                        data: ['子项一', '子项二', '子项三']\n                    },\n                    series : [\n                        {\n                            name: '子项一',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [10,2,3]\n                        },\n                        {\n                            name: '子项二',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [1,3,4]\n                        },\n                        {\n                            name: '子项三',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [2,5,6]\n                        },\n                    ],\n                };\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .dashboard-editor-container {\n        padding: 32px;\n        background-color: rgb(240, 242, 245);\n        position: relative;\n\n    .chart-wrapper {\n        background: #fff;\n        padding: 16px 16px 0;\n        margin-bottom: 32px;\n    }\n    }\n\n    @media (max-width:1024px) {\n        .chart-wrapper {\n            padding: 8px;\n        }\n    }\n</style>\n```\n\n","source":"_posts/frontend/vue.md","raw":"---\ntitle: vue\ndescription: vue\n#top: 1\ndate: 2021-04-28 11:44:02\ntags:\n- vue\ncategories:\n- 前端\n---\n\n### vue+es6接入Echarts\n#### 1.安装\n```shell\n# echars\nnpm install echarts --save\n```\n\n#### 2.实现图表下钻及还原demo\n```textmate\n<template>\n    <div style=\"display: inline-block\" v-show=\"optionShow\" >\n        <div id=\"option\" :style=\"{width: '800px', height: '600px'}\"></div>\n    </div>\n\n    <div style=\"display: inline-block\" v-show=\"optionSecondShow\" >\n        <div id=\"secondOption\" :style=\"{width: '800px', height: '600px'}\"></div>\n    </div>\n</template>\n\n<script>\n    import * as echarts from 'echarts';\n    export default {\n        name: 'dashboard',\n        data() {\n            return {\n                optionShow: true,\n                // echarts报表\n                option: {},\n                optionSecond: {},\n            }\n        },\n        created(){\n        },\n        mounted(){\n            //调用method中方法！！！\n            let that = this;\n\n            //渲染报表一\n            let myChart = echarts.init(document.getElementById('option'))\n            that.initEcharts();\n            myChart.setOption(that.option);\n\n            //报表二\n            let myChartSecond = echarts.init(document.getElementById('secondOption'))\n            //图表一下钻\n            myChart.on('click', function (params) {\n                console.log(params.name,params.value,params.seriesName);\n\n                //重置值\n                that.secondShowFun()\n                myChartSecond.setOption(that.optionSecond)\n            });\n\n            //点击图表二还原数据\n            myChartSecond.getZr().on('click', function (event) {\n                if (!event.target) {\n                    that.initEcharts();\n                    myChart.setOption(that.option)\n                }\n            });\n\n            //点击图表二下钻\n            myChartSecond.on('click', function (params) {\n                console.log(params.name,params.value,params.seriesName);\n\n                //展示列表\n                that.showTabFun()\n            });\n\n        },\n        methods: {\n            initEcharts(){\n                this.optionShow = true;\n                this.optionSecondShow = false;\n                this.tableShow = false;\n                this.option = {\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {            // Use axis to trigger tooltip\n                            type: 'shadow'        // 'shadow' as default; can also be 'line' or 'shadow'\n                        }\n                    },\n                    legend: {\n                        data: ['项目一', '项目二', '项目三']\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    xAxis: {\n                        type: 'value'\n                    },\n                    yAxis: {\n                        type: 'category',\n                        data: ['user-center', 'user-auth', 'uaa-gateway', 'crm', 'ims', 'fms', 'cloud-gateway']\n                    },\n                    series: [\n                        {\n                            name: '项目一',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true,\n                                valueAnimation: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [320, 302, 301, 334, 390, 330, 320]\n                        },\n                        {\n                            name: '项目二',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true,\n                                valueAnimation: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [120, 132, 101, 134, 90, 230, 210]\n                        },\n                        {\n                            name: '项目三',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true,\n                                valueAnimation: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [220, 182, 191, 234, 290, 330, 310]\n                        }\n                    ],\n                };\n            },\n            secondShowFun(){\n                this.optionShow = false;\n                this.optionSecondShow = true;\n                this.optionSecond = {\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {            // Use axis to trigger tooltip\n                            type: 'shadow'        // 'shadow' as default; can also be 'line' or 'shadow'\n                        }\n                    },\n                    legend: {\n                        data: ['分类一','分类二','分类三']\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    xAxis: {\n                        type: 'value'\n                    },\n                    yAxis: {\n                        type: 'category',\n                        data: ['子项一', '子项二', '子项三']\n                    },\n                    series : [\n                        {\n                            name: '子项一',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [10,2,3]\n                        },\n                        {\n                            name: '子项二',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [1,3,4]\n                        },\n                        {\n                            name: '子项三',\n                            type: 'bar',\n                            stack: 'total',\n                            label: {\n                                show: true\n                            },\n                            emphasis: {\n                                focus: 'series'\n                            },\n                            data: [2,5,6]\n                        },\n                    ],\n                };\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .dashboard-editor-container {\n        padding: 32px;\n        background-color: rgb(240, 242, 245);\n        position: relative;\n\n    .chart-wrapper {\n        background: #fff;\n        padding: 16px 16px 0;\n        margin-bottom: 32px;\n    }\n    }\n\n    @media (max-width:1024px) {\n        .chart-wrapper {\n            padding: 8px;\n        }\n    }\n</style>\n```\n\n","slug":"frontend/vue","published":1,"updated":"2021-07-26T07:53:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxo000bjrnv4fq57h7x","content":"<h3 id=\"vue-es6接入Echarts\"><a href=\"#vue-es6接入Echarts\" class=\"headerlink\" title=\"vue+es6接入Echarts\"></a>vue+es6接入Echarts</h3><h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h4><pre><code class=\"shell\"># echars\nnpm install echarts --save</code></pre>\n<h4 id=\"2-实现图表下钻及还原demo\"><a href=\"#2-实现图表下钻及还原demo\" class=\"headerlink\" title=\"2.实现图表下钻及还原demo\"></a>2.实现图表下钻及还原demo</h4><pre><code class=\"textmate\">&lt;template&gt;\n    &lt;div style=&quot;display: inline-block&quot; v-show=&quot;optionShow&quot; &gt;\n        &lt;div id=&quot;option&quot; :style=&quot;&#123;width: &#39;800px&#39;, height: &#39;600px&#39;&#125;&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;display: inline-block&quot; v-show=&quot;optionSecondShow&quot; &gt;\n        &lt;div id=&quot;secondOption&quot; :style=&quot;&#123;width: &#39;800px&#39;, height: &#39;600px&#39;&#125;&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    import * as echarts from &#39;echarts&#39;;\n    export default &#123;\n        name: &#39;dashboard&#39;,\n        data() &#123;\n            return &#123;\n                optionShow: true,\n                // echarts报表\n                option: &#123;&#125;,\n                optionSecond: &#123;&#125;,\n            &#125;\n        &#125;,\n        created()&#123;\n        &#125;,\n        mounted()&#123;\n            //调用method中方法！！！\n            let that = this;\n\n            //渲染报表一\n            let myChart = echarts.init(document.getElementById(&#39;option&#39;))\n            that.initEcharts();\n            myChart.setOption(that.option);\n\n            //报表二\n            let myChartSecond = echarts.init(document.getElementById(&#39;secondOption&#39;))\n            //图表一下钻\n            myChart.on(&#39;click&#39;, function (params) &#123;\n                console.log(params.name,params.value,params.seriesName);\n\n                //重置值\n                that.secondShowFun()\n                myChartSecond.setOption(that.optionSecond)\n            &#125;);\n\n            //点击图表二还原数据\n            myChartSecond.getZr().on(&#39;click&#39;, function (event) &#123;\n                if (!event.target) &#123;\n                    that.initEcharts();\n                    myChart.setOption(that.option)\n                &#125;\n            &#125;);\n\n            //点击图表二下钻\n            myChartSecond.on(&#39;click&#39;, function (params) &#123;\n                console.log(params.name,params.value,params.seriesName);\n\n                //展示列表\n                that.showTabFun()\n            &#125;);\n\n        &#125;,\n        methods: &#123;\n            initEcharts()&#123;\n                this.optionShow = true;\n                this.optionSecondShow = false;\n                this.tableShow = false;\n                this.option = &#123;\n                    tooltip: &#123;\n                        trigger: &#39;axis&#39;,\n                        axisPointer: &#123;            // Use axis to trigger tooltip\n                            type: &#39;shadow&#39;        // &#39;shadow&#39; as default; can also be &#39;line&#39; or &#39;shadow&#39;\n                        &#125;\n                    &#125;,\n                    legend: &#123;\n                        data: [&#39;项目一&#39;, &#39;项目二&#39;, &#39;项目三&#39;]\n                    &#125;,\n                    grid: &#123;\n                        left: &#39;3%&#39;,\n                        right: &#39;4%&#39;,\n                        bottom: &#39;3%&#39;,\n                        containLabel: true\n                    &#125;,\n                    xAxis: &#123;\n                        type: &#39;value&#39;\n                    &#125;,\n                    yAxis: &#123;\n                        type: &#39;category&#39;,\n                        data: [&#39;user-center&#39;, &#39;user-auth&#39;, &#39;uaa-gateway&#39;, &#39;crm&#39;, &#39;ims&#39;, &#39;fms&#39;, &#39;cloud-gateway&#39;]\n                    &#125;,\n                    series: [\n                        &#123;\n                            name: &#39;项目一&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true,\n                                valueAnimation: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [320, 302, 301, 334, 390, 330, 320]\n                        &#125;,\n                        &#123;\n                            name: &#39;项目二&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true,\n                                valueAnimation: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [120, 132, 101, 134, 90, 230, 210]\n                        &#125;,\n                        &#123;\n                            name: &#39;项目三&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true,\n                                valueAnimation: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [220, 182, 191, 234, 290, 330, 310]\n                        &#125;\n                    ],\n                &#125;;\n            &#125;,\n            secondShowFun()&#123;\n                this.optionShow = false;\n                this.optionSecondShow = true;\n                this.optionSecond = &#123;\n                    tooltip: &#123;\n                        trigger: &#39;axis&#39;,\n                        axisPointer: &#123;            // Use axis to trigger tooltip\n                            type: &#39;shadow&#39;        // &#39;shadow&#39; as default; can also be &#39;line&#39; or &#39;shadow&#39;\n                        &#125;\n                    &#125;,\n                    legend: &#123;\n                        data: [&#39;分类一&#39;,&#39;分类二&#39;,&#39;分类三&#39;]\n                    &#125;,\n                    grid: &#123;\n                        left: &#39;3%&#39;,\n                        right: &#39;4%&#39;,\n                        bottom: &#39;3%&#39;,\n                        containLabel: true\n                    &#125;,\n                    xAxis: &#123;\n                        type: &#39;value&#39;\n                    &#125;,\n                    yAxis: &#123;\n                        type: &#39;category&#39;,\n                        data: [&#39;子项一&#39;, &#39;子项二&#39;, &#39;子项三&#39;]\n                    &#125;,\n                    series : [\n                        &#123;\n                            name: &#39;子项一&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [10,2,3]\n                        &#125;,\n                        &#123;\n                            name: &#39;子项二&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [1,3,4]\n                        &#125;,\n                        &#123;\n                            name: &#39;子项三&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [2,5,6]\n                        &#125;,\n                    ],\n                &#125;;\n            &#125;,\n        &#125;\n    &#125;\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n    .dashboard-editor-container &#123;\n        padding: 32px;\n        background-color: rgb(240, 242, 245);\n        position: relative;\n\n    .chart-wrapper &#123;\n        background: #fff;\n        padding: 16px 16px 0;\n        margin-bottom: 32px;\n    &#125;\n    &#125;\n\n    @media (max-width:1024px) &#123;\n        .chart-wrapper &#123;\n            padding: 8px;\n        &#125;\n    &#125;\n&lt;/style&gt;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vue-es6接入Echarts\"><a href=\"#vue-es6接入Echarts\" class=\"headerlink\" title=\"vue+es6接入Echarts\"></a>vue+es6接入Echarts</h3><h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h4><pre><code class=\"shell\"># echars\nnpm install echarts --save</code></pre>\n<h4 id=\"2-实现图表下钻及还原demo\"><a href=\"#2-实现图表下钻及还原demo\" class=\"headerlink\" title=\"2.实现图表下钻及还原demo\"></a>2.实现图表下钻及还原demo</h4><pre><code class=\"textmate\">&lt;template&gt;\n    &lt;div style=&quot;display: inline-block&quot; v-show=&quot;optionShow&quot; &gt;\n        &lt;div id=&quot;option&quot; :style=&quot;&#123;width: &#39;800px&#39;, height: &#39;600px&#39;&#125;&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;display: inline-block&quot; v-show=&quot;optionSecondShow&quot; &gt;\n        &lt;div id=&quot;secondOption&quot; :style=&quot;&#123;width: &#39;800px&#39;, height: &#39;600px&#39;&#125;&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    import * as echarts from &#39;echarts&#39;;\n    export default &#123;\n        name: &#39;dashboard&#39;,\n        data() &#123;\n            return &#123;\n                optionShow: true,\n                // echarts报表\n                option: &#123;&#125;,\n                optionSecond: &#123;&#125;,\n            &#125;\n        &#125;,\n        created()&#123;\n        &#125;,\n        mounted()&#123;\n            //调用method中方法！！！\n            let that = this;\n\n            //渲染报表一\n            let myChart = echarts.init(document.getElementById(&#39;option&#39;))\n            that.initEcharts();\n            myChart.setOption(that.option);\n\n            //报表二\n            let myChartSecond = echarts.init(document.getElementById(&#39;secondOption&#39;))\n            //图表一下钻\n            myChart.on(&#39;click&#39;, function (params) &#123;\n                console.log(params.name,params.value,params.seriesName);\n\n                //重置值\n                that.secondShowFun()\n                myChartSecond.setOption(that.optionSecond)\n            &#125;);\n\n            //点击图表二还原数据\n            myChartSecond.getZr().on(&#39;click&#39;, function (event) &#123;\n                if (!event.target) &#123;\n                    that.initEcharts();\n                    myChart.setOption(that.option)\n                &#125;\n            &#125;);\n\n            //点击图表二下钻\n            myChartSecond.on(&#39;click&#39;, function (params) &#123;\n                console.log(params.name,params.value,params.seriesName);\n\n                //展示列表\n                that.showTabFun()\n            &#125;);\n\n        &#125;,\n        methods: &#123;\n            initEcharts()&#123;\n                this.optionShow = true;\n                this.optionSecondShow = false;\n                this.tableShow = false;\n                this.option = &#123;\n                    tooltip: &#123;\n                        trigger: &#39;axis&#39;,\n                        axisPointer: &#123;            // Use axis to trigger tooltip\n                            type: &#39;shadow&#39;        // &#39;shadow&#39; as default; can also be &#39;line&#39; or &#39;shadow&#39;\n                        &#125;\n                    &#125;,\n                    legend: &#123;\n                        data: [&#39;项目一&#39;, &#39;项目二&#39;, &#39;项目三&#39;]\n                    &#125;,\n                    grid: &#123;\n                        left: &#39;3%&#39;,\n                        right: &#39;4%&#39;,\n                        bottom: &#39;3%&#39;,\n                        containLabel: true\n                    &#125;,\n                    xAxis: &#123;\n                        type: &#39;value&#39;\n                    &#125;,\n                    yAxis: &#123;\n                        type: &#39;category&#39;,\n                        data: [&#39;user-center&#39;, &#39;user-auth&#39;, &#39;uaa-gateway&#39;, &#39;crm&#39;, &#39;ims&#39;, &#39;fms&#39;, &#39;cloud-gateway&#39;]\n                    &#125;,\n                    series: [\n                        &#123;\n                            name: &#39;项目一&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true,\n                                valueAnimation: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [320, 302, 301, 334, 390, 330, 320]\n                        &#125;,\n                        &#123;\n                            name: &#39;项目二&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true,\n                                valueAnimation: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [120, 132, 101, 134, 90, 230, 210]\n                        &#125;,\n                        &#123;\n                            name: &#39;项目三&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true,\n                                valueAnimation: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [220, 182, 191, 234, 290, 330, 310]\n                        &#125;\n                    ],\n                &#125;;\n            &#125;,\n            secondShowFun()&#123;\n                this.optionShow = false;\n                this.optionSecondShow = true;\n                this.optionSecond = &#123;\n                    tooltip: &#123;\n                        trigger: &#39;axis&#39;,\n                        axisPointer: &#123;            // Use axis to trigger tooltip\n                            type: &#39;shadow&#39;        // &#39;shadow&#39; as default; can also be &#39;line&#39; or &#39;shadow&#39;\n                        &#125;\n                    &#125;,\n                    legend: &#123;\n                        data: [&#39;分类一&#39;,&#39;分类二&#39;,&#39;分类三&#39;]\n                    &#125;,\n                    grid: &#123;\n                        left: &#39;3%&#39;,\n                        right: &#39;4%&#39;,\n                        bottom: &#39;3%&#39;,\n                        containLabel: true\n                    &#125;,\n                    xAxis: &#123;\n                        type: &#39;value&#39;\n                    &#125;,\n                    yAxis: &#123;\n                        type: &#39;category&#39;,\n                        data: [&#39;子项一&#39;, &#39;子项二&#39;, &#39;子项三&#39;]\n                    &#125;,\n                    series : [\n                        &#123;\n                            name: &#39;子项一&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [10,2,3]\n                        &#125;,\n                        &#123;\n                            name: &#39;子项二&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [1,3,4]\n                        &#125;,\n                        &#123;\n                            name: &#39;子项三&#39;,\n                            type: &#39;bar&#39;,\n                            stack: &#39;total&#39;,\n                            label: &#123;\n                                show: true\n                            &#125;,\n                            emphasis: &#123;\n                                focus: &#39;series&#39;\n                            &#125;,\n                            data: [2,5,6]\n                        &#125;,\n                    ],\n                &#125;;\n            &#125;,\n        &#125;\n    &#125;\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n    .dashboard-editor-container &#123;\n        padding: 32px;\n        background-color: rgb(240, 242, 245);\n        position: relative;\n\n    .chart-wrapper &#123;\n        background: #fff;\n        padding: 16px 16px 0;\n        margin-bottom: 32px;\n    &#125;\n    &#125;\n\n    @media (max-width:1024px) &#123;\n        .chart-wrapper &#123;\n            padding: 8px;\n        &#125;\n    &#125;\n&lt;/style&gt;</code></pre>\n"},{"title":"COLA","description":"COLA-整洁面向对象分层架构","date":"2020-12-15T08:24:00.000Z","_content":"\n### 相关网址\n- [COLA 4.0](https://github.com/alibaba/COLA)\n- [COLA 4.0：应用架构的最佳实践](https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app)","source":"_posts/framework/cola.md","raw":"---\ntitle: COLA\ndescription: COLA-整洁面向对象分层架构\n#top: 1\ndate: 2020-12-15 16:24:00\ntags:\n- COLA\ncategories:\n- 架构\n---\n\n### 相关网址\n- [COLA 4.0](https://github.com/alibaba/COLA)\n- [COLA 4.0：应用架构的最佳实践](https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app)","slug":"framework/cola","published":1,"updated":"2020-12-15T08:24:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxo000cjrnv3wpk8opo","content":"<h3 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h3><ul>\n<li><a href=\"https://github.com/alibaba/COLA\">COLA 4.0</a></li>\n<li><a href=\"https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app\">COLA 4.0：应用架构的最佳实践</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h3><ul>\n<li><a href=\"https://github.com/alibaba/COLA\">COLA 4.0</a></li>\n<li><a href=\"https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app\">COLA 4.0：应用架构的最佳实践</a></li>\n</ul>\n"},{"title":"14种常用设计模式","date":"2020-10-02T07:51:46.000Z","_content":"\n> [菜鸟教程](http://www.runoob.com/design-pattern)\n> [设计模式在Spring框架中的良好实践](https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect)\n> [实现的demo](https://github.com/im-fan/my-design-mode.git)\n\n## 基础\n### 设计模式的类型\n<img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n### 设计模式实践的关系\n<img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n### 设计模式的六大原则\n```\n1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n```\n\n## 模式详解\n### 1.策略模式(Strategy)\n```\n定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题\n```\n- 示例图片<br/>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n### 2.简单工厂模式( Simple Factory )\n```\n定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；\n```\n\n### 3.工厂模式( Factory )\n```\n针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品\n```\n\n### 4.抽象工厂模式( Abstract Factory )\n```\nhttps://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ：用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力） \n    例：造了一个工厂，只能生产 宝马和比亚迪汽车；如果需要制造其他车系，工厂要改造升级\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品） \n    例：根据工厂图纸造了两个工厂，分别生产宝马和比亚迪汽车；如果需要制造其他车系，按照图纸再造一个工厂； 但无法生产除了车以外的其他产品\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n    例：收购了个汽车空调厂，将工厂图纸和空调厂图纸合并成一个图纸；建新厂时按照新的图纸，先建造出有空调+汽车生产线的厂，在利用不同生产线生产汽车和对应的汽车空调；如果需要一个五菱车厂，不支持单独建五菱车厂，但是可以新建带空调的五菱车厂\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n### 5.装饰器模式( Decorator )\n```\n动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n### 6.代理模式( Proxy )\n```\n封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n### 7.模板方法模式( Template )\n```\n1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n### 8.外观模式( Facade )\n```\n为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。\n```\n\n### 9.适配器模式( Adapter )\n```\n将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n### 10.桥接模式( Bridge )\n```\n将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n### 11.建造者模式( Builder )\n```\n使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n### 12.观察者模式( Observer )\n```\n定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n### 13.单例模式( Singleton )\n```\n保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n\t加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n\t优点：第一次调用才初始化，避免内存浪费。\n\t缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n\t优点：没有加锁，执行效率会提高。\n\t缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n\t这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n\t这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n\t这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。\n```\n\n### 14.命令模式( Command )\n```\n将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">","source":"_posts/framework/design-model.md","raw":"---\ntitle: 14种常用设计模式\ndate: 2020-10-02 15:51:46\ntags: \n- 设计模式\ncategories: \n- 架构\n---\n\n> [菜鸟教程](http://www.runoob.com/design-pattern)\n> [设计模式在Spring框架中的良好实践](https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect)\n> [实现的demo](https://github.com/im-fan/my-design-mode.git)\n\n## 基础\n### 设计模式的类型\n<img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n### 设计模式实践的关系\n<img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n### 设计模式的六大原则\n```\n1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n```\n\n## 模式详解\n### 1.策略模式(Strategy)\n```\n定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题\n```\n- 示例图片<br/>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n### 2.简单工厂模式( Simple Factory )\n```\n定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；\n```\n\n### 3.工厂模式( Factory )\n```\n针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品\n```\n\n### 4.抽象工厂模式( Abstract Factory )\n```\nhttps://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ：用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力） \n    例：造了一个工厂，只能生产 宝马和比亚迪汽车；如果需要制造其他车系，工厂要改造升级\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品） \n    例：根据工厂图纸造了两个工厂，分别生产宝马和比亚迪汽车；如果需要制造其他车系，按照图纸再造一个工厂； 但无法生产除了车以外的其他产品\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n    例：收购了个汽车空调厂，将工厂图纸和空调厂图纸合并成一个图纸；建新厂时按照新的图纸，先建造出有空调+汽车生产线的厂，在利用不同生产线生产汽车和对应的汽车空调；如果需要一个五菱车厂，不支持单独建五菱车厂，但是可以新建带空调的五菱车厂\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n### 5.装饰器模式( Decorator )\n```\n动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n### 6.代理模式( Proxy )\n```\n封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n### 7.模板方法模式( Template )\n```\n1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n### 8.外观模式( Facade )\n```\n为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。\n```\n\n### 9.适配器模式( Adapter )\n```\n将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n### 10.桥接模式( Bridge )\n```\n将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n### 11.建造者模式( Builder )\n```\n使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n### 12.观察者模式( Observer )\n```\n定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n### 13.单例模式( Singleton )\n```\n保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n\t加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n\t优点：第一次调用才初始化，避免内存浪费。\n\t缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n\t优点：没有加锁，执行效率会提高。\n\t缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n\t这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n\t这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n\t这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。\n```\n\n### 14.命令模式( Command )\n```\n将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">","slug":"framework/design-model","published":1,"updated":"2020-12-29T10:01:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxp000fjrnv5lgecla7","content":"<blockquote>\n<p><a href=\"http://www.runoob.com/design-pattern\">菜鸟教程</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect\">设计模式在Spring框架中的良好实践</a><br><a href=\"https://github.com/im-fan/my-design-mode.git\">实现的demo</a></p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h3><img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式实践的关系\"><a href=\"#设计模式实践的关系\" class=\"headerlink\" title=\"设计模式实践的关系\"></a>设计模式实践的关系</h3><img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><pre><code>1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</code></pre>\n<h2 id=\"模式详解\"><a href=\"#模式详解\" class=\"headerlink\" title=\"模式详解\"></a>模式详解</h2><h3 id=\"1-策略模式-Strategy\"><a href=\"#1-策略模式-Strategy\" class=\"headerlink\" title=\"1.策略模式(Strategy)\"></a>1.策略模式(Strategy)</h3><pre><code>定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</code></pre>\n<ul>\n<li>示例图片<br/><img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n</li>\n</ul>\n<h3 id=\"2-简单工厂模式-Simple-Factory\"><a href=\"#2-简单工厂模式-Simple-Factory\" class=\"headerlink\" title=\"2.简单工厂模式( Simple Factory )\"></a>2.简单工厂模式( Simple Factory )</h3><pre><code>定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；</code></pre>\n<h3 id=\"3-工厂模式-Factory\"><a href=\"#3-工厂模式-Factory\" class=\"headerlink\" title=\"3.工厂模式( Factory )\"></a>3.工厂模式( Factory )</h3><pre><code>针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品</code></pre>\n<h3 id=\"4-抽象工厂模式-Abstract-Factory\"><a href=\"#4-抽象工厂模式-Abstract-Factory\" class=\"headerlink\" title=\"4.抽象工厂模式( Abstract Factory )\"></a>4.抽象工厂模式( Abstract Factory )</h3><pre><code>https://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ：用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力） \n    例：造了一个工厂，只能生产 宝马和比亚迪汽车；如果需要制造其他车系，工厂要改造升级\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品） \n    例：根据工厂图纸造了两个工厂，分别生产宝马和比亚迪汽车；如果需要制造其他车系，按照图纸再造一个工厂； 但无法生产除了车以外的其他产品\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n    例：收购了个汽车空调厂，将工厂图纸和空调厂图纸合并成一个图纸；建新厂时按照新的图纸，先建造出有空调+汽车生产线的厂，在利用不同生产线生产汽车和对应的汽车空调；如果需要一个五菱车厂，不支持单独建五菱车厂，但是可以新建带空调的五菱车厂\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n<h3 id=\"5-装饰器模式-Decorator\"><a href=\"#5-装饰器模式-Decorator\" class=\"headerlink\" title=\"5.装饰器模式( Decorator )\"></a>5.装饰器模式( Decorator )</h3><pre><code>动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n<h3 id=\"6-代理模式-Proxy\"><a href=\"#6-代理模式-Proxy\" class=\"headerlink\" title=\"6.代理模式( Proxy )\"></a>6.代理模式( Proxy )</h3><pre><code>封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n<h3 id=\"7-模板方法模式-Template\"><a href=\"#7-模板方法模式-Template\" class=\"headerlink\" title=\"7.模板方法模式( Template )\"></a>7.模板方法模式( Template )</h3><pre><code>1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n<h3 id=\"8-外观模式-Facade\"><a href=\"#8-外观模式-Facade\" class=\"headerlink\" title=\"8.外观模式( Facade )\"></a>8.外观模式( Facade )</h3><pre><code>为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</code></pre>\n<h3 id=\"9-适配器模式-Adapter\"><a href=\"#9-适配器模式-Adapter\" class=\"headerlink\" title=\"9.适配器模式( Adapter )\"></a>9.适配器模式( Adapter )</h3><pre><code>将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n<h3 id=\"10-桥接模式-Bridge\"><a href=\"#10-桥接模式-Bridge\" class=\"headerlink\" title=\"10.桥接模式( Bridge )\"></a>10.桥接模式( Bridge )</h3><pre><code>将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n<h3 id=\"11-建造者模式-Builder\"><a href=\"#11-建造者模式-Builder\" class=\"headerlink\" title=\"11.建造者模式( Builder )\"></a>11.建造者模式( Builder )</h3><pre><code>使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n<h3 id=\"12-观察者模式-Observer\"><a href=\"#12-观察者模式-Observer\" class=\"headerlink\" title=\"12.观察者模式( Observer )\"></a>12.观察者模式( Observer )</h3><pre><code>定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n<h3 id=\"13-单例模式-Singleton\"><a href=\"#13-单例模式-Singleton\" class=\"headerlink\" title=\"13.单例模式( Singleton )\"></a>13.单例模式( Singleton )</h3><pre><code>保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n    加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n    优点：第一次调用才初始化，避免内存浪费。\n    缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n    优点：没有加锁，执行效率会提高。\n    缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n    这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n    这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n    这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</code></pre>\n<h3 id=\"14-命令模式-Command\"><a href=\"#14-命令模式-Command\" class=\"headerlink\" title=\"14.命令模式( Command )\"></a>14.命令模式( Command )</h3><pre><code>将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"http://www.runoob.com/design-pattern\">菜鸟教程</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect\">设计模式在Spring框架中的良好实践</a><br><a href=\"https://github.com/im-fan/my-design-mode.git\">实现的demo</a></p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h3><img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式实践的关系\"><a href=\"#设计模式实践的关系\" class=\"headerlink\" title=\"设计模式实践的关系\"></a>设计模式实践的关系</h3><img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><pre><code>1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</code></pre>\n<h2 id=\"模式详解\"><a href=\"#模式详解\" class=\"headerlink\" title=\"模式详解\"></a>模式详解</h2><h3 id=\"1-策略模式-Strategy\"><a href=\"#1-策略模式-Strategy\" class=\"headerlink\" title=\"1.策略模式(Strategy)\"></a>1.策略模式(Strategy)</h3><pre><code>定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</code></pre>\n<ul>\n<li>示例图片<br/><img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n</li>\n</ul>\n<h3 id=\"2-简单工厂模式-Simple-Factory\"><a href=\"#2-简单工厂模式-Simple-Factory\" class=\"headerlink\" title=\"2.简单工厂模式( Simple Factory )\"></a>2.简单工厂模式( Simple Factory )</h3><pre><code>定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；</code></pre>\n<h3 id=\"3-工厂模式-Factory\"><a href=\"#3-工厂模式-Factory\" class=\"headerlink\" title=\"3.工厂模式( Factory )\"></a>3.工厂模式( Factory )</h3><pre><code>针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品</code></pre>\n<h3 id=\"4-抽象工厂模式-Abstract-Factory\"><a href=\"#4-抽象工厂模式-Abstract-Factory\" class=\"headerlink\" title=\"4.抽象工厂模式( Abstract Factory )\"></a>4.抽象工厂模式( Abstract Factory )</h3><pre><code>https://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ：用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力） \n    例：造了一个工厂，只能生产 宝马和比亚迪汽车；如果需要制造其他车系，工厂要改造升级\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品） \n    例：根据工厂图纸造了两个工厂，分别生产宝马和比亚迪汽车；如果需要制造其他车系，按照图纸再造一个工厂； 但无法生产除了车以外的其他产品\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n    例：收购了个汽车空调厂，将工厂图纸和空调厂图纸合并成一个图纸；建新厂时按照新的图纸，先建造出有空调+汽车生产线的厂，在利用不同生产线生产汽车和对应的汽车空调；如果需要一个五菱车厂，不支持单独建五菱车厂，但是可以新建带空调的五菱车厂\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n<h3 id=\"5-装饰器模式-Decorator\"><a href=\"#5-装饰器模式-Decorator\" class=\"headerlink\" title=\"5.装饰器模式( Decorator )\"></a>5.装饰器模式( Decorator )</h3><pre><code>动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n<h3 id=\"6-代理模式-Proxy\"><a href=\"#6-代理模式-Proxy\" class=\"headerlink\" title=\"6.代理模式( Proxy )\"></a>6.代理模式( Proxy )</h3><pre><code>封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n<h3 id=\"7-模板方法模式-Template\"><a href=\"#7-模板方法模式-Template\" class=\"headerlink\" title=\"7.模板方法模式( Template )\"></a>7.模板方法模式( Template )</h3><pre><code>1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n<h3 id=\"8-外观模式-Facade\"><a href=\"#8-外观模式-Facade\" class=\"headerlink\" title=\"8.外观模式( Facade )\"></a>8.外观模式( Facade )</h3><pre><code>为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</code></pre>\n<h3 id=\"9-适配器模式-Adapter\"><a href=\"#9-适配器模式-Adapter\" class=\"headerlink\" title=\"9.适配器模式( Adapter )\"></a>9.适配器模式( Adapter )</h3><pre><code>将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n<h3 id=\"10-桥接模式-Bridge\"><a href=\"#10-桥接模式-Bridge\" class=\"headerlink\" title=\"10.桥接模式( Bridge )\"></a>10.桥接模式( Bridge )</h3><pre><code>将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n<h3 id=\"11-建造者模式-Builder\"><a href=\"#11-建造者模式-Builder\" class=\"headerlink\" title=\"11.建造者模式( Builder )\"></a>11.建造者模式( Builder )</h3><pre><code>使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n<h3 id=\"12-观察者模式-Observer\"><a href=\"#12-观察者模式-Observer\" class=\"headerlink\" title=\"12.观察者模式( Observer )\"></a>12.观察者模式( Observer )</h3><pre><code>定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n<h3 id=\"13-单例模式-Singleton\"><a href=\"#13-单例模式-Singleton\" class=\"headerlink\" title=\"13.单例模式( Singleton )\"></a>13.单例模式( Singleton )</h3><pre><code>保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n    加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n    优点：第一次调用才初始化，避免内存浪费。\n    缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n    优点：没有加锁，执行效率会提高。\n    缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n    这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n    这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n    这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</code></pre>\n<h3 id=\"14-命令模式-Command\"><a href=\"#14-命令模式-Command\" class=\"headerlink\" title=\"14.命令模式( Command )\"></a>14.命令模式( Command )</h3><pre><code>将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">"},{"title":"DDD-领域驱动设计","description":"DDD-领域驱动设计","date":"2020-10-09T08:51:54.000Z","_content":"\n- [有赞DDD实践](https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw)\n- [DDD设计](https://www.processon.com/view/5e55d17ee4b069f82a120d06#map)\n- [阿里技术专家详解 DDD 系列- Domain Primitive](https://segmentfault.com/a/1190000020270851?utm_source=tag-newest)\n\n### Domain Primitive \n```textmate\nDomain Primitive :Domain Primitive 是一个在特定领域里，拥 有精准定义的、可自我验证的、拥有行为的 Value Object 。\n1.DP 是一个传统意义上的 Value Object，拥有 Immutable 的特性\n2.DP 是一个完整的概念整体，拥有精准定义\n3.DP 使用业务域中的原生语言\n4.DP 可以是业务域的最小组成部分、也可以构建复杂组合\n```\n\n\n### 方法论\n```textmate\n六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，\n```\n\n#### 六边形架构\n- [起源文章](http://alistair.cockburn.us/Hexagonal+architecture)\n- [相关文章&demo](https://www.jianshu.com/p/c6bb08d9c613)\n- 摘要\n```textmate\n六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。\n```\n\n#### 洋葱架构\n- [在洋葱(Onion)架构中实现领域驱动设计](https://www.infoq.cn/article/2014/11/ddd-onion-architecture)\n- 摘要\n```textmate\n层级关系\n    Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n    核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n    领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n    API 层是领域层的入口，它使用领域中的术语和对象。\n    基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。\n```\n\n#### 整洁架构\n- [阿里云-架构整洁之道](https://www.jianshu.com/p/b296ceea673b)\n\n#### 开源框架\n- cola4 \n- DDDLib  \n- Koala\n\n#### 四色原型-需求分析利器\n<img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n```textmate\n概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。\n```\n#### 标准项目模块解释\n```textmate\n1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块\n```\n\n### DDD核心概念\n- 实体\n- 值对象\n- 聚合\n- 仓储\n- 工厂\n- 仓储\n```textmate\n实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法\n```\n\n- DDD架构图\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n#### 识别领域服务\n```textmate\n主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。\n```\n\n#### 仓储相关\n- CQRS\n```textmate\n将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS\n```\n","source":"_posts/framework/ddd.md","raw":"---\ntitle: DDD-领域驱动设计\ndescription: DDD-领域驱动设计\n#top: 1\ndate: 2020-10-09 16:51:54\ntags:\n- DDD\ncategories:\n- 架构\n---\n\n- [有赞DDD实践](https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw)\n- [DDD设计](https://www.processon.com/view/5e55d17ee4b069f82a120d06#map)\n- [阿里技术专家详解 DDD 系列- Domain Primitive](https://segmentfault.com/a/1190000020270851?utm_source=tag-newest)\n\n### Domain Primitive \n```textmate\nDomain Primitive :Domain Primitive 是一个在特定领域里，拥 有精准定义的、可自我验证的、拥有行为的 Value Object 。\n1.DP 是一个传统意义上的 Value Object，拥有 Immutable 的特性\n2.DP 是一个完整的概念整体，拥有精准定义\n3.DP 使用业务域中的原生语言\n4.DP 可以是业务域的最小组成部分、也可以构建复杂组合\n```\n\n\n### 方法论\n```textmate\n六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，\n```\n\n#### 六边形架构\n- [起源文章](http://alistair.cockburn.us/Hexagonal+architecture)\n- [相关文章&demo](https://www.jianshu.com/p/c6bb08d9c613)\n- 摘要\n```textmate\n六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。\n```\n\n#### 洋葱架构\n- [在洋葱(Onion)架构中实现领域驱动设计](https://www.infoq.cn/article/2014/11/ddd-onion-architecture)\n- 摘要\n```textmate\n层级关系\n    Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n    核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n    领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n    API 层是领域层的入口，它使用领域中的术语和对象。\n    基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。\n```\n\n#### 整洁架构\n- [阿里云-架构整洁之道](https://www.jianshu.com/p/b296ceea673b)\n\n#### 开源框架\n- cola4 \n- DDDLib  \n- Koala\n\n#### 四色原型-需求分析利器\n<img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n```textmate\n概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。\n```\n#### 标准项目模块解释\n```textmate\n1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块\n```\n\n### DDD核心概念\n- 实体\n- 值对象\n- 聚合\n- 仓储\n- 工厂\n- 仓储\n```textmate\n实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法\n```\n\n- DDD架构图\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n#### 识别领域服务\n```textmate\n主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。\n```\n\n#### 仓储相关\n- CQRS\n```textmate\n将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS\n```\n","slug":"framework/ddd","published":1,"updated":"2021-12-08T12:21:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxp000hjrnv5nxb0a5l","content":"<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw\">有赞DDD实践</a></li>\n<li><a href=\"https://www.processon.com/view/5e55d17ee4b069f82a120d06#map\">DDD设计</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020270851?utm_source=tag-newest\">阿里技术专家详解 DDD 系列- Domain Primitive</a></li>\n</ul>\n<h3 id=\"Domain-Primitive\"><a href=\"#Domain-Primitive\" class=\"headerlink\" title=\"Domain Primitive\"></a>Domain Primitive</h3><pre><code class=\"textmate\">Domain Primitive :Domain Primitive 是一个在特定领域里，拥 有精准定义的、可自我验证的、拥有行为的 Value Object 。\n1.DP 是一个传统意义上的 Value Object，拥有 Immutable 的特性\n2.DP 是一个完整的概念整体，拥有精准定义\n3.DP 使用业务域中的原生语言\n4.DP 可以是业务域的最小组成部分、也可以构建复杂组合</code></pre>\n<h3 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h3><pre><code class=\"textmate\">六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，</code></pre>\n<h4 id=\"六边形架构\"><a href=\"#六边形架构\" class=\"headerlink\" title=\"六边形架构\"></a>六边形架构</h4><ul>\n<li><a href=\"http://alistair.cockburn.us/Hexagonal+architecture\">起源文章</a></li>\n<li><a href=\"https://www.jianshu.com/p/c6bb08d9c613\">相关文章&amp;demo</a></li>\n<li>摘要<pre><code class=\"textmate\">六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。</code></pre>\n</li>\n</ul>\n<h4 id=\"洋葱架构\"><a href=\"#洋葱架构\" class=\"headerlink\" title=\"洋葱架构\"></a>洋葱架构</h4><ul>\n<li><a href=\"https://www.infoq.cn/article/2014/11/ddd-onion-architecture\">在洋葱(Onion)架构中实现领域驱动设计</a></li>\n<li>摘要<pre><code class=\"textmate\">层级关系\n  Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n  核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n  领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n  API 层是领域层的入口，它使用领域中的术语和对象。\n  基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。</code></pre>\n</li>\n</ul>\n<h4 id=\"整洁架构\"><a href=\"#整洁架构\" class=\"headerlink\" title=\"整洁架构\"></a>整洁架构</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/b296ceea673b\">阿里云-架构整洁之道</a></li>\n</ul>\n<h4 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h4><ul>\n<li>cola4 </li>\n<li>DDDLib  </li>\n<li>Koala</li>\n</ul>\n<h4 id=\"四色原型-需求分析利器\"><a href=\"#四色原型-需求分析利器\" class=\"headerlink\" title=\"四色原型-需求分析利器\"></a>四色原型-需求分析利器</h4><img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n<pre><code class=\"textmate\">概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。</code></pre>\n<h4 id=\"标准项目模块解释\"><a href=\"#标准项目模块解释\" class=\"headerlink\" title=\"标准项目模块解释\"></a>标准项目模块解释</h4><pre><code class=\"textmate\">1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块</code></pre>\n<h3 id=\"DDD核心概念\"><a href=\"#DDD核心概念\" class=\"headerlink\" title=\"DDD核心概念\"></a>DDD核心概念</h3><ul>\n<li><p>实体</p>\n</li>\n<li><p>值对象</p>\n</li>\n<li><p>聚合</p>\n</li>\n<li><p>仓储</p>\n</li>\n<li><p>工厂</p>\n</li>\n<li><p>仓储</p>\n<pre><code class=\"textmate\">实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法</code></pre>\n</li>\n<li><p>DDD架构图</p>\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n</li>\n</ul>\n<h4 id=\"识别领域服务\"><a href=\"#识别领域服务\" class=\"headerlink\" title=\"识别领域服务\"></a>识别领域服务</h4><pre><code class=\"textmate\">主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。</code></pre>\n<h4 id=\"仓储相关\"><a href=\"#仓储相关\" class=\"headerlink\" title=\"仓储相关\"></a>仓储相关</h4><ul>\n<li>CQRS<pre><code class=\"textmate\">将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw\">有赞DDD实践</a></li>\n<li><a href=\"https://www.processon.com/view/5e55d17ee4b069f82a120d06#map\">DDD设计</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020270851?utm_source=tag-newest\">阿里技术专家详解 DDD 系列- Domain Primitive</a></li>\n</ul>\n<h3 id=\"Domain-Primitive\"><a href=\"#Domain-Primitive\" class=\"headerlink\" title=\"Domain Primitive\"></a>Domain Primitive</h3><pre><code class=\"textmate\">Domain Primitive :Domain Primitive 是一个在特定领域里，拥 有精准定义的、可自我验证的、拥有行为的 Value Object 。\n1.DP 是一个传统意义上的 Value Object，拥有 Immutable 的特性\n2.DP 是一个完整的概念整体，拥有精准定义\n3.DP 使用业务域中的原生语言\n4.DP 可以是业务域的最小组成部分、也可以构建复杂组合</code></pre>\n<h3 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h3><pre><code class=\"textmate\">六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，</code></pre>\n<h4 id=\"六边形架构\"><a href=\"#六边形架构\" class=\"headerlink\" title=\"六边形架构\"></a>六边形架构</h4><ul>\n<li><a href=\"http://alistair.cockburn.us/Hexagonal+architecture\">起源文章</a></li>\n<li><a href=\"https://www.jianshu.com/p/c6bb08d9c613\">相关文章&amp;demo</a></li>\n<li>摘要<pre><code class=\"textmate\">六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。</code></pre>\n</li>\n</ul>\n<h4 id=\"洋葱架构\"><a href=\"#洋葱架构\" class=\"headerlink\" title=\"洋葱架构\"></a>洋葱架构</h4><ul>\n<li><a href=\"https://www.infoq.cn/article/2014/11/ddd-onion-architecture\">在洋葱(Onion)架构中实现领域驱动设计</a></li>\n<li>摘要<pre><code class=\"textmate\">层级关系\n  Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n  核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n  领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n  API 层是领域层的入口，它使用领域中的术语和对象。\n  基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。</code></pre>\n</li>\n</ul>\n<h4 id=\"整洁架构\"><a href=\"#整洁架构\" class=\"headerlink\" title=\"整洁架构\"></a>整洁架构</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/b296ceea673b\">阿里云-架构整洁之道</a></li>\n</ul>\n<h4 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h4><ul>\n<li>cola4 </li>\n<li>DDDLib  </li>\n<li>Koala</li>\n</ul>\n<h4 id=\"四色原型-需求分析利器\"><a href=\"#四色原型-需求分析利器\" class=\"headerlink\" title=\"四色原型-需求分析利器\"></a>四色原型-需求分析利器</h4><img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n<pre><code class=\"textmate\">概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。</code></pre>\n<h4 id=\"标准项目模块解释\"><a href=\"#标准项目模块解释\" class=\"headerlink\" title=\"标准项目模块解释\"></a>标准项目模块解释</h4><pre><code class=\"textmate\">1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块</code></pre>\n<h3 id=\"DDD核心概念\"><a href=\"#DDD核心概念\" class=\"headerlink\" title=\"DDD核心概念\"></a>DDD核心概念</h3><ul>\n<li><p>实体</p>\n</li>\n<li><p>值对象</p>\n</li>\n<li><p>聚合</p>\n</li>\n<li><p>仓储</p>\n</li>\n<li><p>工厂</p>\n</li>\n<li><p>仓储</p>\n<pre><code class=\"textmate\">实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法</code></pre>\n</li>\n<li><p>DDD架构图</p>\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n</li>\n</ul>\n<h4 id=\"识别领域服务\"><a href=\"#识别领域服务\" class=\"headerlink\" title=\"识别领域服务\"></a>识别领域服务</h4><pre><code class=\"textmate\">主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。</code></pre>\n<h4 id=\"仓储相关\"><a href=\"#仓储相关\" class=\"headerlink\" title=\"仓储相关\"></a>仓储相关</h4><ul>\n<li>CQRS<pre><code class=\"textmate\">将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS</code></pre>\n</li>\n</ul>\n"},{"title":"OAuth2学习笔记","description":"oauth2","date":"2020-11-17T01:58:26.000Z","_content":"\n- [参考demo](https://github.com/lexburner/oauth2-demo)\n- [OAuth2 RFC6749中文翻译](https://colobu.com/2017/04/28/oauth2-rfc6749/)\n- [理解OAuth 2.0-阮一峰](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n- [文档对应demo](https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2)\n\n#### 框架相关\n- OAuth2\n```\n解释：\n    OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n    如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n    1、用户打开客户端，客户端要求授权。\n    2、用户同意客户端授权。\n    3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n    4、授权服务器对客户端进行认证后，同意发放令牌。\n    5、客户端使用令牌，向资源服务器申请资源。\n    6、资源服务器确认令牌，向客户端开放资源。\n```\n- LDAP\n```\n解释：\n    LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n    浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n    LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n    用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n    1、连接到LDAP服务器。\n    2、绑定到LDAP服务器。\n    3、在LDAP服务器上执行所需要的操作。\n    4、释放LDAP服务器的连接。\n```\n- [CAS(Central Authentication Service-中央式认证服务)](https://www.cnblogs.com/lihuidu/p/6495247.html)\n```\nSSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。\n```\n- 适用场景\n```\nOAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。\n```\n\n#### 授权模式\n- 授权码模式（authorization code）\n```\n功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与\"服务提供商\"的认证服务器进行互动。\n```\n- 简化模式（implicit）\n\n- 密码模式（resource owner password credentials）\n- 客户端模式（client credentials）\n\n- 主要配置\n```\nOauth2ServerConfig\nWebSecurityConfigurer\n```\n\n#### 不同授权模式请求\n- 授权码模式(在浏览器中访问接口)\n```\n配置项：需要将返回地址添加到client中\n    clients.redirectUris(\"http://www.baidu.com\")\n    GET http://localhost:8200/oauth/authorize?response_type=code&client_id=client_1&redirect_uri=http://www.baidu.com&state=123\n所需参数解释\n    response_type：表示授权类型，必选项，此处的值固定为\"code\"\n    client_id：表示客户端的ID，必选项\n    redirect_uri：表示重定向URI，可选项\n    scope：表示申请的权限范围，可选项\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- 简化模式(在浏览器中访问接口)\n```\n请求地址\n    GET http://localhost:8200/oauth/authorize?response_type=token&client_id=client_1&redirect_uri=http://www.baidu.com&state=123&scope=select\n参数解释：\n    response_type：表示授权类型，此处的值固定为\"token\"，必选项。\n    client_id：表示客户端的ID，必选项。\n    redirect_uri：表示重定向的URI，可选项。\n    scope：表示权限范围，可选项。\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- password方式获取toke\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=password&scope=select&client_id=client_1&client_secret=123456&username=user_1&password=123456\n返回信息\n    {\n        \"access_token\": \"39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43021,\n        \"scope\": \"select\"\n    }\n参数解释\n    grant_type：表示授权类型，此处的值固定为\"password\"，必选项。\n    username：表示用户名，必选项。\n    password：表示用户的密码，必选项。\n    scope：表示权限范围，可选项。\n```\n\n- client方式获取access_token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=client_credentials&scope=select&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"17fc17a9-83b2-41c3-8621-c727d8329bbd\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 42400,\n        \"scope\": \"select\"\n    }\n参数解释\n    granttype：表示授权类型，此处的值固定为\"clientcredentials\"，必选项。\n    scope：表示权限范围，可选项。\n```\n\n\n- 刷新token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=refresh_token&refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"e0e64627-f157-4718-81f0-069ca21549ad\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43199,\n        \"scope\": \"select\"\n    }\n```\n\n#### 请求业务接口\n- 请求接口\n```\n配置拦截：\n    HttpSecurity中配置 http.antMatchers(\"/user/**\").authenticated()\n使用client方式获取的access_token\n    GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回\n```","source":"_posts/framework/oauth2.md","raw":"---\ntitle: OAuth2学习笔记\ndescription: oauth2\ndate: 2020-11-17 09:58:26\ntags:\n- oauth2\ncategories:\n- 架构\n---\n\n- [参考demo](https://github.com/lexburner/oauth2-demo)\n- [OAuth2 RFC6749中文翻译](https://colobu.com/2017/04/28/oauth2-rfc6749/)\n- [理解OAuth 2.0-阮一峰](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n- [文档对应demo](https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2)\n\n#### 框架相关\n- OAuth2\n```\n解释：\n    OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n    如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n    1、用户打开客户端，客户端要求授权。\n    2、用户同意客户端授权。\n    3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n    4、授权服务器对客户端进行认证后，同意发放令牌。\n    5、客户端使用令牌，向资源服务器申请资源。\n    6、资源服务器确认令牌，向客户端开放资源。\n```\n- LDAP\n```\n解释：\n    LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n    浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n    LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n    用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n    1、连接到LDAP服务器。\n    2、绑定到LDAP服务器。\n    3、在LDAP服务器上执行所需要的操作。\n    4、释放LDAP服务器的连接。\n```\n- [CAS(Central Authentication Service-中央式认证服务)](https://www.cnblogs.com/lihuidu/p/6495247.html)\n```\nSSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。\n```\n- 适用场景\n```\nOAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。\n```\n\n#### 授权模式\n- 授权码模式（authorization code）\n```\n功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与\"服务提供商\"的认证服务器进行互动。\n```\n- 简化模式（implicit）\n\n- 密码模式（resource owner password credentials）\n- 客户端模式（client credentials）\n\n- 主要配置\n```\nOauth2ServerConfig\nWebSecurityConfigurer\n```\n\n#### 不同授权模式请求\n- 授权码模式(在浏览器中访问接口)\n```\n配置项：需要将返回地址添加到client中\n    clients.redirectUris(\"http://www.baidu.com\")\n    GET http://localhost:8200/oauth/authorize?response_type=code&client_id=client_1&redirect_uri=http://www.baidu.com&state=123\n所需参数解释\n    response_type：表示授权类型，必选项，此处的值固定为\"code\"\n    client_id：表示客户端的ID，必选项\n    redirect_uri：表示重定向URI，可选项\n    scope：表示申请的权限范围，可选项\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- 简化模式(在浏览器中访问接口)\n```\n请求地址\n    GET http://localhost:8200/oauth/authorize?response_type=token&client_id=client_1&redirect_uri=http://www.baidu.com&state=123&scope=select\n参数解释：\n    response_type：表示授权类型，此处的值固定为\"token\"，必选项。\n    client_id：表示客户端的ID，必选项。\n    redirect_uri：表示重定向的URI，可选项。\n    scope：表示权限范围，可选项。\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- password方式获取toke\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=password&scope=select&client_id=client_1&client_secret=123456&username=user_1&password=123456\n返回信息\n    {\n        \"access_token\": \"39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43021,\n        \"scope\": \"select\"\n    }\n参数解释\n    grant_type：表示授权类型，此处的值固定为\"password\"，必选项。\n    username：表示用户名，必选项。\n    password：表示用户的密码，必选项。\n    scope：表示权限范围，可选项。\n```\n\n- client方式获取access_token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=client_credentials&scope=select&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"17fc17a9-83b2-41c3-8621-c727d8329bbd\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 42400,\n        \"scope\": \"select\"\n    }\n参数解释\n    granttype：表示授权类型，此处的值固定为\"clientcredentials\"，必选项。\n    scope：表示权限范围，可选项。\n```\n\n\n- 刷新token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=refresh_token&refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"e0e64627-f157-4718-81f0-069ca21549ad\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43199,\n        \"scope\": \"select\"\n    }\n```\n\n#### 请求业务接口\n- 请求接口\n```\n配置拦截：\n    HttpSecurity中配置 http.antMatchers(\"/user/**\").authenticated()\n使用client方式获取的access_token\n    GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回\n```","slug":"framework/oauth2","published":1,"updated":"2020-12-26T08:13:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxq000kjrnveyza2yja","content":"<ul>\n<li><a href=\"https://github.com/lexburner/oauth2-demo\">参考demo</a></li>\n<li><a href=\"https://colobu.com/2017/04/28/oauth2-rfc6749/\">OAuth2 RFC6749中文翻译</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">理解OAuth 2.0-阮一峰</a></li>\n<li><a href=\"https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2\">文档对应demo</a></li>\n</ul>\n<h4 id=\"框架相关\"><a href=\"#框架相关\" class=\"headerlink\" title=\"框架相关\"></a>框架相关</h4><ul>\n<li>OAuth2<pre><code>解释：\n  OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n  如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n  1、用户打开客户端，客户端要求授权。\n  2、用户同意客户端授权。\n  3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n  4、授权服务器对客户端进行认证后，同意发放令牌。\n  5、客户端使用令牌，向资源服务器申请资源。\n  6、资源服务器确认令牌，向客户端开放资源。</code></pre>\n</li>\n<li>LDAP<pre><code>解释：\n  LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n  浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n  LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n  用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n  1、连接到LDAP服务器。\n  2、绑定到LDAP服务器。\n  3、在LDAP服务器上执行所需要的操作。\n  4、释放LDAP服务器的连接。</code></pre>\n</li>\n<li><a href=\"https://www.cnblogs.com/lihuidu/p/6495247.html\">CAS(Central Authentication Service-中央式认证服务)</a><pre><code>SSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</code></pre>\n</li>\n<li>适用场景<pre><code>OAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。</code></pre>\n</li>\n</ul>\n<h4 id=\"授权模式\"><a href=\"#授权模式\" class=\"headerlink\" title=\"授权模式\"></a>授权模式</h4><ul>\n<li><p>授权码模式（authorization code）</p>\n<pre><code>功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与&quot;服务提供商&quot;的认证服务器进行互动。</code></pre>\n</li>\n<li><p>简化模式（implicit）</p>\n</li>\n<li><p>密码模式（resource owner password credentials）</p>\n</li>\n<li><p>客户端模式（client credentials）</p>\n</li>\n<li><p>主要配置</p>\n<pre><code>Oauth2ServerConfig\nWebSecurityConfigurer</code></pre>\n</li>\n</ul>\n<h4 id=\"不同授权模式请求\"><a href=\"#不同授权模式请求\" class=\"headerlink\" title=\"不同授权模式请求\"></a>不同授权模式请求</h4><ul>\n<li><p>授权码模式(在浏览器中访问接口)</p>\n<pre><code>配置项：需要将返回地址添加到client中\n  clients.redirectUris(&quot;http://www.baidu.com&quot;)\n  GET http://localhost:8200/oauth/authorize?response_type=code&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123\n所需参数解释\n  response_type：表示授权类型，必选项，此处的值固定为&quot;code&quot;\n  client_id：表示客户端的ID，必选项\n  redirect_uri：表示重定向URI，可选项\n  scope：表示申请的权限范围，可选项\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>简化模式(在浏览器中访问接口)</p>\n<pre><code>请求地址\n  GET http://localhost:8200/oauth/authorize?response_type=token&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123&amp;scope=select\n参数解释：\n  response_type：表示授权类型，此处的值固定为&quot;token&quot;，必选项。\n  client_id：表示客户端的ID，必选项。\n  redirect_uri：表示重定向的URI，可选项。\n  scope：表示权限范围，可选项。\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>password方式获取toke</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=password&amp;scope=select&amp;client_id=client_1&amp;client_secret=123456&amp;username=user_1&amp;password=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43021,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  grant_type：表示授权类型，此处的值固定为&quot;password&quot;，必选项。\n  username：表示用户名，必选项。\n  password：表示用户的密码，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n<li><p>client方式获取access_token</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=client_credentials&amp;scope=select&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;17fc17a9-83b2-41c3-8621-c727d8329bbd&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;expires_in&quot;: 42400,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  granttype：表示授权类型，此处的值固定为&quot;clientcredentials&quot;，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n</ul>\n<ul>\n<li>刷新token<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=refresh_token&amp;refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;e0e64627-f157-4718-81f0-069ca21549ad&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43199,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"请求业务接口\"><a href=\"#请求业务接口\" class=\"headerlink\" title=\"请求业务接口\"></a>请求业务接口</h4><ul>\n<li>请求接口<pre><code>配置拦截：\n  HttpSecurity中配置 http.antMatchers(&quot;/user/**&quot;).authenticated()\n使用client方式获取的access_token\n  GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://github.com/lexburner/oauth2-demo\">参考demo</a></li>\n<li><a href=\"https://colobu.com/2017/04/28/oauth2-rfc6749/\">OAuth2 RFC6749中文翻译</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">理解OAuth 2.0-阮一峰</a></li>\n<li><a href=\"https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2\">文档对应demo</a></li>\n</ul>\n<h4 id=\"框架相关\"><a href=\"#框架相关\" class=\"headerlink\" title=\"框架相关\"></a>框架相关</h4><ul>\n<li>OAuth2<pre><code>解释：\n  OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n  如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n  1、用户打开客户端，客户端要求授权。\n  2、用户同意客户端授权。\n  3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n  4、授权服务器对客户端进行认证后，同意发放令牌。\n  5、客户端使用令牌，向资源服务器申请资源。\n  6、资源服务器确认令牌，向客户端开放资源。</code></pre>\n</li>\n<li>LDAP<pre><code>解释：\n  LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n  浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n  LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n  用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n  1、连接到LDAP服务器。\n  2、绑定到LDAP服务器。\n  3、在LDAP服务器上执行所需要的操作。\n  4、释放LDAP服务器的连接。</code></pre>\n</li>\n<li><a href=\"https://www.cnblogs.com/lihuidu/p/6495247.html\">CAS(Central Authentication Service-中央式认证服务)</a><pre><code>SSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</code></pre>\n</li>\n<li>适用场景<pre><code>OAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。</code></pre>\n</li>\n</ul>\n<h4 id=\"授权模式\"><a href=\"#授权模式\" class=\"headerlink\" title=\"授权模式\"></a>授权模式</h4><ul>\n<li><p>授权码模式（authorization code）</p>\n<pre><code>功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与&quot;服务提供商&quot;的认证服务器进行互动。</code></pre>\n</li>\n<li><p>简化模式（implicit）</p>\n</li>\n<li><p>密码模式（resource owner password credentials）</p>\n</li>\n<li><p>客户端模式（client credentials）</p>\n</li>\n<li><p>主要配置</p>\n<pre><code>Oauth2ServerConfig\nWebSecurityConfigurer</code></pre>\n</li>\n</ul>\n<h4 id=\"不同授权模式请求\"><a href=\"#不同授权模式请求\" class=\"headerlink\" title=\"不同授权模式请求\"></a>不同授权模式请求</h4><ul>\n<li><p>授权码模式(在浏览器中访问接口)</p>\n<pre><code>配置项：需要将返回地址添加到client中\n  clients.redirectUris(&quot;http://www.baidu.com&quot;)\n  GET http://localhost:8200/oauth/authorize?response_type=code&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123\n所需参数解释\n  response_type：表示授权类型，必选项，此处的值固定为&quot;code&quot;\n  client_id：表示客户端的ID，必选项\n  redirect_uri：表示重定向URI，可选项\n  scope：表示申请的权限范围，可选项\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>简化模式(在浏览器中访问接口)</p>\n<pre><code>请求地址\n  GET http://localhost:8200/oauth/authorize?response_type=token&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123&amp;scope=select\n参数解释：\n  response_type：表示授权类型，此处的值固定为&quot;token&quot;，必选项。\n  client_id：表示客户端的ID，必选项。\n  redirect_uri：表示重定向的URI，可选项。\n  scope：表示权限范围，可选项。\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>password方式获取toke</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=password&amp;scope=select&amp;client_id=client_1&amp;client_secret=123456&amp;username=user_1&amp;password=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43021,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  grant_type：表示授权类型，此处的值固定为&quot;password&quot;，必选项。\n  username：表示用户名，必选项。\n  password：表示用户的密码，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n<li><p>client方式获取access_token</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=client_credentials&amp;scope=select&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;17fc17a9-83b2-41c3-8621-c727d8329bbd&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;expires_in&quot;: 42400,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  granttype：表示授权类型，此处的值固定为&quot;clientcredentials&quot;，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n</ul>\n<ul>\n<li>刷新token<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=refresh_token&amp;refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;e0e64627-f157-4718-81f0-069ca21549ad&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43199,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"请求业务接口\"><a href=\"#请求业务接口\" class=\"headerlink\" title=\"请求业务接口\"></a>请求业务接口</h4><ul>\n<li>请求接口<pre><code>配置拦截：\n  HttpSecurity中配置 http.antMatchers(&quot;/user/**&quot;).authenticated()\n使用client方式获取的access_token\n  GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回</code></pre>\n</li>\n</ul>\n"},{"title":"Arthas-问题排查工具","date":"2021-10-13T01:17:00.000Z","_content":"\n## 介绍\n```textmate\n线上问题排查工具，无侵入；支持查看服务jvm信息、方法出入参数信息、接口耗时等\n```\n\n## 相关链接\n- [官网](https://arthas.aliyun.com/doc/quick-start.html)\n- [用户案例](https://github.com/alibaba/arthas/issues?q=label%3Auser-case)\n- [常见问题回答](https://github.com/alibaba/arthas/issues?utf8=%E2%9C%93&q=label%3Aquestion-answered+)\n## 安装启动\n```textmate\n1.arthas-boot方式安装\ncurl -O https://arthas.aliyun.com/arthas-boot.jar\njava -jar arthas-boot.jar -h\n\n-h: 打印帮助信息\n```\n\n## 常用命令\n|命令名称|描述|示例|\n|---|---|---|\n|thread|查看当前线程信息，查看线程的堆栈|thread -n 3 指定最忙的前N个线程并打印堆栈<br/>thread -b 查找阻塞的线程|\n|jvm|显示jvm信息||\n|watch|方法执行数据观测|watch com.xxx.xxService 方法名 -x 3 (参数遍历深度3，默认1)|\n|trace|方法内部调用路径，并输出方法路径上的每个节点上耗时|trace com.xxx.xxService 方法名|\n|stack|输出当前方法被调用的调用路径|stack com.xxx.xxService 方法名|\n\n## 完整命令介绍\n> [完整命令详细文档](https://arthas.aliyun.com/doc/commands.html)\n\n|命令名称|描述|示例|\n|---|---|---|\n|help|显示arthas帮助| |\n|auth|验证当前会话| |\n|keymap|显示指定连接的所有可用键图。| |\n|sc|搜索JVM加载的所有类| |\n|sm|搜索JVM加载的类的方法| |\n|classloader|显示类加载器信息| |\n|jad|反编译类| |\n|getstatic|显示类的静态字段| |\n|monitor|监控方法执行统计数据，例如总/成功/失败计数，平均rt，失败率等。 |  |\n|stack|显示指定类和方法的堆栈跟踪| |\n|thread|显示线程信息，线程堆栈| |\n|trace|跟踪指定方法调用的执行时间。| |\n|watch|显示指定方法调用的输入/输出参数、返回对象和抛出异常 | |\n|tt|时间隧道| |\n|jvm|显示目标JVM信息| |\n|perfcounter|显示性能计数器信息。| |\n|ognl|执行ognl表达式。| |\n|mc|内存编译器，在内存中将java文件编译成字节码和类文件。| |\n|redefine|重新定义类。@see仪表# redefineClasses (ClassDefinition…) | |\n|retransform|使变回原形类。@see仪表# retransformClasses(类…) | |\n|dashboard|目标jvm的线程，内存，gc, vm, tomcat信息的概述。 | |\n|dump|从JVM中转储类字节数组| |\n|heapdump|堆转储| |\n|options|查看和改变各种阿尔萨斯选项| |\n|cls|清理屏幕信息| |\n|reset|重置所有增强类| |\n|version|显示arthas版本| |\n|session|显示当前会话信息| |\n|sysprop|显示和更改系统属性。| |\n|sysenv|显示系统env。| |\n|vmoption|显示和更新虚拟机诊断选项。| |\n|logger|打印记录器信息，并更新记录器级别| |\n|history|显示命令历史| |\n|cat|连接和打印文件| |\n|base64|使用Base64表示进行编码和解码| |\n|echo|将参数写入标准输出| |\n|pwd|返回工作目录名| |\n|mbean|显示mbean信息| |\n|grep|用于管道的Grep命令。| |\n|tee|tee命令用于管道。| |\n|profiler|异步分析器。https://github.com/jvm-profiling-tools/async-profiler| |\n|vmtool|jvm的工具| |\n|stop|停止/关闭Arthas服务器并退出控制台。| |\n","source":"_posts/devops/arthas.md","raw":"---\ntitle: Arthas-问题排查工具\ndate: 2021-10-13 09:17:00\ntags:\n- arthas\ncategories:\n- 运维\n---\n\n## 介绍\n```textmate\n线上问题排查工具，无侵入；支持查看服务jvm信息、方法出入参数信息、接口耗时等\n```\n\n## 相关链接\n- [官网](https://arthas.aliyun.com/doc/quick-start.html)\n- [用户案例](https://github.com/alibaba/arthas/issues?q=label%3Auser-case)\n- [常见问题回答](https://github.com/alibaba/arthas/issues?utf8=%E2%9C%93&q=label%3Aquestion-answered+)\n## 安装启动\n```textmate\n1.arthas-boot方式安装\ncurl -O https://arthas.aliyun.com/arthas-boot.jar\njava -jar arthas-boot.jar -h\n\n-h: 打印帮助信息\n```\n\n## 常用命令\n|命令名称|描述|示例|\n|---|---|---|\n|thread|查看当前线程信息，查看线程的堆栈|thread -n 3 指定最忙的前N个线程并打印堆栈<br/>thread -b 查找阻塞的线程|\n|jvm|显示jvm信息||\n|watch|方法执行数据观测|watch com.xxx.xxService 方法名 -x 3 (参数遍历深度3，默认1)|\n|trace|方法内部调用路径，并输出方法路径上的每个节点上耗时|trace com.xxx.xxService 方法名|\n|stack|输出当前方法被调用的调用路径|stack com.xxx.xxService 方法名|\n\n## 完整命令介绍\n> [完整命令详细文档](https://arthas.aliyun.com/doc/commands.html)\n\n|命令名称|描述|示例|\n|---|---|---|\n|help|显示arthas帮助| |\n|auth|验证当前会话| |\n|keymap|显示指定连接的所有可用键图。| |\n|sc|搜索JVM加载的所有类| |\n|sm|搜索JVM加载的类的方法| |\n|classloader|显示类加载器信息| |\n|jad|反编译类| |\n|getstatic|显示类的静态字段| |\n|monitor|监控方法执行统计数据，例如总/成功/失败计数，平均rt，失败率等。 |  |\n|stack|显示指定类和方法的堆栈跟踪| |\n|thread|显示线程信息，线程堆栈| |\n|trace|跟踪指定方法调用的执行时间。| |\n|watch|显示指定方法调用的输入/输出参数、返回对象和抛出异常 | |\n|tt|时间隧道| |\n|jvm|显示目标JVM信息| |\n|perfcounter|显示性能计数器信息。| |\n|ognl|执行ognl表达式。| |\n|mc|内存编译器，在内存中将java文件编译成字节码和类文件。| |\n|redefine|重新定义类。@see仪表# redefineClasses (ClassDefinition…) | |\n|retransform|使变回原形类。@see仪表# retransformClasses(类…) | |\n|dashboard|目标jvm的线程，内存，gc, vm, tomcat信息的概述。 | |\n|dump|从JVM中转储类字节数组| |\n|heapdump|堆转储| |\n|options|查看和改变各种阿尔萨斯选项| |\n|cls|清理屏幕信息| |\n|reset|重置所有增强类| |\n|version|显示arthas版本| |\n|session|显示当前会话信息| |\n|sysprop|显示和更改系统属性。| |\n|sysenv|显示系统env。| |\n|vmoption|显示和更新虚拟机诊断选项。| |\n|logger|打印记录器信息，并更新记录器级别| |\n|history|显示命令历史| |\n|cat|连接和打印文件| |\n|base64|使用Base64表示进行编码和解码| |\n|echo|将参数写入标准输出| |\n|pwd|返回工作目录名| |\n|mbean|显示mbean信息| |\n|grep|用于管道的Grep命令。| |\n|tee|tee命令用于管道。| |\n|profiler|异步分析器。https://github.com/jvm-profiling-tools/async-profiler| |\n|vmtool|jvm的工具| |\n|stop|停止/关闭Arthas服务器并退出控制台。| |\n","slug":"devops/arthas","published":1,"updated":"2021-11-11T08:07:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxq000mjrnv9z1xfmnx","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><pre><code class=\"textmate\">线上问题排查工具，无侵入；支持查看服务jvm信息、方法出入参数信息、接口耗时等</code></pre>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://arthas.aliyun.com/doc/quick-start.html\">官网</a></li>\n<li><a href=\"https://github.com/alibaba/arthas/issues?q=label:user-case\">用户案例</a></li>\n<li><a href=\"https://github.com/alibaba/arthas/issues?utf8=%E2%9C%93&q=label:question-answered+\">常见问题回答</a><h2 id=\"安装启动\"><a href=\"#安装启动\" class=\"headerlink\" title=\"安装启动\"></a>安装启动</h2>```textmate</li>\n</ul>\n<p>1.arthas-boot方式安装<br>curl -O <a href=\"https://arthas.aliyun.com/arthas-boot.jar\">https://arthas.aliyun.com/arthas-boot.jar</a><br>java -jar arthas-boot.jar -h</p>\n<p>-h: 打印帮助信息</p>\n<pre><code>\n## 常用命令\n|命令名称|描述|示例|\n|---|---|---|\n|thread|查看当前线程信息，查看线程的堆栈|thread -n 3 指定最忙的前N个线程并打印堆栈&lt;br/&gt;thread -b 查找阻塞的线程|\n|jvm|显示jvm信息||\n|watch|方法执行数据观测|watch com.xxx.xxService 方法名 -x 3 (参数遍历深度3，默认1)|\n|trace|方法内部调用路径，并输出方法路径上的每个节点上耗时|trace com.xxx.xxService 方法名|\n|stack|输出当前方法被调用的调用路径|stack com.xxx.xxService 方法名|\n\n## 完整命令介绍\n&gt; [完整命令详细文档](https://arthas.aliyun.com/doc/commands.html)\n\n|命令名称|描述|示例|\n|---|---|---|\n|help|显示arthas帮助| |\n|auth|验证当前会话| |\n|keymap|显示指定连接的所有可用键图。| |\n|sc|搜索JVM加载的所有类| |\n|sm|搜索JVM加载的类的方法| |\n|classloader|显示类加载器信息| |\n|jad|反编译类| |\n|getstatic|显示类的静态字段| |\n|monitor|监控方法执行统计数据，例如总/成功/失败计数，平均rt，失败率等。 |  |\n|stack|显示指定类和方法的堆栈跟踪| |\n|thread|显示线程信息，线程堆栈| |\n|trace|跟踪指定方法调用的执行时间。| |\n|watch|显示指定方法调用的输入/输出参数、返回对象和抛出异常 | |\n|tt|时间隧道| |\n|jvm|显示目标JVM信息| |\n|perfcounter|显示性能计数器信息。| |\n|ognl|执行ognl表达式。| |\n|mc|内存编译器，在内存中将java文件编译成字节码和类文件。| |\n|redefine|重新定义类。@see仪表# redefineClasses (ClassDefinition…) | |\n|retransform|使变回原形类。@see仪表# retransformClasses(类…) | |\n|dashboard|目标jvm的线程，内存，gc, vm, tomcat信息的概述。 | |\n|dump|从JVM中转储类字节数组| |\n|heapdump|堆转储| |\n|options|查看和改变各种阿尔萨斯选项| |\n|cls|清理屏幕信息| |\n|reset|重置所有增强类| |\n|version|显示arthas版本| |\n|session|显示当前会话信息| |\n|sysprop|显示和更改系统属性。| |\n|sysenv|显示系统env。| |\n|vmoption|显示和更新虚拟机诊断选项。| |\n|logger|打印记录器信息，并更新记录器级别| |\n|history|显示命令历史| |\n|cat|连接和打印文件| |\n|base64|使用Base64表示进行编码和解码| |\n|echo|将参数写入标准输出| |\n|pwd|返回工作目录名| |\n|mbean|显示mbean信息| |\n|grep|用于管道的Grep命令。| |\n|tee|tee命令用于管道。| |\n|profiler|异步分析器。https://github.com/jvm-profiling-tools/async-profiler| |\n|vmtool|jvm的工具| |\n|stop|停止/关闭Arthas服务器并退出控制台。| |</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><pre><code class=\"textmate\">线上问题排查工具，无侵入；支持查看服务jvm信息、方法出入参数信息、接口耗时等</code></pre>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://arthas.aliyun.com/doc/quick-start.html\">官网</a></li>\n<li><a href=\"https://github.com/alibaba/arthas/issues?q=label:user-case\">用户案例</a></li>\n<li><a href=\"https://github.com/alibaba/arthas/issues?utf8=%E2%9C%93&q=label:question-answered+\">常见问题回答</a><h2 id=\"安装启动\"><a href=\"#安装启动\" class=\"headerlink\" title=\"安装启动\"></a>安装启动</h2>```textmate</li>\n</ul>\n<p>1.arthas-boot方式安装<br>curl -O <a href=\"https://arthas.aliyun.com/arthas-boot.jar\">https://arthas.aliyun.com/arthas-boot.jar</a><br>java -jar arthas-boot.jar -h</p>\n<p>-h: 打印帮助信息</p>\n<pre><code>\n## 常用命令\n|命令名称|描述|示例|\n|---|---|---|\n|thread|查看当前线程信息，查看线程的堆栈|thread -n 3 指定最忙的前N个线程并打印堆栈&lt;br/&gt;thread -b 查找阻塞的线程|\n|jvm|显示jvm信息||\n|watch|方法执行数据观测|watch com.xxx.xxService 方法名 -x 3 (参数遍历深度3，默认1)|\n|trace|方法内部调用路径，并输出方法路径上的每个节点上耗时|trace com.xxx.xxService 方法名|\n|stack|输出当前方法被调用的调用路径|stack com.xxx.xxService 方法名|\n\n## 完整命令介绍\n&gt; [完整命令详细文档](https://arthas.aliyun.com/doc/commands.html)\n\n|命令名称|描述|示例|\n|---|---|---|\n|help|显示arthas帮助| |\n|auth|验证当前会话| |\n|keymap|显示指定连接的所有可用键图。| |\n|sc|搜索JVM加载的所有类| |\n|sm|搜索JVM加载的类的方法| |\n|classloader|显示类加载器信息| |\n|jad|反编译类| |\n|getstatic|显示类的静态字段| |\n|monitor|监控方法执行统计数据，例如总/成功/失败计数，平均rt，失败率等。 |  |\n|stack|显示指定类和方法的堆栈跟踪| |\n|thread|显示线程信息，线程堆栈| |\n|trace|跟踪指定方法调用的执行时间。| |\n|watch|显示指定方法调用的输入/输出参数、返回对象和抛出异常 | |\n|tt|时间隧道| |\n|jvm|显示目标JVM信息| |\n|perfcounter|显示性能计数器信息。| |\n|ognl|执行ognl表达式。| |\n|mc|内存编译器，在内存中将java文件编译成字节码和类文件。| |\n|redefine|重新定义类。@see仪表# redefineClasses (ClassDefinition…) | |\n|retransform|使变回原形类。@see仪表# retransformClasses(类…) | |\n|dashboard|目标jvm的线程，内存，gc, vm, tomcat信息的概述。 | |\n|dump|从JVM中转储类字节数组| |\n|heapdump|堆转储| |\n|options|查看和改变各种阿尔萨斯选项| |\n|cls|清理屏幕信息| |\n|reset|重置所有增强类| |\n|version|显示arthas版本| |\n|session|显示当前会话信息| |\n|sysprop|显示和更改系统属性。| |\n|sysenv|显示系统env。| |\n|vmoption|显示和更新虚拟机诊断选项。| |\n|logger|打印记录器信息，并更新记录器级别| |\n|history|显示命令历史| |\n|cat|连接和打印文件| |\n|base64|使用Base64表示进行编码和解码| |\n|echo|将参数写入标准输出| |\n|pwd|返回工作目录名| |\n|mbean|显示mbean信息| |\n|grep|用于管道的Grep命令。| |\n|tee|tee命令用于管道。| |\n|profiler|异步分析器。https://github.com/jvm-profiling-tools/async-profiler| |\n|vmtool|jvm的工具| |\n|stop|停止/关闭Arthas服务器并退出控制台。| |</code></pre>\n"},{"title":"服务常见问题排查","date":"2021-02-09T09:08:25.000Z","_content":"\n### 死锁问题排查\n- 模拟死锁\n\n```java\n@Slf4j\npublic class ThreadTest {\n\n    public static String a1 = \"a1\";\n    public static String a2 = \"a2\";\n\n    public static void main(String[] args) {\n        new Thread(new PrintA()).start();\n        new Thread(new PrintB()).start();\n    }\n}\n```\n```java\n@Slf4j\nclass PrintA implements Runnable{\n    @SneakyThrows\n    @Override\n    public void run() {\n        synchronized (ThreadTest.a1){\n            log.info(\"PrintA =====> a1\");\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a2){\n                log.info(\"PrintA =====> a2\");\n            }\n        }\n    }\n}\n```\n```java\n@Slf4j\nclass PrintB implements Runnable{\n\n    @SneakyThrows\n    @Override\n    public void run() {\n        synchronized (ThreadTest.a2){\n            log.info(\"PrintB =====> a2\");\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a1){\n                log.info(\"PrintB =====> a1\");\n            }\n        }\n    }\n}\n```\n\n- 排查命令\n\n```shell\n# 查找到运行中java进程\njps -l\n\n# 查看进程堆栈信息\njstack pid\n\n# 查看服务gc情况\njstat -gcutil pid 1000\n```\n\n- 工具\n\n```textmate\n1.gceasy网站\n https://www.gceasy.io\n \n2.jconsole 或者 jvisualvm\n```\n\n### 频繁FullGC问题排查\n\n- 模拟频繁GC\n\n```java\n@Slf4j\npublic class OOMTest extends TestCore {\n\n    @Autowired\n    private ThreadPoolConfig poolConfig;\n\n    @Test\n    public void newInstance(){\n        for(;;){\n            ConcurrentHashMap map = new ConcurrentHashMap<>(3000);\n            map.put(\"a\",\"b\");\n            log.info(\"{} size={}\",map.toString(),map.size());\n        }\n    }\n}\n```\n\n- 排查\n\n```textmate\n1.配置项目启动参数\n    #出现 OOM 时生成堆 dump: \n    -XX:+HeapDumpOnOutOfMemoryError\n    #生成堆文件地址：\n    -XX:HeapDumpPath=/home/project/jvmlogs/\n\n2.查看哪些对象较大\n    jmap -histo pid | head -20\n\n3.通过指令排查(堆栈较大的话可能会将系统卡死)\n    jmap -dump:file=文件名.dump [pid]\n    # format=b 指定为二进制文件\n    jmap -dump:format=b,file=文件名 [pid]\n```\n\n- 分析\n\n```textmate\n工具 \n    1.jhat - jdk自带分析工具\n        jhat <heap-dump-file>  heap-dump-file 是文件的路径和文件名\n        执行后访问浏览器访问 http://localhost:7000/ 查看 \n    2.Eclipse Memory Analyzer(MAT)\n        https://www.eclipse.org/mat/downloads.php\n    3.IBM Heap Analyzer\n```\n","source":"_posts/devops/check.md","raw":"---\ntitle: 服务常见问题排查\ndate: 2021-02-09 17:08:25\ntags:\n- devops\ncategories:\n- 运维\n---\n\n### 死锁问题排查\n- 模拟死锁\n\n```java\n@Slf4j\npublic class ThreadTest {\n\n    public static String a1 = \"a1\";\n    public static String a2 = \"a2\";\n\n    public static void main(String[] args) {\n        new Thread(new PrintA()).start();\n        new Thread(new PrintB()).start();\n    }\n}\n```\n```java\n@Slf4j\nclass PrintA implements Runnable{\n    @SneakyThrows\n    @Override\n    public void run() {\n        synchronized (ThreadTest.a1){\n            log.info(\"PrintA =====> a1\");\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a2){\n                log.info(\"PrintA =====> a2\");\n            }\n        }\n    }\n}\n```\n```java\n@Slf4j\nclass PrintB implements Runnable{\n\n    @SneakyThrows\n    @Override\n    public void run() {\n        synchronized (ThreadTest.a2){\n            log.info(\"PrintB =====> a2\");\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a1){\n                log.info(\"PrintB =====> a1\");\n            }\n        }\n    }\n}\n```\n\n- 排查命令\n\n```shell\n# 查找到运行中java进程\njps -l\n\n# 查看进程堆栈信息\njstack pid\n\n# 查看服务gc情况\njstat -gcutil pid 1000\n```\n\n- 工具\n\n```textmate\n1.gceasy网站\n https://www.gceasy.io\n \n2.jconsole 或者 jvisualvm\n```\n\n### 频繁FullGC问题排查\n\n- 模拟频繁GC\n\n```java\n@Slf4j\npublic class OOMTest extends TestCore {\n\n    @Autowired\n    private ThreadPoolConfig poolConfig;\n\n    @Test\n    public void newInstance(){\n        for(;;){\n            ConcurrentHashMap map = new ConcurrentHashMap<>(3000);\n            map.put(\"a\",\"b\");\n            log.info(\"{} size={}\",map.toString(),map.size());\n        }\n    }\n}\n```\n\n- 排查\n\n```textmate\n1.配置项目启动参数\n    #出现 OOM 时生成堆 dump: \n    -XX:+HeapDumpOnOutOfMemoryError\n    #生成堆文件地址：\n    -XX:HeapDumpPath=/home/project/jvmlogs/\n\n2.查看哪些对象较大\n    jmap -histo pid | head -20\n\n3.通过指令排查(堆栈较大的话可能会将系统卡死)\n    jmap -dump:file=文件名.dump [pid]\n    # format=b 指定为二进制文件\n    jmap -dump:format=b,file=文件名 [pid]\n```\n\n- 分析\n\n```textmate\n工具 \n    1.jhat - jdk自带分析工具\n        jhat <heap-dump-file>  heap-dump-file 是文件的路径和文件名\n        执行后访问浏览器访问 http://localhost:7000/ 查看 \n    2.Eclipse Memory Analyzer(MAT)\n        https://www.eclipse.org/mat/downloads.php\n    3.IBM Heap Analyzer\n```\n","slug":"devops/check","published":1,"updated":"2021-10-13T02:25:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxs000qjrnvfrg52y8s","content":"<h3 id=\"死锁问题排查\"><a href=\"#死锁问题排查\" class=\"headerlink\" title=\"死锁问题排查\"></a>死锁问题排查</h3><ul>\n<li>模拟死锁</li>\n</ul>\n<pre><code class=\"java\">@Slf4j\npublic class ThreadTest &#123;\n\n    public static String a1 = &quot;a1&quot;;\n    public static String a2 = &quot;a2&quot;;\n\n    public static void main(String[] args) &#123;\n        new Thread(new PrintA()).start();\n        new Thread(new PrintB()).start();\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">@Slf4j\nclass PrintA implements Runnable&#123;\n    @SneakyThrows\n    @Override\n    public void run() &#123;\n        synchronized (ThreadTest.a1)&#123;\n            log.info(&quot;PrintA =====&gt; a1&quot;);\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a2)&#123;\n                log.info(&quot;PrintA =====&gt; a2&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">@Slf4j\nclass PrintB implements Runnable&#123;\n\n    @SneakyThrows\n    @Override\n    public void run() &#123;\n        synchronized (ThreadTest.a2)&#123;\n            log.info(&quot;PrintB =====&gt; a2&quot;);\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a1)&#123;\n                log.info(&quot;PrintB =====&gt; a1&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li>排查命令</li>\n</ul>\n<pre><code class=\"shell\"># 查找到运行中java进程\njps -l\n\n# 查看进程堆栈信息\njstack pid\n\n# 查看服务gc情况\njstat -gcutil pid 1000</code></pre>\n<ul>\n<li>工具</li>\n</ul>\n<pre><code class=\"textmate\">1.gceasy网站\n https://www.gceasy.io\n\n2.jconsole 或者 jvisualvm</code></pre>\n<h3 id=\"频繁FullGC问题排查\"><a href=\"#频繁FullGC问题排查\" class=\"headerlink\" title=\"频繁FullGC问题排查\"></a>频繁FullGC问题排查</h3><ul>\n<li>模拟频繁GC</li>\n</ul>\n<pre><code class=\"java\">@Slf4j\npublic class OOMTest extends TestCore &#123;\n\n    @Autowired\n    private ThreadPoolConfig poolConfig;\n\n    @Test\n    public void newInstance()&#123;\n        for(;;)&#123;\n            ConcurrentHashMap map = new ConcurrentHashMap&lt;&gt;(3000);\n            map.put(&quot;a&quot;,&quot;b&quot;);\n            log.info(&quot;&#123;&#125; size=&#123;&#125;&quot;,map.toString(),map.size());\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li>排查</li>\n</ul>\n<pre><code class=\"textmate\">1.配置项目启动参数\n    #出现 OOM 时生成堆 dump: \n    -XX:+HeapDumpOnOutOfMemoryError\n    #生成堆文件地址：\n    -XX:HeapDumpPath=/home/project/jvmlogs/\n\n2.查看哪些对象较大\n    jmap -histo pid | head -20\n\n3.通过指令排查(堆栈较大的话可能会将系统卡死)\n    jmap -dump:file=文件名.dump [pid]\n    # format=b 指定为二进制文件\n    jmap -dump:format=b,file=文件名 [pid]</code></pre>\n<ul>\n<li>分析</li>\n</ul>\n<pre><code class=\"textmate\">工具 \n    1.jhat - jdk自带分析工具\n        jhat &lt;heap-dump-file&gt;  heap-dump-file 是文件的路径和文件名\n        执行后访问浏览器访问 http://localhost:7000/ 查看 \n    2.Eclipse Memory Analyzer(MAT)\n        https://www.eclipse.org/mat/downloads.php\n    3.IBM Heap Analyzer</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"死锁问题排查\"><a href=\"#死锁问题排查\" class=\"headerlink\" title=\"死锁问题排查\"></a>死锁问题排查</h3><ul>\n<li>模拟死锁</li>\n</ul>\n<pre><code class=\"java\">@Slf4j\npublic class ThreadTest &#123;\n\n    public static String a1 = &quot;a1&quot;;\n    public static String a2 = &quot;a2&quot;;\n\n    public static void main(String[] args) &#123;\n        new Thread(new PrintA()).start();\n        new Thread(new PrintB()).start();\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">@Slf4j\nclass PrintA implements Runnable&#123;\n    @SneakyThrows\n    @Override\n    public void run() &#123;\n        synchronized (ThreadTest.a1)&#123;\n            log.info(&quot;PrintA =====&gt; a1&quot;);\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a2)&#123;\n                log.info(&quot;PrintA =====&gt; a2&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">@Slf4j\nclass PrintB implements Runnable&#123;\n\n    @SneakyThrows\n    @Override\n    public void run() &#123;\n        synchronized (ThreadTest.a2)&#123;\n            log.info(&quot;PrintB =====&gt; a2&quot;);\n            Thread.sleep(3000);\n            synchronized (ThreadTest.a1)&#123;\n                log.info(&quot;PrintB =====&gt; a1&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li>排查命令</li>\n</ul>\n<pre><code class=\"shell\"># 查找到运行中java进程\njps -l\n\n# 查看进程堆栈信息\njstack pid\n\n# 查看服务gc情况\njstat -gcutil pid 1000</code></pre>\n<ul>\n<li>工具</li>\n</ul>\n<pre><code class=\"textmate\">1.gceasy网站\n https://www.gceasy.io\n\n2.jconsole 或者 jvisualvm</code></pre>\n<h3 id=\"频繁FullGC问题排查\"><a href=\"#频繁FullGC问题排查\" class=\"headerlink\" title=\"频繁FullGC问题排查\"></a>频繁FullGC问题排查</h3><ul>\n<li>模拟频繁GC</li>\n</ul>\n<pre><code class=\"java\">@Slf4j\npublic class OOMTest extends TestCore &#123;\n\n    @Autowired\n    private ThreadPoolConfig poolConfig;\n\n    @Test\n    public void newInstance()&#123;\n        for(;;)&#123;\n            ConcurrentHashMap map = new ConcurrentHashMap&lt;&gt;(3000);\n            map.put(&quot;a&quot;,&quot;b&quot;);\n            log.info(&quot;&#123;&#125; size=&#123;&#125;&quot;,map.toString(),map.size());\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li>排查</li>\n</ul>\n<pre><code class=\"textmate\">1.配置项目启动参数\n    #出现 OOM 时生成堆 dump: \n    -XX:+HeapDumpOnOutOfMemoryError\n    #生成堆文件地址：\n    -XX:HeapDumpPath=/home/project/jvmlogs/\n\n2.查看哪些对象较大\n    jmap -histo pid | head -20\n\n3.通过指令排查(堆栈较大的话可能会将系统卡死)\n    jmap -dump:file=文件名.dump [pid]\n    # format=b 指定为二进制文件\n    jmap -dump:format=b,file=文件名 [pid]</code></pre>\n<ul>\n<li>分析</li>\n</ul>\n<pre><code class=\"textmate\">工具 \n    1.jhat - jdk自带分析工具\n        jhat &lt;heap-dump-file&gt;  heap-dump-file 是文件的路径和文件名\n        执行后访问浏览器访问 http://localhost:7000/ 查看 \n    2.Eclipse Memory Analyzer(MAT)\n        https://www.eclipse.org/mat/downloads.php\n    3.IBM Heap Analyzer</code></pre>\n"},{"title":"运维相关","date":"2021-04-16T06:19:25.000Z","_content":"### K8S相关\n- [k8s实践(转)](https://k8s.imroc.io/troubleshooting/)\n- [k8s问题定位手册(转)](https://www.processon.com/view/link/5e4662ade4b0d86ec4018e50#map)\n\n### Docker相关\n- [清理Docker](https://dockerwebdev.com/tutorials/clean-up-docker/)\n- [Kubernetes中文社区](https://www.kubernetes.org.cn/kubernetes-pod)\n- [Istio(ServiceMesh)](https://istio.io/latest/zh/docs/setup/getting-started/)\n- [Kiali](https://kiali.io/documentation/latest/runtimes-monitoring/#_quarkus)\n\n#### 本地启动K8S\n```textmate\n1.先下载安装docker desktop(建议3.2.2以上)\n    https://www.docker.com/products/docker-desktop\n\n2.安装好后启动docker desktop\n\n3.设置\n    3.1 Perferences ==> Kubernetes ==> 开启Enable Kubernetes，Show system containers\n    3.2 如果开启不了尝试手动下载k8s相关进行并重启docker desktop\n    3.3 下载与docker desktop中Kubernetes一致的版本\n        https://github.com/maguowei/k8s-docker-desktop-for-mac\n        \n```\n\n#### docker设置\n```textmate\n1.设置开机自启\n    sudo systemctl enable xx\n\n2.配置docker容器自动重启\n    docker update xx --restart=always\n```\n\n#### 清理Docker\n```textmate\nhttps://dockerwebdev.com/tutorials/clean-up-docker\n```\n\n#### 配置阿里云镜像加速\n```textmate\n阿里云控制台->容器服务->镜像加速器->选择不同系统的命令并执行\n```\n\n#### Docker踩坑\n```textmate\n1.目录挂载问题\n    如果要映射具体文件，需要先手工创建好，否则默认是作为文件夹创建的\n```\n\n### 虚拟机-VirtualBox\n#### VirtualBox虚拟机镜像安装工具\n```textmate\n   vargrant 软件(有对应的镜像仓库)\n   vargrant init center/7  ---> 会生成类似dockerfile的文件,支持修改配置\n   vargrant up --> 启动，相当于点虚拟机开机\n   vargrant ssh  ---> ssh链接虚拟机\n   vargrant reload ---> 重启虚拟机\n```\n","source":"_posts/devops/docker.md","raw":"---\ntitle: 运维相关\ndate: 2021-04-16 14:19:25\ntags:\n- docker\ncategories:\n- 运维\n---\n### K8S相关\n- [k8s实践(转)](https://k8s.imroc.io/troubleshooting/)\n- [k8s问题定位手册(转)](https://www.processon.com/view/link/5e4662ade4b0d86ec4018e50#map)\n\n### Docker相关\n- [清理Docker](https://dockerwebdev.com/tutorials/clean-up-docker/)\n- [Kubernetes中文社区](https://www.kubernetes.org.cn/kubernetes-pod)\n- [Istio(ServiceMesh)](https://istio.io/latest/zh/docs/setup/getting-started/)\n- [Kiali](https://kiali.io/documentation/latest/runtimes-monitoring/#_quarkus)\n\n#### 本地启动K8S\n```textmate\n1.先下载安装docker desktop(建议3.2.2以上)\n    https://www.docker.com/products/docker-desktop\n\n2.安装好后启动docker desktop\n\n3.设置\n    3.1 Perferences ==> Kubernetes ==> 开启Enable Kubernetes，Show system containers\n    3.2 如果开启不了尝试手动下载k8s相关进行并重启docker desktop\n    3.3 下载与docker desktop中Kubernetes一致的版本\n        https://github.com/maguowei/k8s-docker-desktop-for-mac\n        \n```\n\n#### docker设置\n```textmate\n1.设置开机自启\n    sudo systemctl enable xx\n\n2.配置docker容器自动重启\n    docker update xx --restart=always\n```\n\n#### 清理Docker\n```textmate\nhttps://dockerwebdev.com/tutorials/clean-up-docker\n```\n\n#### 配置阿里云镜像加速\n```textmate\n阿里云控制台->容器服务->镜像加速器->选择不同系统的命令并执行\n```\n\n#### Docker踩坑\n```textmate\n1.目录挂载问题\n    如果要映射具体文件，需要先手工创建好，否则默认是作为文件夹创建的\n```\n\n### 虚拟机-VirtualBox\n#### VirtualBox虚拟机镜像安装工具\n```textmate\n   vargrant 软件(有对应的镜像仓库)\n   vargrant init center/7  ---> 会生成类似dockerfile的文件,支持修改配置\n   vargrant up --> 启动，相当于点虚拟机开机\n   vargrant ssh  ---> ssh链接虚拟机\n   vargrant reload ---> 重启虚拟机\n```\n","slug":"devops/docker","published":1,"updated":"2021-07-26T07:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxt000sjrnveh1zb03g","content":"<h3 id=\"K8S相关\"><a href=\"#K8S相关\" class=\"headerlink\" title=\"K8S相关\"></a>K8S相关</h3><ul>\n<li><a href=\"https://k8s.imroc.io/troubleshooting/\">k8s实践(转)</a></li>\n<li><a href=\"https://www.processon.com/view/link/5e4662ade4b0d86ec4018e50#map\">k8s问题定位手册(转)</a></li>\n</ul>\n<h3 id=\"Docker相关\"><a href=\"#Docker相关\" class=\"headerlink\" title=\"Docker相关\"></a>Docker相关</h3><ul>\n<li><a href=\"https://dockerwebdev.com/tutorials/clean-up-docker/\">清理Docker</a></li>\n<li><a href=\"https://www.kubernetes.org.cn/kubernetes-pod\">Kubernetes中文社区</a></li>\n<li><a href=\"https://istio.io/latest/zh/docs/setup/getting-started/\">Istio(ServiceMesh)</a></li>\n<li><a href=\"https://kiali.io/documentation/latest/runtimes-monitoring/#_quarkus\">Kiali</a></li>\n</ul>\n<h4 id=\"本地启动K8S\"><a href=\"#本地启动K8S\" class=\"headerlink\" title=\"本地启动K8S\"></a>本地启动K8S</h4><pre><code class=\"textmate\">1.先下载安装docker desktop(建议3.2.2以上)\n    https://www.docker.com/products/docker-desktop\n\n2.安装好后启动docker desktop\n\n3.设置\n    3.1 Perferences ==&gt; Kubernetes ==&gt; 开启Enable Kubernetes，Show system containers\n    3.2 如果开启不了尝试手动下载k8s相关进行并重启docker desktop\n    3.3 下载与docker desktop中Kubernetes一致的版本\n        https://github.com/maguowei/k8s-docker-desktop-for-mac\n</code></pre>\n<h4 id=\"docker设置\"><a href=\"#docker设置\" class=\"headerlink\" title=\"docker设置\"></a>docker设置</h4><pre><code class=\"textmate\">1.设置开机自启\n    sudo systemctl enable xx\n\n2.配置docker容器自动重启\n    docker update xx --restart=always</code></pre>\n<h4 id=\"清理Docker\"><a href=\"#清理Docker\" class=\"headerlink\" title=\"清理Docker\"></a>清理Docker</h4><pre><code class=\"textmate\">https://dockerwebdev.com/tutorials/clean-up-docker</code></pre>\n<h4 id=\"配置阿里云镜像加速\"><a href=\"#配置阿里云镜像加速\" class=\"headerlink\" title=\"配置阿里云镜像加速\"></a>配置阿里云镜像加速</h4><pre><code class=\"textmate\">阿里云控制台-&gt;容器服务-&gt;镜像加速器-&gt;选择不同系统的命令并执行</code></pre>\n<h4 id=\"Docker踩坑\"><a href=\"#Docker踩坑\" class=\"headerlink\" title=\"Docker踩坑\"></a>Docker踩坑</h4><pre><code class=\"textmate\">1.目录挂载问题\n    如果要映射具体文件，需要先手工创建好，否则默认是作为文件夹创建的</code></pre>\n<h3 id=\"虚拟机-VirtualBox\"><a href=\"#虚拟机-VirtualBox\" class=\"headerlink\" title=\"虚拟机-VirtualBox\"></a>虚拟机-VirtualBox</h3><h4 id=\"VirtualBox虚拟机镜像安装工具\"><a href=\"#VirtualBox虚拟机镜像安装工具\" class=\"headerlink\" title=\"VirtualBox虚拟机镜像安装工具\"></a>VirtualBox虚拟机镜像安装工具</h4><pre><code class=\"textmate\">   vargrant 软件(有对应的镜像仓库)\n   vargrant init center/7  ---&gt; 会生成类似dockerfile的文件,支持修改配置\n   vargrant up --&gt; 启动，相当于点虚拟机开机\n   vargrant ssh  ---&gt; ssh链接虚拟机\n   vargrant reload ---&gt; 重启虚拟机</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"K8S相关\"><a href=\"#K8S相关\" class=\"headerlink\" title=\"K8S相关\"></a>K8S相关</h3><ul>\n<li><a href=\"https://k8s.imroc.io/troubleshooting/\">k8s实践(转)</a></li>\n<li><a href=\"https://www.processon.com/view/link/5e4662ade4b0d86ec4018e50#map\">k8s问题定位手册(转)</a></li>\n</ul>\n<h3 id=\"Docker相关\"><a href=\"#Docker相关\" class=\"headerlink\" title=\"Docker相关\"></a>Docker相关</h3><ul>\n<li><a href=\"https://dockerwebdev.com/tutorials/clean-up-docker/\">清理Docker</a></li>\n<li><a href=\"https://www.kubernetes.org.cn/kubernetes-pod\">Kubernetes中文社区</a></li>\n<li><a href=\"https://istio.io/latest/zh/docs/setup/getting-started/\">Istio(ServiceMesh)</a></li>\n<li><a href=\"https://kiali.io/documentation/latest/runtimes-monitoring/#_quarkus\">Kiali</a></li>\n</ul>\n<h4 id=\"本地启动K8S\"><a href=\"#本地启动K8S\" class=\"headerlink\" title=\"本地启动K8S\"></a>本地启动K8S</h4><pre><code class=\"textmate\">1.先下载安装docker desktop(建议3.2.2以上)\n    https://www.docker.com/products/docker-desktop\n\n2.安装好后启动docker desktop\n\n3.设置\n    3.1 Perferences ==&gt; Kubernetes ==&gt; 开启Enable Kubernetes，Show system containers\n    3.2 如果开启不了尝试手动下载k8s相关进行并重启docker desktop\n    3.3 下载与docker desktop中Kubernetes一致的版本\n        https://github.com/maguowei/k8s-docker-desktop-for-mac\n</code></pre>\n<h4 id=\"docker设置\"><a href=\"#docker设置\" class=\"headerlink\" title=\"docker设置\"></a>docker设置</h4><pre><code class=\"textmate\">1.设置开机自启\n    sudo systemctl enable xx\n\n2.配置docker容器自动重启\n    docker update xx --restart=always</code></pre>\n<h4 id=\"清理Docker\"><a href=\"#清理Docker\" class=\"headerlink\" title=\"清理Docker\"></a>清理Docker</h4><pre><code class=\"textmate\">https://dockerwebdev.com/tutorials/clean-up-docker</code></pre>\n<h4 id=\"配置阿里云镜像加速\"><a href=\"#配置阿里云镜像加速\" class=\"headerlink\" title=\"配置阿里云镜像加速\"></a>配置阿里云镜像加速</h4><pre><code class=\"textmate\">阿里云控制台-&gt;容器服务-&gt;镜像加速器-&gt;选择不同系统的命令并执行</code></pre>\n<h4 id=\"Docker踩坑\"><a href=\"#Docker踩坑\" class=\"headerlink\" title=\"Docker踩坑\"></a>Docker踩坑</h4><pre><code class=\"textmate\">1.目录挂载问题\n    如果要映射具体文件，需要先手工创建好，否则默认是作为文件夹创建的</code></pre>\n<h3 id=\"虚拟机-VirtualBox\"><a href=\"#虚拟机-VirtualBox\" class=\"headerlink\" title=\"虚拟机-VirtualBox\"></a>虚拟机-VirtualBox</h3><h4 id=\"VirtualBox虚拟机镜像安装工具\"><a href=\"#VirtualBox虚拟机镜像安装工具\" class=\"headerlink\" title=\"VirtualBox虚拟机镜像安装工具\"></a>VirtualBox虚拟机镜像安装工具</h4><pre><code class=\"textmate\">   vargrant 软件(有对应的镜像仓库)\n   vargrant init center/7  ---&gt; 会生成类似dockerfile的文件,支持修改配置\n   vargrant up --&gt; 启动，相当于点虚拟机开机\n   vargrant ssh  ---&gt; ssh链接虚拟机\n   vargrant reload ---&gt; 重启虚拟机</code></pre>\n"},{"title":"调用链监控-skywalking","date":"2021-05-19T08:52:25.000Z","_content":"\n- [官网](http://skywalking.apache.org/)\n- [下载地址](http://skywalking.apache.org/downloads/)\n- [部署及使用文档(转)](https://www.jianshu.com/p/8b9aad4210c5)\n\n### 常见问题\n- 重启\n```textmate\n原脚本中没有杀掉旧进程，使用jps找到对应服务，然后kill掉再执行bin/startup.sh\n```\n- 支持SpringCloudGateway\n```textmate\n默认情况agent是不支持对spring-cloud-gateway的监控的，需要插件的支持。我们要将optional-plugins下的插件apm-spring-cloud-gateway-2.x-plugin-6.5.0.jar拷贝到plugins下\n```\n","source":"_posts/devops/skywalking.md","raw":"---\ntitle: 调用链监控-skywalking\ndate: 2021-05-19 16:52:25\ntags:\n- skywalking \ncategories:\n- 运维\n---\n\n- [官网](http://skywalking.apache.org/)\n- [下载地址](http://skywalking.apache.org/downloads/)\n- [部署及使用文档(转)](https://www.jianshu.com/p/8b9aad4210c5)\n\n### 常见问题\n- 重启\n```textmate\n原脚本中没有杀掉旧进程，使用jps找到对应服务，然后kill掉再执行bin/startup.sh\n```\n- 支持SpringCloudGateway\n```textmate\n默认情况agent是不支持对spring-cloud-gateway的监控的，需要插件的支持。我们要将optional-plugins下的插件apm-spring-cloud-gateway-2.x-plugin-6.5.0.jar拷贝到plugins下\n```\n","slug":"devops/skywalking","published":1,"updated":"2021-07-26T07:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxt000vjrnv7jtrc4kl","content":"<ul>\n<li><a href=\"http://skywalking.apache.org/\">官网</a></li>\n<li><a href=\"http://skywalking.apache.org/downloads/\">下载地址</a></li>\n<li><a href=\"https://www.jianshu.com/p/8b9aad4210c5\">部署及使用文档(转)</a></li>\n</ul>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>重启<pre><code class=\"textmate\">原脚本中没有杀掉旧进程，使用jps找到对应服务，然后kill掉再执行bin/startup.sh</code></pre>\n</li>\n<li>支持SpringCloudGateway<pre><code class=\"textmate\">默认情况agent是不支持对spring-cloud-gateway的监控的，需要插件的支持。我们要将optional-plugins下的插件apm-spring-cloud-gateway-2.x-plugin-6.5.0.jar拷贝到plugins下</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"http://skywalking.apache.org/\">官网</a></li>\n<li><a href=\"http://skywalking.apache.org/downloads/\">下载地址</a></li>\n<li><a href=\"https://www.jianshu.com/p/8b9aad4210c5\">部署及使用文档(转)</a></li>\n</ul>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>重启<pre><code class=\"textmate\">原脚本中没有杀掉旧进程，使用jps找到对应服务，然后kill掉再执行bin/startup.sh</code></pre>\n</li>\n<li>支持SpringCloudGateway<pre><code class=\"textmate\">默认情况agent是不支持对spring-cloud-gateway的监控的，需要插件的支持。我们要将optional-plugins下的插件apm-spring-cloud-gateway-2.x-plugin-6.5.0.jar拷贝到plugins下</code></pre>\n</li>\n</ul>\n"},{"title":"istio","date":"2021-05-18T08:30:00.000Z","_content":"\n- [官网](https://istio.io/latest/zh/docs/examples/bookinfo/)\n- [istio性能测试](https://www.jianshu.com/p/1f3f62ce3ea9)\n\n### 流量管理\n- 配置基本请求路由\n```yaml\nspec:\n  hosts:\n    - reviews\n  http:\n    - route:\n        - destination:\n            host: reviews\n            subset: v1\n```\n\n- 按照请求头中用户信息过滤\n```yaml\nspec:\n  hosts:\n    - reviews\n  http:\n    - match:\n        - headers:\n            end-user:\n              exact: jason\n      route:\n        - destination:\n            host: reviews\n            subset: v2\n    - match:\n        - headers:\n            end-user:\n              exact: aaa\n      route:\n        - destination:\n            host: reviews\n            subset: v2\n    - route:\n        - destination:\n            host: reviews\n            subset: v3\n```\n\n- 故障注入-延迟(jason登录，访问6s后页面才加载出来)\n```yaml\nspec:\n  hosts:\n    - ratings\n  http:\n    - fault:\n        delay:\n          fixedDelay: 7s # 7s延迟\n          percentage:\n            value: 100\n      match:\n        - headers:\n            end-user:\n              exact: jason\n      route:\n        - destination:\n            host: ratings\n            subset: v1\n    - route:\n        - destination:\n            host: ratings\n            subset: v1\n```\n\n- 故障注入-异常(jason登录，50几率访问返回500)\n```yaml\nspec:\n  hosts:\n  - ratings\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    fault:\n      abort:\n        percentage:\n          value: 50\n        httpStatus: 500 #注入500错误\n    route:\n    - destination:\n        host: ratings\n        subset: v1\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n```\n\n- 流量转移\n```yaml\nspec:\n  hosts:\n    - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 50\n    - destination:\n        host: reviews\n        subset: v3\n      weight: 50\n```\n\n- 设置请求超时(2s延迟)\n```yaml\nspec:\n  hosts:\n  - ratings\n  http:\n  - fault:\n      delay:\n        percent: 100\n        fixedDelay: 2s\n    route:\n    - destination:\n        host: ratings\n        subset: v1\n```\n","source":"_posts/devops/istio.md","raw":"---\ntitle: istio\ndate: 2021-05-18 16:30:00\ntags:\n- istio \ncategories:\n- 运维\n---\n\n- [官网](https://istio.io/latest/zh/docs/examples/bookinfo/)\n- [istio性能测试](https://www.jianshu.com/p/1f3f62ce3ea9)\n\n### 流量管理\n- 配置基本请求路由\n```yaml\nspec:\n  hosts:\n    - reviews\n  http:\n    - route:\n        - destination:\n            host: reviews\n            subset: v1\n```\n\n- 按照请求头中用户信息过滤\n```yaml\nspec:\n  hosts:\n    - reviews\n  http:\n    - match:\n        - headers:\n            end-user:\n              exact: jason\n      route:\n        - destination:\n            host: reviews\n            subset: v2\n    - match:\n        - headers:\n            end-user:\n              exact: aaa\n      route:\n        - destination:\n            host: reviews\n            subset: v2\n    - route:\n        - destination:\n            host: reviews\n            subset: v3\n```\n\n- 故障注入-延迟(jason登录，访问6s后页面才加载出来)\n```yaml\nspec:\n  hosts:\n    - ratings\n  http:\n    - fault:\n        delay:\n          fixedDelay: 7s # 7s延迟\n          percentage:\n            value: 100\n      match:\n        - headers:\n            end-user:\n              exact: jason\n      route:\n        - destination:\n            host: ratings\n            subset: v1\n    - route:\n        - destination:\n            host: ratings\n            subset: v1\n```\n\n- 故障注入-异常(jason登录，50几率访问返回500)\n```yaml\nspec:\n  hosts:\n  - ratings\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    fault:\n      abort:\n        percentage:\n          value: 50\n        httpStatus: 500 #注入500错误\n    route:\n    - destination:\n        host: ratings\n        subset: v1\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n```\n\n- 流量转移\n```yaml\nspec:\n  hosts:\n    - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 50\n    - destination:\n        host: reviews\n        subset: v3\n      weight: 50\n```\n\n- 设置请求超时(2s延迟)\n```yaml\nspec:\n  hosts:\n  - ratings\n  http:\n  - fault:\n      delay:\n        percent: 100\n        fixedDelay: 2s\n    route:\n    - destination:\n        host: ratings\n        subset: v1\n```\n","slug":"devops/istio","published":1,"updated":"2021-07-26T07:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxt000zjrnv2kur0nsa","content":"<ul>\n<li><a href=\"https://istio.io/latest/zh/docs/examples/bookinfo/\">官网</a></li>\n<li><a href=\"https://www.jianshu.com/p/1f3f62ce3ea9\">istio性能测试</a></li>\n</ul>\n<h3 id=\"流量管理\"><a href=\"#流量管理\" class=\"headerlink\" title=\"流量管理\"></a>流量管理</h3><ul>\n<li><p>配置基本请求路由</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - reviews\nhttp:\n  - route:\n      - destination:\n          host: reviews\n          subset: v1</code></pre>\n</li>\n<li><p>按照请求头中用户信息过滤</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - reviews\nhttp:\n  - match:\n      - headers:\n          end-user:\n            exact: jason\n    route:\n      - destination:\n          host: reviews\n          subset: v2\n  - match:\n      - headers:\n          end-user:\n            exact: aaa\n    route:\n      - destination:\n          host: reviews\n          subset: v2\n  - route:\n      - destination:\n          host: reviews\n          subset: v3</code></pre>\n</li>\n<li><p>故障注入-延迟(jason登录，访问6s后页面才加载出来)</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - ratings\nhttp:\n  - fault:\n      delay:\n        fixedDelay: 7s # 7s延迟\n        percentage:\n          value: 100\n    match:\n      - headers:\n          end-user:\n            exact: jason\n    route:\n      - destination:\n          host: ratings\n          subset: v1\n  - route:\n      - destination:\n          host: ratings\n          subset: v1</code></pre>\n</li>\n<li><p>故障注入-异常(jason登录，50几率访问返回500)</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n- ratings\nhttp:\n- match:\n  - headers:\n      end-user:\n        exact: jason\n  fault:\n    abort:\n      percentage:\n        value: 50\n      httpStatus: 500 #注入500错误\n  route:\n  - destination:\n      host: ratings\n      subset: v1\n- route:\n  - destination:\n      host: ratings\n      subset: v1</code></pre>\n</li>\n<li><p>流量转移</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - reviews\nhttp:\n- route:\n  - destination:\n      host: reviews\n      subset: v1\n    weight: 50\n  - destination:\n      host: reviews\n      subset: v3\n    weight: 50</code></pre>\n</li>\n<li><p>设置请求超时(2s延迟)</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n- ratings\nhttp:\n- fault:\n    delay:\n      percent: 100\n      fixedDelay: 2s\n  route:\n  - destination:\n      host: ratings\n      subset: v1</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://istio.io/latest/zh/docs/examples/bookinfo/\">官网</a></li>\n<li><a href=\"https://www.jianshu.com/p/1f3f62ce3ea9\">istio性能测试</a></li>\n</ul>\n<h3 id=\"流量管理\"><a href=\"#流量管理\" class=\"headerlink\" title=\"流量管理\"></a>流量管理</h3><ul>\n<li><p>配置基本请求路由</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - reviews\nhttp:\n  - route:\n      - destination:\n          host: reviews\n          subset: v1</code></pre>\n</li>\n<li><p>按照请求头中用户信息过滤</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - reviews\nhttp:\n  - match:\n      - headers:\n          end-user:\n            exact: jason\n    route:\n      - destination:\n          host: reviews\n          subset: v2\n  - match:\n      - headers:\n          end-user:\n            exact: aaa\n    route:\n      - destination:\n          host: reviews\n          subset: v2\n  - route:\n      - destination:\n          host: reviews\n          subset: v3</code></pre>\n</li>\n<li><p>故障注入-延迟(jason登录，访问6s后页面才加载出来)</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - ratings\nhttp:\n  - fault:\n      delay:\n        fixedDelay: 7s # 7s延迟\n        percentage:\n          value: 100\n    match:\n      - headers:\n          end-user:\n            exact: jason\n    route:\n      - destination:\n          host: ratings\n          subset: v1\n  - route:\n      - destination:\n          host: ratings\n          subset: v1</code></pre>\n</li>\n<li><p>故障注入-异常(jason登录，50几率访问返回500)</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n- ratings\nhttp:\n- match:\n  - headers:\n      end-user:\n        exact: jason\n  fault:\n    abort:\n      percentage:\n        value: 50\n      httpStatus: 500 #注入500错误\n  route:\n  - destination:\n      host: ratings\n      subset: v1\n- route:\n  - destination:\n      host: ratings\n      subset: v1</code></pre>\n</li>\n<li><p>流量转移</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n  - reviews\nhttp:\n- route:\n  - destination:\n      host: reviews\n      subset: v1\n    weight: 50\n  - destination:\n      host: reviews\n      subset: v3\n    weight: 50</code></pre>\n</li>\n<li><p>设置请求超时(2s延迟)</p>\n<pre><code class=\"yaml\">spec:\nhosts:\n- ratings\nhttp:\n- fault:\n    delay:\n      percent: 100\n      fixedDelay: 2s\n  route:\n  - destination:\n      host: ratings\n      subset: v1</code></pre>\n</li>\n</ul>\n"},{"title":"LDAP学习笔记","date":"2021-02-18T06:25:55.000Z","_content":"\n### 相关链接\n- [OpenLDAP](https://www.openldap.org/)\n- [LDAP-admin操作指南](https://www.cnblogs.com/xiaomifeng0510/p/9564688.html)\n- [CSDN-Demo](https://blog.csdn.net/weixin_30338461/article/details/98920690)\n- [官方文档及例子(重要)](http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/reference/)\n- [JAVA文档（重要）](http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/apidocs/)\n- [GitHub（大量例子）](https://github.com/spring-projects/spring-ldap)\n\n### 常用名词\n```textmate\no– organization（组织-公司）\nou – organization unit（组织单元-部门）\nc - countryName（国家）\ndc - domainComponent（域名）\nsn – suer name（真实名称）\ncn - common name（常用名称)\n```\n\n### Docker部署LDAP\n- ldap\n```shell\n#用户名 cn=admin,dc=company,dc=com\n#密码 123456\n#注意，\\后面不能有空格\ndocker run \\\n-p 389:389 \\\n-p 636:636 \\\n--name my-ldap \\\n--network bridge \\\n--hostname openldap-host \\\n--env LDAP_ORGANISATION=\"company\" \\\n--env LDAP_DOMAIN=\"company.com\" \\\n--env LDAP_ADMIN_PASSWORD=\"123456\" \\\n--detach osixia/openldap\n```\n\n- ldap-admin\n\n```shell\n#启动后浏览器访问http://localhost:8080\ndocker run \\\n-d \\\n--privileged \\\n-p 8080:80 \\\n--name ldap-admin \\\n--env PHPLDAPADMIN_HTTPS=false \\\n--env PHPLDAPADMIN_LDAP_HOSTS=LDAP服务IP \\\n--detach osixia/phpldapadmin\n```\n\n### 查询用户信息\n#### 方式一\n```java\n@Slf4j\npublic class ldapService{\n    public static void main(String[] args) {\n        try {\n            String bindUserDN = \"cn=admin,dc=company,dc=com\";\n            //用户密码\n            String bindPassword = \"123456\";\n            //ldap服务器IP\n            String url = \"ldap://127.0.0.1:389/dc=company,dc=com\";\n\n            Hashtable<String, String> env = new Hashtable<>();\n            env.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            env.put(javax.naming.Context.PROVIDER_URL, url);\n            env.put(javax.naming.Context.SECURITY_AUTHENTICATION, \"simple\");\n            env.put(javax.naming.Context.SECURITY_PRINCIPAL, bindUserDN);\n            env.put(javax.naming.Context.SECURITY_CREDENTIALS, bindPassword);\n            env.put(\"java.naming.referral\", \"follow\");\n\n            DirContext ctx = new InitialDirContext(env);\n            log.info(\"ctx={}\", JSON.toJSONString(ctx));\n        } catch (Exception e) {\n            log.info(\"LDAP登录失败 userName={},passWord={},error={}\",username,password,e);\n        }\n        \n    }\n}\n```\n##### 方式二(ldapTemplate)\n- 配置\n```xml\n<!-- ldap -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-ldap</artifactId>\n    <version>2.3.2.RELEASE</version>\n</dependency>\n```\n```yaml\n  # LDAP连接配置,配置的base是不应该再加到节点的dn里面去的(dc=company,dc=com)\nspring:\n  ldap:\n    urls: ldap://127.0.0.1:389\n    base: dc=company,dc=com\n    username: cn=admin,dc=company,dc=com\n    password: 123456\n```\n\n- 代码(model)\n```java\n@Getter\n@Setter\n@ToString\n@Entry(objectClasses = {\"simpleSecurityObject\", \"organizationalRole\",\"top\"}, base = \"ou=cmdb,ou=People\")\npublic class LdapPerson {\n\n    @Id\n    @JsonIgnore\n    private Name dn;\n\n    /** 用户名 **/\n    @Attribute(name=\"cn\")\n    private String personName;\n\n    @Attribute(name=\"sn\")\n    private String sn;\n\n    @Attribute(name=\"email\")\n    private String email;\n\n    /** 昵称 **/\n    @Attribute(name=\"displayName\")\n    private String displayName;\n\n    @Attribute(name=\"password\")\n    private String password;\n}\n```\n\n- 代码(dao)\n```java\n@Slf4j\npublic class PersonAttributesMapper implements AttributesMapper<LdapPerson> {\n    @Override\n    public LdapPerson mapFromAttributes(Attributes attrs) throws NamingException {\n        LdapPerson person = new LdapPerson();\n        person.setPersonName((String)attrs.get(\"cn\").get());\n\n        //获取密码\n        byte[] bts = (byte[]) attrs.get(\"userpassword\").get();\n        String password = \"\";\n        for(byte bt : bts){\n            password = password + (char)bt;\n        }\n        person.setPassword(password);\n        return person;\n    }\n}\n```\n\n- 代码(service)\n```java\npublic class LoginService{\n    \n    //lookup查询(精确定位查询)\n    public AjaxResult<LdapPerson> ldapCheck(String username, String password) {\n        String dn = String.format(userDN,username);\n        LdapPerson person = ldapTemplate.lookup(dn, new PersonAttributesMapper());\n        log.info(\"LDAP登录 username:{},person={}\",username,JSON.toJSONString(person));\n        if(person == null){\n            return AjaxResult.error(\"账号不存在\");\n        }\n        if(!password.equals(person.getPassword())){\n            log.error(\"LDAP账号对应密码错误,username={},password={},realPwd={}\",username,password,person.getPassword());\n            return AjaxResult.error(\"密码错误\");\n        }\n        return AjaxResult.success(person);\n    }\n    \n    //search(遍历所有节点匹配)\n    public LdapPerson getLdapAccountByName(String name) {\n\n        LdapQuery query = query()\n                .where(\"objectclass\").is(objectclass)\n                .and(\"cn\").is(name);\n\n        List<LdapPerson> persons = ldapTemplate.search(query,new PersonAttributesMapper());\n        if(CollectionUtils.isEmpty(persons)){\n            return null;\n        }\n        return persons.get(0);\n    }\n}\n```\n","source":"_posts/devops/ldap.md","raw":"---\ntitle: LDAP学习笔记\ndate: 2021-02-18 14:25:55\ntags:\n- ldap\ncategories:\n- 运维\n---\n\n### 相关链接\n- [OpenLDAP](https://www.openldap.org/)\n- [LDAP-admin操作指南](https://www.cnblogs.com/xiaomifeng0510/p/9564688.html)\n- [CSDN-Demo](https://blog.csdn.net/weixin_30338461/article/details/98920690)\n- [官方文档及例子(重要)](http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/reference/)\n- [JAVA文档（重要）](http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/apidocs/)\n- [GitHub（大量例子）](https://github.com/spring-projects/spring-ldap)\n\n### 常用名词\n```textmate\no– organization（组织-公司）\nou – organization unit（组织单元-部门）\nc - countryName（国家）\ndc - domainComponent（域名）\nsn – suer name（真实名称）\ncn - common name（常用名称)\n```\n\n### Docker部署LDAP\n- ldap\n```shell\n#用户名 cn=admin,dc=company,dc=com\n#密码 123456\n#注意，\\后面不能有空格\ndocker run \\\n-p 389:389 \\\n-p 636:636 \\\n--name my-ldap \\\n--network bridge \\\n--hostname openldap-host \\\n--env LDAP_ORGANISATION=\"company\" \\\n--env LDAP_DOMAIN=\"company.com\" \\\n--env LDAP_ADMIN_PASSWORD=\"123456\" \\\n--detach osixia/openldap\n```\n\n- ldap-admin\n\n```shell\n#启动后浏览器访问http://localhost:8080\ndocker run \\\n-d \\\n--privileged \\\n-p 8080:80 \\\n--name ldap-admin \\\n--env PHPLDAPADMIN_HTTPS=false \\\n--env PHPLDAPADMIN_LDAP_HOSTS=LDAP服务IP \\\n--detach osixia/phpldapadmin\n```\n\n### 查询用户信息\n#### 方式一\n```java\n@Slf4j\npublic class ldapService{\n    public static void main(String[] args) {\n        try {\n            String bindUserDN = \"cn=admin,dc=company,dc=com\";\n            //用户密码\n            String bindPassword = \"123456\";\n            //ldap服务器IP\n            String url = \"ldap://127.0.0.1:389/dc=company,dc=com\";\n\n            Hashtable<String, String> env = new Hashtable<>();\n            env.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            env.put(javax.naming.Context.PROVIDER_URL, url);\n            env.put(javax.naming.Context.SECURITY_AUTHENTICATION, \"simple\");\n            env.put(javax.naming.Context.SECURITY_PRINCIPAL, bindUserDN);\n            env.put(javax.naming.Context.SECURITY_CREDENTIALS, bindPassword);\n            env.put(\"java.naming.referral\", \"follow\");\n\n            DirContext ctx = new InitialDirContext(env);\n            log.info(\"ctx={}\", JSON.toJSONString(ctx));\n        } catch (Exception e) {\n            log.info(\"LDAP登录失败 userName={},passWord={},error={}\",username,password,e);\n        }\n        \n    }\n}\n```\n##### 方式二(ldapTemplate)\n- 配置\n```xml\n<!-- ldap -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-ldap</artifactId>\n    <version>2.3.2.RELEASE</version>\n</dependency>\n```\n```yaml\n  # LDAP连接配置,配置的base是不应该再加到节点的dn里面去的(dc=company,dc=com)\nspring:\n  ldap:\n    urls: ldap://127.0.0.1:389\n    base: dc=company,dc=com\n    username: cn=admin,dc=company,dc=com\n    password: 123456\n```\n\n- 代码(model)\n```java\n@Getter\n@Setter\n@ToString\n@Entry(objectClasses = {\"simpleSecurityObject\", \"organizationalRole\",\"top\"}, base = \"ou=cmdb,ou=People\")\npublic class LdapPerson {\n\n    @Id\n    @JsonIgnore\n    private Name dn;\n\n    /** 用户名 **/\n    @Attribute(name=\"cn\")\n    private String personName;\n\n    @Attribute(name=\"sn\")\n    private String sn;\n\n    @Attribute(name=\"email\")\n    private String email;\n\n    /** 昵称 **/\n    @Attribute(name=\"displayName\")\n    private String displayName;\n\n    @Attribute(name=\"password\")\n    private String password;\n}\n```\n\n- 代码(dao)\n```java\n@Slf4j\npublic class PersonAttributesMapper implements AttributesMapper<LdapPerson> {\n    @Override\n    public LdapPerson mapFromAttributes(Attributes attrs) throws NamingException {\n        LdapPerson person = new LdapPerson();\n        person.setPersonName((String)attrs.get(\"cn\").get());\n\n        //获取密码\n        byte[] bts = (byte[]) attrs.get(\"userpassword\").get();\n        String password = \"\";\n        for(byte bt : bts){\n            password = password + (char)bt;\n        }\n        person.setPassword(password);\n        return person;\n    }\n}\n```\n\n- 代码(service)\n```java\npublic class LoginService{\n    \n    //lookup查询(精确定位查询)\n    public AjaxResult<LdapPerson> ldapCheck(String username, String password) {\n        String dn = String.format(userDN,username);\n        LdapPerson person = ldapTemplate.lookup(dn, new PersonAttributesMapper());\n        log.info(\"LDAP登录 username:{},person={}\",username,JSON.toJSONString(person));\n        if(person == null){\n            return AjaxResult.error(\"账号不存在\");\n        }\n        if(!password.equals(person.getPassword())){\n            log.error(\"LDAP账号对应密码错误,username={},password={},realPwd={}\",username,password,person.getPassword());\n            return AjaxResult.error(\"密码错误\");\n        }\n        return AjaxResult.success(person);\n    }\n    \n    //search(遍历所有节点匹配)\n    public LdapPerson getLdapAccountByName(String name) {\n\n        LdapQuery query = query()\n                .where(\"objectclass\").is(objectclass)\n                .and(\"cn\").is(name);\n\n        List<LdapPerson> persons = ldapTemplate.search(query,new PersonAttributesMapper());\n        if(CollectionUtils.isEmpty(persons)){\n            return null;\n        }\n        return persons.get(0);\n    }\n}\n```\n","slug":"devops/ldap","published":1,"updated":"2021-07-26T07:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxu0012jrnv8s9maong","content":"<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://www.openldap.org/\">OpenLDAP</a></li>\n<li><a href=\"https://www.cnblogs.com/xiaomifeng0510/p/9564688.html\">LDAP-admin操作指南</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30338461/article/details/98920690\">CSDN-Demo</a></li>\n<li><a href=\"http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/reference/\">官方文档及例子(重要)</a></li>\n<li><a href=\"http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/apidocs/\">JAVA文档（重要）</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-ldap\">GitHub（大量例子）</a></li>\n</ul>\n<h3 id=\"常用名词\"><a href=\"#常用名词\" class=\"headerlink\" title=\"常用名词\"></a>常用名词</h3><pre><code class=\"textmate\">o– organization（组织-公司）\nou – organization unit（组织单元-部门）\nc - countryName（国家）\ndc - domainComponent（域名）\nsn – suer name（真实名称）\ncn - common name（常用名称)</code></pre>\n<h3 id=\"Docker部署LDAP\"><a href=\"#Docker部署LDAP\" class=\"headerlink\" title=\"Docker部署LDAP\"></a>Docker部署LDAP</h3><ul>\n<li><p>ldap<br>```shell<br>#用户名 cn=admin,dc=company,dc=com<br>#密码 123456<br>#注意，\\后面不能有空格<br>docker run \\</p>\n</li>\n<li><p>p 389:389 \\</p>\n</li>\n<li><p>p 636:636 \\</p>\n</li>\n<li><p>-name my-ldap \\</p>\n</li>\n<li><p>-network bridge \\</p>\n</li>\n<li><p>-hostname openldap-host \\</p>\n</li>\n<li><p>-env LDAP_ORGANISATION=”company” \\</p>\n</li>\n<li><p>-env LDAP_DOMAIN=”company.com” \\</p>\n</li>\n<li><p>-env LDAP_ADMIN_PASSWORD=”123456” \\</p>\n</li>\n<li><p>-detach osixia/openldap</p>\n<pre><code></code></pre>\n</li>\n<li><p>ldap-admin</p>\n</li>\n</ul>\n<pre><code class=\"shell\">#启动后浏览器访问http://localhost:8080\ndocker run \\\n-d \\\n--privileged \\\n-p 8080:80 \\\n--name ldap-admin \\\n--env PHPLDAPADMIN_HTTPS=false \\\n--env PHPLDAPADMIN_LDAP_HOSTS=LDAP服务IP \\\n--detach osixia/phpldapadmin</code></pre>\n<h3 id=\"查询用户信息\"><a href=\"#查询用户信息\" class=\"headerlink\" title=\"查询用户信息\"></a>查询用户信息</h3><h4 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h4><pre><code class=\"java\">@Slf4j\npublic class ldapService&#123;\n    public static void main(String[] args) &#123;\n        try &#123;\n            String bindUserDN = &quot;cn=admin,dc=company,dc=com&quot;;\n            //用户密码\n            String bindPassword = &quot;123456&quot;;\n            //ldap服务器IP\n            String url = &quot;ldap://127.0.0.1:389/dc=company,dc=com&quot;;\n\n            Hashtable&lt;String, String&gt; env = new Hashtable&lt;&gt;();\n            env.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);\n            env.put(javax.naming.Context.PROVIDER_URL, url);\n            env.put(javax.naming.Context.SECURITY_AUTHENTICATION, &quot;simple&quot;);\n            env.put(javax.naming.Context.SECURITY_PRINCIPAL, bindUserDN);\n            env.put(javax.naming.Context.SECURITY_CREDENTIALS, bindPassword);\n            env.put(&quot;java.naming.referral&quot;, &quot;follow&quot;);\n\n            DirContext ctx = new InitialDirContext(env);\n            log.info(&quot;ctx=&#123;&#125;&quot;, JSON.toJSONString(ctx));\n        &#125; catch (Exception e) &#123;\n            log.info(&quot;LDAP登录失败 userName=&#123;&#125;,passWord=&#123;&#125;,error=&#123;&#125;&quot;,username,password,e);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n<h5 id=\"方式二-ldapTemplate\"><a href=\"#方式二-ldapTemplate\" class=\"headerlink\" title=\"方式二(ldapTemplate)\"></a>方式二(ldapTemplate)</h5><ul>\n<li><p>配置</p>\n<pre><code class=\"xml\">&lt;!-- ldap --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-data-ldap&lt;/artifactId&gt;\n  &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<pre><code class=\"yaml\"># LDAP连接配置,配置的base是不应该再加到节点的dn里面去的(dc=company,dc=com)\nspring:\nldap:\n  urls: ldap://127.0.0.1:389\n  base: dc=company,dc=com\n  username: cn=admin,dc=company,dc=com\n  password: 123456</code></pre>\n</li>\n<li><p>代码(model)</p>\n<pre><code class=\"java\">@Getter\n@Setter\n@ToString\n@Entry(objectClasses = &#123;&quot;simpleSecurityObject&quot;, &quot;organizationalRole&quot;,&quot;top&quot;&#125;, base = &quot;ou=cmdb,ou=People&quot;)\npublic class LdapPerson &#123;\n\n  @Id\n  @JsonIgnore\n  private Name dn;\n\n  /** 用户名 **/\n  @Attribute(name=&quot;cn&quot;)\n  private String personName;\n\n  @Attribute(name=&quot;sn&quot;)\n  private String sn;\n\n  @Attribute(name=&quot;email&quot;)\n  private String email;\n\n  /** 昵称 **/\n  @Attribute(name=&quot;displayName&quot;)\n  private String displayName;\n\n  @Attribute(name=&quot;password&quot;)\n  private String password;\n&#125;</code></pre>\n</li>\n<li><p>代码(dao)</p>\n<pre><code class=\"java\">@Slf4j\npublic class PersonAttributesMapper implements AttributesMapper&lt;LdapPerson&gt; &#123;\n  @Override\n  public LdapPerson mapFromAttributes(Attributes attrs) throws NamingException &#123;\n      LdapPerson person = new LdapPerson();\n      person.setPersonName((String)attrs.get(&quot;cn&quot;).get());\n\n      //获取密码\n      byte[] bts = (byte[]) attrs.get(&quot;userpassword&quot;).get();\n      String password = &quot;&quot;;\n      for(byte bt : bts)&#123;\n          password = password + (char)bt;\n      &#125;\n      person.setPassword(password);\n      return person;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>代码(service)</p>\n<pre><code class=\"java\">public class LoginService&#123;\n\n  //lookup查询(精确定位查询)\n  public AjaxResult&lt;LdapPerson&gt; ldapCheck(String username, String password) &#123;\n      String dn = String.format(userDN,username);\n      LdapPerson person = ldapTemplate.lookup(dn, new PersonAttributesMapper());\n      log.info(&quot;LDAP登录 username:&#123;&#125;,person=&#123;&#125;&quot;,username,JSON.toJSONString(person));\n      if(person == null)&#123;\n          return AjaxResult.error(&quot;账号不存在&quot;);\n      &#125;\n      if(!password.equals(person.getPassword()))&#123;\n          log.error(&quot;LDAP账号对应密码错误,username=&#123;&#125;,password=&#123;&#125;,realPwd=&#123;&#125;&quot;,username,password,person.getPassword());\n          return AjaxResult.error(&quot;密码错误&quot;);\n      &#125;\n      return AjaxResult.success(person);\n  &#125;\n\n  //search(遍历所有节点匹配)\n  public LdapPerson getLdapAccountByName(String name) &#123;\n\n      LdapQuery query = query()\n              .where(&quot;objectclass&quot;).is(objectclass)\n              .and(&quot;cn&quot;).is(name);\n\n      List&lt;LdapPerson&gt; persons = ldapTemplate.search(query,new PersonAttributesMapper());\n      if(CollectionUtils.isEmpty(persons))&#123;\n          return null;\n      &#125;\n      return persons.get(0);\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://www.openldap.org/\">OpenLDAP</a></li>\n<li><a href=\"https://www.cnblogs.com/xiaomifeng0510/p/9564688.html\">LDAP-admin操作指南</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30338461/article/details/98920690\">CSDN-Demo</a></li>\n<li><a href=\"http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/reference/\">官方文档及例子(重要)</a></li>\n<li><a href=\"http://docs.spring.io/spring-ldap/docs/2.1.0.RELEASE/apidocs/\">JAVA文档（重要）</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-ldap\">GitHub（大量例子）</a></li>\n</ul>\n<h3 id=\"常用名词\"><a href=\"#常用名词\" class=\"headerlink\" title=\"常用名词\"></a>常用名词</h3><pre><code class=\"textmate\">o– organization（组织-公司）\nou – organization unit（组织单元-部门）\nc - countryName（国家）\ndc - domainComponent（域名）\nsn – suer name（真实名称）\ncn - common name（常用名称)</code></pre>\n<h3 id=\"Docker部署LDAP\"><a href=\"#Docker部署LDAP\" class=\"headerlink\" title=\"Docker部署LDAP\"></a>Docker部署LDAP</h3><ul>\n<li><p>ldap<br>```shell<br>#用户名 cn=admin,dc=company,dc=com<br>#密码 123456<br>#注意，\\后面不能有空格<br>docker run \\</p>\n</li>\n<li><p>p 389:389 \\</p>\n</li>\n<li><p>p 636:636 \\</p>\n</li>\n<li><p>-name my-ldap \\</p>\n</li>\n<li><p>-network bridge \\</p>\n</li>\n<li><p>-hostname openldap-host \\</p>\n</li>\n<li><p>-env LDAP_ORGANISATION=”company” \\</p>\n</li>\n<li><p>-env LDAP_DOMAIN=”company.com” \\</p>\n</li>\n<li><p>-env LDAP_ADMIN_PASSWORD=”123456” \\</p>\n</li>\n<li><p>-detach osixia/openldap</p>\n<pre><code></code></pre>\n</li>\n<li><p>ldap-admin</p>\n</li>\n</ul>\n<pre><code class=\"shell\">#启动后浏览器访问http://localhost:8080\ndocker run \\\n-d \\\n--privileged \\\n-p 8080:80 \\\n--name ldap-admin \\\n--env PHPLDAPADMIN_HTTPS=false \\\n--env PHPLDAPADMIN_LDAP_HOSTS=LDAP服务IP \\\n--detach osixia/phpldapadmin</code></pre>\n<h3 id=\"查询用户信息\"><a href=\"#查询用户信息\" class=\"headerlink\" title=\"查询用户信息\"></a>查询用户信息</h3><h4 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h4><pre><code class=\"java\">@Slf4j\npublic class ldapService&#123;\n    public static void main(String[] args) &#123;\n        try &#123;\n            String bindUserDN = &quot;cn=admin,dc=company,dc=com&quot;;\n            //用户密码\n            String bindPassword = &quot;123456&quot;;\n            //ldap服务器IP\n            String url = &quot;ldap://127.0.0.1:389/dc=company,dc=com&quot;;\n\n            Hashtable&lt;String, String&gt; env = new Hashtable&lt;&gt;();\n            env.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);\n            env.put(javax.naming.Context.PROVIDER_URL, url);\n            env.put(javax.naming.Context.SECURITY_AUTHENTICATION, &quot;simple&quot;);\n            env.put(javax.naming.Context.SECURITY_PRINCIPAL, bindUserDN);\n            env.put(javax.naming.Context.SECURITY_CREDENTIALS, bindPassword);\n            env.put(&quot;java.naming.referral&quot;, &quot;follow&quot;);\n\n            DirContext ctx = new InitialDirContext(env);\n            log.info(&quot;ctx=&#123;&#125;&quot;, JSON.toJSONString(ctx));\n        &#125; catch (Exception e) &#123;\n            log.info(&quot;LDAP登录失败 userName=&#123;&#125;,passWord=&#123;&#125;,error=&#123;&#125;&quot;,username,password,e);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n<h5 id=\"方式二-ldapTemplate\"><a href=\"#方式二-ldapTemplate\" class=\"headerlink\" title=\"方式二(ldapTemplate)\"></a>方式二(ldapTemplate)</h5><ul>\n<li><p>配置</p>\n<pre><code class=\"xml\">&lt;!-- ldap --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-data-ldap&lt;/artifactId&gt;\n  &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<pre><code class=\"yaml\"># LDAP连接配置,配置的base是不应该再加到节点的dn里面去的(dc=company,dc=com)\nspring:\nldap:\n  urls: ldap://127.0.0.1:389\n  base: dc=company,dc=com\n  username: cn=admin,dc=company,dc=com\n  password: 123456</code></pre>\n</li>\n<li><p>代码(model)</p>\n<pre><code class=\"java\">@Getter\n@Setter\n@ToString\n@Entry(objectClasses = &#123;&quot;simpleSecurityObject&quot;, &quot;organizationalRole&quot;,&quot;top&quot;&#125;, base = &quot;ou=cmdb,ou=People&quot;)\npublic class LdapPerson &#123;\n\n  @Id\n  @JsonIgnore\n  private Name dn;\n\n  /** 用户名 **/\n  @Attribute(name=&quot;cn&quot;)\n  private String personName;\n\n  @Attribute(name=&quot;sn&quot;)\n  private String sn;\n\n  @Attribute(name=&quot;email&quot;)\n  private String email;\n\n  /** 昵称 **/\n  @Attribute(name=&quot;displayName&quot;)\n  private String displayName;\n\n  @Attribute(name=&quot;password&quot;)\n  private String password;\n&#125;</code></pre>\n</li>\n<li><p>代码(dao)</p>\n<pre><code class=\"java\">@Slf4j\npublic class PersonAttributesMapper implements AttributesMapper&lt;LdapPerson&gt; &#123;\n  @Override\n  public LdapPerson mapFromAttributes(Attributes attrs) throws NamingException &#123;\n      LdapPerson person = new LdapPerson();\n      person.setPersonName((String)attrs.get(&quot;cn&quot;).get());\n\n      //获取密码\n      byte[] bts = (byte[]) attrs.get(&quot;userpassword&quot;).get();\n      String password = &quot;&quot;;\n      for(byte bt : bts)&#123;\n          password = password + (char)bt;\n      &#125;\n      person.setPassword(password);\n      return person;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>代码(service)</p>\n<pre><code class=\"java\">public class LoginService&#123;\n\n  //lookup查询(精确定位查询)\n  public AjaxResult&lt;LdapPerson&gt; ldapCheck(String username, String password) &#123;\n      String dn = String.format(userDN,username);\n      LdapPerson person = ldapTemplate.lookup(dn, new PersonAttributesMapper());\n      log.info(&quot;LDAP登录 username:&#123;&#125;,person=&#123;&#125;&quot;,username,JSON.toJSONString(person));\n      if(person == null)&#123;\n          return AjaxResult.error(&quot;账号不存在&quot;);\n      &#125;\n      if(!password.equals(person.getPassword()))&#123;\n          log.error(&quot;LDAP账号对应密码错误,username=&#123;&#125;,password=&#123;&#125;,realPwd=&#123;&#125;&quot;,username,password,person.getPassword());\n          return AjaxResult.error(&quot;密码错误&quot;);\n      &#125;\n      return AjaxResult.success(person);\n  &#125;\n\n  //search(遍历所有节点匹配)\n  public LdapPerson getLdapAccountByName(String name) &#123;\n\n      LdapQuery query = query()\n              .where(&quot;objectclass&quot;).is(objectclass)\n              .and(&quot;cn&quot;).is(name);\n\n      List&lt;LdapPerson&gt; persons = ldapTemplate.search(query,new PersonAttributesMapper());\n      if(CollectionUtils.isEmpty(persons))&#123;\n          return null;\n      &#125;\n      return persons.get(0);\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n"},{"title":"nginx","description":"nginx","date":"2021-04-05T02:26:05.000Z","_content":"\n- [官网](http://nginx.org/)\n- [菜鸟教程-Nginx 安装配置](https://www.runoob.com/linux/nginx-install-setup.html)\n- [Nginx服务器SSL证书安装部署-腾讯云](https://cloud.tencent.com/document/product/400/35244)\n\n### nginx命令\n```textmate\n1.检测配置是否正常\nnginx -t \n\n2.热部署配置\nnginx -s reload\n```\n\n### ssl-nginx配置\n```textmate\n具体参考云厂商ssl证书安装步骤\n1.下载ssl相关文件,服务器开启443端口权限\n2.解压后将文件夹Nginx中文件放到nginx安装目录下(或其他地方)\n3.添加nginx配置文件\n4.重启生效\n```\n\n### 同一域名不同服务配置\n```textmate\nserver {\n    listen       8888;\n    server_name  localhost;\n\n    location /service1/ {\n         proxy_pass http://localhost:7001/;\n    }\n    \n    location /service2/ {\n         proxy_pass http://localhost:7002/;\n    }\n}\n```\n\n### 关于请求头经过nginx会被转为小写的原因\n- [关于请求头经过nginx会被转为小写的原因-转](https://blog.csdn.net/qq_32771571/article/details/95903909)\n","source":"_posts/devops/nginx.md","raw":"---\ntitle: nginx\ndescription: nginx\n#top: 1\ndate: 2021-04-05 10:26:05\ntags:\n- nginx\n\ncategories:\n- 运维\n---\n\n- [官网](http://nginx.org/)\n- [菜鸟教程-Nginx 安装配置](https://www.runoob.com/linux/nginx-install-setup.html)\n- [Nginx服务器SSL证书安装部署-腾讯云](https://cloud.tencent.com/document/product/400/35244)\n\n### nginx命令\n```textmate\n1.检测配置是否正常\nnginx -t \n\n2.热部署配置\nnginx -s reload\n```\n\n### ssl-nginx配置\n```textmate\n具体参考云厂商ssl证书安装步骤\n1.下载ssl相关文件,服务器开启443端口权限\n2.解压后将文件夹Nginx中文件放到nginx安装目录下(或其他地方)\n3.添加nginx配置文件\n4.重启生效\n```\n\n### 同一域名不同服务配置\n```textmate\nserver {\n    listen       8888;\n    server_name  localhost;\n\n    location /service1/ {\n         proxy_pass http://localhost:7001/;\n    }\n    \n    location /service2/ {\n         proxy_pass http://localhost:7002/;\n    }\n}\n```\n\n### 关于请求头经过nginx会被转为小写的原因\n- [关于请求头经过nginx会被转为小写的原因-转](https://blog.csdn.net/qq_32771571/article/details/95903909)\n","slug":"devops/nginx","published":1,"updated":"2021-10-12T10:17:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxu0014jrnv2yaca9qb","content":"<ul>\n<li><a href=\"http://nginx.org/\">官网</a></li>\n<li><a href=\"https://www.runoob.com/linux/nginx-install-setup.html\">菜鸟教程-Nginx 安装配置</a></li>\n<li><a href=\"https://cloud.tencent.com/document/product/400/35244\">Nginx服务器SSL证书安装部署-腾讯云</a></li>\n</ul>\n<h3 id=\"nginx命令\"><a href=\"#nginx命令\" class=\"headerlink\" title=\"nginx命令\"></a>nginx命令</h3><pre><code class=\"textmate\">1.检测配置是否正常\nnginx -t \n\n2.热部署配置\nnginx -s reload</code></pre>\n<h3 id=\"ssl-nginx配置\"><a href=\"#ssl-nginx配置\" class=\"headerlink\" title=\"ssl-nginx配置\"></a>ssl-nginx配置</h3><pre><code class=\"textmate\">具体参考云厂商ssl证书安装步骤\n1.下载ssl相关文件,服务器开启443端口权限\n2.解压后将文件夹Nginx中文件放到nginx安装目录下(或其他地方)\n3.添加nginx配置文件\n4.重启生效</code></pre>\n<h3 id=\"同一域名不同服务配置\"><a href=\"#同一域名不同服务配置\" class=\"headerlink\" title=\"同一域名不同服务配置\"></a>同一域名不同服务配置</h3><pre><code class=\"textmate\">server &#123;\n    listen       8888;\n    server_name  localhost;\n\n    location /service1/ &#123;\n         proxy_pass http://localhost:7001/;\n    &#125;\n\n    location /service2/ &#123;\n         proxy_pass http://localhost:7002/;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"关于请求头经过nginx会被转为小写的原因\"><a href=\"#关于请求头经过nginx会被转为小写的原因\" class=\"headerlink\" title=\"关于请求头经过nginx会被转为小写的原因\"></a>关于请求头经过nginx会被转为小写的原因</h3><ul>\n<li><a href=\"https://blog.csdn.net/qq_32771571/article/details/95903909\">关于请求头经过nginx会被转为小写的原因-转</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"http://nginx.org/\">官网</a></li>\n<li><a href=\"https://www.runoob.com/linux/nginx-install-setup.html\">菜鸟教程-Nginx 安装配置</a></li>\n<li><a href=\"https://cloud.tencent.com/document/product/400/35244\">Nginx服务器SSL证书安装部署-腾讯云</a></li>\n</ul>\n<h3 id=\"nginx命令\"><a href=\"#nginx命令\" class=\"headerlink\" title=\"nginx命令\"></a>nginx命令</h3><pre><code class=\"textmate\">1.检测配置是否正常\nnginx -t \n\n2.热部署配置\nnginx -s reload</code></pre>\n<h3 id=\"ssl-nginx配置\"><a href=\"#ssl-nginx配置\" class=\"headerlink\" title=\"ssl-nginx配置\"></a>ssl-nginx配置</h3><pre><code class=\"textmate\">具体参考云厂商ssl证书安装步骤\n1.下载ssl相关文件,服务器开启443端口权限\n2.解压后将文件夹Nginx中文件放到nginx安装目录下(或其他地方)\n3.添加nginx配置文件\n4.重启生效</code></pre>\n<h3 id=\"同一域名不同服务配置\"><a href=\"#同一域名不同服务配置\" class=\"headerlink\" title=\"同一域名不同服务配置\"></a>同一域名不同服务配置</h3><pre><code class=\"textmate\">server &#123;\n    listen       8888;\n    server_name  localhost;\n\n    location /service1/ &#123;\n         proxy_pass http://localhost:7001/;\n    &#125;\n\n    location /service2/ &#123;\n         proxy_pass http://localhost:7002/;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"关于请求头经过nginx会被转为小写的原因\"><a href=\"#关于请求头经过nginx会被转为小写的原因\" class=\"headerlink\" title=\"关于请求头经过nginx会被转为小写的原因\"></a>关于请求头经过nginx会被转为小写的原因</h3><ul>\n<li><a href=\"https://blog.csdn.net/qq_32771571/article/details/95903909\">关于请求头经过nginx会被转为小写的原因-转</a></li>\n</ul>\n"},{"title":"软件推荐","date":"2020-10-02T06:34:06.000Z","_content":"\n\n### Mac软件&工具网站\n|主要功能|软件名|相关网址|\n|-|-|-|\n|图片编辑器|PixelStyle||\n|视频播放|IINA||\n|录屏软件|LICEcap||\n|文件比较|Beyond Compare||\n|Markdown编辑工具|Haroopad||\n|Mac包管理工具|Homebrew||\n|Mac破解软件||https://xclient.info|\n|相似网站查询||https://www.similarsites.com|\n\n\n### 常用软件激活方法\n\n#### JRebl激活\n- [Idea JRebl插件激活方法](http://www.yq1012.com/things/5019.html)\n\n```textmate\n1.生成guid\n    http://jrebel.cicoding.cn/guid\n2.配置\n    设置 JRebel & XRebel 点击Chanage license\n3.填入\n    http://jrebel.cicoding.cn/新生成的guid\n    邮箱\n```\n\n- 方式二\n```textmate\n1.Team Url\n\thttp://jrebel.cicoding.cn/016AAD2C-DD8E-6D92-58EB-B6C79E874355\n\txxx@xxx.com\n2.然后设置为离线使用\n```\n\n#### MacOS sourceTree跳过登录\n```textmate\n1.显示包内容\n2.搜索Atlassian\n3.删除搜出来的文件(没有说明安装包可能有问题)\n```\n\n#### MacOS软件已损坏修复\n```textmate\n## 软件已损坏\nsudo xattr -d com.apple.quarantine /Applications/xxxxxx.app\n```\n\n#### ssh密钥生成\n```shell\n\n## 配置\ngit config --global user.name \"名称\"\ngit config --global user.email \"邮箱地址\"\n\n## -t重新生成\nssh-keygen [-t] rsa -C \"your_email@example.com\" -f gitee_id_rsa\n\n## 如果生成的密钥不生效，则将密钥重新加下！！！\nssh-add ~/.ssh/qts_id_rsa\n\n##测试是否成生效\nssh -T gitee@gitee.com\n```\n","source":"_posts/other/software.md","raw":"---\ntitle: 软件推荐\ndate: 2020-10-02 14:34:06\ntags: \n- tool\ncategories:\n- 其他\n---\n\n\n### Mac软件&工具网站\n|主要功能|软件名|相关网址|\n|-|-|-|\n|图片编辑器|PixelStyle||\n|视频播放|IINA||\n|录屏软件|LICEcap||\n|文件比较|Beyond Compare||\n|Markdown编辑工具|Haroopad||\n|Mac包管理工具|Homebrew||\n|Mac破解软件||https://xclient.info|\n|相似网站查询||https://www.similarsites.com|\n\n\n### 常用软件激活方法\n\n#### JRebl激活\n- [Idea JRebl插件激活方法](http://www.yq1012.com/things/5019.html)\n\n```textmate\n1.生成guid\n    http://jrebel.cicoding.cn/guid\n2.配置\n    设置 JRebel & XRebel 点击Chanage license\n3.填入\n    http://jrebel.cicoding.cn/新生成的guid\n    邮箱\n```\n\n- 方式二\n```textmate\n1.Team Url\n\thttp://jrebel.cicoding.cn/016AAD2C-DD8E-6D92-58EB-B6C79E874355\n\txxx@xxx.com\n2.然后设置为离线使用\n```\n\n#### MacOS sourceTree跳过登录\n```textmate\n1.显示包内容\n2.搜索Atlassian\n3.删除搜出来的文件(没有说明安装包可能有问题)\n```\n\n#### MacOS软件已损坏修复\n```textmate\n## 软件已损坏\nsudo xattr -d com.apple.quarantine /Applications/xxxxxx.app\n```\n\n#### ssh密钥生成\n```shell\n\n## 配置\ngit config --global user.name \"名称\"\ngit config --global user.email \"邮箱地址\"\n\n## -t重新生成\nssh-keygen [-t] rsa -C \"your_email@example.com\" -f gitee_id_rsa\n\n## 如果生成的密钥不生效，则将密钥重新加下！！！\nssh-add ~/.ssh/qts_id_rsa\n\n##测试是否成生效\nssh -T gitee@gitee.com\n```\n","slug":"other/software","published":1,"updated":"2021-12-29T12:05:51.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxu0017jrnv45e51ist","content":"<h3 id=\"Mac软件-amp-工具网站\"><a href=\"#Mac软件-amp-工具网站\" class=\"headerlink\" title=\"Mac软件&amp;工具网站\"></a>Mac软件&amp;工具网站</h3><table>\n<thead>\n<tr>\n<th>主要功能</th>\n<th>软件名</th>\n<th>相关网址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>图片编辑器</td>\n<td>PixelStyle</td>\n<td></td>\n</tr>\n<tr>\n<td>视频播放</td>\n<td>IINA</td>\n<td></td>\n</tr>\n<tr>\n<td>录屏软件</td>\n<td>LICEcap</td>\n<td></td>\n</tr>\n<tr>\n<td>文件比较</td>\n<td>Beyond Compare</td>\n<td></td>\n</tr>\n<tr>\n<td>Markdown编辑工具</td>\n<td>Haroopad</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac包管理工具</td>\n<td>Homebrew</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac破解软件</td>\n<td></td>\n<td><a href=\"https://xclient.info/\">https://xclient.info</a></td>\n</tr>\n<tr>\n<td>相似网站查询</td>\n<td></td>\n<td><a href=\"https://www.similarsites.com/\">https://www.similarsites.com</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"常用软件激活方法\"><a href=\"#常用软件激活方法\" class=\"headerlink\" title=\"常用软件激活方法\"></a>常用软件激活方法</h3><h4 id=\"JRebl激活\"><a href=\"#JRebl激活\" class=\"headerlink\" title=\"JRebl激活\"></a>JRebl激活</h4><ul>\n<li><a href=\"http://www.yq1012.com/things/5019.html\">Idea JRebl插件激活方法</a></li>\n</ul>\n<pre><code class=\"textmate\">1.生成guid\n    http://jrebel.cicoding.cn/guid\n2.配置\n    设置 JRebel &amp; XRebel 点击Chanage license\n3.填入\n    http://jrebel.cicoding.cn/新生成的guid\n    邮箱</code></pre>\n<ul>\n<li>方式二<br>```textmate</li>\n</ul>\n<p>1.Team Url<br>    <a href=\"http://jrebel.cicoding.cn/016AAD2C-DD8E-6D92-58EB-B6C79E874355\">http://jrebel.cicoding.cn/016AAD2C-DD8E-6D92-58EB-B6C79E874355</a><br>    <a href=\"mailto:&#120;&#120;&#x78;&#64;&#120;&#120;&#x78;&#x2e;&#99;&#111;&#x6d;\">&#120;&#120;&#x78;&#64;&#120;&#120;&#x78;&#x2e;&#99;&#111;&#x6d;</a><br>2.然后设置为离线使用</p>\n<pre><code>\n#### MacOS sourceTree跳过登录\n```textmate\n1.显示包内容\n2.搜索Atlassian\n3.删除搜出来的文件(没有说明安装包可能有问题)</code></pre>\n<h4 id=\"MacOS软件已损坏修复\"><a href=\"#MacOS软件已损坏修复\" class=\"headerlink\" title=\"MacOS软件已损坏修复\"></a>MacOS软件已损坏修复</h4><pre><code class=\"textmate\">## 软件已损坏\nsudo xattr -d com.apple.quarantine /Applications/xxxxxx.app</code></pre>\n<h4 id=\"ssh密钥生成\"><a href=\"#ssh密钥生成\" class=\"headerlink\" title=\"ssh密钥生成\"></a>ssh密钥生成</h4><pre><code class=\"shell\">\n## 配置\ngit config --global user.name &quot;名称&quot;\ngit config --global user.email &quot;邮箱地址&quot;\n\n## -t重新生成\nssh-keygen [-t] rsa -C &quot;your_email@example.com&quot; -f gitee_id_rsa\n\n## 如果生成的密钥不生效，则将密钥重新加下！！！\nssh-add ~/.ssh/qts_id_rsa\n\n##测试是否成生效\nssh -T gitee@gitee.com</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Mac软件-amp-工具网站\"><a href=\"#Mac软件-amp-工具网站\" class=\"headerlink\" title=\"Mac软件&amp;工具网站\"></a>Mac软件&amp;工具网站</h3><table>\n<thead>\n<tr>\n<th>主要功能</th>\n<th>软件名</th>\n<th>相关网址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>图片编辑器</td>\n<td>PixelStyle</td>\n<td></td>\n</tr>\n<tr>\n<td>视频播放</td>\n<td>IINA</td>\n<td></td>\n</tr>\n<tr>\n<td>录屏软件</td>\n<td>LICEcap</td>\n<td></td>\n</tr>\n<tr>\n<td>文件比较</td>\n<td>Beyond Compare</td>\n<td></td>\n</tr>\n<tr>\n<td>Markdown编辑工具</td>\n<td>Haroopad</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac包管理工具</td>\n<td>Homebrew</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac破解软件</td>\n<td></td>\n<td><a href=\"https://xclient.info/\">https://xclient.info</a></td>\n</tr>\n<tr>\n<td>相似网站查询</td>\n<td></td>\n<td><a href=\"https://www.similarsites.com/\">https://www.similarsites.com</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"常用软件激活方法\"><a href=\"#常用软件激活方法\" class=\"headerlink\" title=\"常用软件激活方法\"></a>常用软件激活方法</h3><h4 id=\"JRebl激活\"><a href=\"#JRebl激活\" class=\"headerlink\" title=\"JRebl激活\"></a>JRebl激活</h4><ul>\n<li><a href=\"http://www.yq1012.com/things/5019.html\">Idea JRebl插件激活方法</a></li>\n</ul>\n<pre><code class=\"textmate\">1.生成guid\n    http://jrebel.cicoding.cn/guid\n2.配置\n    设置 JRebel &amp; XRebel 点击Chanage license\n3.填入\n    http://jrebel.cicoding.cn/新生成的guid\n    邮箱</code></pre>\n<ul>\n<li>方式二<br>```textmate</li>\n</ul>\n<p>1.Team Url<br>    <a href=\"http://jrebel.cicoding.cn/016AAD2C-DD8E-6D92-58EB-B6C79E874355\">http://jrebel.cicoding.cn/016AAD2C-DD8E-6D92-58EB-B6C79E874355</a><br>    <a href=\"mailto:&#120;&#120;&#x78;&#64;&#120;&#120;&#x78;&#x2e;&#99;&#111;&#x6d;\">&#120;&#120;&#x78;&#64;&#120;&#120;&#x78;&#x2e;&#99;&#111;&#x6d;</a><br>2.然后设置为离线使用</p>\n<pre><code>\n#### MacOS sourceTree跳过登录\n```textmate\n1.显示包内容\n2.搜索Atlassian\n3.删除搜出来的文件(没有说明安装包可能有问题)</code></pre>\n<h4 id=\"MacOS软件已损坏修复\"><a href=\"#MacOS软件已损坏修复\" class=\"headerlink\" title=\"MacOS软件已损坏修复\"></a>MacOS软件已损坏修复</h4><pre><code class=\"textmate\">## 软件已损坏\nsudo xattr -d com.apple.quarantine /Applications/xxxxxx.app</code></pre>\n<h4 id=\"ssh密钥生成\"><a href=\"#ssh密钥生成\" class=\"headerlink\" title=\"ssh密钥生成\"></a>ssh密钥生成</h4><pre><code class=\"shell\">\n## 配置\ngit config --global user.name &quot;名称&quot;\ngit config --global user.email &quot;邮箱地址&quot;\n\n## -t重新生成\nssh-keygen [-t] rsa -C &quot;your_email@example.com&quot; -f gitee_id_rsa\n\n## 如果生成的密钥不生效，则将密钥重新加下！！！\nssh-add ~/.ssh/qts_id_rsa\n\n##测试是否成生效\nssh -T gitee@gitee.com</code></pre>\n"},{"title":"Hexo搭建博客","date":"2020-09-30T06:51:20.000Z","_content":"\n> 记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网\n\n\n### 相关链接\n- [Hexo官网](https://hexo.io/zh-cn/)\n- [官网主题](https://hexo.io/themes/)\n- [3-hexo主题](https://github.com/yelog/hexo-theme-3-hexo)\n- [3-hexo主题相关文档](https://yelog.org/2017/03/13/3-hexo-logs/)\n\n### 准备环境\n> mac用户推荐先安装Homebrew，通过Homebrew安装一下软件\n- [Homebrew](https://brew.sh/)\n- 安装Git\n- 安装Node.js\n\n### 安装Hexo\n```textmate\nnpm install -g hexo-cli\n```\n\n### 创建项目\n```shell\n注: my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install\n```\n\n### 项目结构\n\n- 目录\n```textmate\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n- 目录介绍\n\n```textmate\n1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n### 配置主题\n- [官网主题](https://hexo.io/themes/)\n- 本博客使用的主题 [3-hexo](https://github.com/yelog/hexo-theme-3-hexo)\n\n```textmate\n1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者\n```\n\n### 写作\n- 常用文档命令\n\n```textmate\n1.新建文档\nhexo new [layout] <title>\n\n2.新建草稿文档\nhexo new [layout] <title>\n\n3.草稿<->发布\nhexo publish [layout] <title>\n```\n- 参数介绍\n|参数|值|作用|生成文件的路径|\n|-|-|-|-|\n|layout|post|正式发表的文章|source/_posts|\n|layout|page|静态页面|source|\n|layout|draft|草稿|source/_drafts|\n|title|-|文章标题&文件名|-|\n\n- 文档头部信息格式\n\n```textmate\n---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---\n```\n\n- 文档头部信息解释\n\n|参数|作用|\n|-|-|\n|title|\t网站标题|\n|subtitle|\t网站副标题|\n|description|\t网站描述|\n|tags|标签，可多个|\n|categories|分类菜单，可定义多级|\n|keywords|\t网站的关键词。支援多个关键词。|\n|author|\t您的名字|\n|language|\t网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。|\n|timezone|\t网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。|\n\n### 运行&发布\n- 本地运行\n```textmate\nnpm run server\n```\n- 编译&部署\n```textmate\nhexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可\n```\n","source":"_posts/other/hexo.md","raw":"---\ntitle: Hexo搭建博客\ndate: 2020-09-30 14:51:20\ntags: \n- tool\ncategories: \n- 其他\n---\n\n> 记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网\n\n\n### 相关链接\n- [Hexo官网](https://hexo.io/zh-cn/)\n- [官网主题](https://hexo.io/themes/)\n- [3-hexo主题](https://github.com/yelog/hexo-theme-3-hexo)\n- [3-hexo主题相关文档](https://yelog.org/2017/03/13/3-hexo-logs/)\n\n### 准备环境\n> mac用户推荐先安装Homebrew，通过Homebrew安装一下软件\n- [Homebrew](https://brew.sh/)\n- 安装Git\n- 安装Node.js\n\n### 安装Hexo\n```textmate\nnpm install -g hexo-cli\n```\n\n### 创建项目\n```shell\n注: my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install\n```\n\n### 项目结构\n\n- 目录\n```textmate\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n- 目录介绍\n\n```textmate\n1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n### 配置主题\n- [官网主题](https://hexo.io/themes/)\n- 本博客使用的主题 [3-hexo](https://github.com/yelog/hexo-theme-3-hexo)\n\n```textmate\n1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者\n```\n\n### 写作\n- 常用文档命令\n\n```textmate\n1.新建文档\nhexo new [layout] <title>\n\n2.新建草稿文档\nhexo new [layout] <title>\n\n3.草稿<->发布\nhexo publish [layout] <title>\n```\n- 参数介绍\n|参数|值|作用|生成文件的路径|\n|-|-|-|-|\n|layout|post|正式发表的文章|source/_posts|\n|layout|page|静态页面|source|\n|layout|draft|草稿|source/_drafts|\n|title|-|文章标题&文件名|-|\n\n- 文档头部信息格式\n\n```textmate\n---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---\n```\n\n- 文档头部信息解释\n\n|参数|作用|\n|-|-|\n|title|\t网站标题|\n|subtitle|\t网站副标题|\n|description|\t网站描述|\n|tags|标签，可多个|\n|categories|分类菜单，可定义多级|\n|keywords|\t网站的关键词。支援多个关键词。|\n|author|\t您的名字|\n|language|\t网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。|\n|timezone|\t网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。|\n\n### 运行&发布\n- 本地运行\n```textmate\nnpm run server\n```\n- 编译&部署\n```textmate\nhexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可\n```\n","slug":"other/hexo","published":1,"updated":"2022-01-06T06:02:22.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxu001ajrnvd0v09q5i","content":"<blockquote>\n<p>记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://hexo.io/zh-cn/\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo主题</a></li>\n<li><a href=\"https://yelog.org/2017/03/13/3-hexo-logs/\">3-hexo主题相关文档</a></li>\n</ul>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><blockquote>\n<p>mac用户推荐先安装Homebrew，通过Homebrew安装一下软件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://brew.sh/\">Homebrew</a></li>\n<li>安装Git</li>\n<li>安装Node.js</li>\n</ul>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><pre><code class=\"textmate\">npm install -g hexo-cli</code></pre>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code class=\"shell\">注: my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install</code></pre>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><ul>\n<li><p>目录</p>\n<pre><code class=\"textmate\">.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes</code></pre>\n</li>\n<li><p>目录介绍</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。</code></pre>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><ul>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li>本博客使用的主题 <a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo</a></li>\n</ul>\n<pre><code class=\"textmate\">1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者</code></pre>\n<h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><ul>\n<li>常用文档命令</li>\n</ul>\n<pre><code class=\"textmate\">1.新建文档\nhexo new [layout] &lt;title&gt;\n\n2.新建草稿文档\nhexo new [layout] &lt;title&gt;\n\n3.草稿&lt;-&gt;发布\nhexo publish [layout] &lt;title&gt;</code></pre>\n<ul>\n<li><p>参数介绍</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n<th>作用</th>\n<th>生成文件的路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>post</td>\n<td>正式发表的文章</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>page</td>\n<td>静态页面</td>\n<td>source</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>draft</td>\n<td>草稿</td>\n<td>source/_drafts</td>\n</tr>\n<tr>\n<td>title</td>\n<td>-</td>\n<td>文章标题&amp;文件名</td>\n<td>-</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>文档头部信息格式</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---</code></pre>\n<ul>\n<li>文档头部信息解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签，可多个</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类菜单，可定义多级</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>网站的关键词。支援多个关键词。</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td>\n</tr>\n</tbody></table>\n<h3 id=\"运行-amp-发布\"><a href=\"#运行-amp-发布\" class=\"headerlink\" title=\"运行&amp;发布\"></a>运行&amp;发布</h3><ul>\n<li>本地运行<pre><code class=\"textmate\">npm run server</code></pre>\n</li>\n<li>编译&amp;部署<pre><code class=\"textmate\">hexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://hexo.io/zh-cn/\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo主题</a></li>\n<li><a href=\"https://yelog.org/2017/03/13/3-hexo-logs/\">3-hexo主题相关文档</a></li>\n</ul>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><blockquote>\n<p>mac用户推荐先安装Homebrew，通过Homebrew安装一下软件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://brew.sh/\">Homebrew</a></li>\n<li>安装Git</li>\n<li>安装Node.js</li>\n</ul>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><pre><code class=\"textmate\">npm install -g hexo-cli</code></pre>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code class=\"shell\">注: my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install</code></pre>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><ul>\n<li><p>目录</p>\n<pre><code class=\"textmate\">.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes</code></pre>\n</li>\n<li><p>目录介绍</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。</code></pre>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><ul>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li>本博客使用的主题 <a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo</a></li>\n</ul>\n<pre><code class=\"textmate\">1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者</code></pre>\n<h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><ul>\n<li>常用文档命令</li>\n</ul>\n<pre><code class=\"textmate\">1.新建文档\nhexo new [layout] &lt;title&gt;\n\n2.新建草稿文档\nhexo new [layout] &lt;title&gt;\n\n3.草稿&lt;-&gt;发布\nhexo publish [layout] &lt;title&gt;</code></pre>\n<ul>\n<li><p>参数介绍</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n<th>作用</th>\n<th>生成文件的路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>post</td>\n<td>正式发表的文章</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>page</td>\n<td>静态页面</td>\n<td>source</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>draft</td>\n<td>草稿</td>\n<td>source/_drafts</td>\n</tr>\n<tr>\n<td>title</td>\n<td>-</td>\n<td>文章标题&amp;文件名</td>\n<td>-</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>文档头部信息格式</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---</code></pre>\n<ul>\n<li>文档头部信息解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签，可多个</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类菜单，可定义多级</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>网站的关键词。支援多个关键词。</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td>\n</tr>\n</tbody></table>\n<h3 id=\"运行-amp-发布\"><a href=\"#运行-amp-发布\" class=\"headerlink\" title=\"运行&amp;发布\"></a>运行&amp;发布</h3><ul>\n<li>本地运行<pre><code class=\"textmate\">npm run server</code></pre>\n</li>\n<li>编译&amp;部署<pre><code class=\"textmate\">hexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可</code></pre>\n</li>\n</ul>\n"},{"title":"互联网常用语记录","description":"常用语记录","date":"2020-11-04T14:31:24.000Z","_content":" \n### 二字动词\n```textmate\n复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、\n```\n\n### 二字名词\n```textmate\n漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点\n```\n\n### 三字名词\n```textmate\n颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快\n```\n\n### 四字名词\n```textmate\n生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障\n```\n\n\n\n\n\n","source":"_posts/thinking/ali-words.md","raw":"---\ntitle: 互联网常用语记录\ndescription: 常用语记录\ndate: 2020-11-04 22:31:24\ntags: 常用语\ncategories:\n- 思考\n---\n \n### 二字动词\n```textmate\n复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、\n```\n\n### 二字名词\n```textmate\n漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点\n```\n\n### 三字名词\n```textmate\n颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快\n```\n\n### 四字名词\n```textmate\n生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障\n```\n\n\n\n\n\n","slug":"thinking/ali-words","published":1,"updated":"2021-07-26T07:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxv001cjrnv36xz7gdn","content":"<h3 id=\"二字动词\"><a href=\"#二字动词\" class=\"headerlink\" title=\"二字动词\"></a>二字动词</h3><pre><code class=\"textmate\">复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、</code></pre>\n<h3 id=\"二字名词\"><a href=\"#二字名词\" class=\"headerlink\" title=\"二字名词\"></a>二字名词</h3><pre><code class=\"textmate\">漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点</code></pre>\n<h3 id=\"三字名词\"><a href=\"#三字名词\" class=\"headerlink\" title=\"三字名词\"></a>三字名词</h3><pre><code class=\"textmate\">颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快</code></pre>\n<h3 id=\"四字名词\"><a href=\"#四字名词\" class=\"headerlink\" title=\"四字名词\"></a>四字名词</h3><pre><code class=\"textmate\">生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"二字动词\"><a href=\"#二字动词\" class=\"headerlink\" title=\"二字动词\"></a>二字动词</h3><pre><code class=\"textmate\">复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、</code></pre>\n<h3 id=\"二字名词\"><a href=\"#二字名词\" class=\"headerlink\" title=\"二字名词\"></a>二字名词</h3><pre><code class=\"textmate\">漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点</code></pre>\n<h3 id=\"三字名词\"><a href=\"#三字名词\" class=\"headerlink\" title=\"三字名词\"></a>三字名词</h3><pre><code class=\"textmate\">颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快</code></pre>\n<h3 id=\"四字名词\"><a href=\"#四字名词\" class=\"headerlink\" title=\"四字名词\"></a>四字名词</h3><pre><code class=\"textmate\">生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障</code></pre>\n"},{"title":"阅读","description":"思考 阅读","date":"2020-10-02T06:44:10.000Z","_content":"\n### 技术书\n- 计算机基础\n\n|分类|书名|作者|\n|---|---|---|\n|操作系统|《现代操作系统》||\n| |《程序员的自我修养：链接、装载与库》||\n| |《操作系统真象还原》||\n| |《Linux 内核设计与实现》||\n| |《Windows 程序设计》第五版|\n|计算机网络|《计算机网络：自顶向下方法》||\n| |《TCP/IP 网络编程》||\n| |《网络是怎样连接的》||\n| |《图解HTTP》|上野宣|\n| |《HTTP权威指南》||\n|编译原理|《编译系统透视：图解编译原理》||\n|计算机组成|《计算机组成与设计：硬件软件接口》||\n\n- 综合\n  《Netty、Zookeeper、Redis高并发实战》\n\n- 语言\n\n|分类|书名|\n|---|---|\n|Java|《Java 核心技术》|\n| |《Effective Java》|\n| |《Java 编程思想》|\n| |《深入理解 Java 虚拟机》|\n| |《Java 并发编程实战》|\n\n### 思考方式\n- [结构化思维](https://www.toutiao.com/i6619057728725729800/)\n","source":"_posts/thinking/book.md","raw":"---\ntitle: 阅读\ndescription: 思考 阅读\ndate: 2020-10-02 14:44:10\ntags:\n- 思维\ncategories:\n- 思考\n---\n\n### 技术书\n- 计算机基础\n\n|分类|书名|作者|\n|---|---|---|\n|操作系统|《现代操作系统》||\n| |《程序员的自我修养：链接、装载与库》||\n| |《操作系统真象还原》||\n| |《Linux 内核设计与实现》||\n| |《Windows 程序设计》第五版|\n|计算机网络|《计算机网络：自顶向下方法》||\n| |《TCP/IP 网络编程》||\n| |《网络是怎样连接的》||\n| |《图解HTTP》|上野宣|\n| |《HTTP权威指南》||\n|编译原理|《编译系统透视：图解编译原理》||\n|计算机组成|《计算机组成与设计：硬件软件接口》||\n\n- 综合\n  《Netty、Zookeeper、Redis高并发实战》\n\n- 语言\n\n|分类|书名|\n|---|---|\n|Java|《Java 核心技术》|\n| |《Effective Java》|\n| |《Java 编程思想》|\n| |《深入理解 Java 虚拟机》|\n| |《Java 并发编程实战》|\n\n### 思考方式\n- [结构化思维](https://www.toutiao.com/i6619057728725729800/)\n","slug":"thinking/book","published":1,"updated":"2021-09-10T02:20:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxv001gjrnv2f38g6qt","content":"<h3 id=\"技术书\"><a href=\"#技术书\" class=\"headerlink\" title=\"技术书\"></a>技术书</h3><ul>\n<li>计算机基础</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>书名</th>\n<th>作者</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>《现代操作系统》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《程序员的自我修养：链接、装载与库》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《操作系统真象还原》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《Linux 内核设计与实现》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《Windows 程序设计》第五版</td>\n<td></td>\n</tr>\n<tr>\n<td>计算机网络</td>\n<td>《计算机网络：自顶向下方法》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《TCP/IP 网络编程》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《网络是怎样连接的》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《图解HTTP》</td>\n<td>上野宣</td>\n</tr>\n<tr>\n<td></td>\n<td>《HTTP权威指南》</td>\n<td></td>\n</tr>\n<tr>\n<td>编译原理</td>\n<td>《编译系统透视：图解编译原理》</td>\n<td></td>\n</tr>\n<tr>\n<td>计算机组成</td>\n<td>《计算机组成与设计：硬件软件接口》</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>综合<br>《Netty、Zookeeper、Redis高并发实战》</p>\n</li>\n<li><p>语言</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>书名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>《Java 核心技术》</td>\n</tr>\n<tr>\n<td></td>\n<td>《Effective Java》</td>\n</tr>\n<tr>\n<td></td>\n<td>《Java 编程思想》</td>\n</tr>\n<tr>\n<td></td>\n<td>《深入理解 Java 虚拟机》</td>\n</tr>\n<tr>\n<td></td>\n<td>《Java 并发编程实战》</td>\n</tr>\n</tbody></table>\n<h3 id=\"思考方式\"><a href=\"#思考方式\" class=\"headerlink\" title=\"思考方式\"></a>思考方式</h3><ul>\n<li><a href=\"https://www.toutiao.com/i6619057728725729800/\">结构化思维</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"技术书\"><a href=\"#技术书\" class=\"headerlink\" title=\"技术书\"></a>技术书</h3><ul>\n<li>计算机基础</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>书名</th>\n<th>作者</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>《现代操作系统》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《程序员的自我修养：链接、装载与库》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《操作系统真象还原》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《Linux 内核设计与实现》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《Windows 程序设计》第五版</td>\n<td></td>\n</tr>\n<tr>\n<td>计算机网络</td>\n<td>《计算机网络：自顶向下方法》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《TCP/IP 网络编程》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《网络是怎样连接的》</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>《图解HTTP》</td>\n<td>上野宣</td>\n</tr>\n<tr>\n<td></td>\n<td>《HTTP权威指南》</td>\n<td></td>\n</tr>\n<tr>\n<td>编译原理</td>\n<td>《编译系统透视：图解编译原理》</td>\n<td></td>\n</tr>\n<tr>\n<td>计算机组成</td>\n<td>《计算机组成与设计：硬件软件接口》</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>综合<br>《Netty、Zookeeper、Redis高并发实战》</p>\n</li>\n<li><p>语言</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>书名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>《Java 核心技术》</td>\n</tr>\n<tr>\n<td></td>\n<td>《Effective Java》</td>\n</tr>\n<tr>\n<td></td>\n<td>《Java 编程思想》</td>\n</tr>\n<tr>\n<td></td>\n<td>《深入理解 Java 虚拟机》</td>\n</tr>\n<tr>\n<td></td>\n<td>《Java 并发编程实战》</td>\n</tr>\n</tbody></table>\n<h3 id=\"思考方式\"><a href=\"#思考方式\" class=\"headerlink\" title=\"思考方式\"></a>思考方式</h3><ul>\n<li><a href=\"https://www.toutiao.com/i6619057728725729800/\">结构化思维</a></li>\n</ul>\n"},{"title":"测试相关","date":"2021-11-15T09:51:54.000Z","_content":"### 后端测试工具\n- PostMan\n- [JMH-性能优化测试(转)](https://blog.csdn.net/weixin_43767015/article/details/104758415)\n- Jmeter(接口测试)\n\n### 移动端测试\n- Charles(抓包)\n- [Perfdog(软件性能)](https://perfdog.qq.com/)\n- [Android专项测试工具](https://testerhome.com/topics/19832)\n- Monkey\n","source":"_posts/test/test.md","raw":"---\ntitle: 测试相关\ndate: 2021-04-13 12:00：00\ntags:\n- test \ncategories:\n- 测试\n---\n### 后端测试工具\n- PostMan\n- [JMH-性能优化测试(转)](https://blog.csdn.net/weixin_43767015/article/details/104758415)\n- Jmeter(接口测试)\n\n### 移动端测试\n- Charles(抓包)\n- [Perfdog(软件性能)](https://perfdog.qq.com/)\n- [Android专项测试工具](https://testerhome.com/topics/19832)\n- Monkey\n","slug":"test/test","published":1,"updated":"2021-11-15T09:51:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxw001jjrnvam3phad9","content":"<h3 id=\"后端测试工具\"><a href=\"#后端测试工具\" class=\"headerlink\" title=\"后端测试工具\"></a>后端测试工具</h3><ul>\n<li>PostMan</li>\n<li><a href=\"https://blog.csdn.net/weixin_43767015/article/details/104758415\">JMH-性能优化测试(转)</a></li>\n<li>Jmeter(接口测试)</li>\n</ul>\n<h3 id=\"移动端测试\"><a href=\"#移动端测试\" class=\"headerlink\" title=\"移动端测试\"></a>移动端测试</h3><ul>\n<li>Charles(抓包)</li>\n<li><a href=\"https://perfdog.qq.com/\">Perfdog(软件性能)</a></li>\n<li><a href=\"https://testerhome.com/topics/19832\">Android专项测试工具</a></li>\n<li>Monkey</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"后端测试工具\"><a href=\"#后端测试工具\" class=\"headerlink\" title=\"后端测试工具\"></a>后端测试工具</h3><ul>\n<li>PostMan</li>\n<li><a href=\"https://blog.csdn.net/weixin_43767015/article/details/104758415\">JMH-性能优化测试(转)</a></li>\n<li>Jmeter(接口测试)</li>\n</ul>\n<h3 id=\"移动端测试\"><a href=\"#移动端测试\" class=\"headerlink\" title=\"移动端测试\"></a>移动端测试</h3><ul>\n<li>Charles(抓包)</li>\n<li><a href=\"https://perfdog.qq.com/\">Perfdog(软件性能)</a></li>\n<li><a href=\"https://testerhome.com/topics/19832\">Android专项测试工具</a></li>\n<li>Monkey</li>\n</ul>\n"},{"title":"集成Jimu报表","description":"jimu","date":"2021-08-04T10:28:22.000Z","_content":"\n- [官网](http://www.jimureport.com/)\n- [官方文档](http://report.jeecg.com/2078875)\n\n### 集成步骤\n> 见官网文档\n\n### 集成时遇到的问题\n- 集成后启动报错，Unable to load cache item\n> [导致问题产生的原因](https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html)\n```textmate\n解决方法: 去掉devtools即可\n```\n","source":"_posts/backend/other/jimu-report.md","raw":"---\ntitle: 集成Jimu报表\ndescription: jimu\ndate: 2021-08-04 18:28:22\ntags:\n- 三方集成\ncategories:\n- 后端\n- 三方集成\n---\n\n- [官网](http://www.jimureport.com/)\n- [官方文档](http://report.jeecg.com/2078875)\n\n### 集成步骤\n> 见官网文档\n\n### 集成时遇到的问题\n- 集成后启动报错，Unable to load cache item\n> [导致问题产生的原因](https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html)\n```textmate\n解决方法: 去掉devtools即可\n```\n","slug":"backend/other/jimu-report","published":1,"updated":"2021-08-04T10:42:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxw001mjrnvfh4hcjq1","content":"<ul>\n<li><a href=\"http://www.jimureport.com/\">官网</a></li>\n<li><a href=\"http://report.jeecg.com/2078875\">官方文档</a></li>\n</ul>\n<h3 id=\"集成步骤\"><a href=\"#集成步骤\" class=\"headerlink\" title=\"集成步骤\"></a>集成步骤</h3><blockquote>\n<p>见官网文档</p>\n</blockquote>\n<h3 id=\"集成时遇到的问题\"><a href=\"#集成时遇到的问题\" class=\"headerlink\" title=\"集成时遇到的问题\"></a>集成时遇到的问题</h3><ul>\n<li>集成后启动报错，Unable to load cache item<blockquote>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html\">导致问题产生的原因</a></p>\n</blockquote>\n<pre><code class=\"textmate\">解决方法: 去掉devtools即可</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"http://www.jimureport.com/\">官网</a></li>\n<li><a href=\"http://report.jeecg.com/2078875\">官方文档</a></li>\n</ul>\n<h3 id=\"集成步骤\"><a href=\"#集成步骤\" class=\"headerlink\" title=\"集成步骤\"></a>集成步骤</h3><blockquote>\n<p>见官网文档</p>\n</blockquote>\n<h3 id=\"集成时遇到的问题\"><a href=\"#集成时遇到的问题\" class=\"headerlink\" title=\"集成时遇到的问题\"></a>集成时遇到的问题</h3><ul>\n<li>集成后启动报错，Unable to load cache item<blockquote>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html\">导致问题产生的原因</a></p>\n</blockquote>\n<pre><code class=\"textmate\">解决方法: 去掉devtools即可</code></pre>\n</li>\n</ul>\n"},{"title":"阅读","description":"思考 阅读","date":"2022-01-10T06:44:10.000Z","_content":"\n## 一些东西的摘要\n## 资本的故事 第一季\n### 1.股份的力量\n```textmate\n股份制可以融到更多的钱，扩大生产规模；同时也分摊了风险\n```\n### 2.泡沫的诱惑\n```textmate\n郁金香引入后，由于作为身份和地位的象征，价格飙升，导致大量资金涌入郁金香市场；最终由于一个没有买家的传言，导致价格崩盘；\n郁金香泡沫后，郁金香价格趋势图频繁出现，常见于金融危机、A股危机中\n```\n### 3.南海骗局\n```textmate\n曾经的商业巨头由于战争原因，后续无法盈利；用股票换国债，加上用股票贿赂主要决策人的方式通过了提案；后续真相暴露，推动了资本市场开始往华尔街转移\n```\n### 4.汉密尔顿的旋转门(华尔街之父)\n```textmate\n解释: 美国发行新货币、新债务、联邦信用替代州政府信用，达到统一货币、统一财政的目的\n作用: 构建了美国的信用货币和国债体系，是现代美国金融体系的两大支柱\n建立国家信用体系，并将国家信用直接转换为社会财富，促进经济增长\n引用： 信 国之宝也 --《左传》\n```\n### 5.梧桐树下的承诺\n```textmate\n背景: 初期股票市场信息不透明，私下交易，利用利害信息可以影响股价\n有人利用提前的值得利好消息，利用大量杠杆成为银行股票的持有者，结果贷款渠道被掌权者切断，导致第一次股市崩盘\n股票交易员在梧桐树下初步签订了关于股票交易的一些协议(行业的自律和交易的规则)，成为纽约股票交易所的起点\n引用: 不以规矩，不能成方圆 --孟子\n```\n### 6.给风险定价\n```textmate\n期货，初期是从谷物期货交易开始，规避谷物价格不稳定带来的风险(戈登哈伯德)；市场监督机制出现，保证金交易制度出现\n    保证金交易和标准化合约，是芝加哥期货交易的两大发明，也是全球期货交易的基石\n```\n### 7.注水的股票\n```textmate\n滥发股票导致交易市场混乱，催生了新的股票交易规则，遏制滥发股票\n```\n### 8.巨人的诞生\n```textmate\n美国钢铁公司诞生，首家市值超过10亿美元的公司；通过整合美国钢铁制造业，提升美国刚铁制造业地位，垄断了美国钢铁行业；\n随后促进和行业整合浪潮，诞生了很多大公司\n引用: 相出新办法的人，在他的办法没有成功以前，人家总是说他异想天开 --马克吐温\n```\n### 9.镀金的美元\n```textmate\n构建一个全球性的货币金融体系，重要人物: 凯恩斯 \n布雷顿森林协议签订：各国货币与美元挂钩，年度汇率波动不超过10%;美元与黄金挂钩(35/盎司)  双挂钩\n后续由于美国随意增发货币，导致各国挤兑黄金，美国为了防止黄金被挤兑，颁布尼克松冲击(美元与黄金脱钩)，随后各国兑美元固定汇率改为浮动汇率；\n中东石油危机爆发，导致双挂钩失效\n```\n### 10.风险的价值\n```textmate\n第一家风险投资公司诞生(多利奥特-风险投资之父)；纳斯达克成立，为风险投资提供了一条从进入到退出的产业链\n```\n\n### 11.日本泡沫\n```textmate\n快速升值的日元，带来楼市和股市的飞涨，资本逃离实体经济\n广场协议: 联合干预外汇市场，让美元对主要货币有序贬值；促进了日元的升值；\n日元升值导致投资人大量收购海外资产，对内投资楼市股市，泡沫逐渐产生 \n两个日本说法: 一个是低迷的本土资产，另一个是日本国民的海外资产不断向本土汇回收入\n```\n\n### 12.八佰伴倒闭\n```textmate\n由于日元升值，大量购入海外固定资产开连锁超市；后期由于经济原因股价崩盘，需要偿还大量债务，最终导致破产；\n八佰伴腾飞到倒闭，伴随着日本经期泡沫的腾飞与破灭\n```\n\n### 13.门口的野蛮人\n```textmate\n黑色星期一导致纳斯维克公司股价暴跌，KKR打算联合另一公司收购纳斯维克，结果反被踢出局，诞生当时最大规模收购案；\n垃圾债券：已少量自有资金，外加拟收购目标的资产为抵押，大大降低了收购方的资金压力\n各路资本对公司控制权的争夺，却在争夺自身利益的同时，提升了公司的价值，此时的公司，已是一个可交易的商品 \n```\n### 14.英镑狙击战\n```textmate\n索罗斯  对冲基金\n英镑兑马克(德国货币)采用固定汇率，索罗斯判断英镑价值被高估，做空英镑，导致英镑采用浮动利率\n```\n","source":"_posts/thinking/tv.md","raw":"---\ntitle: 阅读\ndescription: 思考 阅读\ndate: 2022-01-10 14:44:10\ntags:\n- 思维\ncategories:\n- 摘要\n---\n\n## 一些东西的摘要\n## 资本的故事 第一季\n### 1.股份的力量\n```textmate\n股份制可以融到更多的钱，扩大生产规模；同时也分摊了风险\n```\n### 2.泡沫的诱惑\n```textmate\n郁金香引入后，由于作为身份和地位的象征，价格飙升，导致大量资金涌入郁金香市场；最终由于一个没有买家的传言，导致价格崩盘；\n郁金香泡沫后，郁金香价格趋势图频繁出现，常见于金融危机、A股危机中\n```\n### 3.南海骗局\n```textmate\n曾经的商业巨头由于战争原因，后续无法盈利；用股票换国债，加上用股票贿赂主要决策人的方式通过了提案；后续真相暴露，推动了资本市场开始往华尔街转移\n```\n### 4.汉密尔顿的旋转门(华尔街之父)\n```textmate\n解释: 美国发行新货币、新债务、联邦信用替代州政府信用，达到统一货币、统一财政的目的\n作用: 构建了美国的信用货币和国债体系，是现代美国金融体系的两大支柱\n建立国家信用体系，并将国家信用直接转换为社会财富，促进经济增长\n引用： 信 国之宝也 --《左传》\n```\n### 5.梧桐树下的承诺\n```textmate\n背景: 初期股票市场信息不透明，私下交易，利用利害信息可以影响股价\n有人利用提前的值得利好消息，利用大量杠杆成为银行股票的持有者，结果贷款渠道被掌权者切断，导致第一次股市崩盘\n股票交易员在梧桐树下初步签订了关于股票交易的一些协议(行业的自律和交易的规则)，成为纽约股票交易所的起点\n引用: 不以规矩，不能成方圆 --孟子\n```\n### 6.给风险定价\n```textmate\n期货，初期是从谷物期货交易开始，规避谷物价格不稳定带来的风险(戈登哈伯德)；市场监督机制出现，保证金交易制度出现\n    保证金交易和标准化合约，是芝加哥期货交易的两大发明，也是全球期货交易的基石\n```\n### 7.注水的股票\n```textmate\n滥发股票导致交易市场混乱，催生了新的股票交易规则，遏制滥发股票\n```\n### 8.巨人的诞生\n```textmate\n美国钢铁公司诞生，首家市值超过10亿美元的公司；通过整合美国钢铁制造业，提升美国刚铁制造业地位，垄断了美国钢铁行业；\n随后促进和行业整合浪潮，诞生了很多大公司\n引用: 相出新办法的人，在他的办法没有成功以前，人家总是说他异想天开 --马克吐温\n```\n### 9.镀金的美元\n```textmate\n构建一个全球性的货币金融体系，重要人物: 凯恩斯 \n布雷顿森林协议签订：各国货币与美元挂钩，年度汇率波动不超过10%;美元与黄金挂钩(35/盎司)  双挂钩\n后续由于美国随意增发货币，导致各国挤兑黄金，美国为了防止黄金被挤兑，颁布尼克松冲击(美元与黄金脱钩)，随后各国兑美元固定汇率改为浮动汇率；\n中东石油危机爆发，导致双挂钩失效\n```\n### 10.风险的价值\n```textmate\n第一家风险投资公司诞生(多利奥特-风险投资之父)；纳斯达克成立，为风险投资提供了一条从进入到退出的产业链\n```\n\n### 11.日本泡沫\n```textmate\n快速升值的日元，带来楼市和股市的飞涨，资本逃离实体经济\n广场协议: 联合干预外汇市场，让美元对主要货币有序贬值；促进了日元的升值；\n日元升值导致投资人大量收购海外资产，对内投资楼市股市，泡沫逐渐产生 \n两个日本说法: 一个是低迷的本土资产，另一个是日本国民的海外资产不断向本土汇回收入\n```\n\n### 12.八佰伴倒闭\n```textmate\n由于日元升值，大量购入海外固定资产开连锁超市；后期由于经济原因股价崩盘，需要偿还大量债务，最终导致破产；\n八佰伴腾飞到倒闭，伴随着日本经期泡沫的腾飞与破灭\n```\n\n### 13.门口的野蛮人\n```textmate\n黑色星期一导致纳斯维克公司股价暴跌，KKR打算联合另一公司收购纳斯维克，结果反被踢出局，诞生当时最大规模收购案；\n垃圾债券：已少量自有资金，外加拟收购目标的资产为抵押，大大降低了收购方的资金压力\n各路资本对公司控制权的争夺，却在争夺自身利益的同时，提升了公司的价值，此时的公司，已是一个可交易的商品 \n```\n### 14.英镑狙击战\n```textmate\n索罗斯  对冲基金\n英镑兑马克(德国货币)采用固定汇率，索罗斯判断英镑价值被高估，做空英镑，导致英镑采用浮动利率\n```\n","slug":"thinking/tv","published":1,"updated":"2022-01-13T08:55:04.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxx001qjrnvgowsaqpi","content":"<h2 id=\"一些东西的摘要\"><a href=\"#一些东西的摘要\" class=\"headerlink\" title=\"一些东西的摘要\"></a>一些东西的摘要</h2><h2 id=\"资本的故事-第一季\"><a href=\"#资本的故事-第一季\" class=\"headerlink\" title=\"资本的故事 第一季\"></a>资本的故事 第一季</h2><h3 id=\"1-股份的力量\"><a href=\"#1-股份的力量\" class=\"headerlink\" title=\"1.股份的力量\"></a>1.股份的力量</h3><pre><code class=\"textmate\">股份制可以融到更多的钱，扩大生产规模；同时也分摊了风险</code></pre>\n<h3 id=\"2-泡沫的诱惑\"><a href=\"#2-泡沫的诱惑\" class=\"headerlink\" title=\"2.泡沫的诱惑\"></a>2.泡沫的诱惑</h3><pre><code class=\"textmate\">郁金香引入后，由于作为身份和地位的象征，价格飙升，导致大量资金涌入郁金香市场；最终由于一个没有买家的传言，导致价格崩盘；\n郁金香泡沫后，郁金香价格趋势图频繁出现，常见于金融危机、A股危机中</code></pre>\n<h3 id=\"3-南海骗局\"><a href=\"#3-南海骗局\" class=\"headerlink\" title=\"3.南海骗局\"></a>3.南海骗局</h3><pre><code class=\"textmate\">曾经的商业巨头由于战争原因，后续无法盈利；用股票换国债，加上用股票贿赂主要决策人的方式通过了提案；后续真相暴露，推动了资本市场开始往华尔街转移</code></pre>\n<h3 id=\"4-汉密尔顿的旋转门-华尔街之父\"><a href=\"#4-汉密尔顿的旋转门-华尔街之父\" class=\"headerlink\" title=\"4.汉密尔顿的旋转门(华尔街之父)\"></a>4.汉密尔顿的旋转门(华尔街之父)</h3><pre><code class=\"textmate\">解释: 美国发行新货币、新债务、联邦信用替代州政府信用，达到统一货币、统一财政的目的\n作用: 构建了美国的信用货币和国债体系，是现代美国金融体系的两大支柱\n建立国家信用体系，并将国家信用直接转换为社会财富，促进经济增长\n引用： 信 国之宝也 --《左传》</code></pre>\n<h3 id=\"5-梧桐树下的承诺\"><a href=\"#5-梧桐树下的承诺\" class=\"headerlink\" title=\"5.梧桐树下的承诺\"></a>5.梧桐树下的承诺</h3><pre><code class=\"textmate\">背景: 初期股票市场信息不透明，私下交易，利用利害信息可以影响股价\n有人利用提前的值得利好消息，利用大量杠杆成为银行股票的持有者，结果贷款渠道被掌权者切断，导致第一次股市崩盘\n股票交易员在梧桐树下初步签订了关于股票交易的一些协议(行业的自律和交易的规则)，成为纽约股票交易所的起点\n引用: 不以规矩，不能成方圆 --孟子</code></pre>\n<h3 id=\"6-给风险定价\"><a href=\"#6-给风险定价\" class=\"headerlink\" title=\"6.给风险定价\"></a>6.给风险定价</h3><pre><code class=\"textmate\">期货，初期是从谷物期货交易开始，规避谷物价格不稳定带来的风险(戈登哈伯德)；市场监督机制出现，保证金交易制度出现\n    保证金交易和标准化合约，是芝加哥期货交易的两大发明，也是全球期货交易的基石</code></pre>\n<h3 id=\"7-注水的股票\"><a href=\"#7-注水的股票\" class=\"headerlink\" title=\"7.注水的股票\"></a>7.注水的股票</h3><pre><code class=\"textmate\">滥发股票导致交易市场混乱，催生了新的股票交易规则，遏制滥发股票</code></pre>\n<h3 id=\"8-巨人的诞生\"><a href=\"#8-巨人的诞生\" class=\"headerlink\" title=\"8.巨人的诞生\"></a>8.巨人的诞生</h3><pre><code class=\"textmate\">美国钢铁公司诞生，首家市值超过10亿美元的公司；通过整合美国钢铁制造业，提升美国刚铁制造业地位，垄断了美国钢铁行业；\n随后促进和行业整合浪潮，诞生了很多大公司\n引用: 相出新办法的人，在他的办法没有成功以前，人家总是说他异想天开 --马克吐温</code></pre>\n<h3 id=\"9-镀金的美元\"><a href=\"#9-镀金的美元\" class=\"headerlink\" title=\"9.镀金的美元\"></a>9.镀金的美元</h3><pre><code class=\"textmate\">构建一个全球性的货币金融体系，重要人物: 凯恩斯 \n布雷顿森林协议签订：各国货币与美元挂钩，年度汇率波动不超过10%;美元与黄金挂钩(35/盎司)  双挂钩\n后续由于美国随意增发货币，导致各国挤兑黄金，美国为了防止黄金被挤兑，颁布尼克松冲击(美元与黄金脱钩)，随后各国兑美元固定汇率改为浮动汇率；\n中东石油危机爆发，导致双挂钩失效</code></pre>\n<h3 id=\"10-风险的价值\"><a href=\"#10-风险的价值\" class=\"headerlink\" title=\"10.风险的价值\"></a>10.风险的价值</h3><pre><code class=\"textmate\">第一家风险投资公司诞生(多利奥特-风险投资之父)；纳斯达克成立，为风险投资提供了一条从进入到退出的产业链</code></pre>\n<h3 id=\"11-日本泡沫\"><a href=\"#11-日本泡沫\" class=\"headerlink\" title=\"11.日本泡沫\"></a>11.日本泡沫</h3><pre><code class=\"textmate\">快速升值的日元，带来楼市和股市的飞涨，资本逃离实体经济\n广场协议: 联合干预外汇市场，让美元对主要货币有序贬值；促进了日元的升值；\n日元升值导致投资人大量收购海外资产，对内投资楼市股市，泡沫逐渐产生 \n两个日本说法: 一个是低迷的本土资产，另一个是日本国民的海外资产不断向本土汇回收入</code></pre>\n<h3 id=\"12-八佰伴倒闭\"><a href=\"#12-八佰伴倒闭\" class=\"headerlink\" title=\"12.八佰伴倒闭\"></a>12.八佰伴倒闭</h3><pre><code class=\"textmate\">由于日元升值，大量购入海外固定资产开连锁超市；后期由于经济原因股价崩盘，需要偿还大量债务，最终导致破产；\n八佰伴腾飞到倒闭，伴随着日本经期泡沫的腾飞与破灭</code></pre>\n<h3 id=\"13-门口的野蛮人\"><a href=\"#13-门口的野蛮人\" class=\"headerlink\" title=\"13.门口的野蛮人\"></a>13.门口的野蛮人</h3><pre><code class=\"textmate\">黑色星期一导致纳斯维克公司股价暴跌，KKR打算联合另一公司收购纳斯维克，结果反被踢出局，诞生当时最大规模收购案；\n垃圾债券：已少量自有资金，外加拟收购目标的资产为抵押，大大降低了收购方的资金压力\n各路资本对公司控制权的争夺，却在争夺自身利益的同时，提升了公司的价值，此时的公司，已是一个可交易的商品 </code></pre>\n<h3 id=\"14-英镑狙击战\"><a href=\"#14-英镑狙击战\" class=\"headerlink\" title=\"14.英镑狙击战\"></a>14.英镑狙击战</h3><pre><code class=\"textmate\">索罗斯  对冲基金\n英镑兑马克(德国货币)采用固定汇率，索罗斯判断英镑价值被高估，做空英镑，导致英镑采用浮动利率</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一些东西的摘要\"><a href=\"#一些东西的摘要\" class=\"headerlink\" title=\"一些东西的摘要\"></a>一些东西的摘要</h2><h2 id=\"资本的故事-第一季\"><a href=\"#资本的故事-第一季\" class=\"headerlink\" title=\"资本的故事 第一季\"></a>资本的故事 第一季</h2><h3 id=\"1-股份的力量\"><a href=\"#1-股份的力量\" class=\"headerlink\" title=\"1.股份的力量\"></a>1.股份的力量</h3><pre><code class=\"textmate\">股份制可以融到更多的钱，扩大生产规模；同时也分摊了风险</code></pre>\n<h3 id=\"2-泡沫的诱惑\"><a href=\"#2-泡沫的诱惑\" class=\"headerlink\" title=\"2.泡沫的诱惑\"></a>2.泡沫的诱惑</h3><pre><code class=\"textmate\">郁金香引入后，由于作为身份和地位的象征，价格飙升，导致大量资金涌入郁金香市场；最终由于一个没有买家的传言，导致价格崩盘；\n郁金香泡沫后，郁金香价格趋势图频繁出现，常见于金融危机、A股危机中</code></pre>\n<h3 id=\"3-南海骗局\"><a href=\"#3-南海骗局\" class=\"headerlink\" title=\"3.南海骗局\"></a>3.南海骗局</h3><pre><code class=\"textmate\">曾经的商业巨头由于战争原因，后续无法盈利；用股票换国债，加上用股票贿赂主要决策人的方式通过了提案；后续真相暴露，推动了资本市场开始往华尔街转移</code></pre>\n<h3 id=\"4-汉密尔顿的旋转门-华尔街之父\"><a href=\"#4-汉密尔顿的旋转门-华尔街之父\" class=\"headerlink\" title=\"4.汉密尔顿的旋转门(华尔街之父)\"></a>4.汉密尔顿的旋转门(华尔街之父)</h3><pre><code class=\"textmate\">解释: 美国发行新货币、新债务、联邦信用替代州政府信用，达到统一货币、统一财政的目的\n作用: 构建了美国的信用货币和国债体系，是现代美国金融体系的两大支柱\n建立国家信用体系，并将国家信用直接转换为社会财富，促进经济增长\n引用： 信 国之宝也 --《左传》</code></pre>\n<h3 id=\"5-梧桐树下的承诺\"><a href=\"#5-梧桐树下的承诺\" class=\"headerlink\" title=\"5.梧桐树下的承诺\"></a>5.梧桐树下的承诺</h3><pre><code class=\"textmate\">背景: 初期股票市场信息不透明，私下交易，利用利害信息可以影响股价\n有人利用提前的值得利好消息，利用大量杠杆成为银行股票的持有者，结果贷款渠道被掌权者切断，导致第一次股市崩盘\n股票交易员在梧桐树下初步签订了关于股票交易的一些协议(行业的自律和交易的规则)，成为纽约股票交易所的起点\n引用: 不以规矩，不能成方圆 --孟子</code></pre>\n<h3 id=\"6-给风险定价\"><a href=\"#6-给风险定价\" class=\"headerlink\" title=\"6.给风险定价\"></a>6.给风险定价</h3><pre><code class=\"textmate\">期货，初期是从谷物期货交易开始，规避谷物价格不稳定带来的风险(戈登哈伯德)；市场监督机制出现，保证金交易制度出现\n    保证金交易和标准化合约，是芝加哥期货交易的两大发明，也是全球期货交易的基石</code></pre>\n<h3 id=\"7-注水的股票\"><a href=\"#7-注水的股票\" class=\"headerlink\" title=\"7.注水的股票\"></a>7.注水的股票</h3><pre><code class=\"textmate\">滥发股票导致交易市场混乱，催生了新的股票交易规则，遏制滥发股票</code></pre>\n<h3 id=\"8-巨人的诞生\"><a href=\"#8-巨人的诞生\" class=\"headerlink\" title=\"8.巨人的诞生\"></a>8.巨人的诞生</h3><pre><code class=\"textmate\">美国钢铁公司诞生，首家市值超过10亿美元的公司；通过整合美国钢铁制造业，提升美国刚铁制造业地位，垄断了美国钢铁行业；\n随后促进和行业整合浪潮，诞生了很多大公司\n引用: 相出新办法的人，在他的办法没有成功以前，人家总是说他异想天开 --马克吐温</code></pre>\n<h3 id=\"9-镀金的美元\"><a href=\"#9-镀金的美元\" class=\"headerlink\" title=\"9.镀金的美元\"></a>9.镀金的美元</h3><pre><code class=\"textmate\">构建一个全球性的货币金融体系，重要人物: 凯恩斯 \n布雷顿森林协议签订：各国货币与美元挂钩，年度汇率波动不超过10%;美元与黄金挂钩(35/盎司)  双挂钩\n后续由于美国随意增发货币，导致各国挤兑黄金，美国为了防止黄金被挤兑，颁布尼克松冲击(美元与黄金脱钩)，随后各国兑美元固定汇率改为浮动汇率；\n中东石油危机爆发，导致双挂钩失效</code></pre>\n<h3 id=\"10-风险的价值\"><a href=\"#10-风险的价值\" class=\"headerlink\" title=\"10.风险的价值\"></a>10.风险的价值</h3><pre><code class=\"textmate\">第一家风险投资公司诞生(多利奥特-风险投资之父)；纳斯达克成立，为风险投资提供了一条从进入到退出的产业链</code></pre>\n<h3 id=\"11-日本泡沫\"><a href=\"#11-日本泡沫\" class=\"headerlink\" title=\"11.日本泡沫\"></a>11.日本泡沫</h3><pre><code class=\"textmate\">快速升值的日元，带来楼市和股市的飞涨，资本逃离实体经济\n广场协议: 联合干预外汇市场，让美元对主要货币有序贬值；促进了日元的升值；\n日元升值导致投资人大量收购海外资产，对内投资楼市股市，泡沫逐渐产生 \n两个日本说法: 一个是低迷的本土资产，另一个是日本国民的海外资产不断向本土汇回收入</code></pre>\n<h3 id=\"12-八佰伴倒闭\"><a href=\"#12-八佰伴倒闭\" class=\"headerlink\" title=\"12.八佰伴倒闭\"></a>12.八佰伴倒闭</h3><pre><code class=\"textmate\">由于日元升值，大量购入海外固定资产开连锁超市；后期由于经济原因股价崩盘，需要偿还大量债务，最终导致破产；\n八佰伴腾飞到倒闭，伴随着日本经期泡沫的腾飞与破灭</code></pre>\n<h3 id=\"13-门口的野蛮人\"><a href=\"#13-门口的野蛮人\" class=\"headerlink\" title=\"13.门口的野蛮人\"></a>13.门口的野蛮人</h3><pre><code class=\"textmate\">黑色星期一导致纳斯维克公司股价暴跌，KKR打算联合另一公司收购纳斯维克，结果反被踢出局，诞生当时最大规模收购案；\n垃圾债券：已少量自有资金，外加拟收购目标的资产为抵押，大大降低了收购方的资金压力\n各路资本对公司控制权的争夺，却在争夺自身利益的同时，提升了公司的价值，此时的公司，已是一个可交易的商品 </code></pre>\n<h3 id=\"14-英镑狙击战\"><a href=\"#14-英镑狙击战\" class=\"headerlink\" title=\"14.英镑狙击战\"></a>14.英镑狙击战</h3><pre><code class=\"textmate\">索罗斯  对冲基金\n英镑兑马克(德国货币)采用固定汇率，索罗斯判断英镑价值被高估，做空英镑，导致英镑采用浮动利率</code></pre>\n"},{"title":"SpringBoot集成Kafka","date":"2021-02-03T08:06:00.000Z","_content":"\n### 简单案例\n#### 引用包\n```xml\n<!-- 设置了版本号，有可能会报错ClassNotFound -->\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n```\n\n#### 配置\n```yaml\nspring:\n  kafka:\n  topic: testTopic\n  bootstrap-servers: 127.0.0.1:9092\n  producer:\n    retries: 0\n    batch-size: 50\n    buffer-memory: 6554432\n    key-serializer: org.apache.kafka.common.serialization.StringSerializer\n    value-serializer: org.apache.kafka.common.serialization.StringSerializer\n    properties:\n      max:\n        request:\n          size: 5242880\n      linger.ms: 1\n```\n\n#### 发送消息\n```java\n@Slf4j\n@Component\npublic class MessageService{\n    \n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n    @Value(\"${spring.kafka.topic}\")\n    private String topics;\n    \n    public void sendSyncMessage(String resourceName){\n        try{\n            kafkaTemplate.send(topics,resourceName);\n        } catch (Exception e) {\n            log.error(\"message send failed, error={}\", e);\n        }\n    }\n}\n```\n\n#### 监听消息\n```java\n@Slf4j\n@Component\npublic class MessageListener {\n\n    @KafkaListener(topics = {\"testTopic\"}, groupId = \"testGroupId\")\n    public void annul1(ConsumerRecord<String, String> record) {\n        log.info(\"groupId = myContainer2, message = \" + record.toString());\n    }\n}\n```\n\n### 双kafka案例\n- [SpringBoot多kafka配置](https://www.byteblogs.com/article/434)\n#### 配置文件\n```yaml\nspring:\n  kafka:\n    kafka1:\n      bootstrap-servers: 127.0.0.1:9092\n      producer:\n        retries: 0\n        batch-size: 50\n        buffer-memory: 6554432\n        key-serializer: org.apache.kafka.common.serialization.StringSerializer\n        value-serializer: org.apache.kafka.common.serialization.StringSerializer\n        properties:\n          max:\n            request:\n              size: 5242880\n          linger.ms: 1\n    kafka2:\n      bootstrap-servers: 127.0.0.1:9092\n      producer:\n        retries: 0\n        batch-size: 50\n        buffer-memory: 6554432\n        key-serializer: org.apache.kafka.common.serialization.StringSerializer\n        value-serializer: org.apache.kafka.common.serialization.StringSerializer\n        properties:\n          max:\n            request:\n              size: 5242880\n          linger.ms: 1\n```\n\n#### 代码配置\n- 实例1配置\n```java\n@Configuration\n@EnableKafka\npublic class Kafka1Config {\n\n    @Bean(\"kafka1ExtListenerKafkaProperties\")\n    @Primary\n    @ConfigurationProperties(prefix = \"spring.kafka.kafka1\")\n    public KafkaProperties kafka1ExtListenerKafkaProperties() {\n        return new KafkaProperties();\n    }\n\n    @Bean(\"kafka1ListenerContainerFactory\")\n    @Primary\n    KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<Integer, String>> kafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<Integer, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.setConcurrency(3);\n        factory.getContainerProperties().setPollTimeout(3000);\n        return factory;\n    }\n\n    private ConsumerFactory<Integer, String> consumerFactory() {\n        return new DefaultKafkaConsumerFactory<>(consumerConfigs());\n    }\n\n    private Map<String, Object> consumerConfigs() {\n        return kafka1ExtListenerKafkaProperties().buildConsumerProperties();\n    }\n\n    @Bean(\"kafkaTemplate\")\n    @Primary\n    public KafkaTemplate<String, String> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n\n    private ProducerFactory<String, String> producerFactory() {\n        DefaultKafkaProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(producerConfigs());\n        return producerFactory;\n    }\n\n    private Map<String, Object> producerConfigs() {\n        return kafka1ExtListenerKafkaProperties().buildProducerProperties();\n    }\n}\n```\n\n- 实例2配置\n```java\n@Configuration\n@EnableKafka\npublic class Kafka2Config {\n\n    @Bean(\"kafka2ListenerKafkaProperties\")\n    @ConfigurationProperties(prefix = \"spring.kafka.kafka2\")\n    public KafkaProperties kafka2ListenerKafkaProperties() {\n        return new KafkaProperties();\n    }\n\n    @Bean(\"kafka2ListenerContainerFactory\")\n    public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<Integer, String>> kafka2ListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<Integer, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.setConcurrency(3);\n        factory.getContainerProperties().setPollTimeout(3000);\n        return factory;\n    }\n\n    /**\n     * 消费者工厂的bean\n     *\n     * @return\n     */\n    private ConsumerFactory<Integer, String> consumerFactory() {\n        return new DefaultKafkaConsumerFactory<>(consumerConfigs());\n    }\n\n    private Map<String, Object> consumerConfigs() {\n        return kafka2ListenerKafkaProperties().buildConsumerProperties();\n    }\n\n    @Bean(\"kafka2Template\")\n    public KafkaTemplate<String, String> kafka2Template() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n\n    private ProducerFactory<String, String> producerFactory() {\n        DefaultKafkaProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(producerConfigs());\n        return producerFactory;\n    }\n\n    private Map<String, Object> producerConfigs() {\n        return kafka2ListenerKafkaProperties().buildProducerProperties();\n    }\n}\n```\n\n#### 使用\n```java\n@Slf4j\n@Service\npublic class MessageSendService{\n    @Resource(name = \"kafkaTemplate\")\n    private KafkaTemplate<String, Object> kafkaTemplate;\n\n    @Resource(name = \"kafkaTemplateForMonitor\")\n    private KafkaTemplate<String, Object> kafkaTemplateForMonitor;\n\n    public boolean kafka1Send(String topic, String message) {\n        try {\n            if (kafkaMq) {\n                kafkaTemplate.send(topic, message);\n            }\n        } catch (Exception e) {\n            log.warn(\"kafka1 发送kafka消息失败 topic={},error={}\",topic,e);\n        }\n        return true;\n    }\n    \n    public boolean kafka2Send(String topic, String message){\n        try {\n            kafkaTemplateForMonitor.send(topic, message);\n        } catch (Exception e) {\n            log.warn(\"kafka2 发送kafka消息失败 topic={},error={}\",topic,e);\n        }\n        return true;\n    }\n}\n```\n","source":"_posts/backend/mq/kafka.md","raw":"---\ntitle: SpringBoot集成Kafka\ndate: 2021-02-03 16:06:00\ntags:\n- message\n- kafka\n\ncategories:\n- 后端\n- 消息队列\n---\n\n### 简单案例\n#### 引用包\n```xml\n<!-- 设置了版本号，有可能会报错ClassNotFound -->\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n```\n\n#### 配置\n```yaml\nspring:\n  kafka:\n  topic: testTopic\n  bootstrap-servers: 127.0.0.1:9092\n  producer:\n    retries: 0\n    batch-size: 50\n    buffer-memory: 6554432\n    key-serializer: org.apache.kafka.common.serialization.StringSerializer\n    value-serializer: org.apache.kafka.common.serialization.StringSerializer\n    properties:\n      max:\n        request:\n          size: 5242880\n      linger.ms: 1\n```\n\n#### 发送消息\n```java\n@Slf4j\n@Component\npublic class MessageService{\n    \n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n    @Value(\"${spring.kafka.topic}\")\n    private String topics;\n    \n    public void sendSyncMessage(String resourceName){\n        try{\n            kafkaTemplate.send(topics,resourceName);\n        } catch (Exception e) {\n            log.error(\"message send failed, error={}\", e);\n        }\n    }\n}\n```\n\n#### 监听消息\n```java\n@Slf4j\n@Component\npublic class MessageListener {\n\n    @KafkaListener(topics = {\"testTopic\"}, groupId = \"testGroupId\")\n    public void annul1(ConsumerRecord<String, String> record) {\n        log.info(\"groupId = myContainer2, message = \" + record.toString());\n    }\n}\n```\n\n### 双kafka案例\n- [SpringBoot多kafka配置](https://www.byteblogs.com/article/434)\n#### 配置文件\n```yaml\nspring:\n  kafka:\n    kafka1:\n      bootstrap-servers: 127.0.0.1:9092\n      producer:\n        retries: 0\n        batch-size: 50\n        buffer-memory: 6554432\n        key-serializer: org.apache.kafka.common.serialization.StringSerializer\n        value-serializer: org.apache.kafka.common.serialization.StringSerializer\n        properties:\n          max:\n            request:\n              size: 5242880\n          linger.ms: 1\n    kafka2:\n      bootstrap-servers: 127.0.0.1:9092\n      producer:\n        retries: 0\n        batch-size: 50\n        buffer-memory: 6554432\n        key-serializer: org.apache.kafka.common.serialization.StringSerializer\n        value-serializer: org.apache.kafka.common.serialization.StringSerializer\n        properties:\n          max:\n            request:\n              size: 5242880\n          linger.ms: 1\n```\n\n#### 代码配置\n- 实例1配置\n```java\n@Configuration\n@EnableKafka\npublic class Kafka1Config {\n\n    @Bean(\"kafka1ExtListenerKafkaProperties\")\n    @Primary\n    @ConfigurationProperties(prefix = \"spring.kafka.kafka1\")\n    public KafkaProperties kafka1ExtListenerKafkaProperties() {\n        return new KafkaProperties();\n    }\n\n    @Bean(\"kafka1ListenerContainerFactory\")\n    @Primary\n    KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<Integer, String>> kafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<Integer, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.setConcurrency(3);\n        factory.getContainerProperties().setPollTimeout(3000);\n        return factory;\n    }\n\n    private ConsumerFactory<Integer, String> consumerFactory() {\n        return new DefaultKafkaConsumerFactory<>(consumerConfigs());\n    }\n\n    private Map<String, Object> consumerConfigs() {\n        return kafka1ExtListenerKafkaProperties().buildConsumerProperties();\n    }\n\n    @Bean(\"kafkaTemplate\")\n    @Primary\n    public KafkaTemplate<String, String> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n\n    private ProducerFactory<String, String> producerFactory() {\n        DefaultKafkaProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(producerConfigs());\n        return producerFactory;\n    }\n\n    private Map<String, Object> producerConfigs() {\n        return kafka1ExtListenerKafkaProperties().buildProducerProperties();\n    }\n}\n```\n\n- 实例2配置\n```java\n@Configuration\n@EnableKafka\npublic class Kafka2Config {\n\n    @Bean(\"kafka2ListenerKafkaProperties\")\n    @ConfigurationProperties(prefix = \"spring.kafka.kafka2\")\n    public KafkaProperties kafka2ListenerKafkaProperties() {\n        return new KafkaProperties();\n    }\n\n    @Bean(\"kafka2ListenerContainerFactory\")\n    public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<Integer, String>> kafka2ListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<Integer, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.setConcurrency(3);\n        factory.getContainerProperties().setPollTimeout(3000);\n        return factory;\n    }\n\n    /**\n     * 消费者工厂的bean\n     *\n     * @return\n     */\n    private ConsumerFactory<Integer, String> consumerFactory() {\n        return new DefaultKafkaConsumerFactory<>(consumerConfigs());\n    }\n\n    private Map<String, Object> consumerConfigs() {\n        return kafka2ListenerKafkaProperties().buildConsumerProperties();\n    }\n\n    @Bean(\"kafka2Template\")\n    public KafkaTemplate<String, String> kafka2Template() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n\n    private ProducerFactory<String, String> producerFactory() {\n        DefaultKafkaProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(producerConfigs());\n        return producerFactory;\n    }\n\n    private Map<String, Object> producerConfigs() {\n        return kafka2ListenerKafkaProperties().buildProducerProperties();\n    }\n}\n```\n\n#### 使用\n```java\n@Slf4j\n@Service\npublic class MessageSendService{\n    @Resource(name = \"kafkaTemplate\")\n    private KafkaTemplate<String, Object> kafkaTemplate;\n\n    @Resource(name = \"kafkaTemplateForMonitor\")\n    private KafkaTemplate<String, Object> kafkaTemplateForMonitor;\n\n    public boolean kafka1Send(String topic, String message) {\n        try {\n            if (kafkaMq) {\n                kafkaTemplate.send(topic, message);\n            }\n        } catch (Exception e) {\n            log.warn(\"kafka1 发送kafka消息失败 topic={},error={}\",topic,e);\n        }\n        return true;\n    }\n    \n    public boolean kafka2Send(String topic, String message){\n        try {\n            kafkaTemplateForMonitor.send(topic, message);\n        } catch (Exception e) {\n            log.warn(\"kafka2 发送kafka消息失败 topic={},error={}\",topic,e);\n        }\n        return true;\n    }\n}\n```\n","slug":"backend/mq/kafka","published":1,"updated":"2021-08-19T01:37:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxx001tjrnv7rwfbmyk","content":"<h3 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h3><h4 id=\"引用包\"><a href=\"#引用包\" class=\"headerlink\" title=\"引用包\"></a>引用包</h4><pre><code class=\"xml\">&lt;!-- 设置了版本号，有可能会报错ClassNotFound --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><pre><code class=\"yaml\">spring:\n  kafka:\n  topic: testTopic\n  bootstrap-servers: 127.0.0.1:9092\n  producer:\n    retries: 0\n    batch-size: 50\n    buffer-memory: 6554432\n    key-serializer: org.apache.kafka.common.serialization.StringSerializer\n    value-serializer: org.apache.kafka.common.serialization.StringSerializer\n    properties:\n      max:\n        request:\n          size: 5242880\n      linger.ms: 1</code></pre>\n<h4 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h4><pre><code class=\"java\">@Slf4j\n@Component\npublic class MessageService&#123;\n\n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n    @Value(&quot;$&#123;spring.kafka.topic&#125;&quot;)\n    private String topics;\n\n    public void sendSyncMessage(String resourceName)&#123;\n        try&#123;\n            kafkaTemplate.send(topics,resourceName);\n        &#125; catch (Exception e) &#123;\n            log.error(&quot;message send failed, error=&#123;&#125;&quot;, e);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h4 id=\"监听消息\"><a href=\"#监听消息\" class=\"headerlink\" title=\"监听消息\"></a>监听消息</h4><pre><code class=\"java\">@Slf4j\n@Component\npublic class MessageListener &#123;\n\n    @KafkaListener(topics = &#123;&quot;testTopic&quot;&#125;, groupId = &quot;testGroupId&quot;)\n    public void annul1(ConsumerRecord&lt;String, String&gt; record) &#123;\n        log.info(&quot;groupId = myContainer2, message = &quot; + record.toString());\n    &#125;\n&#125;</code></pre>\n<h3 id=\"双kafka案例\"><a href=\"#双kafka案例\" class=\"headerlink\" title=\"双kafka案例\"></a>双kafka案例</h3><ul>\n<li><a href=\"https://www.byteblogs.com/article/434\">SpringBoot多kafka配置</a><h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><pre><code class=\"yaml\">spring:\nkafka:\n  kafka1:\n    bootstrap-servers: 127.0.0.1:9092\n    producer:\n      retries: 0\n      batch-size: 50\n      buffer-memory: 6554432\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\n      properties:\n        max:\n          request:\n            size: 5242880\n        linger.ms: 1\n  kafka2:\n    bootstrap-servers: 127.0.0.1:9092\n    producer:\n      retries: 0\n      batch-size: 50\n      buffer-memory: 6554432\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\n      properties:\n        max:\n          request:\n            size: 5242880\n        linger.ms: 1</code></pre>\n</li>\n</ul>\n<h4 id=\"代码配置\"><a href=\"#代码配置\" class=\"headerlink\" title=\"代码配置\"></a>代码配置</h4><ul>\n<li><p>实例1配置</p>\n<pre><code class=\"java\">@Configuration\n@EnableKafka\npublic class Kafka1Config &#123;\n\n  @Bean(&quot;kafka1ExtListenerKafkaProperties&quot;)\n  @Primary\n  @ConfigurationProperties(prefix = &quot;spring.kafka.kafka1&quot;)\n  public KafkaProperties kafka1ExtListenerKafkaProperties() &#123;\n      return new KafkaProperties();\n  &#125;\n\n  @Bean(&quot;kafka1ListenerContainerFactory&quot;)\n  @Primary\n  KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;Integer, String&gt;&gt; kafkaListenerContainerFactory() &#123;\n      ConcurrentKafkaListenerContainerFactory&lt;Integer, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();\n      factory.setConsumerFactory(consumerFactory());\n      factory.setConcurrency(3);\n      factory.getContainerProperties().setPollTimeout(3000);\n      return factory;\n  &#125;\n\n  private ConsumerFactory&lt;Integer, String&gt; consumerFactory() &#123;\n      return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());\n  &#125;\n\n  private Map&lt;String, Object&gt; consumerConfigs() &#123;\n      return kafka1ExtListenerKafkaProperties().buildConsumerProperties();\n  &#125;\n\n  @Bean(&quot;kafkaTemplate&quot;)\n  @Primary\n  public KafkaTemplate&lt;String, String&gt; kafkaTemplate() &#123;\n      return new KafkaTemplate&lt;&gt;(producerFactory());\n  &#125;\n\n  private ProducerFactory&lt;String, String&gt; producerFactory() &#123;\n      DefaultKafkaProducerFactory&lt;String, String&gt; producerFactory = new DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());\n      return producerFactory;\n  &#125;\n\n  private Map&lt;String, Object&gt; producerConfigs() &#123;\n      return kafka1ExtListenerKafkaProperties().buildProducerProperties();\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>实例2配置</p>\n<pre><code class=\"java\">@Configuration\n@EnableKafka\npublic class Kafka2Config &#123;\n\n  @Bean(&quot;kafka2ListenerKafkaProperties&quot;)\n  @ConfigurationProperties(prefix = &quot;spring.kafka.kafka2&quot;)\n  public KafkaProperties kafka2ListenerKafkaProperties() &#123;\n      return new KafkaProperties();\n  &#125;\n\n  @Bean(&quot;kafka2ListenerContainerFactory&quot;)\n  public KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;Integer, String&gt;&gt; kafka2ListenerContainerFactory() &#123;\n      ConcurrentKafkaListenerContainerFactory&lt;Integer, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();\n      factory.setConsumerFactory(consumerFactory());\n      factory.setConcurrency(3);\n      factory.getContainerProperties().setPollTimeout(3000);\n      return factory;\n  &#125;\n\n  /**\n   * 消费者工厂的bean\n   *\n   * @return\n   */\n  private ConsumerFactory&lt;Integer, String&gt; consumerFactory() &#123;\n      return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());\n  &#125;\n\n  private Map&lt;String, Object&gt; consumerConfigs() &#123;\n      return kafka2ListenerKafkaProperties().buildConsumerProperties();\n  &#125;\n\n  @Bean(&quot;kafka2Template&quot;)\n  public KafkaTemplate&lt;String, String&gt; kafka2Template() &#123;\n      return new KafkaTemplate&lt;&gt;(producerFactory());\n  &#125;\n\n  private ProducerFactory&lt;String, String&gt; producerFactory() &#123;\n      DefaultKafkaProducerFactory&lt;String, String&gt; producerFactory = new DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());\n      return producerFactory;\n  &#125;\n\n  private Map&lt;String, Object&gt; producerConfigs() &#123;\n      return kafka2ListenerKafkaProperties().buildProducerProperties();\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre><code class=\"java\">@Slf4j\n@Service\npublic class MessageSendService&#123;\n    @Resource(name = &quot;kafkaTemplate&quot;)\n    private KafkaTemplate&lt;String, Object&gt; kafkaTemplate;\n\n    @Resource(name = &quot;kafkaTemplateForMonitor&quot;)\n    private KafkaTemplate&lt;String, Object&gt; kafkaTemplateForMonitor;\n\n    public boolean kafka1Send(String topic, String message) &#123;\n        try &#123;\n            if (kafkaMq) &#123;\n                kafkaTemplate.send(topic, message);\n            &#125;\n        &#125; catch (Exception e) &#123;\n            log.warn(&quot;kafka1 发送kafka消息失败 topic=&#123;&#125;,error=&#123;&#125;&quot;,topic,e);\n        &#125;\n        return true;\n    &#125;\n\n    public boolean kafka2Send(String topic, String message)&#123;\n        try &#123;\n            kafkaTemplateForMonitor.send(topic, message);\n        &#125; catch (Exception e) &#123;\n            log.warn(&quot;kafka2 发送kafka消息失败 topic=&#123;&#125;,error=&#123;&#125;&quot;,topic,e);\n        &#125;\n        return true;\n    &#125;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h3><h4 id=\"引用包\"><a href=\"#引用包\" class=\"headerlink\" title=\"引用包\"></a>引用包</h4><pre><code class=\"xml\">&lt;!-- 设置了版本号，有可能会报错ClassNotFound --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><pre><code class=\"yaml\">spring:\n  kafka:\n  topic: testTopic\n  bootstrap-servers: 127.0.0.1:9092\n  producer:\n    retries: 0\n    batch-size: 50\n    buffer-memory: 6554432\n    key-serializer: org.apache.kafka.common.serialization.StringSerializer\n    value-serializer: org.apache.kafka.common.serialization.StringSerializer\n    properties:\n      max:\n        request:\n          size: 5242880\n      linger.ms: 1</code></pre>\n<h4 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h4><pre><code class=\"java\">@Slf4j\n@Component\npublic class MessageService&#123;\n\n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n    @Value(&quot;$&#123;spring.kafka.topic&#125;&quot;)\n    private String topics;\n\n    public void sendSyncMessage(String resourceName)&#123;\n        try&#123;\n            kafkaTemplate.send(topics,resourceName);\n        &#125; catch (Exception e) &#123;\n            log.error(&quot;message send failed, error=&#123;&#125;&quot;, e);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h4 id=\"监听消息\"><a href=\"#监听消息\" class=\"headerlink\" title=\"监听消息\"></a>监听消息</h4><pre><code class=\"java\">@Slf4j\n@Component\npublic class MessageListener &#123;\n\n    @KafkaListener(topics = &#123;&quot;testTopic&quot;&#125;, groupId = &quot;testGroupId&quot;)\n    public void annul1(ConsumerRecord&lt;String, String&gt; record) &#123;\n        log.info(&quot;groupId = myContainer2, message = &quot; + record.toString());\n    &#125;\n&#125;</code></pre>\n<h3 id=\"双kafka案例\"><a href=\"#双kafka案例\" class=\"headerlink\" title=\"双kafka案例\"></a>双kafka案例</h3><ul>\n<li><a href=\"https://www.byteblogs.com/article/434\">SpringBoot多kafka配置</a><h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><pre><code class=\"yaml\">spring:\nkafka:\n  kafka1:\n    bootstrap-servers: 127.0.0.1:9092\n    producer:\n      retries: 0\n      batch-size: 50\n      buffer-memory: 6554432\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\n      properties:\n        max:\n          request:\n            size: 5242880\n        linger.ms: 1\n  kafka2:\n    bootstrap-servers: 127.0.0.1:9092\n    producer:\n      retries: 0\n      batch-size: 50\n      buffer-memory: 6554432\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\n      properties:\n        max:\n          request:\n            size: 5242880\n        linger.ms: 1</code></pre>\n</li>\n</ul>\n<h4 id=\"代码配置\"><a href=\"#代码配置\" class=\"headerlink\" title=\"代码配置\"></a>代码配置</h4><ul>\n<li><p>实例1配置</p>\n<pre><code class=\"java\">@Configuration\n@EnableKafka\npublic class Kafka1Config &#123;\n\n  @Bean(&quot;kafka1ExtListenerKafkaProperties&quot;)\n  @Primary\n  @ConfigurationProperties(prefix = &quot;spring.kafka.kafka1&quot;)\n  public KafkaProperties kafka1ExtListenerKafkaProperties() &#123;\n      return new KafkaProperties();\n  &#125;\n\n  @Bean(&quot;kafka1ListenerContainerFactory&quot;)\n  @Primary\n  KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;Integer, String&gt;&gt; kafkaListenerContainerFactory() &#123;\n      ConcurrentKafkaListenerContainerFactory&lt;Integer, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();\n      factory.setConsumerFactory(consumerFactory());\n      factory.setConcurrency(3);\n      factory.getContainerProperties().setPollTimeout(3000);\n      return factory;\n  &#125;\n\n  private ConsumerFactory&lt;Integer, String&gt; consumerFactory() &#123;\n      return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());\n  &#125;\n\n  private Map&lt;String, Object&gt; consumerConfigs() &#123;\n      return kafka1ExtListenerKafkaProperties().buildConsumerProperties();\n  &#125;\n\n  @Bean(&quot;kafkaTemplate&quot;)\n  @Primary\n  public KafkaTemplate&lt;String, String&gt; kafkaTemplate() &#123;\n      return new KafkaTemplate&lt;&gt;(producerFactory());\n  &#125;\n\n  private ProducerFactory&lt;String, String&gt; producerFactory() &#123;\n      DefaultKafkaProducerFactory&lt;String, String&gt; producerFactory = new DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());\n      return producerFactory;\n  &#125;\n\n  private Map&lt;String, Object&gt; producerConfigs() &#123;\n      return kafka1ExtListenerKafkaProperties().buildProducerProperties();\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>实例2配置</p>\n<pre><code class=\"java\">@Configuration\n@EnableKafka\npublic class Kafka2Config &#123;\n\n  @Bean(&quot;kafka2ListenerKafkaProperties&quot;)\n  @ConfigurationProperties(prefix = &quot;spring.kafka.kafka2&quot;)\n  public KafkaProperties kafka2ListenerKafkaProperties() &#123;\n      return new KafkaProperties();\n  &#125;\n\n  @Bean(&quot;kafka2ListenerContainerFactory&quot;)\n  public KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;Integer, String&gt;&gt; kafka2ListenerContainerFactory() &#123;\n      ConcurrentKafkaListenerContainerFactory&lt;Integer, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();\n      factory.setConsumerFactory(consumerFactory());\n      factory.setConcurrency(3);\n      factory.getContainerProperties().setPollTimeout(3000);\n      return factory;\n  &#125;\n\n  /**\n   * 消费者工厂的bean\n   *\n   * @return\n   */\n  private ConsumerFactory&lt;Integer, String&gt; consumerFactory() &#123;\n      return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());\n  &#125;\n\n  private Map&lt;String, Object&gt; consumerConfigs() &#123;\n      return kafka2ListenerKafkaProperties().buildConsumerProperties();\n  &#125;\n\n  @Bean(&quot;kafka2Template&quot;)\n  public KafkaTemplate&lt;String, String&gt; kafka2Template() &#123;\n      return new KafkaTemplate&lt;&gt;(producerFactory());\n  &#125;\n\n  private ProducerFactory&lt;String, String&gt; producerFactory() &#123;\n      DefaultKafkaProducerFactory&lt;String, String&gt; producerFactory = new DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());\n      return producerFactory;\n  &#125;\n\n  private Map&lt;String, Object&gt; producerConfigs() &#123;\n      return kafka2ListenerKafkaProperties().buildProducerProperties();\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre><code class=\"java\">@Slf4j\n@Service\npublic class MessageSendService&#123;\n    @Resource(name = &quot;kafkaTemplate&quot;)\n    private KafkaTemplate&lt;String, Object&gt; kafkaTemplate;\n\n    @Resource(name = &quot;kafkaTemplateForMonitor&quot;)\n    private KafkaTemplate&lt;String, Object&gt; kafkaTemplateForMonitor;\n\n    public boolean kafka1Send(String topic, String message) &#123;\n        try &#123;\n            if (kafkaMq) &#123;\n                kafkaTemplate.send(topic, message);\n            &#125;\n        &#125; catch (Exception e) &#123;\n            log.warn(&quot;kafka1 发送kafka消息失败 topic=&#123;&#125;,error=&#123;&#125;&quot;,topic,e);\n        &#125;\n        return true;\n    &#125;\n\n    public boolean kafka2Send(String topic, String message)&#123;\n        try &#123;\n            kafkaTemplateForMonitor.send(topic, message);\n        &#125; catch (Exception e) &#123;\n            log.warn(&quot;kafka2 发送kafka消息失败 topic=&#123;&#125;,error=&#123;&#125;&quot;,topic,e);\n        &#125;\n        return true;\n    &#125;\n&#125;</code></pre>\n"},{"title":"集成SwaggerUI","description":"swaggerui","date":"2021-11-25T02:00:00.000Z","_content":"\n- [knife4j官网](https://doc.xiaominfo.com/knife4j/documentation/)\n\n### 集成步骤\n\n- 引入jar包\n```xml\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <version>2.0.9</version>\n</dependency>\n```\n\n- 添加配置类\n```java\n/** \n * 注意knife版本号，如果是2.0.x\n * \n * **/\n@Configuration\n//@EnableSwagger2WebMvc //2.x版本用这个\n//@EnableOpenApi  //3.x版本用这个\npublic class MySwagger {\n\n    @Bean\n    public Docket createRestApi(Environment env) {\n        //开发测试环境开启\n        Profiles profile = Profiles.of(\"local\", \"dev\", \"test\");\n        boolean flag = env.acceptsProfiles(profile);\n\n        //2.x版本用 DocumentationType.SWAGGER_2\n        //3.x版本用 DocumentationType.OAS_30\n        \n        return new Docket(DocumentationType.SWAGGER_2)\n                //分组名称\n                .groupName(\"2.X版本\")\n                .apiInfo(apiInfo())\n                .enable(flag)\n                .pathMapping(\"/\")\n                .select()\n                //这里指定Controller扫描包路径\n                .apis(RequestHandlerSelectors.basePackage(\"com.my.demo.web.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"服务名\")\n                .version(\"2.0.0\")\n                .description(\"描述\")\n                .build();\n    }\n}\n```\n\n- 常用注解\n\n```textmate\n1.Controller类注解\n    @Api(tags = \"Controller名\")\n    @RestController\n    @RequestMapping(\"/请求路径\")\n\n2.Controller中方法注解\n    @ApiOperation(value = \"方法名\",notes = \"方法描述\")\n    @GetMapping(\"/请求路径\")\n    @PostMapping(\"/请求路径\")\n\n3.Controller中方法入参注解\n    @RequestParam(value = \"入参\",name = \"入参名称\")\n    @RequestBody\n\n4.出参入参注解\n    @ApiModel(\"对象名称\")\n    @ApiModelProperty(name = \"属性名\")\n\n```\n\n### 常见问题\n\n- 版本不兼容\n```textmate\n<!--swagger-ui 兼容性好的版本-->\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <version>2.0.9</version>\n    <!-- 去掉不兼容的版本 -->\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-plugin-core</artifactId>\n            <groupId>org.springframework.plugin</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.plugin</groupId>\n    <artifactId>spring-plugin-core</artifactId>\n    <version>2.0.0.RELEASE</version>\n</dependency>\n```\n\n","source":"_posts/backend/other/swagger.md","raw":"---\ntitle: 集成SwaggerUI\ndescription: swaggerui\ndate: 2021-11-25 10:00:00\ntags:\n- 接口文档\ncategories:\n- 后端\n- 接口文档\n---\n\n- [knife4j官网](https://doc.xiaominfo.com/knife4j/documentation/)\n\n### 集成步骤\n\n- 引入jar包\n```xml\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <version>2.0.9</version>\n</dependency>\n```\n\n- 添加配置类\n```java\n/** \n * 注意knife版本号，如果是2.0.x\n * \n * **/\n@Configuration\n//@EnableSwagger2WebMvc //2.x版本用这个\n//@EnableOpenApi  //3.x版本用这个\npublic class MySwagger {\n\n    @Bean\n    public Docket createRestApi(Environment env) {\n        //开发测试环境开启\n        Profiles profile = Profiles.of(\"local\", \"dev\", \"test\");\n        boolean flag = env.acceptsProfiles(profile);\n\n        //2.x版本用 DocumentationType.SWAGGER_2\n        //3.x版本用 DocumentationType.OAS_30\n        \n        return new Docket(DocumentationType.SWAGGER_2)\n                //分组名称\n                .groupName(\"2.X版本\")\n                .apiInfo(apiInfo())\n                .enable(flag)\n                .pathMapping(\"/\")\n                .select()\n                //这里指定Controller扫描包路径\n                .apis(RequestHandlerSelectors.basePackage(\"com.my.demo.web.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"服务名\")\n                .version(\"2.0.0\")\n                .description(\"描述\")\n                .build();\n    }\n}\n```\n\n- 常用注解\n\n```textmate\n1.Controller类注解\n    @Api(tags = \"Controller名\")\n    @RestController\n    @RequestMapping(\"/请求路径\")\n\n2.Controller中方法注解\n    @ApiOperation(value = \"方法名\",notes = \"方法描述\")\n    @GetMapping(\"/请求路径\")\n    @PostMapping(\"/请求路径\")\n\n3.Controller中方法入参注解\n    @RequestParam(value = \"入参\",name = \"入参名称\")\n    @RequestBody\n\n4.出参入参注解\n    @ApiModel(\"对象名称\")\n    @ApiModelProperty(name = \"属性名\")\n\n```\n\n### 常见问题\n\n- 版本不兼容\n```textmate\n<!--swagger-ui 兼容性好的版本-->\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n    <version>2.0.9</version>\n    <!-- 去掉不兼容的版本 -->\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-plugin-core</artifactId>\n            <groupId>org.springframework.plugin</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.plugin</groupId>\n    <artifactId>spring-plugin-core</artifactId>\n    <version>2.0.0.RELEASE</version>\n</dependency>\n```\n\n","slug":"backend/other/swagger","published":1,"updated":"2021-12-29T12:06:42.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxy001wjrnv1ln26o0j","content":"<ul>\n<li><a href=\"https://doc.xiaominfo.com/knife4j/documentation/\">knife4j官网</a></li>\n</ul>\n<h3 id=\"集成步骤\"><a href=\"#集成步骤\" class=\"headerlink\" title=\"集成步骤\"></a>集成步骤</h3><ul>\n<li><p>引入jar包</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n  &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;2.0.9&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n</li>\n<li><p>添加配置类</p>\n<pre><code class=\"java\">/** \n* 注意knife版本号，如果是2.0.x\n* \n* **/\n@Configuration\n//@EnableSwagger2WebMvc //2.x版本用这个\n//@EnableOpenApi  //3.x版本用这个\npublic class MySwagger &#123;\n\n  @Bean\n  public Docket createRestApi(Environment env) &#123;\n      //开发测试环境开启\n      Profiles profile = Profiles.of(&quot;local&quot;, &quot;dev&quot;, &quot;test&quot;);\n      boolean flag = env.acceptsProfiles(profile);\n\n      //2.x版本用 DocumentationType.SWAGGER_2\n      //3.x版本用 DocumentationType.OAS_30\n\n      return new Docket(DocumentationType.SWAGGER_2)\n              //分组名称\n              .groupName(&quot;2.X版本&quot;)\n              .apiInfo(apiInfo())\n              .enable(flag)\n              .pathMapping(&quot;/&quot;)\n              .select()\n              //这里指定Controller扫描包路径\n              .apis(RequestHandlerSelectors.basePackage(&quot;com.my.demo.web.controller&quot;))\n              .paths(PathSelectors.any())\n              .build();\n  &#125;\n\n  private ApiInfo apiInfo() &#123;\n      return new ApiInfoBuilder()\n              .title(&quot;服务名&quot;)\n              .version(&quot;2.0.0&quot;)\n              .description(&quot;描述&quot;)\n              .build();\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>常用注解</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.Controller类注解\n    @Api(tags = &quot;Controller名&quot;)\n    @RestController\n    @RequestMapping(&quot;/请求路径&quot;)\n\n2.Controller中方法注解\n    @ApiOperation(value = &quot;方法名&quot;,notes = &quot;方法描述&quot;)\n    @GetMapping(&quot;/请求路径&quot;)\n    @PostMapping(&quot;/请求路径&quot;)\n\n3.Controller中方法入参注解\n    @RequestParam(value = &quot;入参&quot;,name = &quot;入参名称&quot;)\n    @RequestBody\n\n4.出参入参注解\n    @ApiModel(&quot;对象名称&quot;)\n    @ApiModelProperty(name = &quot;属性名&quot;)\n</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>版本不兼容<pre><code class=\"textmate\">&lt;!--swagger-ui 兼容性好的版本--&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n  &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;2.0.9&lt;/version&gt;\n  &lt;!-- 去掉不兼容的版本 --&gt;\n  &lt;exclusions&gt;\n      &lt;exclusion&gt;\n          &lt;artifactId&gt;spring-plugin-core&lt;/artifactId&gt;\n          &lt;groupId&gt;org.springframework.plugin&lt;/groupId&gt;\n      &lt;/exclusion&gt;\n  &lt;/exclusions&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.plugin&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-plugin-core&lt;/artifactId&gt;\n  &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://doc.xiaominfo.com/knife4j/documentation/\">knife4j官网</a></li>\n</ul>\n<h3 id=\"集成步骤\"><a href=\"#集成步骤\" class=\"headerlink\" title=\"集成步骤\"></a>集成步骤</h3><ul>\n<li><p>引入jar包</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n  &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;2.0.9&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n</li>\n<li><p>添加配置类</p>\n<pre><code class=\"java\">/** \n* 注意knife版本号，如果是2.0.x\n* \n* **/\n@Configuration\n//@EnableSwagger2WebMvc //2.x版本用这个\n//@EnableOpenApi  //3.x版本用这个\npublic class MySwagger &#123;\n\n  @Bean\n  public Docket createRestApi(Environment env) &#123;\n      //开发测试环境开启\n      Profiles profile = Profiles.of(&quot;local&quot;, &quot;dev&quot;, &quot;test&quot;);\n      boolean flag = env.acceptsProfiles(profile);\n\n      //2.x版本用 DocumentationType.SWAGGER_2\n      //3.x版本用 DocumentationType.OAS_30\n\n      return new Docket(DocumentationType.SWAGGER_2)\n              //分组名称\n              .groupName(&quot;2.X版本&quot;)\n              .apiInfo(apiInfo())\n              .enable(flag)\n              .pathMapping(&quot;/&quot;)\n              .select()\n              //这里指定Controller扫描包路径\n              .apis(RequestHandlerSelectors.basePackage(&quot;com.my.demo.web.controller&quot;))\n              .paths(PathSelectors.any())\n              .build();\n  &#125;\n\n  private ApiInfo apiInfo() &#123;\n      return new ApiInfoBuilder()\n              .title(&quot;服务名&quot;)\n              .version(&quot;2.0.0&quot;)\n              .description(&quot;描述&quot;)\n              .build();\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>常用注解</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.Controller类注解\n    @Api(tags = &quot;Controller名&quot;)\n    @RestController\n    @RequestMapping(&quot;/请求路径&quot;)\n\n2.Controller中方法注解\n    @ApiOperation(value = &quot;方法名&quot;,notes = &quot;方法描述&quot;)\n    @GetMapping(&quot;/请求路径&quot;)\n    @PostMapping(&quot;/请求路径&quot;)\n\n3.Controller中方法入参注解\n    @RequestParam(value = &quot;入参&quot;,name = &quot;入参名称&quot;)\n    @RequestBody\n\n4.出参入参注解\n    @ApiModel(&quot;对象名称&quot;)\n    @ApiModelProperty(name = &quot;属性名&quot;)\n</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>版本不兼容<pre><code class=\"textmate\">&lt;!--swagger-ui 兼容性好的版本--&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n  &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;2.0.9&lt;/version&gt;\n  &lt;!-- 去掉不兼容的版本 --&gt;\n  &lt;exclusions&gt;\n      &lt;exclusion&gt;\n          &lt;artifactId&gt;spring-plugin-core&lt;/artifactId&gt;\n          &lt;groupId&gt;org.springframework.plugin&lt;/groupId&gt;\n      &lt;/exclusion&gt;\n  &lt;/exclusions&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.plugin&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-plugin-core&lt;/artifactId&gt;\n  &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n</li>\n</ul>\n"},{"title":"nacos","description":"nacos","date":"2021-04-13T02:56:52.000Z","_content":"\n## 相关资料\n- [官方文档](https://nacos.io/zh-cn/docs/what-is-nacos.html)\n- [小白也能懂的 Nacos 服务模型介绍(转)](https://mp.weixin.qq.com/s/S8HI7DG5v9C2IfjXtkVjuQ) \n- [动态刷新原理(转)](https://blog.csdn.net/wangwei19871103/article/details/105775039/)\n- [相关-Raft算法(转)](https://www.baidu.com/s?ie=UTF-8&wd=Raft%E7%AE%97%E6%B3%95)\n\n## 介绍\n### 主要作用\n```textmate\n1.致力于发现、配置和管理微服务\n    提供了一组简单易用的特性集，帮助使用者快速实现动态服务发现、服务配置、服务元数据及流量管理。\n2.更敏捷和容易地构建、交付和管理微服务平台\n    构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施\n\n服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理\n```\n### 关键特性\n- 服务发现和服务健康监测\n- 动态配置服务\n- 动态 DNS 服务\n- 服务及其元数据管理\n\n### 优势\n```textmate\n1.与eureka相比\n    nacos基于raft协议，集群一致性高；\n    eureka2.0闭源了\n    理论上支持的实例数大于eureka\n2.与SpringCloud Config相比\n    无需基于git仓库存储配置；\n    有可视化操作界面\n    nacos基于长连接，配置变动后立即通知Proivder\n```\n### 扩展\n- raft协议\n```textmate\nRaft 协议强依赖 Leader 节点来确保集群数据一致性。\n步骤:\nclient 发送过来的数据均先到达 Leader 节点，Leader 接收到数据后，先将数据标记为 uncommitted 状态，\n随后 Leader 开始向所有 Follower 复制数据并等待响应，集群中超过半数的 Follower 成功接收数据并响应后，\nLeader 将数据的状态标记为 committed，随后向 client 发送数据已接收确认，在向 client 发送出已数据接收后，\n再向所有 Follower 节点发送通知表明该数据状态为committed。\n```\n","source":"_posts/backend/service/nacos.md","raw":"---\ntitle: nacos\ndescription: nacos\n#top: 1\ndate: 2021-04-13 10:56:52\ntags:\n- nacos\n- 动态配置\n- 注册中心\ncategories:\n- 后端\n- 服务治理\n---\n\n## 相关资料\n- [官方文档](https://nacos.io/zh-cn/docs/what-is-nacos.html)\n- [小白也能懂的 Nacos 服务模型介绍(转)](https://mp.weixin.qq.com/s/S8HI7DG5v9C2IfjXtkVjuQ) \n- [动态刷新原理(转)](https://blog.csdn.net/wangwei19871103/article/details/105775039/)\n- [相关-Raft算法(转)](https://www.baidu.com/s?ie=UTF-8&wd=Raft%E7%AE%97%E6%B3%95)\n\n## 介绍\n### 主要作用\n```textmate\n1.致力于发现、配置和管理微服务\n    提供了一组简单易用的特性集，帮助使用者快速实现动态服务发现、服务配置、服务元数据及流量管理。\n2.更敏捷和容易地构建、交付和管理微服务平台\n    构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施\n\n服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理\n```\n### 关键特性\n- 服务发现和服务健康监测\n- 动态配置服务\n- 动态 DNS 服务\n- 服务及其元数据管理\n\n### 优势\n```textmate\n1.与eureka相比\n    nacos基于raft协议，集群一致性高；\n    eureka2.0闭源了\n    理论上支持的实例数大于eureka\n2.与SpringCloud Config相比\n    无需基于git仓库存储配置；\n    有可视化操作界面\n    nacos基于长连接，配置变动后立即通知Proivder\n```\n### 扩展\n- raft协议\n```textmate\nRaft 协议强依赖 Leader 节点来确保集群数据一致性。\n步骤:\nclient 发送过来的数据均先到达 Leader 节点，Leader 接收到数据后，先将数据标记为 uncommitted 状态，\n随后 Leader 开始向所有 Follower 复制数据并等待响应，集群中超过半数的 Follower 成功接收数据并响应后，\nLeader 将数据的状态标记为 committed，随后向 client 发送数据已接收确认，在向 client 发送出已数据接收后，\n再向所有 Follower 节点发送通知表明该数据状态为committed。\n```\n","slug":"backend/service/nacos","published":1,"updated":"2021-10-27T08:33:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxy0020jrnvdgqpfus3","content":"<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ul>\n<li><a href=\"https://nacos.io/zh-cn/docs/what-is-nacos.html\">官方文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/S8HI7DG5v9C2IfjXtkVjuQ\">小白也能懂的 Nacos 服务模型介绍(转)</a> </li>\n<li><a href=\"https://blog.csdn.net/wangwei19871103/article/details/105775039/\">动态刷新原理(转)</a></li>\n<li><a href=\"https://www.baidu.com/s?ie=UTF-8&wd=Raft%E7%AE%97%E6%B3%95\">相关-Raft算法(转)</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"主要作用\"><a href=\"#主要作用\" class=\"headerlink\" title=\"主要作用\"></a>主要作用</h3><pre><code class=\"textmate\">1.致力于发现、配置和管理微服务\n    提供了一组简单易用的特性集，帮助使用者快速实现动态服务发现、服务配置、服务元数据及流量管理。\n2.更敏捷和容易地构建、交付和管理微服务平台\n    构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施\n\n服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理</code></pre>\n<h3 id=\"关键特性\"><a href=\"#关键特性\" class=\"headerlink\" title=\"关键特性\"></a>关键特性</h3><ul>\n<li>服务发现和服务健康监测</li>\n<li>动态配置服务</li>\n<li>动态 DNS 服务</li>\n<li>服务及其元数据管理</li>\n</ul>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code class=\"textmate\">1.与eureka相比\n    nacos基于raft协议，集群一致性高；\n    eureka2.0闭源了\n    理论上支持的实例数大于eureka\n2.与SpringCloud Config相比\n    无需基于git仓库存储配置；\n    有可视化操作界面\n    nacos基于长连接，配置变动后立即通知Proivder</code></pre>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><ul>\n<li>raft协议<pre><code class=\"textmate\">Raft 协议强依赖 Leader 节点来确保集群数据一致性。\n步骤:\nclient 发送过来的数据均先到达 Leader 节点，Leader 接收到数据后，先将数据标记为 uncommitted 状态，\n随后 Leader 开始向所有 Follower 复制数据并等待响应，集群中超过半数的 Follower 成功接收数据并响应后，\nLeader 将数据的状态标记为 committed，随后向 client 发送数据已接收确认，在向 client 发送出已数据接收后，\n再向所有 Follower 节点发送通知表明该数据状态为committed。</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ul>\n<li><a href=\"https://nacos.io/zh-cn/docs/what-is-nacos.html\">官方文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/S8HI7DG5v9C2IfjXtkVjuQ\">小白也能懂的 Nacos 服务模型介绍(转)</a> </li>\n<li><a href=\"https://blog.csdn.net/wangwei19871103/article/details/105775039/\">动态刷新原理(转)</a></li>\n<li><a href=\"https://www.baidu.com/s?ie=UTF-8&wd=Raft%E7%AE%97%E6%B3%95\">相关-Raft算法(转)</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"主要作用\"><a href=\"#主要作用\" class=\"headerlink\" title=\"主要作用\"></a>主要作用</h3><pre><code class=\"textmate\">1.致力于发现、配置和管理微服务\n    提供了一组简单易用的特性集，帮助使用者快速实现动态服务发现、服务配置、服务元数据及流量管理。\n2.更敏捷和容易地构建、交付和管理微服务平台\n    构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施\n\n服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理</code></pre>\n<h3 id=\"关键特性\"><a href=\"#关键特性\" class=\"headerlink\" title=\"关键特性\"></a>关键特性</h3><ul>\n<li>服务发现和服务健康监测</li>\n<li>动态配置服务</li>\n<li>动态 DNS 服务</li>\n<li>服务及其元数据管理</li>\n</ul>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code class=\"textmate\">1.与eureka相比\n    nacos基于raft协议，集群一致性高；\n    eureka2.0闭源了\n    理论上支持的实例数大于eureka\n2.与SpringCloud Config相比\n    无需基于git仓库存储配置；\n    有可视化操作界面\n    nacos基于长连接，配置变动后立即通知Proivder</code></pre>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><ul>\n<li>raft协议<pre><code class=\"textmate\">Raft 协议强依赖 Leader 节点来确保集群数据一致性。\n步骤:\nclient 发送过来的数据均先到达 Leader 节点，Leader 接收到数据后，先将数据标记为 uncommitted 状态，\n随后 Leader 开始向所有 Follower 复制数据并等待响应，集群中超过半数的 Follower 成功接收数据并响应后，\nLeader 将数据的状态标记为 committed，随后向 client 发送数据已接收确认，在向 client 发送出已数据接收后，\n再向所有 Follower 节点发送通知表明该数据状态为committed。</code></pre>\n</li>\n</ul>\n"},{"title":"Zookeeper搭建","date":"2020-10-29T07:40:46.000Z","_content":"\n\n## 相关链接\n> [官网](https://zookeeper.apache.org/releases.html)\n\n\n\n## 部署\n### 注意事项\n```textmate\n1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用\n```\n\n### 单机部署步骤\n```textmate\n1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001>myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status\n```\n\n### zookeeper数据查看工具\n> [下载地址](https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip)\n- 使用\n\n```textmate\n1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &\n3.左上角连接按钮，输入zk地址并连接\n```\n\n### 常见问题\n- 启动报ClassNotFound\n```textmate\n重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的\n```\n\n- 启动失败\n\n```textmate\n1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启\n```\n","source":"_posts/backend/service/zookeeper.md","raw":"---\ntitle: Zookeeper搭建\ndate: 2020-10-29 15:40:46\ntags: \n- zookeeper\n- 注册中心\n- 分布式锁\ncategories: \n- 后端\n- 服务治理\n---\n\n\n## 相关链接\n> [官网](https://zookeeper.apache.org/releases.html)\n\n\n\n## 部署\n### 注意事项\n```textmate\n1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用\n```\n\n### 单机部署步骤\n```textmate\n1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001>myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status\n```\n\n### zookeeper数据查看工具\n> [下载地址](https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip)\n- 使用\n\n```textmate\n1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &\n3.左上角连接按钮，输入zk地址并连接\n```\n\n### 常见问题\n- 启动报ClassNotFound\n```textmate\n重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的\n```\n\n- 启动失败\n\n```textmate\n1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启\n```\n","slug":"backend/service/zookeeper","published":1,"updated":"2021-10-27T09:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxy0023jrnvgk372yv4","content":"<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><blockquote>\n<p><a href=\"https://zookeeper.apache.org/releases.html\">官网</a></p>\n</blockquote>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><pre><code class=\"textmate\">1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用</code></pre>\n<h3 id=\"单机部署步骤\"><a href=\"#单机部署步骤\" class=\"headerlink\" title=\"单机部署步骤\"></a>单机部署步骤</h3><pre><code class=\"textmate\">1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001&gt;myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status</code></pre>\n<h3 id=\"zookeeper数据查看工具\"><a href=\"#zookeeper数据查看工具\" class=\"headerlink\" title=\"zookeeper数据查看工具\"></a>zookeeper数据查看工具</h3><blockquote>\n<p><a href=\"https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip\">下载地址</a></p>\n</blockquote>\n<ul>\n<li>使用</li>\n</ul>\n<pre><code class=\"textmate\">1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &amp;\n3.左上角连接按钮，输入zk地址并连接</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li><p>启动报ClassNotFound</p>\n<pre><code class=\"textmate\">重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的</code></pre>\n</li>\n<li><p>启动失败</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><blockquote>\n<p><a href=\"https://zookeeper.apache.org/releases.html\">官网</a></p>\n</blockquote>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><pre><code class=\"textmate\">1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用</code></pre>\n<h3 id=\"单机部署步骤\"><a href=\"#单机部署步骤\" class=\"headerlink\" title=\"单机部署步骤\"></a>单机部署步骤</h3><pre><code class=\"textmate\">1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001&gt;myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status</code></pre>\n<h3 id=\"zookeeper数据查看工具\"><a href=\"#zookeeper数据查看工具\" class=\"headerlink\" title=\"zookeeper数据查看工具\"></a>zookeeper数据查看工具</h3><blockquote>\n<p><a href=\"https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip\">下载地址</a></p>\n</blockquote>\n<ul>\n<li>使用</li>\n</ul>\n<pre><code class=\"textmate\">1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &amp;\n3.左上角连接按钮，输入zk地址并连接</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li><p>启动报ClassNotFound</p>\n<pre><code class=\"textmate\">重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的</code></pre>\n</li>\n<li><p>启动失败</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启</code></pre>\n"},{"title":"RocketMQ相关文档","date":"2021-02-03T08:06:00.000Z","_content":"\n## 一、专业术语\n\n### 1. 角色名称\n\n```textmate\n- Product\n\t消息生产者\n\n- Consumer\n\t消息消费者\n\n- Push Consumer\n\t消息消费-推模式，应用通常向 Consumer 对象注册一个Listener接口，一旦收到消息，Consumer对象立刻回调Listener接口方法。\n\n- Pull Consumer\n\t消息消费-拉模式，应用通常主动调用 Consumer 的拉消息方法从 Broker 拉消息，主动权由应用控制。\n\n- ProducerGroup\n\t一类 Producer 的集合名称，这类 Producer 通常发送一类消息，且发送逻辑一致。\n\n- ConsumerGroup\n\t一类 Consumer 的集合名称，这类 Consumer 通常消费一类消息，且消费逻辑一致。\n\n- Broker\n\t消息中转角色，负责存储消息，转发消息，一般也称为 Server。在 JMS 规范中称为 Provider。\n\n- Message Queue\n\t消息存储队列，长度无线(offset作为数据下标，long类型64位，理论上在 100 年内不会溢出，所以认为是长度无限)\n```\n\n### 2. 消费模式\n\n```textmate\n- 广播消费\n\t一条消息被多个 Consumer 消费，每个Consumer都会至少消费一次消息，广播消费中的 Consumer Group 概念可以认为在消息划分方面无意义。\n\t在 CORBA Notification 规范中，消费方式都属于广播消费。在 JMS 规范中，相当于JMS publish/subscribe model\n\n- 集群消费\n\t一个 Consumer Group 中的 Consumer 实例平均分摊消费消息。\n\n- 顺序消费\n\t消费消息的顺序要同发送消息的顺序一致(局部顺序)，一类消息为满足顺序性，必须Producer单线程顺序发送到同一个队列，\n\t这样 Consumer 就可以按照 Producer 发送 的顺序去消费消息。\n\n- 普通顺序消息\n\t顺序消息的一种，正常情况下可以保证完全的顺序消息，但是一旦发生通信异常，Broker 重启，由于队列 总数发生发化，哈希取模后定位的队列会发化，产生短暂的消息顺序不一致。\n\n- 严格顺序消息\n\t顺序消息的一种，无论正常异常情况都能保证顺序，但是牺牲了分布式 Failover(故障转移) 特性，即 Broker 集群中只 要有一台机器不可用，则整个集群都不可用，服务可用性大大降低。 如果服务器部署为同步双写模式，此缺陷可通过备机自动切换为主避免，不过仍然会存在几分钟的服务不可用。\n\t目前已知的应用只有数据库 binlog 同步强依赖严格顺序消息，其他应用绝大部分都可以容忍短暂乱序，推\n\t荐使用普通的顺序消息。\n```\n\n## 二、部署\n\n- 队列模型的消息中间件，高性能、高可用、高实时、分布式特点\n- Producer、Consumer、队列都可以分布式\n- 能够保证严格的消息顺序\n- 提供消息推拉消息模式\n- 亿级消息堆积能力\n- 较少依赖\n\n### 1.物理部署结构\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-deploy.jpg\" alt=\"物理部署结构图\"/>\n\n```textmate\n1.NameServer \n\t无状态节点，可集群部署，节点之间无通信\n2.Broker\n\t分为Master和Slave,一个master可以对应多个slave，但是一个slave只能对应一个master; master和slave的对应关系通过指定相同的BrokerName不同的BrokerId来定义，BorkerId为0标识master,非0标识slave。master可以部署多个。\n\t每个Broker和NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有的NameServer中\n3.Producer\n\tProducer与NameServer集群中其中一个节点(随机选择)建立长连接，定期拉取Topic路由信息，并向提供Topic服务的Master建立长连接，并定时发送心跳。Producer完全无状态，可集群部署\n4.Consumer\n\tConsumer与NameServer集群中的其中一个节点建立长连接，定期获取Topic路由，并向提供Topic服务的Master、Slave建立长连接，并定时发送心跳。Consumer订阅规则由Broker配置决定，既可以从Master订阅消息，也可以从Salve消息\n```\n\n### 2.逻辑部署结构\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/image-20220221170214844.png\" alt=\"逻辑部署结构图\"/>\n\n## 三、存储特点\n\n### 1.零拷贝原理\n\n> Consumer消费消息过程中使用了零拷贝\n\n- [零拷贝相关链接](https://www.linuxjournal.com/article/6345)\n- 零拷贝方式\n\n```textmate\n1.mmap+write方式(mmap将一个文件或者其它对象映射进内存)\n\t优点：使用小块文件传输，效率高，支持频繁调用\n\t缺点：不能很好的利用DMA方式(Direct Memory Access，直接存储器访问),会比sendfile多消耗CPU,内存安全性控制复杂，需要避免JVM Crash文件\n\n2.使用sendfile方式\n\t优点：可以利用DMA方式，消耗CPU较少，大块文件传输效率高，无内存安全问题\n\t缺点：小块文件效率低于mmap方式，只能BIO方式传递，不能使用NIO。\nRocketMQ选择了mmap+write方式，因为现有小块数据传输需求，效果比sendfile更好\n```\n\n### 2.文件系统\n\n```textmate\nRocketMQ 选择 Linux Ext4 文件系统\n原因：\n\tExt4 文件系统删除 1G 大小的文件通常耗时小于50ms，而 Ext3 文件系统耗时约 1s 左右，且删除文件时，磁盘 IO 压力极大，会导致IO写入超时。\n  文件系统层面需要做以下调优措施\n\t文件系统 IO 调度算法需要调整为 deadline，因为 deadline 算法在随机读情冴下，可以合并读请求为顺序跳跃方式，从而提高读 IO 吞吐量。\n```\n\n### 3.数据存储结构&存储目录结构\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-data.jpg\" alt=\"数据存储结构\" width=\"600px\" height=\"400px\"/>\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-file.png\" alt=\"存储目录结构\" width=\"600px\" height=\"400px\" />\n\n## 四、关键特性\n\n### 1.单机支持1万以上持久化队列\n\n```textmate\n|       8Byte     | 4Byte |        8Byte        |\n| CommitLogOffset | Size  | Message Tag Hashcode|\n\n1.所有数据单独存储到CommitLog文件中，完全顺序写，随机读\n2.对最终用户展现的队列实际只存储消息在CommitLog的位置信息，使用串行方式刷盘\n```\n\n### 2.刷盘策略\n\n```textmate\n先写入系统pageCache 然后刷盘，保证内存与磁盘都有一份数据，访问时从内存中读取\n\n- 同步刷盘\n\t1. 写入 PAGECACHE 后，线程等待，通知刷盘线程刷盘。 \n\t2. 刷盘线程刷盘后，唤醒前端等待线程，可能是一批线程。 \n\t3. 前端等待线程吐用户迒回成功。\n- 异步刷盘\n\n同步刷盘与异步刷盘的唯一区别是异步刷盘写完 PAGECACHE 直接返回，而同步刷盘需要等待刷盘完成才返回\n```\n\n### 3.消息查询\n\n```textmate\n- 按照MessageId查询消息\n\t| 8Byte | 8Byte |\n\t|消息所属Broker地址|CommitLogOffset|\n- 按照MessageKey查询消息\n\t|4Byte|8Byte|4Byte|4Byte|\n\t|keyHash|CommitLogOffset|Timestamp|NextIndexOffset|\n```\n\n## 五、消息过滤\n\n### 1.简单消息过滤\n\n```textmate\n通过topic和 tags进行过滤\nconsumer.subscribe(\"TopicTest1\",\"TagA || TagB\");\n```\n\n### 2.高级过滤方式\n\n```textmate\nRocketMQ 提供了基于表达式与基于类模式两种过滤模式\n可以实现 MessageFilter 接口，实现自定义过滤\n```\n\n","source":"_posts/backend/mq/rocketmq.md","raw":"---\ntitle: RocketMQ相关文档\ndate: 2021-02-03 16:06:00\ntags:\n- message\n- rocketmq\n\ncategories:\n- 后端\n- 消息队列\n---\n\n## 一、专业术语\n\n### 1. 角色名称\n\n```textmate\n- Product\n\t消息生产者\n\n- Consumer\n\t消息消费者\n\n- Push Consumer\n\t消息消费-推模式，应用通常向 Consumer 对象注册一个Listener接口，一旦收到消息，Consumer对象立刻回调Listener接口方法。\n\n- Pull Consumer\n\t消息消费-拉模式，应用通常主动调用 Consumer 的拉消息方法从 Broker 拉消息，主动权由应用控制。\n\n- ProducerGroup\n\t一类 Producer 的集合名称，这类 Producer 通常发送一类消息，且发送逻辑一致。\n\n- ConsumerGroup\n\t一类 Consumer 的集合名称，这类 Consumer 通常消费一类消息，且消费逻辑一致。\n\n- Broker\n\t消息中转角色，负责存储消息，转发消息，一般也称为 Server。在 JMS 规范中称为 Provider。\n\n- Message Queue\n\t消息存储队列，长度无线(offset作为数据下标，long类型64位，理论上在 100 年内不会溢出，所以认为是长度无限)\n```\n\n### 2. 消费模式\n\n```textmate\n- 广播消费\n\t一条消息被多个 Consumer 消费，每个Consumer都会至少消费一次消息，广播消费中的 Consumer Group 概念可以认为在消息划分方面无意义。\n\t在 CORBA Notification 规范中，消费方式都属于广播消费。在 JMS 规范中，相当于JMS publish/subscribe model\n\n- 集群消费\n\t一个 Consumer Group 中的 Consumer 实例平均分摊消费消息。\n\n- 顺序消费\n\t消费消息的顺序要同发送消息的顺序一致(局部顺序)，一类消息为满足顺序性，必须Producer单线程顺序发送到同一个队列，\n\t这样 Consumer 就可以按照 Producer 发送 的顺序去消费消息。\n\n- 普通顺序消息\n\t顺序消息的一种，正常情况下可以保证完全的顺序消息，但是一旦发生通信异常，Broker 重启，由于队列 总数发生发化，哈希取模后定位的队列会发化，产生短暂的消息顺序不一致。\n\n- 严格顺序消息\n\t顺序消息的一种，无论正常异常情况都能保证顺序，但是牺牲了分布式 Failover(故障转移) 特性，即 Broker 集群中只 要有一台机器不可用，则整个集群都不可用，服务可用性大大降低。 如果服务器部署为同步双写模式，此缺陷可通过备机自动切换为主避免，不过仍然会存在几分钟的服务不可用。\n\t目前已知的应用只有数据库 binlog 同步强依赖严格顺序消息，其他应用绝大部分都可以容忍短暂乱序，推\n\t荐使用普通的顺序消息。\n```\n\n## 二、部署\n\n- 队列模型的消息中间件，高性能、高可用、高实时、分布式特点\n- Producer、Consumer、队列都可以分布式\n- 能够保证严格的消息顺序\n- 提供消息推拉消息模式\n- 亿级消息堆积能力\n- 较少依赖\n\n### 1.物理部署结构\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-deploy.jpg\" alt=\"物理部署结构图\"/>\n\n```textmate\n1.NameServer \n\t无状态节点，可集群部署，节点之间无通信\n2.Broker\n\t分为Master和Slave,一个master可以对应多个slave，但是一个slave只能对应一个master; master和slave的对应关系通过指定相同的BrokerName不同的BrokerId来定义，BorkerId为0标识master,非0标识slave。master可以部署多个。\n\t每个Broker和NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有的NameServer中\n3.Producer\n\tProducer与NameServer集群中其中一个节点(随机选择)建立长连接，定期拉取Topic路由信息，并向提供Topic服务的Master建立长连接，并定时发送心跳。Producer完全无状态，可集群部署\n4.Consumer\n\tConsumer与NameServer集群中的其中一个节点建立长连接，定期获取Topic路由，并向提供Topic服务的Master、Slave建立长连接，并定时发送心跳。Consumer订阅规则由Broker配置决定，既可以从Master订阅消息，也可以从Salve消息\n```\n\n### 2.逻辑部署结构\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/image-20220221170214844.png\" alt=\"逻辑部署结构图\"/>\n\n## 三、存储特点\n\n### 1.零拷贝原理\n\n> Consumer消费消息过程中使用了零拷贝\n\n- [零拷贝相关链接](https://www.linuxjournal.com/article/6345)\n- 零拷贝方式\n\n```textmate\n1.mmap+write方式(mmap将一个文件或者其它对象映射进内存)\n\t优点：使用小块文件传输，效率高，支持频繁调用\n\t缺点：不能很好的利用DMA方式(Direct Memory Access，直接存储器访问),会比sendfile多消耗CPU,内存安全性控制复杂，需要避免JVM Crash文件\n\n2.使用sendfile方式\n\t优点：可以利用DMA方式，消耗CPU较少，大块文件传输效率高，无内存安全问题\n\t缺点：小块文件效率低于mmap方式，只能BIO方式传递，不能使用NIO。\nRocketMQ选择了mmap+write方式，因为现有小块数据传输需求，效果比sendfile更好\n```\n\n### 2.文件系统\n\n```textmate\nRocketMQ 选择 Linux Ext4 文件系统\n原因：\n\tExt4 文件系统删除 1G 大小的文件通常耗时小于50ms，而 Ext3 文件系统耗时约 1s 左右，且删除文件时，磁盘 IO 压力极大，会导致IO写入超时。\n  文件系统层面需要做以下调优措施\n\t文件系统 IO 调度算法需要调整为 deadline，因为 deadline 算法在随机读情冴下，可以合并读请求为顺序跳跃方式，从而提高读 IO 吞吐量。\n```\n\n### 3.数据存储结构&存储目录结构\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-data.jpg\" alt=\"数据存储结构\" width=\"600px\" height=\"400px\"/>\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-file.png\" alt=\"存储目录结构\" width=\"600px\" height=\"400px\" />\n\n## 四、关键特性\n\n### 1.单机支持1万以上持久化队列\n\n```textmate\n|       8Byte     | 4Byte |        8Byte        |\n| CommitLogOffset | Size  | Message Tag Hashcode|\n\n1.所有数据单独存储到CommitLog文件中，完全顺序写，随机读\n2.对最终用户展现的队列实际只存储消息在CommitLog的位置信息，使用串行方式刷盘\n```\n\n### 2.刷盘策略\n\n```textmate\n先写入系统pageCache 然后刷盘，保证内存与磁盘都有一份数据，访问时从内存中读取\n\n- 同步刷盘\n\t1. 写入 PAGECACHE 后，线程等待，通知刷盘线程刷盘。 \n\t2. 刷盘线程刷盘后，唤醒前端等待线程，可能是一批线程。 \n\t3. 前端等待线程吐用户迒回成功。\n- 异步刷盘\n\n同步刷盘与异步刷盘的唯一区别是异步刷盘写完 PAGECACHE 直接返回，而同步刷盘需要等待刷盘完成才返回\n```\n\n### 3.消息查询\n\n```textmate\n- 按照MessageId查询消息\n\t| 8Byte | 8Byte |\n\t|消息所属Broker地址|CommitLogOffset|\n- 按照MessageKey查询消息\n\t|4Byte|8Byte|4Byte|4Byte|\n\t|keyHash|CommitLogOffset|Timestamp|NextIndexOffset|\n```\n\n## 五、消息过滤\n\n### 1.简单消息过滤\n\n```textmate\n通过topic和 tags进行过滤\nconsumer.subscribe(\"TopicTest1\",\"TagA || TagB\");\n```\n\n### 2.高级过滤方式\n\n```textmate\nRocketMQ 提供了基于表达式与基于类模式两种过滤模式\n可以实现 MessageFilter 接口，实现自定义过滤\n```\n\n","slug":"backend/mq/rocketmq","published":1,"updated":"2022-02-22T03:40:53.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxz0027jrnv7e221old","content":"<h2 id=\"一、专业术语\"><a href=\"#一、专业术语\" class=\"headerlink\" title=\"一、专业术语\"></a>一、专业术语</h2><h3 id=\"1-角色名称\"><a href=\"#1-角色名称\" class=\"headerlink\" title=\"1. 角色名称\"></a>1. 角色名称</h3><pre><code class=\"textmate\">- Product\n    消息生产者\n\n- Consumer\n    消息消费者\n\n- Push Consumer\n    消息消费-推模式，应用通常向 Consumer 对象注册一个Listener接口，一旦收到消息，Consumer对象立刻回调Listener接口方法。\n\n- Pull Consumer\n    消息消费-拉模式，应用通常主动调用 Consumer 的拉消息方法从 Broker 拉消息，主动权由应用控制。\n\n- ProducerGroup\n    一类 Producer 的集合名称，这类 Producer 通常发送一类消息，且发送逻辑一致。\n\n- ConsumerGroup\n    一类 Consumer 的集合名称，这类 Consumer 通常消费一类消息，且消费逻辑一致。\n\n- Broker\n    消息中转角色，负责存储消息，转发消息，一般也称为 Server。在 JMS 规范中称为 Provider。\n\n- Message Queue\n    消息存储队列，长度无线(offset作为数据下标，long类型64位，理论上在 100 年内不会溢出，所以认为是长度无限)</code></pre>\n<h3 id=\"2-消费模式\"><a href=\"#2-消费模式\" class=\"headerlink\" title=\"2. 消费模式\"></a>2. 消费模式</h3><pre><code class=\"textmate\">- 广播消费\n    一条消息被多个 Consumer 消费，每个Consumer都会至少消费一次消息，广播消费中的 Consumer Group 概念可以认为在消息划分方面无意义。\n    在 CORBA Notification 规范中，消费方式都属于广播消费。在 JMS 规范中，相当于JMS publish/subscribe model\n\n- 集群消费\n    一个 Consumer Group 中的 Consumer 实例平均分摊消费消息。\n\n- 顺序消费\n    消费消息的顺序要同发送消息的顺序一致(局部顺序)，一类消息为满足顺序性，必须Producer单线程顺序发送到同一个队列，\n    这样 Consumer 就可以按照 Producer 发送 的顺序去消费消息。\n\n- 普通顺序消息\n    顺序消息的一种，正常情况下可以保证完全的顺序消息，但是一旦发生通信异常，Broker 重启，由于队列 总数发生发化，哈希取模后定位的队列会发化，产生短暂的消息顺序不一致。\n\n- 严格顺序消息\n    顺序消息的一种，无论正常异常情况都能保证顺序，但是牺牲了分布式 Failover(故障转移) 特性，即 Broker 集群中只 要有一台机器不可用，则整个集群都不可用，服务可用性大大降低。 如果服务器部署为同步双写模式，此缺陷可通过备机自动切换为主避免，不过仍然会存在几分钟的服务不可用。\n    目前已知的应用只有数据库 binlog 同步强依赖严格顺序消息，其他应用绝大部分都可以容忍短暂乱序，推\n    荐使用普通的顺序消息。</code></pre>\n<h2 id=\"二、部署\"><a href=\"#二、部署\" class=\"headerlink\" title=\"二、部署\"></a>二、部署</h2><ul>\n<li>队列模型的消息中间件，高性能、高可用、高实时、分布式特点</li>\n<li>Producer、Consumer、队列都可以分布式</li>\n<li>能够保证严格的消息顺序</li>\n<li>提供消息推拉消息模式</li>\n<li>亿级消息堆积能力</li>\n<li>较少依赖</li>\n</ul>\n<h3 id=\"1-物理部署结构\"><a href=\"#1-物理部署结构\" class=\"headerlink\" title=\"1.物理部署结构\"></a>1.物理部署结构</h3><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-deploy.jpg\" alt=\"物理部署结构图\"/>\n\n<pre><code class=\"textmate\">1.NameServer \n    无状态节点，可集群部署，节点之间无通信\n2.Broker\n    分为Master和Slave,一个master可以对应多个slave，但是一个slave只能对应一个master; master和slave的对应关系通过指定相同的BrokerName不同的BrokerId来定义，BorkerId为0标识master,非0标识slave。master可以部署多个。\n    每个Broker和NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有的NameServer中\n3.Producer\n    Producer与NameServer集群中其中一个节点(随机选择)建立长连接，定期拉取Topic路由信息，并向提供Topic服务的Master建立长连接，并定时发送心跳。Producer完全无状态，可集群部署\n4.Consumer\n    Consumer与NameServer集群中的其中一个节点建立长连接，定期获取Topic路由，并向提供Topic服务的Master、Slave建立长连接，并定时发送心跳。Consumer订阅规则由Broker配置决定，既可以从Master订阅消息，也可以从Salve消息</code></pre>\n<h3 id=\"2-逻辑部署结构\"><a href=\"#2-逻辑部署结构\" class=\"headerlink\" title=\"2.逻辑部署结构\"></a>2.逻辑部署结构</h3><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/image-20220221170214844.png\" alt=\"逻辑部署结构图\"/>\n\n<h2 id=\"三、存储特点\"><a href=\"#三、存储特点\" class=\"headerlink\" title=\"三、存储特点\"></a>三、存储特点</h2><h3 id=\"1-零拷贝原理\"><a href=\"#1-零拷贝原理\" class=\"headerlink\" title=\"1.零拷贝原理\"></a>1.零拷贝原理</h3><blockquote>\n<p>Consumer消费消息过程中使用了零拷贝</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.linuxjournal.com/article/6345\">零拷贝相关链接</a></li>\n<li>零拷贝方式</li>\n</ul>\n<pre><code class=\"textmate\">1.mmap+write方式(mmap将一个文件或者其它对象映射进内存)\n    优点：使用小块文件传输，效率高，支持频繁调用\n    缺点：不能很好的利用DMA方式(Direct Memory Access，直接存储器访问),会比sendfile多消耗CPU,内存安全性控制复杂，需要避免JVM Crash文件\n\n2.使用sendfile方式\n    优点：可以利用DMA方式，消耗CPU较少，大块文件传输效率高，无内存安全问题\n    缺点：小块文件效率低于mmap方式，只能BIO方式传递，不能使用NIO。\nRocketMQ选择了mmap+write方式，因为现有小块数据传输需求，效果比sendfile更好</code></pre>\n<h3 id=\"2-文件系统\"><a href=\"#2-文件系统\" class=\"headerlink\" title=\"2.文件系统\"></a>2.文件系统</h3><pre><code class=\"textmate\">RocketMQ 选择 Linux Ext4 文件系统\n原因：\n    Ext4 文件系统删除 1G 大小的文件通常耗时小于50ms，而 Ext3 文件系统耗时约 1s 左右，且删除文件时，磁盘 IO 压力极大，会导致IO写入超时。\n  文件系统层面需要做以下调优措施\n    文件系统 IO 调度算法需要调整为 deadline，因为 deadline 算法在随机读情冴下，可以合并读请求为顺序跳跃方式，从而提高读 IO 吞吐量。</code></pre>\n<h3 id=\"3-数据存储结构-amp-存储目录结构\"><a href=\"#3-数据存储结构-amp-存储目录结构\" class=\"headerlink\" title=\"3.数据存储结构&amp;存储目录结构\"></a>3.数据存储结构&amp;存储目录结构</h3><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-data.jpg\" alt=\"数据存储结构\" width=\"600px\" height=\"400px\"/>\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-file.png\" alt=\"存储目录结构\" width=\"600px\" height=\"400px\" />\n\n<h2 id=\"四、关键特性\"><a href=\"#四、关键特性\" class=\"headerlink\" title=\"四、关键特性\"></a>四、关键特性</h2><h3 id=\"1-单机支持1万以上持久化队列\"><a href=\"#1-单机支持1万以上持久化队列\" class=\"headerlink\" title=\"1.单机支持1万以上持久化队列\"></a>1.单机支持1万以上持久化队列</h3><pre><code class=\"textmate\">|       8Byte     | 4Byte |        8Byte        |\n| CommitLogOffset | Size  | Message Tag Hashcode|\n\n1.所有数据单独存储到CommitLog文件中，完全顺序写，随机读\n2.对最终用户展现的队列实际只存储消息在CommitLog的位置信息，使用串行方式刷盘</code></pre>\n<h3 id=\"2-刷盘策略\"><a href=\"#2-刷盘策略\" class=\"headerlink\" title=\"2.刷盘策略\"></a>2.刷盘策略</h3><pre><code class=\"textmate\">先写入系统pageCache 然后刷盘，保证内存与磁盘都有一份数据，访问时从内存中读取\n\n- 同步刷盘\n    1. 写入 PAGECACHE 后，线程等待，通知刷盘线程刷盘。 \n    2. 刷盘线程刷盘后，唤醒前端等待线程，可能是一批线程。 \n    3. 前端等待线程吐用户迒回成功。\n- 异步刷盘\n\n同步刷盘与异步刷盘的唯一区别是异步刷盘写完 PAGECACHE 直接返回，而同步刷盘需要等待刷盘完成才返回</code></pre>\n<h3 id=\"3-消息查询\"><a href=\"#3-消息查询\" class=\"headerlink\" title=\"3.消息查询\"></a>3.消息查询</h3><pre><code class=\"textmate\">- 按照MessageId查询消息\n    | 8Byte | 8Byte |\n    |消息所属Broker地址|CommitLogOffset|\n- 按照MessageKey查询消息\n    |4Byte|8Byte|4Byte|4Byte|\n    |keyHash|CommitLogOffset|Timestamp|NextIndexOffset|</code></pre>\n<h2 id=\"五、消息过滤\"><a href=\"#五、消息过滤\" class=\"headerlink\" title=\"五、消息过滤\"></a>五、消息过滤</h2><h3 id=\"1-简单消息过滤\"><a href=\"#1-简单消息过滤\" class=\"headerlink\" title=\"1.简单消息过滤\"></a>1.简单消息过滤</h3><pre><code class=\"textmate\">通过topic和 tags进行过滤\nconsumer.subscribe(&quot;TopicTest1&quot;,&quot;TagA || TagB&quot;);</code></pre>\n<h3 id=\"2-高级过滤方式\"><a href=\"#2-高级过滤方式\" class=\"headerlink\" title=\"2.高级过滤方式\"></a>2.高级过滤方式</h3><pre><code class=\"textmate\">RocketMQ 提供了基于表达式与基于类模式两种过滤模式\n可以实现 MessageFilter 接口，实现自定义过滤</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、专业术语\"><a href=\"#一、专业术语\" class=\"headerlink\" title=\"一、专业术语\"></a>一、专业术语</h2><h3 id=\"1-角色名称\"><a href=\"#1-角色名称\" class=\"headerlink\" title=\"1. 角色名称\"></a>1. 角色名称</h3><pre><code class=\"textmate\">- Product\n    消息生产者\n\n- Consumer\n    消息消费者\n\n- Push Consumer\n    消息消费-推模式，应用通常向 Consumer 对象注册一个Listener接口，一旦收到消息，Consumer对象立刻回调Listener接口方法。\n\n- Pull Consumer\n    消息消费-拉模式，应用通常主动调用 Consumer 的拉消息方法从 Broker 拉消息，主动权由应用控制。\n\n- ProducerGroup\n    一类 Producer 的集合名称，这类 Producer 通常发送一类消息，且发送逻辑一致。\n\n- ConsumerGroup\n    一类 Consumer 的集合名称，这类 Consumer 通常消费一类消息，且消费逻辑一致。\n\n- Broker\n    消息中转角色，负责存储消息，转发消息，一般也称为 Server。在 JMS 规范中称为 Provider。\n\n- Message Queue\n    消息存储队列，长度无线(offset作为数据下标，long类型64位，理论上在 100 年内不会溢出，所以认为是长度无限)</code></pre>\n<h3 id=\"2-消费模式\"><a href=\"#2-消费模式\" class=\"headerlink\" title=\"2. 消费模式\"></a>2. 消费模式</h3><pre><code class=\"textmate\">- 广播消费\n    一条消息被多个 Consumer 消费，每个Consumer都会至少消费一次消息，广播消费中的 Consumer Group 概念可以认为在消息划分方面无意义。\n    在 CORBA Notification 规范中，消费方式都属于广播消费。在 JMS 规范中，相当于JMS publish/subscribe model\n\n- 集群消费\n    一个 Consumer Group 中的 Consumer 实例平均分摊消费消息。\n\n- 顺序消费\n    消费消息的顺序要同发送消息的顺序一致(局部顺序)，一类消息为满足顺序性，必须Producer单线程顺序发送到同一个队列，\n    这样 Consumer 就可以按照 Producer 发送 的顺序去消费消息。\n\n- 普通顺序消息\n    顺序消息的一种，正常情况下可以保证完全的顺序消息，但是一旦发生通信异常，Broker 重启，由于队列 总数发生发化，哈希取模后定位的队列会发化，产生短暂的消息顺序不一致。\n\n- 严格顺序消息\n    顺序消息的一种，无论正常异常情况都能保证顺序，但是牺牲了分布式 Failover(故障转移) 特性，即 Broker 集群中只 要有一台机器不可用，则整个集群都不可用，服务可用性大大降低。 如果服务器部署为同步双写模式，此缺陷可通过备机自动切换为主避免，不过仍然会存在几分钟的服务不可用。\n    目前已知的应用只有数据库 binlog 同步强依赖严格顺序消息，其他应用绝大部分都可以容忍短暂乱序，推\n    荐使用普通的顺序消息。</code></pre>\n<h2 id=\"二、部署\"><a href=\"#二、部署\" class=\"headerlink\" title=\"二、部署\"></a>二、部署</h2><ul>\n<li>队列模型的消息中间件，高性能、高可用、高实时、分布式特点</li>\n<li>Producer、Consumer、队列都可以分布式</li>\n<li>能够保证严格的消息顺序</li>\n<li>提供消息推拉消息模式</li>\n<li>亿级消息堆积能力</li>\n<li>较少依赖</li>\n</ul>\n<h3 id=\"1-物理部署结构\"><a href=\"#1-物理部署结构\" class=\"headerlink\" title=\"1.物理部署结构\"></a>1.物理部署结构</h3><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-deploy.jpg\" alt=\"物理部署结构图\"/>\n\n<pre><code class=\"textmate\">1.NameServer \n    无状态节点，可集群部署，节点之间无通信\n2.Broker\n    分为Master和Slave,一个master可以对应多个slave，但是一个slave只能对应一个master; master和slave的对应关系通过指定相同的BrokerName不同的BrokerId来定义，BorkerId为0标识master,非0标识slave。master可以部署多个。\n    每个Broker和NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有的NameServer中\n3.Producer\n    Producer与NameServer集群中其中一个节点(随机选择)建立长连接，定期拉取Topic路由信息，并向提供Topic服务的Master建立长连接，并定时发送心跳。Producer完全无状态，可集群部署\n4.Consumer\n    Consumer与NameServer集群中的其中一个节点建立长连接，定期获取Topic路由，并向提供Topic服务的Master、Slave建立长连接，并定时发送心跳。Consumer订阅规则由Broker配置决定，既可以从Master订阅消息，也可以从Salve消息</code></pre>\n<h3 id=\"2-逻辑部署结构\"><a href=\"#2-逻辑部署结构\" class=\"headerlink\" title=\"2.逻辑部署结构\"></a>2.逻辑部署结构</h3><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/image-20220221170214844.png\" alt=\"逻辑部署结构图\"/>\n\n<h2 id=\"三、存储特点\"><a href=\"#三、存储特点\" class=\"headerlink\" title=\"三、存储特点\"></a>三、存储特点</h2><h3 id=\"1-零拷贝原理\"><a href=\"#1-零拷贝原理\" class=\"headerlink\" title=\"1.零拷贝原理\"></a>1.零拷贝原理</h3><blockquote>\n<p>Consumer消费消息过程中使用了零拷贝</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.linuxjournal.com/article/6345\">零拷贝相关链接</a></li>\n<li>零拷贝方式</li>\n</ul>\n<pre><code class=\"textmate\">1.mmap+write方式(mmap将一个文件或者其它对象映射进内存)\n    优点：使用小块文件传输，效率高，支持频繁调用\n    缺点：不能很好的利用DMA方式(Direct Memory Access，直接存储器访问),会比sendfile多消耗CPU,内存安全性控制复杂，需要避免JVM Crash文件\n\n2.使用sendfile方式\n    优点：可以利用DMA方式，消耗CPU较少，大块文件传输效率高，无内存安全问题\n    缺点：小块文件效率低于mmap方式，只能BIO方式传递，不能使用NIO。\nRocketMQ选择了mmap+write方式，因为现有小块数据传输需求，效果比sendfile更好</code></pre>\n<h3 id=\"2-文件系统\"><a href=\"#2-文件系统\" class=\"headerlink\" title=\"2.文件系统\"></a>2.文件系统</h3><pre><code class=\"textmate\">RocketMQ 选择 Linux Ext4 文件系统\n原因：\n    Ext4 文件系统删除 1G 大小的文件通常耗时小于50ms，而 Ext3 文件系统耗时约 1s 左右，且删除文件时，磁盘 IO 压力极大，会导致IO写入超时。\n  文件系统层面需要做以下调优措施\n    文件系统 IO 调度算法需要调整为 deadline，因为 deadline 算法在随机读情冴下，可以合并读请求为顺序跳跃方式，从而提高读 IO 吞吐量。</code></pre>\n<h3 id=\"3-数据存储结构-amp-存储目录结构\"><a href=\"#3-数据存储结构-amp-存储目录结构\" class=\"headerlink\" title=\"3.数据存储结构&amp;存储目录结构\"></a>3.数据存储结构&amp;存储目录结构</h3><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-data.jpg\" alt=\"数据存储结构\" width=\"600px\" height=\"400px\"/>\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/rocketmq-file.png\" alt=\"存储目录结构\" width=\"600px\" height=\"400px\" />\n\n<h2 id=\"四、关键特性\"><a href=\"#四、关键特性\" class=\"headerlink\" title=\"四、关键特性\"></a>四、关键特性</h2><h3 id=\"1-单机支持1万以上持久化队列\"><a href=\"#1-单机支持1万以上持久化队列\" class=\"headerlink\" title=\"1.单机支持1万以上持久化队列\"></a>1.单机支持1万以上持久化队列</h3><pre><code class=\"textmate\">|       8Byte     | 4Byte |        8Byte        |\n| CommitLogOffset | Size  | Message Tag Hashcode|\n\n1.所有数据单独存储到CommitLog文件中，完全顺序写，随机读\n2.对最终用户展现的队列实际只存储消息在CommitLog的位置信息，使用串行方式刷盘</code></pre>\n<h3 id=\"2-刷盘策略\"><a href=\"#2-刷盘策略\" class=\"headerlink\" title=\"2.刷盘策略\"></a>2.刷盘策略</h3><pre><code class=\"textmate\">先写入系统pageCache 然后刷盘，保证内存与磁盘都有一份数据，访问时从内存中读取\n\n- 同步刷盘\n    1. 写入 PAGECACHE 后，线程等待，通知刷盘线程刷盘。 \n    2. 刷盘线程刷盘后，唤醒前端等待线程，可能是一批线程。 \n    3. 前端等待线程吐用户迒回成功。\n- 异步刷盘\n\n同步刷盘与异步刷盘的唯一区别是异步刷盘写完 PAGECACHE 直接返回，而同步刷盘需要等待刷盘完成才返回</code></pre>\n<h3 id=\"3-消息查询\"><a href=\"#3-消息查询\" class=\"headerlink\" title=\"3.消息查询\"></a>3.消息查询</h3><pre><code class=\"textmate\">- 按照MessageId查询消息\n    | 8Byte | 8Byte |\n    |消息所属Broker地址|CommitLogOffset|\n- 按照MessageKey查询消息\n    |4Byte|8Byte|4Byte|4Byte|\n    |keyHash|CommitLogOffset|Timestamp|NextIndexOffset|</code></pre>\n<h2 id=\"五、消息过滤\"><a href=\"#五、消息过滤\" class=\"headerlink\" title=\"五、消息过滤\"></a>五、消息过滤</h2><h3 id=\"1-简单消息过滤\"><a href=\"#1-简单消息过滤\" class=\"headerlink\" title=\"1.简单消息过滤\"></a>1.简单消息过滤</h3><pre><code class=\"textmate\">通过topic和 tags进行过滤\nconsumer.subscribe(&quot;TopicTest1&quot;,&quot;TagA || TagB&quot;);</code></pre>\n<h3 id=\"2-高级过滤方式\"><a href=\"#2-高级过滤方式\" class=\"headerlink\" title=\"2.高级过滤方式\"></a>2.高级过滤方式</h3><pre><code class=\"textmate\">RocketMQ 提供了基于表达式与基于类模式两种过滤模式\n可以实现 MessageFilter 接口，实现自定义过滤</code></pre>\n"},{"title":"SpringClougGateway","date":"2021-06-15T06:16:00.000Z","_content":"\n### 文章收集\n- [SpringCloudGateway-2.1.0.RC3](https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RC3/multi/multi_spring-cloud-gateway.html)\n- [SpringCloudGateway官网](https://spring.io/projects/spring-cloud-gateway)\n- [SpringCloudGateway(读取、修改RequestBody)(转)](https://www.haoyizebo.com/posts/876ed1e8/)\n\n### 配置\n```yaml\nspring:\n  application:\n    name: cloud-gateway\n  cloud:\n    httpclient:\n      connect-timeout: 20000\n      pool:\n        max-idle-time: 20000\n    #开启从注册中心动态创建路由的功能，利用微服务名进行路由\n#    discovery:\n#      locator:\n#        lower-case-service-id: true\n#        enabled: true\n\n    # 相关文档 https://www.cnblogs.com/crazymakercircle/p/11704077.html\n    # uri相同时，只有最后一个会生效\n    #一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发；\n    #predicates断言，可根据datetime、Cookie、Header、Host、Method、Path、Queryparam、RemoteAddr匹配\n    #filter: 支持PrefixPath、RewritePath、SetPath、RedirectTo、RemoveRequestHeader、\n    #RemoveResponseHeader、SetStatus、StripPrefix、RequestSize、Default-filters\n    gateway:\n      routes:\n      #根据url拦截\n      - id: service1_v1\n        uri: https://www.so.com/?quanso.com.cn\n        predicates:\n          - Path=/360\n#      - id: service1_v2\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/v2\n\n      #拦截v1请求，并带上/api，转发到8080端口上\n#      - id: service1_v3\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/v1\n#        filters:\n#          - PrefixPath=/api\n\n      #predicates断言，可根据datetime/Cookie/Header/Host/Method/Path/Queryparam/RemoteAddr匹配\n      - id: queryParam-baidu-route\n        uri: https://www.baidu.com\n        predicates:\n          - Query=baidu\n      - id: queryParam-bing-route\n        uri: https://bing.com/\n        predicates:\n          - Query=bing, tr. #参数中包含bing,且值为tr开头的三位参数 才能匹配到\n\n#      - id: queryParam-release2-route\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/api\n#          - Weight=service2, 90\n\n#      - id: queryParam-head-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Header=Jump, 1001 #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n#      - id: queryParam-host-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Host=*.apix #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n      #测试StripPrefix\n#      - id: full-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Query=full\n#        filters:\n#          - PrefixPath=/full\n#          - StripPrefix=0\n\n      # 熔断降级\n#      - id: queryParam-fallback-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/test\n#        filters:\n#          - name: Hystrix\n#            args:\n#              name: default\n#              fallbackUri: forward:/fallback\n#      - id: fallback-route\n#        uri: http://localhost:8080/fallback\n#        predicates:\n#          - Path=/fallback\n\n        # 金丝雀发布\n      - id: release1-route\n        uri: http://localhost:8080\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n      - id: release2-route\n        uri: http://localhost:8081\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n\n\n#hystrix.command.fallbackA.execution.isolation.thread.timeoutInMilliseconds: 5000\n# hystrix 信号量隔离，1.5秒后自动超时\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          strategy: SEMAPHORE\n          thread:\n            timeoutInMilliseconds: 1500\n\n```\n\n### 获取及改写RequestBody示例\n```java\nclass DemoFilter implements GlobalFilter, Ordered{\n    @Resource\n    private ServerCodecConfigurer configurer;\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerRequest serverRequest = ServerRequest.create(exchange, configurer.getReaders());\n\n        // read & modify body\n        Mono<String> modifiedBody = serverRequest.bodyToMono(String.class)\n                .flatMap(body -> {\n                    //例子：验签\n                    boolean checkFlag = paramSignCheck(jsonParam);\n                    if(!checkFlag){\n                        return Mono.error(new Exception(\"验签失败\"));\n                    }\n                    return Mono.just(body);\n                });\n\n        BodyInserter bodyInserter = BodyInserters.fromPublisher(modifiedBody,String.class);\n        HttpHeaders headers = new HttpHeaders();\n        headers.putAll(exchange.getRequest().getHeaders());\n        //重要 不处理会导致请求失败\n        headers.remove(HttpHeaders.CONTENT_LENGTH);\n        CachedBodyOutputMessage outputMessage = new CachedBodyOutputMessage(exchange, headers);\n\n        return bodyInserter.insert(outputMessage, new BodyInserterContext())\n                .then(Mono.defer(() -> {\n                    ServerHttpRequestDecorator decorator = new ServerHttpRequestDecorator(\n                            exchange.getRequest()) {\n                        @Override\n                        public HttpHeaders getHeaders() {\n                            long contentLength = headers.getContentLength();\n                            HttpHeaders httpHeaders = new HttpHeaders();\n                            httpHeaders.putAll(super.getHeaders());\n                            if (contentLength > 0) {\n                                httpHeaders.setContentLength(contentLength);\n                            }\n                            return httpHeaders;\n                        }\n\n                        @Override\n                        public Flux<DataBuffer> getBody() {\n                            return outputMessage.getBody();\n                        }\n                    };\n                    ServerHttpResponse decoratedResponse = decorate(exchange, trace);\n                    return chain.filter(exchange.mutate().request(decorator).response(decoratedResponse).build());\n                }));\n    }\n}\n```\n\n### 新增headers\n```java\n@Configuration\npublic class AuthGatewayFilter implements GlobalFilter, Ordered {\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        Consumer<HttpHeaders> httpHeaders = httpHeader -> {\n            // 存在相同的key,直接添加会报错\n            if(StringUtils.isBlank(httpHeader.getFirst(\"xxx\"))){\n                httpHeader.add(\"xxx\", \"xxx\");\n            }\n        };\n        ServerHttpRequest serverHttpRequest = exchange.getRequest().mutate().headers(httpHeaders).build();\n        exchange = exchange.mutate().request(serverHttpRequest).build();\n\n        return chain.filter(exchange);\n    }\n    @Override\n    public int getOrder() {\n        return Ordered.HIGHEST_PRECEDENCE - 1;\n    }\n}\n```\n\n### 请求非json格式转jsondemo\n```java\nclass Demo{\n\n    /** application/x-www-form-urlencoded 转json **/\n    private Map<String, Object> decodeBody(String body) {\n        return Arrays.stream(body.split(\"&\"))\n                .map(s -> s.split(\"=\"))\n                .collect(Collectors.toMap(arr -> arr[0], arr -> arr[1]));\n    }\n\n    /** fomrData(非文件)转 json 数据 **/\n    private String parseFormData2Json(String requestParam){\n        if(StringUtils.isBlank(requestParam) \n                && !requestParam.contains(\"filename\")){\n            return requestParam;\n        }\n        try{\n            requestParam = requestParam.replace(\"-\",\"\").split(\"-\")[0];\n            String code = requestParam.split(\"\\n\")[0];\n            requestParam = requestParam.replaceAll(code,\"\")\n                    .replaceAll(\"ContentDisposition: formdata;\",\"\")\n                    .replaceAll(\"\\n\",\"\")\n                    .replaceAll(\"name=\",\",\")\n                    .replaceAll(\"\\\"\\r\\r\",\"\\\":\\\"\")\n                    .replaceFirst(\",\",\"\")\n                    .replaceAll(\"\\r\",\"\\\"\")\n            ;\n            requestParam = \"{\" + requestParam + \"\\\"}\";\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        return requestParam;\n    }\n}\n\n```\n","source":"_posts/backend/spring/springcloud-gateway.md","raw":"---\ntitle: SpringClougGateway\ndate: 2021-06-15 14:16:00\ntags:\n- gateway\ncategories:\n- 后端\n- 框架\n---\n\n### 文章收集\n- [SpringCloudGateway-2.1.0.RC3](https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RC3/multi/multi_spring-cloud-gateway.html)\n- [SpringCloudGateway官网](https://spring.io/projects/spring-cloud-gateway)\n- [SpringCloudGateway(读取、修改RequestBody)(转)](https://www.haoyizebo.com/posts/876ed1e8/)\n\n### 配置\n```yaml\nspring:\n  application:\n    name: cloud-gateway\n  cloud:\n    httpclient:\n      connect-timeout: 20000\n      pool:\n        max-idle-time: 20000\n    #开启从注册中心动态创建路由的功能，利用微服务名进行路由\n#    discovery:\n#      locator:\n#        lower-case-service-id: true\n#        enabled: true\n\n    # 相关文档 https://www.cnblogs.com/crazymakercircle/p/11704077.html\n    # uri相同时，只有最后一个会生效\n    #一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发；\n    #predicates断言，可根据datetime、Cookie、Header、Host、Method、Path、Queryparam、RemoteAddr匹配\n    #filter: 支持PrefixPath、RewritePath、SetPath、RedirectTo、RemoveRequestHeader、\n    #RemoveResponseHeader、SetStatus、StripPrefix、RequestSize、Default-filters\n    gateway:\n      routes:\n      #根据url拦截\n      - id: service1_v1\n        uri: https://www.so.com/?quanso.com.cn\n        predicates:\n          - Path=/360\n#      - id: service1_v2\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/v2\n\n      #拦截v1请求，并带上/api，转发到8080端口上\n#      - id: service1_v3\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/v1\n#        filters:\n#          - PrefixPath=/api\n\n      #predicates断言，可根据datetime/Cookie/Header/Host/Method/Path/Queryparam/RemoteAddr匹配\n      - id: queryParam-baidu-route\n        uri: https://www.baidu.com\n        predicates:\n          - Query=baidu\n      - id: queryParam-bing-route\n        uri: https://bing.com/\n        predicates:\n          - Query=bing, tr. #参数中包含bing,且值为tr开头的三位参数 才能匹配到\n\n#      - id: queryParam-release2-route\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/api\n#          - Weight=service2, 90\n\n#      - id: queryParam-head-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Header=Jump, 1001 #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n#      - id: queryParam-host-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Host=*.apix #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n      #测试StripPrefix\n#      - id: full-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Query=full\n#        filters:\n#          - PrefixPath=/full\n#          - StripPrefix=0\n\n      # 熔断降级\n#      - id: queryParam-fallback-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/test\n#        filters:\n#          - name: Hystrix\n#            args:\n#              name: default\n#              fallbackUri: forward:/fallback\n#      - id: fallback-route\n#        uri: http://localhost:8080/fallback\n#        predicates:\n#          - Path=/fallback\n\n        # 金丝雀发布\n      - id: release1-route\n        uri: http://localhost:8080\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n      - id: release2-route\n        uri: http://localhost:8081\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n\n\n#hystrix.command.fallbackA.execution.isolation.thread.timeoutInMilliseconds: 5000\n# hystrix 信号量隔离，1.5秒后自动超时\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          strategy: SEMAPHORE\n          thread:\n            timeoutInMilliseconds: 1500\n\n```\n\n### 获取及改写RequestBody示例\n```java\nclass DemoFilter implements GlobalFilter, Ordered{\n    @Resource\n    private ServerCodecConfigurer configurer;\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerRequest serverRequest = ServerRequest.create(exchange, configurer.getReaders());\n\n        // read & modify body\n        Mono<String> modifiedBody = serverRequest.bodyToMono(String.class)\n                .flatMap(body -> {\n                    //例子：验签\n                    boolean checkFlag = paramSignCheck(jsonParam);\n                    if(!checkFlag){\n                        return Mono.error(new Exception(\"验签失败\"));\n                    }\n                    return Mono.just(body);\n                });\n\n        BodyInserter bodyInserter = BodyInserters.fromPublisher(modifiedBody,String.class);\n        HttpHeaders headers = new HttpHeaders();\n        headers.putAll(exchange.getRequest().getHeaders());\n        //重要 不处理会导致请求失败\n        headers.remove(HttpHeaders.CONTENT_LENGTH);\n        CachedBodyOutputMessage outputMessage = new CachedBodyOutputMessage(exchange, headers);\n\n        return bodyInserter.insert(outputMessage, new BodyInserterContext())\n                .then(Mono.defer(() -> {\n                    ServerHttpRequestDecorator decorator = new ServerHttpRequestDecorator(\n                            exchange.getRequest()) {\n                        @Override\n                        public HttpHeaders getHeaders() {\n                            long contentLength = headers.getContentLength();\n                            HttpHeaders httpHeaders = new HttpHeaders();\n                            httpHeaders.putAll(super.getHeaders());\n                            if (contentLength > 0) {\n                                httpHeaders.setContentLength(contentLength);\n                            }\n                            return httpHeaders;\n                        }\n\n                        @Override\n                        public Flux<DataBuffer> getBody() {\n                            return outputMessage.getBody();\n                        }\n                    };\n                    ServerHttpResponse decoratedResponse = decorate(exchange, trace);\n                    return chain.filter(exchange.mutate().request(decorator).response(decoratedResponse).build());\n                }));\n    }\n}\n```\n\n### 新增headers\n```java\n@Configuration\npublic class AuthGatewayFilter implements GlobalFilter, Ordered {\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        Consumer<HttpHeaders> httpHeaders = httpHeader -> {\n            // 存在相同的key,直接添加会报错\n            if(StringUtils.isBlank(httpHeader.getFirst(\"xxx\"))){\n                httpHeader.add(\"xxx\", \"xxx\");\n            }\n        };\n        ServerHttpRequest serverHttpRequest = exchange.getRequest().mutate().headers(httpHeaders).build();\n        exchange = exchange.mutate().request(serverHttpRequest).build();\n\n        return chain.filter(exchange);\n    }\n    @Override\n    public int getOrder() {\n        return Ordered.HIGHEST_PRECEDENCE - 1;\n    }\n}\n```\n\n### 请求非json格式转jsondemo\n```java\nclass Demo{\n\n    /** application/x-www-form-urlencoded 转json **/\n    private Map<String, Object> decodeBody(String body) {\n        return Arrays.stream(body.split(\"&\"))\n                .map(s -> s.split(\"=\"))\n                .collect(Collectors.toMap(arr -> arr[0], arr -> arr[1]));\n    }\n\n    /** fomrData(非文件)转 json 数据 **/\n    private String parseFormData2Json(String requestParam){\n        if(StringUtils.isBlank(requestParam) \n                && !requestParam.contains(\"filename\")){\n            return requestParam;\n        }\n        try{\n            requestParam = requestParam.replace(\"-\",\"\").split(\"-\")[0];\n            String code = requestParam.split(\"\\n\")[0];\n            requestParam = requestParam.replaceAll(code,\"\")\n                    .replaceAll(\"ContentDisposition: formdata;\",\"\")\n                    .replaceAll(\"\\n\",\"\")\n                    .replaceAll(\"name=\",\",\")\n                    .replaceAll(\"\\\"\\r\\r\",\"\\\":\\\"\")\n                    .replaceFirst(\",\",\"\")\n                    .replaceAll(\"\\r\",\"\\\"\")\n            ;\n            requestParam = \"{\" + requestParam + \"\\\"}\";\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        return requestParam;\n    }\n}\n\n```\n","slug":"backend/spring/springcloud-gateway","published":1,"updated":"2021-08-19T01:36:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxz0029jrnv8j5ha5k5","content":"<h3 id=\"文章收集\"><a href=\"#文章收集\" class=\"headerlink\" title=\"文章收集\"></a>文章收集</h3><ul>\n<li><a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RC3/multi/multi_spring-cloud-gateway.html\">SpringCloudGateway-2.1.0.RC3</a></li>\n<li><a href=\"https://spring.io/projects/spring-cloud-gateway\">SpringCloudGateway官网</a></li>\n<li><a href=\"https://www.haoyizebo.com/posts/876ed1e8/\">SpringCloudGateway(读取、修改RequestBody)(转)</a></li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><pre><code class=\"yaml\">spring:\n  application:\n    name: cloud-gateway\n  cloud:\n    httpclient:\n      connect-timeout: 20000\n      pool:\n        max-idle-time: 20000\n    #开启从注册中心动态创建路由的功能，利用微服务名进行路由\n#    discovery:\n#      locator:\n#        lower-case-service-id: true\n#        enabled: true\n\n    # 相关文档 https://www.cnblogs.com/crazymakercircle/p/11704077.html\n    # uri相同时，只有最后一个会生效\n    #一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发；\n    #predicates断言，可根据datetime、Cookie、Header、Host、Method、Path、Queryparam、RemoteAddr匹配\n    #filter: 支持PrefixPath、RewritePath、SetPath、RedirectTo、RemoveRequestHeader、\n    #RemoveResponseHeader、SetStatus、StripPrefix、RequestSize、Default-filters\n    gateway:\n      routes:\n      #根据url拦截\n      - id: service1_v1\n        uri: https://www.so.com/?quanso.com.cn\n        predicates:\n          - Path=/360\n#      - id: service1_v2\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/v2\n\n      #拦截v1请求，并带上/api，转发到8080端口上\n#      - id: service1_v3\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/v1\n#        filters:\n#          - PrefixPath=/api\n\n      #predicates断言，可根据datetime/Cookie/Header/Host/Method/Path/Queryparam/RemoteAddr匹配\n      - id: queryParam-baidu-route\n        uri: https://www.baidu.com\n        predicates:\n          - Query=baidu\n      - id: queryParam-bing-route\n        uri: https://bing.com/\n        predicates:\n          - Query=bing, tr. #参数中包含bing,且值为tr开头的三位参数 才能匹配到\n\n#      - id: queryParam-release2-route\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/api\n#          - Weight=service2, 90\n\n#      - id: queryParam-head-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Header=Jump, 1001 #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n#      - id: queryParam-host-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Host=*.apix #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n      #测试StripPrefix\n#      - id: full-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Query=full\n#        filters:\n#          - PrefixPath=/full\n#          - StripPrefix=0\n\n      # 熔断降级\n#      - id: queryParam-fallback-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/test\n#        filters:\n#          - name: Hystrix\n#            args:\n#              name: default\n#              fallbackUri: forward:/fallback\n#      - id: fallback-route\n#        uri: http://localhost:8080/fallback\n#        predicates:\n#          - Path=/fallback\n\n        # 金丝雀发布\n      - id: release1-route\n        uri: http://localhost:8080\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n      - id: release2-route\n        uri: http://localhost:8081\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n\n\n#hystrix.command.fallbackA.execution.isolation.thread.timeoutInMilliseconds: 5000\n# hystrix 信号量隔离，1.5秒后自动超时\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          strategy: SEMAPHORE\n          thread:\n            timeoutInMilliseconds: 1500\n</code></pre>\n<h3 id=\"获取及改写RequestBody示例\"><a href=\"#获取及改写RequestBody示例\" class=\"headerlink\" title=\"获取及改写RequestBody示例\"></a>获取及改写RequestBody示例</h3><pre><code class=\"java\">class DemoFilter implements GlobalFilter, Ordered&#123;\n    @Resource\n    private ServerCodecConfigurer configurer;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;\n        ServerRequest serverRequest = ServerRequest.create(exchange, configurer.getReaders());\n\n        // read &amp; modify body\n        Mono&lt;String&gt; modifiedBody = serverRequest.bodyToMono(String.class)\n                .flatMap(body -&gt; &#123;\n                    //例子：验签\n                    boolean checkFlag = paramSignCheck(jsonParam);\n                    if(!checkFlag)&#123;\n                        return Mono.error(new Exception(&quot;验签失败&quot;));\n                    &#125;\n                    return Mono.just(body);\n                &#125;);\n\n        BodyInserter bodyInserter = BodyInserters.fromPublisher(modifiedBody,String.class);\n        HttpHeaders headers = new HttpHeaders();\n        headers.putAll(exchange.getRequest().getHeaders());\n        //重要 不处理会导致请求失败\n        headers.remove(HttpHeaders.CONTENT_LENGTH);\n        CachedBodyOutputMessage outputMessage = new CachedBodyOutputMessage(exchange, headers);\n\n        return bodyInserter.insert(outputMessage, new BodyInserterContext())\n                .then(Mono.defer(() -&gt; &#123;\n                    ServerHttpRequestDecorator decorator = new ServerHttpRequestDecorator(\n                            exchange.getRequest()) &#123;\n                        @Override\n                        public HttpHeaders getHeaders() &#123;\n                            long contentLength = headers.getContentLength();\n                            HttpHeaders httpHeaders = new HttpHeaders();\n                            httpHeaders.putAll(super.getHeaders());\n                            if (contentLength &gt; 0) &#123;\n                                httpHeaders.setContentLength(contentLength);\n                            &#125;\n                            return httpHeaders;\n                        &#125;\n\n                        @Override\n                        public Flux&lt;DataBuffer&gt; getBody() &#123;\n                            return outputMessage.getBody();\n                        &#125;\n                    &#125;;\n                    ServerHttpResponse decoratedResponse = decorate(exchange, trace);\n                    return chain.filter(exchange.mutate().request(decorator).response(decoratedResponse).build());\n                &#125;));\n    &#125;\n&#125;</code></pre>\n<h3 id=\"新增headers\"><a href=\"#新增headers\" class=\"headerlink\" title=\"新增headers\"></a>新增headers</h3><pre><code class=\"java\">@Configuration\npublic class AuthGatewayFilter implements GlobalFilter, Ordered &#123;\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;\n        Consumer&lt;HttpHeaders&gt; httpHeaders = httpHeader -&gt; &#123;\n            // 存在相同的key,直接添加会报错\n            if(StringUtils.isBlank(httpHeader.getFirst(&quot;xxx&quot;)))&#123;\n                httpHeader.add(&quot;xxx&quot;, &quot;xxx&quot;);\n            &#125;\n        &#125;;\n        ServerHttpRequest serverHttpRequest = exchange.getRequest().mutate().headers(httpHeaders).build();\n        exchange = exchange.mutate().request(serverHttpRequest).build();\n\n        return chain.filter(exchange);\n    &#125;\n    @Override\n    public int getOrder() &#123;\n        return Ordered.HIGHEST_PRECEDENCE - 1;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"请求非json格式转jsondemo\"><a href=\"#请求非json格式转jsondemo\" class=\"headerlink\" title=\"请求非json格式转jsondemo\"></a>请求非json格式转jsondemo</h3><pre><code class=\"java\">class Demo&#123;\n\n    /** application/x-www-form-urlencoded 转json **/\n    private Map&lt;String, Object&gt; decodeBody(String body) &#123;\n        return Arrays.stream(body.split(&quot;&amp;&quot;))\n                .map(s -&gt; s.split(&quot;=&quot;))\n                .collect(Collectors.toMap(arr -&gt; arr[0], arr -&gt; arr[1]));\n    &#125;\n\n    /** fomrData(非文件)转 json 数据 **/\n    private String parseFormData2Json(String requestParam)&#123;\n        if(StringUtils.isBlank(requestParam) \n                &amp;&amp; !requestParam.contains(&quot;filename&quot;))&#123;\n            return requestParam;\n        &#125;\n        try&#123;\n            requestParam = requestParam.replace(&quot;-&quot;,&quot;&quot;).split(&quot;-&quot;)[0];\n            String code = requestParam.split(&quot;\\n&quot;)[0];\n            requestParam = requestParam.replaceAll(code,&quot;&quot;)\n                    .replaceAll(&quot;ContentDisposition: formdata;&quot;,&quot;&quot;)\n                    .replaceAll(&quot;\\n&quot;,&quot;&quot;)\n                    .replaceAll(&quot;name=&quot;,&quot;,&quot;)\n                    .replaceAll(&quot;\\&quot;\\r\\r&quot;,&quot;\\&quot;:\\&quot;&quot;)\n                    .replaceFirst(&quot;,&quot;,&quot;&quot;)\n                    .replaceAll(&quot;\\r&quot;,&quot;\\&quot;&quot;)\n            ;\n            requestParam = &quot;&#123;&quot; + requestParam + &quot;\\&quot;&#125;&quot;;\n        &#125; catch (Exception e)&#123;\n            e.printStackTrace();\n        &#125;\n        return requestParam;\n    &#125;\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"文章收集\"><a href=\"#文章收集\" class=\"headerlink\" title=\"文章收集\"></a>文章收集</h3><ul>\n<li><a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RC3/multi/multi_spring-cloud-gateway.html\">SpringCloudGateway-2.1.0.RC3</a></li>\n<li><a href=\"https://spring.io/projects/spring-cloud-gateway\">SpringCloudGateway官网</a></li>\n<li><a href=\"https://www.haoyizebo.com/posts/876ed1e8/\">SpringCloudGateway(读取、修改RequestBody)(转)</a></li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><pre><code class=\"yaml\">spring:\n  application:\n    name: cloud-gateway\n  cloud:\n    httpclient:\n      connect-timeout: 20000\n      pool:\n        max-idle-time: 20000\n    #开启从注册中心动态创建路由的功能，利用微服务名进行路由\n#    discovery:\n#      locator:\n#        lower-case-service-id: true\n#        enabled: true\n\n    # 相关文档 https://www.cnblogs.com/crazymakercircle/p/11704077.html\n    # uri相同时，只有最后一个会生效\n    #一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发；\n    #predicates断言，可根据datetime、Cookie、Header、Host、Method、Path、Queryparam、RemoteAddr匹配\n    #filter: 支持PrefixPath、RewritePath、SetPath、RedirectTo、RemoveRequestHeader、\n    #RemoveResponseHeader、SetStatus、StripPrefix、RequestSize、Default-filters\n    gateway:\n      routes:\n      #根据url拦截\n      - id: service1_v1\n        uri: https://www.so.com/?quanso.com.cn\n        predicates:\n          - Path=/360\n#      - id: service1_v2\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/v2\n\n      #拦截v1请求，并带上/api，转发到8080端口上\n#      - id: service1_v3\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/v1\n#        filters:\n#          - PrefixPath=/api\n\n      #predicates断言，可根据datetime/Cookie/Header/Host/Method/Path/Queryparam/RemoteAddr匹配\n      - id: queryParam-baidu-route\n        uri: https://www.baidu.com\n        predicates:\n          - Query=baidu\n      - id: queryParam-bing-route\n        uri: https://bing.com/\n        predicates:\n          - Query=bing, tr. #参数中包含bing,且值为tr开头的三位参数 才能匹配到\n\n#      - id: queryParam-release2-route\n#        uri: http://localhost:8080/api/v2\n#        predicates:\n#          - Path=/api\n#          - Weight=service2, 90\n\n#      - id: queryParam-head-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Header=Jump, 1001 #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n#      - id: queryParam-host-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Host=*.apix #请求头中包含信息才校验通过\n#        filters:\n#          - PrefixPath=/api\n\n      #测试StripPrefix\n#      - id: full-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Query=full\n#        filters:\n#          - PrefixPath=/full\n#          - StripPrefix=0\n\n      # 熔断降级\n#      - id: queryParam-fallback-route\n#        uri: http://localhost:8080\n#        predicates:\n#          - Path=/test\n#        filters:\n#          - name: Hystrix\n#            args:\n#              name: default\n#              fallbackUri: forward:/fallback\n#      - id: fallback-route\n#        uri: http://localhost:8080/fallback\n#        predicates:\n#          - Path=/fallback\n\n        # 金丝雀发布\n      - id: release1-route\n        uri: http://localhost:8080\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n      - id: release2-route\n        uri: http://localhost:8081\n        predicates:\n          - Path=/v1\n          - Weight=service1, 50\n        filters:\n          - PrefixPath=/api\n\n\n#hystrix.command.fallbackA.execution.isolation.thread.timeoutInMilliseconds: 5000\n# hystrix 信号量隔离，1.5秒后自动超时\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          strategy: SEMAPHORE\n          thread:\n            timeoutInMilliseconds: 1500\n</code></pre>\n<h3 id=\"获取及改写RequestBody示例\"><a href=\"#获取及改写RequestBody示例\" class=\"headerlink\" title=\"获取及改写RequestBody示例\"></a>获取及改写RequestBody示例</h3><pre><code class=\"java\">class DemoFilter implements GlobalFilter, Ordered&#123;\n    @Resource\n    private ServerCodecConfigurer configurer;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;\n        ServerRequest serverRequest = ServerRequest.create(exchange, configurer.getReaders());\n\n        // read &amp; modify body\n        Mono&lt;String&gt; modifiedBody = serverRequest.bodyToMono(String.class)\n                .flatMap(body -&gt; &#123;\n                    //例子：验签\n                    boolean checkFlag = paramSignCheck(jsonParam);\n                    if(!checkFlag)&#123;\n                        return Mono.error(new Exception(&quot;验签失败&quot;));\n                    &#125;\n                    return Mono.just(body);\n                &#125;);\n\n        BodyInserter bodyInserter = BodyInserters.fromPublisher(modifiedBody,String.class);\n        HttpHeaders headers = new HttpHeaders();\n        headers.putAll(exchange.getRequest().getHeaders());\n        //重要 不处理会导致请求失败\n        headers.remove(HttpHeaders.CONTENT_LENGTH);\n        CachedBodyOutputMessage outputMessage = new CachedBodyOutputMessage(exchange, headers);\n\n        return bodyInserter.insert(outputMessage, new BodyInserterContext())\n                .then(Mono.defer(() -&gt; &#123;\n                    ServerHttpRequestDecorator decorator = new ServerHttpRequestDecorator(\n                            exchange.getRequest()) &#123;\n                        @Override\n                        public HttpHeaders getHeaders() &#123;\n                            long contentLength = headers.getContentLength();\n                            HttpHeaders httpHeaders = new HttpHeaders();\n                            httpHeaders.putAll(super.getHeaders());\n                            if (contentLength &gt; 0) &#123;\n                                httpHeaders.setContentLength(contentLength);\n                            &#125;\n                            return httpHeaders;\n                        &#125;\n\n                        @Override\n                        public Flux&lt;DataBuffer&gt; getBody() &#123;\n                            return outputMessage.getBody();\n                        &#125;\n                    &#125;;\n                    ServerHttpResponse decoratedResponse = decorate(exchange, trace);\n                    return chain.filter(exchange.mutate().request(decorator).response(decoratedResponse).build());\n                &#125;));\n    &#125;\n&#125;</code></pre>\n<h3 id=\"新增headers\"><a href=\"#新增headers\" class=\"headerlink\" title=\"新增headers\"></a>新增headers</h3><pre><code class=\"java\">@Configuration\npublic class AuthGatewayFilter implements GlobalFilter, Ordered &#123;\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;\n        Consumer&lt;HttpHeaders&gt; httpHeaders = httpHeader -&gt; &#123;\n            // 存在相同的key,直接添加会报错\n            if(StringUtils.isBlank(httpHeader.getFirst(&quot;xxx&quot;)))&#123;\n                httpHeader.add(&quot;xxx&quot;, &quot;xxx&quot;);\n            &#125;\n        &#125;;\n        ServerHttpRequest serverHttpRequest = exchange.getRequest().mutate().headers(httpHeaders).build();\n        exchange = exchange.mutate().request(serverHttpRequest).build();\n\n        return chain.filter(exchange);\n    &#125;\n    @Override\n    public int getOrder() &#123;\n        return Ordered.HIGHEST_PRECEDENCE - 1;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"请求非json格式转jsondemo\"><a href=\"#请求非json格式转jsondemo\" class=\"headerlink\" title=\"请求非json格式转jsondemo\"></a>请求非json格式转jsondemo</h3><pre><code class=\"java\">class Demo&#123;\n\n    /** application/x-www-form-urlencoded 转json **/\n    private Map&lt;String, Object&gt; decodeBody(String body) &#123;\n        return Arrays.stream(body.split(&quot;&amp;&quot;))\n                .map(s -&gt; s.split(&quot;=&quot;))\n                .collect(Collectors.toMap(arr -&gt; arr[0], arr -&gt; arr[1]));\n    &#125;\n\n    /** fomrData(非文件)转 json 数据 **/\n    private String parseFormData2Json(String requestParam)&#123;\n        if(StringUtils.isBlank(requestParam) \n                &amp;&amp; !requestParam.contains(&quot;filename&quot;))&#123;\n            return requestParam;\n        &#125;\n        try&#123;\n            requestParam = requestParam.replace(&quot;-&quot;,&quot;&quot;).split(&quot;-&quot;)[0];\n            String code = requestParam.split(&quot;\\n&quot;)[0];\n            requestParam = requestParam.replaceAll(code,&quot;&quot;)\n                    .replaceAll(&quot;ContentDisposition: formdata;&quot;,&quot;&quot;)\n                    .replaceAll(&quot;\\n&quot;,&quot;&quot;)\n                    .replaceAll(&quot;name=&quot;,&quot;,&quot;)\n                    .replaceAll(&quot;\\&quot;\\r\\r&quot;,&quot;\\&quot;:\\&quot;&quot;)\n                    .replaceFirst(&quot;,&quot;,&quot;&quot;)\n                    .replaceAll(&quot;\\r&quot;,&quot;\\&quot;&quot;)\n            ;\n            requestParam = &quot;&#123;&quot; + requestParam + &quot;\\&quot;&#125;&quot;;\n        &#125; catch (Exception e)&#123;\n            e.printStackTrace();\n        &#125;\n        return requestParam;\n    &#125;\n&#125;\n</code></pre>\n"},{"title":"技术文档","description":"技术文档","date":"2020-12-25T10:57:00.000Z","_content":"\n## 技术文档设计\n### 文档格式\n- 文档版本\n- 参考资源\n  - 相关文档地址\n  - 关键名词解释\n- 背景及目标\n- 系统设计\n  - 系统架构图(可选)\n  - 组件关系图(可选)\n  - 用例图\n  - 流程图\n  - 时序图\n  - 状态图(可选)\n  - 领域建模\n  - ER图\n\n## UML图相关\n### 常用元素\n```textmate\n1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法\n```\n\n### 常见的几种关系\n```textmate\n1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。\n```\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n### 示例-标识了所有关系\n<img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n\n\n## 设计工具\n### 在线版\n- [Processon-推荐](https://www.processon.com/)\n- [Draw.io](https://app.diagrams.net/)\n- [Visual-Paradigm](https://online.visual-paradigm.com/cn/drive/#diagramlist:proj=0&new)\n\n### 软件\n- VisualParadigm(功能强大，相比其他软件样式可能有点丑)\n- draw.io(简单易用，样式美观)\n\n","source":"_posts/framework/design/uml.md","raw":"---\ntitle: 技术文档\ndescription: 技术文档\ndate: 2020-12-25 18:57\ntags:\n- 技术文档\ncategories:\n- 架构\n---\n\n## 技术文档设计\n### 文档格式\n- 文档版本\n- 参考资源\n  - 相关文档地址\n  - 关键名词解释\n- 背景及目标\n- 系统设计\n  - 系统架构图(可选)\n  - 组件关系图(可选)\n  - 用例图\n  - 流程图\n  - 时序图\n  - 状态图(可选)\n  - 领域建模\n  - ER图\n\n## UML图相关\n### 常用元素\n```textmate\n1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法\n```\n\n### 常见的几种关系\n```textmate\n1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。\n```\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n### 示例-标识了所有关系\n<img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n\n\n## 设计工具\n### 在线版\n- [Processon-推荐](https://www.processon.com/)\n- [Draw.io](https://app.diagrams.net/)\n- [Visual-Paradigm](https://online.visual-paradigm.com/cn/drive/#diagramlist:proj=0&new)\n\n### 软件\n- VisualParadigm(功能强大，相比其他软件样式可能有点丑)\n- draw.io(简单易用，样式美观)\n\n","slug":"framework/design/uml","published":1,"updated":"2021-09-28T07:15:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxz002djrnv3yaw97hl","content":"<h2 id=\"技术文档设计\"><a href=\"#技术文档设计\" class=\"headerlink\" title=\"技术文档设计\"></a>技术文档设计</h2><h3 id=\"文档格式\"><a href=\"#文档格式\" class=\"headerlink\" title=\"文档格式\"></a>文档格式</h3><ul>\n<li>文档版本</li>\n<li>参考资源<ul>\n<li>相关文档地址</li>\n<li>关键名词解释</li>\n</ul>\n</li>\n<li>背景及目标</li>\n<li>系统设计<ul>\n<li>系统架构图(可选)</li>\n<li>组件关系图(可选)</li>\n<li>用例图</li>\n<li>流程图</li>\n<li>时序图</li>\n<li>状态图(可选)</li>\n<li>领域建模</li>\n<li>ER图</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"UML图相关\"><a href=\"#UML图相关\" class=\"headerlink\" title=\"UML图相关\"></a>UML图相关</h2><h3 id=\"常用元素\"><a href=\"#常用元素\" class=\"headerlink\" title=\"常用元素\"></a>常用元素</h3><pre><code class=\"textmate\">1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法</code></pre>\n<h3 id=\"常见的几种关系\"><a href=\"#常见的几种关系\" class=\"headerlink\" title=\"常见的几种关系\"></a>常见的几种关系</h3><pre><code class=\"textmate\">1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。</code></pre>\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n<h3 id=\"示例-标识了所有关系\"><a href=\"#示例-标识了所有关系\" class=\"headerlink\" title=\"示例-标识了所有关系\"></a>示例-标识了所有关系</h3><img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n\n\n<h2 id=\"设计工具\"><a href=\"#设计工具\" class=\"headerlink\" title=\"设计工具\"></a>设计工具</h2><h3 id=\"在线版\"><a href=\"#在线版\" class=\"headerlink\" title=\"在线版\"></a>在线版</h3><ul>\n<li><a href=\"https://www.processon.com/\">Processon-推荐</a></li>\n<li><a href=\"https://app.diagrams.net/\">Draw.io</a></li>\n<li><a href=\"https://online.visual-paradigm.com/cn/drive/#diagramlist:proj=0&new\">Visual-Paradigm</a></li>\n</ul>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><ul>\n<li>VisualParadigm(功能强大，相比其他软件样式可能有点丑)</li>\n<li>draw.io(简单易用，样式美观)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"技术文档设计\"><a href=\"#技术文档设计\" class=\"headerlink\" title=\"技术文档设计\"></a>技术文档设计</h2><h3 id=\"文档格式\"><a href=\"#文档格式\" class=\"headerlink\" title=\"文档格式\"></a>文档格式</h3><ul>\n<li>文档版本</li>\n<li>参考资源<ul>\n<li>相关文档地址</li>\n<li>关键名词解释</li>\n</ul>\n</li>\n<li>背景及目标</li>\n<li>系统设计<ul>\n<li>系统架构图(可选)</li>\n<li>组件关系图(可选)</li>\n<li>用例图</li>\n<li>流程图</li>\n<li>时序图</li>\n<li>状态图(可选)</li>\n<li>领域建模</li>\n<li>ER图</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"UML图相关\"><a href=\"#UML图相关\" class=\"headerlink\" title=\"UML图相关\"></a>UML图相关</h2><h3 id=\"常用元素\"><a href=\"#常用元素\" class=\"headerlink\" title=\"常用元素\"></a>常用元素</h3><pre><code class=\"textmate\">1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法</code></pre>\n<h3 id=\"常见的几种关系\"><a href=\"#常见的几种关系\" class=\"headerlink\" title=\"常见的几种关系\"></a>常见的几种关系</h3><pre><code class=\"textmate\">1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。</code></pre>\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n<h3 id=\"示例-标识了所有关系\"><a href=\"#示例-标识了所有关系\" class=\"headerlink\" title=\"示例-标识了所有关系\"></a>示例-标识了所有关系</h3><img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n\n\n<h2 id=\"设计工具\"><a href=\"#设计工具\" class=\"headerlink\" title=\"设计工具\"></a>设计工具</h2><h3 id=\"在线版\"><a href=\"#在线版\" class=\"headerlink\" title=\"在线版\"></a>在线版</h3><ul>\n<li><a href=\"https://www.processon.com/\">Processon-推荐</a></li>\n<li><a href=\"https://app.diagrams.net/\">Draw.io</a></li>\n<li><a href=\"https://online.visual-paradigm.com/cn/drive/#diagramlist:proj=0&new\">Visual-Paradigm</a></li>\n</ul>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><ul>\n<li>VisualParadigm(功能强大，相比其他软件样式可能有点丑)</li>\n<li>draw.io(简单易用，样式美观)</li>\n</ul>\n"},{"title":"SpringBoot","date":"2021-03-22T01:44:01.000Z","_content":"\n### 文章收集\n- [SpringBoot启动过程(转)](https://www.jianshu.com/p/603d125f21b3)\n- [流程图(转)](https://www.processon.com/view/link/59812124e4b0de2518b32b6e)\n- [@RefreshScope原理](https://blog.csdn.net/youanyyou/article/details/103562907)\n- [SpringBoot内置Tomcat启动源码分析](https://www.cnblogs.com/sword-successful/p/11383723.html)\n- [@SpringBootApplication(转)](https://blog.csdn.net/qq_28289405/article/details/81302498)\n\n### 集成PageHelper\n- 配置\n```pom\n<!--基础框架包-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.3.4.RELEASE</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-dependencies</artifactId>\n    <version>Hoxton.SR8</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n<!--page helper依赖-->\n<!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter -->\n<dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper-spring-boot-starter</artifactId>\n    <version>1.3.0</version>\n</dependency>\n```\n\n- 使用\n```java\nclass XXService{\n    public Result list(QueryParam param){\n        PageMethod.startPage(param.getPageNumber(),param.getPageSize());\n        List result = mapper.list(param);\n        PageInfo pageInfo = new PageInfo(result);\n        return PageDTO.result(pageInfo.getTotal(),result);\n    }\n}\n```\n\n- 注意事项\n\n```textmate\n1.注意pom版本号\n2.使用pagehelper-spring-boot-starter pom后，不需要在yml中配置pagehelper相关参数，否则分页会有问题(亲测)\n  例如: 永远只在第一页\n```\n\n### 自动装配原理\n```textmate\n@EnableAutoConfiguration\n条件注解 @ConditionalOnBean等\n@EnableAutoConfiguration注解(找META-INF/spring.factories配置文件中的所有自动配置类)\n```\n","source":"_posts/backend/spring/spring-boot.md","raw":"---\ntitle: SpringBoot\ndate: 2021-03-22 09:44:01\ntags:\n- springboot\ncategories:\n- 后端\n- 框架\n---\n\n### 文章收集\n- [SpringBoot启动过程(转)](https://www.jianshu.com/p/603d125f21b3)\n- [流程图(转)](https://www.processon.com/view/link/59812124e4b0de2518b32b6e)\n- [@RefreshScope原理](https://blog.csdn.net/youanyyou/article/details/103562907)\n- [SpringBoot内置Tomcat启动源码分析](https://www.cnblogs.com/sword-successful/p/11383723.html)\n- [@SpringBootApplication(转)](https://blog.csdn.net/qq_28289405/article/details/81302498)\n\n### 集成PageHelper\n- 配置\n```pom\n<!--基础框架包-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.3.4.RELEASE</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-dependencies</artifactId>\n    <version>Hoxton.SR8</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n<!--page helper依赖-->\n<!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter -->\n<dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper-spring-boot-starter</artifactId>\n    <version>1.3.0</version>\n</dependency>\n```\n\n- 使用\n```java\nclass XXService{\n    public Result list(QueryParam param){\n        PageMethod.startPage(param.getPageNumber(),param.getPageSize());\n        List result = mapper.list(param);\n        PageInfo pageInfo = new PageInfo(result);\n        return PageDTO.result(pageInfo.getTotal(),result);\n    }\n}\n```\n\n- 注意事项\n\n```textmate\n1.注意pom版本号\n2.使用pagehelper-spring-boot-starter pom后，不需要在yml中配置pagehelper相关参数，否则分页会有问题(亲测)\n  例如: 永远只在第一页\n```\n\n### 自动装配原理\n```textmate\n@EnableAutoConfiguration\n条件注解 @ConditionalOnBean等\n@EnableAutoConfiguration注解(找META-INF/spring.factories配置文件中的所有自动配置类)\n```\n","slug":"backend/spring/spring-boot","published":1,"updated":"2021-10-25T03:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyrxz002ejrnvg5if1my1","content":"<h3 id=\"文章收集\"><a href=\"#文章收集\" class=\"headerlink\" title=\"文章收集\"></a>文章收集</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/603d125f21b3\">SpringBoot启动过程(转)</a></li>\n<li><a href=\"https://www.processon.com/view/link/59812124e4b0de2518b32b6e\">流程图(转)</a></li>\n<li><a href=\"https://blog.csdn.net/youanyyou/article/details/103562907\">@RefreshScope原理</a></li>\n<li><a href=\"https://www.cnblogs.com/sword-successful/p/11383723.html\">SpringBoot内置Tomcat启动源码分析</a></li>\n<li><a href=\"https://blog.csdn.net/qq_28289405/article/details/81302498\">@SpringBootApplication(转)</a></li>\n</ul>\n<h3 id=\"集成PageHelper\"><a href=\"#集成PageHelper\" class=\"headerlink\" title=\"集成PageHelper\"></a>集成PageHelper</h3><ul>\n<li><p>配置</p>\n<pre><code class=\"pom\">&lt;!--基础框架包--&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n  &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;\n  &lt;type&gt;pom&lt;/type&gt;\n  &lt;scope&gt;import&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n  &lt;version&gt;Hoxton.SR8&lt;/version&gt;\n  &lt;type&gt;pom&lt;/type&gt;\n  &lt;scope&gt;import&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;!--page helper依赖--&gt;\n&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;\n  &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;1.3.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n</li>\n<li><p>使用</p>\n<pre><code class=\"java\">class XXService&#123;\n  public Result list(QueryParam param)&#123;\n      PageMethod.startPage(param.getPageNumber(),param.getPageSize());\n      List result = mapper.list(param);\n      PageInfo pageInfo = new PageInfo(result);\n      return PageDTO.result(pageInfo.getTotal(),result);\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>注意事项</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.注意pom版本号\n2.使用pagehelper-spring-boot-starter pom后，不需要在yml中配置pagehelper相关参数，否则分页会有问题(亲测)\n  例如: 永远只在第一页</code></pre>\n<h3 id=\"自动装配原理\"><a href=\"#自动装配原理\" class=\"headerlink\" title=\"自动装配原理\"></a>自动装配原理</h3><pre><code class=\"textmate\">@EnableAutoConfiguration\n条件注解 @ConditionalOnBean等\n@EnableAutoConfiguration注解(找META-INF/spring.factories配置文件中的所有自动配置类)</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"文章收集\"><a href=\"#文章收集\" class=\"headerlink\" title=\"文章收集\"></a>文章收集</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/603d125f21b3\">SpringBoot启动过程(转)</a></li>\n<li><a href=\"https://www.processon.com/view/link/59812124e4b0de2518b32b6e\">流程图(转)</a></li>\n<li><a href=\"https://blog.csdn.net/youanyyou/article/details/103562907\">@RefreshScope原理</a></li>\n<li><a href=\"https://www.cnblogs.com/sword-successful/p/11383723.html\">SpringBoot内置Tomcat启动源码分析</a></li>\n<li><a href=\"https://blog.csdn.net/qq_28289405/article/details/81302498\">@SpringBootApplication(转)</a></li>\n</ul>\n<h3 id=\"集成PageHelper\"><a href=\"#集成PageHelper\" class=\"headerlink\" title=\"集成PageHelper\"></a>集成PageHelper</h3><ul>\n<li><p>配置</p>\n<pre><code class=\"pom\">&lt;!--基础框架包--&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n  &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;\n  &lt;type&gt;pom&lt;/type&gt;\n  &lt;scope&gt;import&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n  &lt;version&gt;Hoxton.SR8&lt;/version&gt;\n  &lt;type&gt;pom&lt;/type&gt;\n  &lt;scope&gt;import&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;!--page helper依赖--&gt;\n&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;\n  &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;1.3.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n</li>\n<li><p>使用</p>\n<pre><code class=\"java\">class XXService&#123;\n  public Result list(QueryParam param)&#123;\n      PageMethod.startPage(param.getPageNumber(),param.getPageSize());\n      List result = mapper.list(param);\n      PageInfo pageInfo = new PageInfo(result);\n      return PageDTO.result(pageInfo.getTotal(),result);\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>注意事项</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.注意pom版本号\n2.使用pagehelper-spring-boot-starter pom后，不需要在yml中配置pagehelper相关参数，否则分页会有问题(亲测)\n  例如: 永远只在第一页</code></pre>\n<h3 id=\"自动装配原理\"><a href=\"#自动装配原理\" class=\"headerlink\" title=\"自动装配原理\"></a>自动装配原理</h3><pre><code class=\"textmate\">@EnableAutoConfiguration\n条件注解 @ConditionalOnBean等\n@EnableAutoConfiguration注解(找META-INF/spring.factories配置文件中的所有自动配置类)</code></pre>\n"},{"title":"MySQL相关-常用命令","date":"2020-10-02T07:51:46.000Z","_content":"\n### 存储引擎区别\n\n- 查看数据库支持的存储引擎\n```sql\nshow engines;\n```\n\n类型 | 磁盘文件 | 特性 | 适用场景\n---|--- | --- | --- |\nFEDERATED||用来访问远程表存储引擎|访问远程表\nMRG_MYISAM||把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表|可以用分区表替换merge表|\nMyISAM|.MDY数据)<br/> .MYI(索引)|主要的非实物处理存储引擎|\nBLACKHOLE||丢弃写操作，读操作返回空内容|\nCSV|.CSV(数据)<br/>.CSM(元数据)|存储数据时，会以逗号作为数据项之间的分割符号|不支持索引，数据存在为普通文本文件\nMEMORY||置于内存的表|\nARCHIVE||用于数据存档(行插入后不能再修改)|数据归档，大批量存储后不修改\nInnoDB|.ibd(数据&索引)|具备外键支持功能的事务处理引擎|\nPERFORMANCE_SCHEMA||用于监视MySQL服务器|\nNDB||集群存储引擎||\n|TokuDB||存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB|\n\n\n### 建表语句\n```sql\n1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST('2019-8-01' as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;\n```\n\n### Cast类型强制转换\n```sql\n语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n\n```\n\n### 新建分区表\n- 示例\n```sql\ncreate table user_bak (\n id int(11) UNSIGNED AUTO_INCREMENT ,\n `name` varchar(200) DEFAULT null COMMENT '名称',\n rand_num int(11) DEFAULT NULL COMMENT '随机数',\n birthday datetime default null comment '生日',\n PRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n\tPARTITION p0 VALUES less THAN (20),\n\tPARTITION p1 VALUES less THAN (40),\n\tPARTITION p2 VALUES less THAN (60),\n\tPARTITION p3 VALUES less THAN (80),\n\tPARTITION p4 VALUES less THAN MAXVALUE\n);\n```\n\n- 注意点\n\n```textmate\n1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建\n```\n\n- 常见异常\n\n```textmate\n1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中\n```\n\n### 子查询\n```sql\n-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n>= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY & SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = 'eee')\n```\n\n### FullText全文搜索\n- 全文搜索类型\n\n```textmate\n1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索\n```\n- 创建索引需要满足的条件\n\n```textmate\n1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)\n```\n\n- 语法\n\n```sql\n-- 自然语言\nselect *,match(`name`) against('good boy') \nas 'percentage' from `user` where match(`name`) against('good boy');\n\n-- 布尔模式\nselect *,match(`name`) against('good boy' in boolean MODE) as 'percentage' from `user` where match(`name`) against('good boy' in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against('\"good boy\"' in boolean MODE) as 'percentage' from `user` where match(`name`) against('\"good boy\"' in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against('good boy' with query expansion) as 'percentage' from `user` where match(`name`) against('good boy'  with query expansion);\n```\n\n- 修改查询字符长度\n\n```textmate\n1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;\n```\n\n## 字符集\n### 有字符集有关的系统设置\n```yaml\ncharacter_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集\n```\n\n### 空间值\n```textmate\nOpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)\n```\n\n### 模糊匹配查询\n```textmate\n1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n\n```\n\n### 新建用户后授权\n```sql\n-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY '密码';\ngrant all privileges on jwgateway.* to '用户名'@'%' identified by '密码';\nselect * from mysql.user;\n```\n\n### 判断时间与已有记录是否重叠\n```sql\n-- 1.方法一\nSELECT * FROM test_table\nWHERE (start_time >= startT AND start_time < endT)\n   OR (start_time <= startT AND end_time > endT)\n   OR (end_time >= startT AND end_time < endT)\n\n-- 2.方法二\nSELECT * FROM test_table WHERE NOT ( (end_time < startT OR (start_time > endT) )\n```\n","source":"_posts/backend/storage/mysql-other.md","raw":"---\ntitle: MySQL相关-常用命令\ndate: 2020-10-02 15:51:46\ntags: \n- mysql\ncategories: \n- 存储\n---\n\n### 存储引擎区别\n\n- 查看数据库支持的存储引擎\n```sql\nshow engines;\n```\n\n类型 | 磁盘文件 | 特性 | 适用场景\n---|--- | --- | --- |\nFEDERATED||用来访问远程表存储引擎|访问远程表\nMRG_MYISAM||把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表|可以用分区表替换merge表|\nMyISAM|.MDY数据)<br/> .MYI(索引)|主要的非实物处理存储引擎|\nBLACKHOLE||丢弃写操作，读操作返回空内容|\nCSV|.CSV(数据)<br/>.CSM(元数据)|存储数据时，会以逗号作为数据项之间的分割符号|不支持索引，数据存在为普通文本文件\nMEMORY||置于内存的表|\nARCHIVE||用于数据存档(行插入后不能再修改)|数据归档，大批量存储后不修改\nInnoDB|.ibd(数据&索引)|具备外键支持功能的事务处理引擎|\nPERFORMANCE_SCHEMA||用于监视MySQL服务器|\nNDB||集群存储引擎||\n|TokuDB||存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB|\n\n\n### 建表语句\n```sql\n1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST('2019-8-01' as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;\n```\n\n### Cast类型强制转换\n```sql\n语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n\n```\n\n### 新建分区表\n- 示例\n```sql\ncreate table user_bak (\n id int(11) UNSIGNED AUTO_INCREMENT ,\n `name` varchar(200) DEFAULT null COMMENT '名称',\n rand_num int(11) DEFAULT NULL COMMENT '随机数',\n birthday datetime default null comment '生日',\n PRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n\tPARTITION p0 VALUES less THAN (20),\n\tPARTITION p1 VALUES less THAN (40),\n\tPARTITION p2 VALUES less THAN (60),\n\tPARTITION p3 VALUES less THAN (80),\n\tPARTITION p4 VALUES less THAN MAXVALUE\n);\n```\n\n- 注意点\n\n```textmate\n1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建\n```\n\n- 常见异常\n\n```textmate\n1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中\n```\n\n### 子查询\n```sql\n-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n>= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY & SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = 'eee')\n```\n\n### FullText全文搜索\n- 全文搜索类型\n\n```textmate\n1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索\n```\n- 创建索引需要满足的条件\n\n```textmate\n1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)\n```\n\n- 语法\n\n```sql\n-- 自然语言\nselect *,match(`name`) against('good boy') \nas 'percentage' from `user` where match(`name`) against('good boy');\n\n-- 布尔模式\nselect *,match(`name`) against('good boy' in boolean MODE) as 'percentage' from `user` where match(`name`) against('good boy' in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against('\"good boy\"' in boolean MODE) as 'percentage' from `user` where match(`name`) against('\"good boy\"' in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against('good boy' with query expansion) as 'percentage' from `user` where match(`name`) against('good boy'  with query expansion);\n```\n\n- 修改查询字符长度\n\n```textmate\n1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;\n```\n\n## 字符集\n### 有字符集有关的系统设置\n```yaml\ncharacter_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集\n```\n\n### 空间值\n```textmate\nOpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)\n```\n\n### 模糊匹配查询\n```textmate\n1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n\n```\n\n### 新建用户后授权\n```sql\n-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY '密码';\ngrant all privileges on jwgateway.* to '用户名'@'%' identified by '密码';\nselect * from mysql.user;\n```\n\n### 判断时间与已有记录是否重叠\n```sql\n-- 1.方法一\nSELECT * FROM test_table\nWHERE (start_time >= startT AND start_time < endT)\n   OR (start_time <= startT AND end_time > endT)\n   OR (end_time >= startT AND end_time < endT)\n\n-- 2.方法二\nSELECT * FROM test_table WHERE NOT ( (end_time < startT OR (start_time > endT) )\n```\n","slug":"backend/storage/mysql-other","published":1,"updated":"2021-10-12T03:52:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry0002jjrnvhbq71wt4","content":"<h3 id=\"存储引擎区别\"><a href=\"#存储引擎区别\" class=\"headerlink\" title=\"存储引擎区别\"></a>存储引擎区别</h3><ul>\n<li>查看数据库支持的存储引擎<pre><code class=\"sql\">show engines;</code></pre>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>磁盘文件</th>\n<th>特性</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FEDERATED</td>\n<td></td>\n<td>用来访问远程表存储引擎</td>\n<td>访问远程表</td>\n</tr>\n<tr>\n<td>MRG_MYISAM</td>\n<td></td>\n<td>把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表</td>\n<td>可以用分区表替换merge表</td>\n</tr>\n<tr>\n<td>MyISAM</td>\n<td>.MDY数据)<br/> .MYI(索引)</td>\n<td>主要的非实物处理存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>BLACKHOLE</td>\n<td></td>\n<td>丢弃写操作，读操作返回空内容</td>\n<td></td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>.CSV(数据)<br/>.CSM(元数据)</td>\n<td>存储数据时，会以逗号作为数据项之间的分割符号</td>\n<td>不支持索引，数据存在为普通文本文件</td>\n</tr>\n<tr>\n<td>MEMORY</td>\n<td></td>\n<td>置于内存的表</td>\n<td></td>\n</tr>\n<tr>\n<td>ARCHIVE</td>\n<td></td>\n<td>用于数据存档(行插入后不能再修改)</td>\n<td>数据归档，大批量存储后不修改</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>.ibd(数据&amp;索引)</td>\n<td>具备外键支持功能的事务处理引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>PERFORMANCE_SCHEMA</td>\n<td></td>\n<td>用于监视MySQL服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>NDB</td>\n<td></td>\n<td>集群存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>TokuDB</td>\n<td></td>\n<td>存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB</td>\n</tr>\n</tbody></table>\n<h3 id=\"建表语句\"><a href=\"#建表语句\" class=\"headerlink\" title=\"建表语句\"></a>建表语句</h3><pre><code class=\"sql\">1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST(&#39;2019-8-01&#39; as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;</code></pre>\n<h3 id=\"Cast类型强制转换\"><a href=\"#Cast类型强制转换\" class=\"headerlink\" title=\"Cast类型强制转换\"></a>Cast类型强制转换</h3><pre><code class=\"sql\">语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n</code></pre>\n<h3 id=\"新建分区表\"><a href=\"#新建分区表\" class=\"headerlink\" title=\"新建分区表\"></a>新建分区表</h3><ul>\n<li><p>示例</p>\n<pre><code class=\"sql\">create table user_bak (\nid int(11) UNSIGNED AUTO_INCREMENT ,\n`name` varchar(200) DEFAULT null COMMENT &#39;名称&#39;,\nrand_num int(11) DEFAULT NULL COMMENT &#39;随机数&#39;,\nbirthday datetime default null comment &#39;生日&#39;,\nPRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n  PARTITION p0 VALUES less THAN (20),\n  PARTITION p1 VALUES less THAN (40),\n  PARTITION p2 VALUES less THAN (60),\n  PARTITION p3 VALUES less THAN (80),\n  PARTITION p4 VALUES less THAN MAXVALUE\n);</code></pre>\n</li>\n<li><p>注意点</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建</code></pre>\n<ul>\n<li>常见异常</li>\n</ul>\n<pre><code class=\"textmate\">1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中</code></pre>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><pre><code class=\"sql\">-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n&gt;= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY &amp; SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = &#39;eee&#39;)</code></pre>\n<h3 id=\"FullText全文搜索\"><a href=\"#FullText全文搜索\" class=\"headerlink\" title=\"FullText全文搜索\"></a>FullText全文搜索</h3><ul>\n<li>全文搜索类型</li>\n</ul>\n<pre><code class=\"textmate\">1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索</code></pre>\n<ul>\n<li>创建索引需要满足的条件</li>\n</ul>\n<pre><code class=\"textmate\">1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)</code></pre>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"sql\">-- 自然语言\nselect *,match(`name`) against(&#39;good boy&#39;) \nas &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;);\n\n-- 布尔模式\nselect *,match(`name`) against(&#39;good boy&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39; in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against(&#39;good boy&#39; with query expansion) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;  with query expansion);</code></pre>\n<ul>\n<li>修改查询字符长度</li>\n</ul>\n<pre><code class=\"textmate\">1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;</code></pre>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><h3 id=\"有字符集有关的系统设置\"><a href=\"#有字符集有关的系统设置\" class=\"headerlink\" title=\"有字符集有关的系统设置\"></a>有字符集有关的系统设置</h3><pre><code class=\"yaml\">character_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集</code></pre>\n<h3 id=\"空间值\"><a href=\"#空间值\" class=\"headerlink\" title=\"空间值\"></a>空间值</h3><pre><code class=\"textmate\">OpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)</code></pre>\n<h3 id=\"模糊匹配查询\"><a href=\"#模糊匹配查询\" class=\"headerlink\" title=\"模糊匹配查询\"></a>模糊匹配查询</h3><pre><code class=\"textmate\">1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n</code></pre>\n<h3 id=\"新建用户后授权\"><a href=\"#新建用户后授权\" class=\"headerlink\" title=\"新建用户后授权\"></a>新建用户后授权</h3><pre><code class=\"sql\">-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY &#39;密码&#39;;\ngrant all privileges on jwgateway.* to &#39;用户名&#39;@&#39;%&#39; identified by &#39;密码&#39;;\nselect * from mysql.user;</code></pre>\n<h3 id=\"判断时间与已有记录是否重叠\"><a href=\"#判断时间与已有记录是否重叠\" class=\"headerlink\" title=\"判断时间与已有记录是否重叠\"></a>判断时间与已有记录是否重叠</h3><pre><code class=\"sql\">-- 1.方法一\nSELECT * FROM test_table\nWHERE (start_time &gt;= startT AND start_time &lt; endT)\n   OR (start_time &lt;= startT AND end_time &gt; endT)\n   OR (end_time &gt;= startT AND end_time &lt; endT)\n\n-- 2.方法二\nSELECT * FROM test_table WHERE NOT ( (end_time &lt; startT OR (start_time &gt; endT) )</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"存储引擎区别\"><a href=\"#存储引擎区别\" class=\"headerlink\" title=\"存储引擎区别\"></a>存储引擎区别</h3><ul>\n<li>查看数据库支持的存储引擎<pre><code class=\"sql\">show engines;</code></pre>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>磁盘文件</th>\n<th>特性</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FEDERATED</td>\n<td></td>\n<td>用来访问远程表存储引擎</td>\n<td>访问远程表</td>\n</tr>\n<tr>\n<td>MRG_MYISAM</td>\n<td></td>\n<td>把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表</td>\n<td>可以用分区表替换merge表</td>\n</tr>\n<tr>\n<td>MyISAM</td>\n<td>.MDY数据)<br/> .MYI(索引)</td>\n<td>主要的非实物处理存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>BLACKHOLE</td>\n<td></td>\n<td>丢弃写操作，读操作返回空内容</td>\n<td></td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>.CSV(数据)<br/>.CSM(元数据)</td>\n<td>存储数据时，会以逗号作为数据项之间的分割符号</td>\n<td>不支持索引，数据存在为普通文本文件</td>\n</tr>\n<tr>\n<td>MEMORY</td>\n<td></td>\n<td>置于内存的表</td>\n<td></td>\n</tr>\n<tr>\n<td>ARCHIVE</td>\n<td></td>\n<td>用于数据存档(行插入后不能再修改)</td>\n<td>数据归档，大批量存储后不修改</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>.ibd(数据&amp;索引)</td>\n<td>具备外键支持功能的事务处理引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>PERFORMANCE_SCHEMA</td>\n<td></td>\n<td>用于监视MySQL服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>NDB</td>\n<td></td>\n<td>集群存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>TokuDB</td>\n<td></td>\n<td>存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB</td>\n</tr>\n</tbody></table>\n<h3 id=\"建表语句\"><a href=\"#建表语句\" class=\"headerlink\" title=\"建表语句\"></a>建表语句</h3><pre><code class=\"sql\">1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST(&#39;2019-8-01&#39; as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;</code></pre>\n<h3 id=\"Cast类型强制转换\"><a href=\"#Cast类型强制转换\" class=\"headerlink\" title=\"Cast类型强制转换\"></a>Cast类型强制转换</h3><pre><code class=\"sql\">语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n</code></pre>\n<h3 id=\"新建分区表\"><a href=\"#新建分区表\" class=\"headerlink\" title=\"新建分区表\"></a>新建分区表</h3><ul>\n<li><p>示例</p>\n<pre><code class=\"sql\">create table user_bak (\nid int(11) UNSIGNED AUTO_INCREMENT ,\n`name` varchar(200) DEFAULT null COMMENT &#39;名称&#39;,\nrand_num int(11) DEFAULT NULL COMMENT &#39;随机数&#39;,\nbirthday datetime default null comment &#39;生日&#39;,\nPRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n  PARTITION p0 VALUES less THAN (20),\n  PARTITION p1 VALUES less THAN (40),\n  PARTITION p2 VALUES less THAN (60),\n  PARTITION p3 VALUES less THAN (80),\n  PARTITION p4 VALUES less THAN MAXVALUE\n);</code></pre>\n</li>\n<li><p>注意点</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建</code></pre>\n<ul>\n<li>常见异常</li>\n</ul>\n<pre><code class=\"textmate\">1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中</code></pre>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><pre><code class=\"sql\">-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n&gt;= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY &amp; SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = &#39;eee&#39;)</code></pre>\n<h3 id=\"FullText全文搜索\"><a href=\"#FullText全文搜索\" class=\"headerlink\" title=\"FullText全文搜索\"></a>FullText全文搜索</h3><ul>\n<li>全文搜索类型</li>\n</ul>\n<pre><code class=\"textmate\">1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索</code></pre>\n<ul>\n<li>创建索引需要满足的条件</li>\n</ul>\n<pre><code class=\"textmate\">1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)</code></pre>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"sql\">-- 自然语言\nselect *,match(`name`) against(&#39;good boy&#39;) \nas &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;);\n\n-- 布尔模式\nselect *,match(`name`) against(&#39;good boy&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39; in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against(&#39;good boy&#39; with query expansion) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;  with query expansion);</code></pre>\n<ul>\n<li>修改查询字符长度</li>\n</ul>\n<pre><code class=\"textmate\">1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;</code></pre>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><h3 id=\"有字符集有关的系统设置\"><a href=\"#有字符集有关的系统设置\" class=\"headerlink\" title=\"有字符集有关的系统设置\"></a>有字符集有关的系统设置</h3><pre><code class=\"yaml\">character_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集</code></pre>\n<h3 id=\"空间值\"><a href=\"#空间值\" class=\"headerlink\" title=\"空间值\"></a>空间值</h3><pre><code class=\"textmate\">OpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)</code></pre>\n<h3 id=\"模糊匹配查询\"><a href=\"#模糊匹配查询\" class=\"headerlink\" title=\"模糊匹配查询\"></a>模糊匹配查询</h3><pre><code class=\"textmate\">1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n</code></pre>\n<h3 id=\"新建用户后授权\"><a href=\"#新建用户后授权\" class=\"headerlink\" title=\"新建用户后授权\"></a>新建用户后授权</h3><pre><code class=\"sql\">-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY &#39;密码&#39;;\ngrant all privileges on jwgateway.* to &#39;用户名&#39;@&#39;%&#39; identified by &#39;密码&#39;;\nselect * from mysql.user;</code></pre>\n<h3 id=\"判断时间与已有记录是否重叠\"><a href=\"#判断时间与已有记录是否重叠\" class=\"headerlink\" title=\"判断时间与已有记录是否重叠\"></a>判断时间与已有记录是否重叠</h3><pre><code class=\"sql\">-- 1.方法一\nSELECT * FROM test_table\nWHERE (start_time &gt;= startT AND start_time &lt; endT)\n   OR (start_time &lt;= startT AND end_time &gt; endT)\n   OR (end_time &gt;= startT AND end_time &lt; endT)\n\n-- 2.方法二\nSELECT * FROM test_table WHERE NOT ( (end_time &lt; startT OR (start_time &gt; endT) )</code></pre>\n"},{"title":"Canal服务搭建","date":"2020-10-02T07:51:46.000Z","_content":"\n## 相关网址\n- [官网](https://github.com/alibaba/canal/wiki/Home)\n- [快速开始](https://github.com/alibaba/canal/wiki/QuickStart)\n- [Release下载](https://github.com/alibaba/canal/releases)\n- [Docker镜像地址](https://hub.docker.com/r/canal/canal-server/tags/)\n- [Canal Admin QuickStart](https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart)\n- [Canal Client Example](https://github.com/alibaba/canal/wiki/ClientExample)\n\n## 介绍\n### 主要用途\n```textmate\n基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。\n```\n### 适用场景\n- 数据库镜像\n- 数据库实时备份\n- 索引构建和实时维护(拆分异构索引、倒排索引等)\n- 业务 cache 刷新\n- 带业务逻辑的增量数据处理\n\n### 工作原理\n```textmate\n基于MySQL主备复制原理,伪装成MySQL slave,模拟MySQL slave的交互协议,\n向MySQL mater发送dump协议,MySQL mater收到canal发送过来的dump请求，开始推送binary log给canal，\ncanal解析binary log，再发送到其他存储服务中，如: MySQL，RocketMQ，ES等等。\n```\n\n## 用途\n\n## 搭建\n### 1.直接部署\n```textmate\n1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs\n```\n\n### 2、Docker搭建步骤\n> docker方式部署,注意配置时mysql的IP地址\n#### 2.1、准备\n```textmate\n1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example\n```\n\n#### 2.2、启动命令\n```textmate\n1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx\n```\n\n### CanalAdmin部署\n- 1.集群配置\n```yaml\n#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441\n```\n\n- 2.Server管理\n```textmate\nServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110\n```\n\n- 3.Instance管理\n```textmate\n注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置\n```\n\n#### 一个Canal服务读取多个MySQL实例(docker中操作)\n```textmate\n1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181\n```\n\n### 参考配置(基础版，其他配置参考官网)\n\n- canal.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181\n```\n\n- instance.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false\n```\n\n#### 常见问题\n- 服务都启动成功，客户端拉不到变更日志\n```textmate\n注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(\"sap_system\\\\..*,user_center\\\\..*\")\n```\n\n- 一个Canal-Service,多个client，运行时报错\n```textmate\n改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题\n```\n- zk中记录的点位异常\n```textmate\n进入zookeeper安装目录 \ncd /bin\n./zkClient.sh  或  ./zkCli.sh\ndeleteall /otter/canal/destinations/instanceName(canal-admin中配置的instance名称)\n```\n\n## 总结\n```textmate\n1.对业务代码无侵入、实时性接近准实时\n2.支持集群，集群基于zk做集群管理\n3.提供多种接入方式、适配器等\n3.不适合做复杂的业务逻辑判断及计算；直接对表数据进行修改，出问题后影响较大\n```\n","source":"_posts/backend/storage/canal.md","raw":"---\ntitle: Canal服务搭建\ndate: 2020-10-02 15:51:46\ntags: \n- canal\ncategories: \n- 存储\n---\n\n## 相关网址\n- [官网](https://github.com/alibaba/canal/wiki/Home)\n- [快速开始](https://github.com/alibaba/canal/wiki/QuickStart)\n- [Release下载](https://github.com/alibaba/canal/releases)\n- [Docker镜像地址](https://hub.docker.com/r/canal/canal-server/tags/)\n- [Canal Admin QuickStart](https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart)\n- [Canal Client Example](https://github.com/alibaba/canal/wiki/ClientExample)\n\n## 介绍\n### 主要用途\n```textmate\n基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。\n```\n### 适用场景\n- 数据库镜像\n- 数据库实时备份\n- 索引构建和实时维护(拆分异构索引、倒排索引等)\n- 业务 cache 刷新\n- 带业务逻辑的增量数据处理\n\n### 工作原理\n```textmate\n基于MySQL主备复制原理,伪装成MySQL slave,模拟MySQL slave的交互协议,\n向MySQL mater发送dump协议,MySQL mater收到canal发送过来的dump请求，开始推送binary log给canal，\ncanal解析binary log，再发送到其他存储服务中，如: MySQL，RocketMQ，ES等等。\n```\n\n## 用途\n\n## 搭建\n### 1.直接部署\n```textmate\n1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs\n```\n\n### 2、Docker搭建步骤\n> docker方式部署,注意配置时mysql的IP地址\n#### 2.1、准备\n```textmate\n1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example\n```\n\n#### 2.2、启动命令\n```textmate\n1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx\n```\n\n### CanalAdmin部署\n- 1.集群配置\n```yaml\n#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441\n```\n\n- 2.Server管理\n```textmate\nServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110\n```\n\n- 3.Instance管理\n```textmate\n注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置\n```\n\n#### 一个Canal服务读取多个MySQL实例(docker中操作)\n```textmate\n1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181\n```\n\n### 参考配置(基础版，其他配置参考官网)\n\n- canal.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181\n```\n\n- instance.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false\n```\n\n#### 常见问题\n- 服务都启动成功，客户端拉不到变更日志\n```textmate\n注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(\"sap_system\\\\..*,user_center\\\\..*\")\n```\n\n- 一个Canal-Service,多个client，运行时报错\n```textmate\n改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题\n```\n- zk中记录的点位异常\n```textmate\n进入zookeeper安装目录 \ncd /bin\n./zkClient.sh  或  ./zkCli.sh\ndeleteall /otter/canal/destinations/instanceName(canal-admin中配置的instance名称)\n```\n\n## 总结\n```textmate\n1.对业务代码无侵入、实时性接近准实时\n2.支持集群，集群基于zk做集群管理\n3.提供多种接入方式、适配器等\n3.不适合做复杂的业务逻辑判断及计算；直接对表数据进行修改，出问题后影响较大\n```\n","slug":"backend/storage/canal","published":1,"updated":"2021-10-26T02:23:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry0002ljrnvcbgya1um","content":"<h2 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h2><ul>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Home\">官网</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/QuickStart\">快速开始</a></li>\n<li><a href=\"https://github.com/alibaba/canal/releases\">Release下载</a></li>\n<li><a href=\"https://hub.docker.com/r/canal/canal-server/tags/\">Docker镜像地址</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart\">Canal Admin QuickStart</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/ClientExample\">Canal Client Example</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"主要用途\"><a href=\"#主要用途\" class=\"headerlink\" title=\"主要用途\"></a>主要用途</h3><pre><code class=\"textmate\">基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。</code></pre>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>数据库镜像</li>\n<li>数据库实时备份</li>\n<li>索引构建和实时维护(拆分异构索引、倒排索引等)</li>\n<li>业务 cache 刷新</li>\n<li>带业务逻辑的增量数据处理</li>\n</ul>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><pre><code class=\"textmate\">基于MySQL主备复制原理,伪装成MySQL slave,模拟MySQL slave的交互协议,\n向MySQL mater发送dump协议,MySQL mater收到canal发送过来的dump请求，开始推送binary log给canal，\ncanal解析binary log，再发送到其他存储服务中，如: MySQL，RocketMQ，ES等等。</code></pre>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><h3 id=\"1-直接部署\"><a href=\"#1-直接部署\" class=\"headerlink\" title=\"1.直接部署\"></a>1.直接部署</h3><pre><code class=\"textmate\">1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&amp;配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs</code></pre>\n<h3 id=\"2、Docker搭建步骤\"><a href=\"#2、Docker搭建步骤\" class=\"headerlink\" title=\"2、Docker搭建步骤\"></a>2、Docker搭建步骤</h3><blockquote>\n<p>docker方式部署,注意配置时mysql的IP地址</p>\n</blockquote>\n<h4 id=\"2-1、准备\"><a href=\"#2-1、准备\" class=\"headerlink\" title=\"2.1、准备\"></a>2.1、准备</h4><pre><code class=\"textmate\">1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example</code></pre>\n<h4 id=\"2-2、启动命令\"><a href=\"#2-2、启动命令\" class=\"headerlink\" title=\"2.2、启动命令\"></a>2.2、启动命令</h4><pre><code class=\"textmate\">1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx</code></pre>\n<h3 id=\"CanalAdmin部署\"><a href=\"#CanalAdmin部署\" class=\"headerlink\" title=\"CanalAdmin部署\"></a>CanalAdmin部署</h3><ul>\n<li><p>1.集群配置</p>\n<pre><code class=\"yaml\">#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441</code></pre>\n</li>\n<li><p>2.Server管理</p>\n<pre><code class=\"textmate\">ServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110</code></pre>\n</li>\n<li><p>3.Instance管理</p>\n<pre><code class=\"textmate\">注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置</code></pre>\n</li>\n</ul>\n<h4 id=\"一个Canal服务读取多个MySQL实例-docker中操作\"><a href=\"#一个Canal服务读取多个MySQL实例-docker中操作\" class=\"headerlink\" title=\"一个Canal服务读取多个MySQL实例(docker中操作)\"></a>一个Canal服务读取多个MySQL实例(docker中操作)</h4><pre><code class=\"textmate\">1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181</code></pre>\n<h3 id=\"参考配置-基础版，其他配置参考官网\"><a href=\"#参考配置-基础版，其他配置参考官网\" class=\"headerlink\" title=\"参考配置(基础版，其他配置参考官网)\"></a>参考配置(基础版，其他配置参考官网)</h3><ul>\n<li><p>canal.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181</code></pre>\n</li>\n<li><p>instance.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false</code></pre>\n</li>\n</ul>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ul>\n<li><p>服务都启动成功，客户端拉不到变更日志</p>\n<pre><code class=\"textmate\">注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(&quot;sap_system\\\\..*,user_center\\\\..*&quot;)</code></pre>\n</li>\n<li><p>一个Canal-Service,多个client，运行时报错</p>\n<pre><code class=\"textmate\">改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题</code></pre>\n</li>\n<li><p>zk中记录的点位异常</p>\n<pre><code class=\"textmate\">进入zookeeper安装目录 \ncd /bin\n./zkClient.sh  或  ./zkCli.sh\ndeleteall /otter/canal/destinations/instanceName(canal-admin中配置的instance名称)</code></pre>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><pre><code class=\"textmate\">1.对业务代码无侵入、实时性接近准实时\n2.支持集群，集群基于zk做集群管理\n3.提供多种接入方式、适配器等\n3.不适合做复杂的业务逻辑判断及计算；直接对表数据进行修改，出问题后影响较大</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h2><ul>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Home\">官网</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/QuickStart\">快速开始</a></li>\n<li><a href=\"https://github.com/alibaba/canal/releases\">Release下载</a></li>\n<li><a href=\"https://hub.docker.com/r/canal/canal-server/tags/\">Docker镜像地址</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart\">Canal Admin QuickStart</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/ClientExample\">Canal Client Example</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"主要用途\"><a href=\"#主要用途\" class=\"headerlink\" title=\"主要用途\"></a>主要用途</h3><pre><code class=\"textmate\">基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。</code></pre>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>数据库镜像</li>\n<li>数据库实时备份</li>\n<li>索引构建和实时维护(拆分异构索引、倒排索引等)</li>\n<li>业务 cache 刷新</li>\n<li>带业务逻辑的增量数据处理</li>\n</ul>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><pre><code class=\"textmate\">基于MySQL主备复制原理,伪装成MySQL slave,模拟MySQL slave的交互协议,\n向MySQL mater发送dump协议,MySQL mater收到canal发送过来的dump请求，开始推送binary log给canal，\ncanal解析binary log，再发送到其他存储服务中，如: MySQL，RocketMQ，ES等等。</code></pre>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><h3 id=\"1-直接部署\"><a href=\"#1-直接部署\" class=\"headerlink\" title=\"1.直接部署\"></a>1.直接部署</h3><pre><code class=\"textmate\">1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&amp;配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs</code></pre>\n<h3 id=\"2、Docker搭建步骤\"><a href=\"#2、Docker搭建步骤\" class=\"headerlink\" title=\"2、Docker搭建步骤\"></a>2、Docker搭建步骤</h3><blockquote>\n<p>docker方式部署,注意配置时mysql的IP地址</p>\n</blockquote>\n<h4 id=\"2-1、准备\"><a href=\"#2-1、准备\" class=\"headerlink\" title=\"2.1、准备\"></a>2.1、准备</h4><pre><code class=\"textmate\">1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example</code></pre>\n<h4 id=\"2-2、启动命令\"><a href=\"#2-2、启动命令\" class=\"headerlink\" title=\"2.2、启动命令\"></a>2.2、启动命令</h4><pre><code class=\"textmate\">1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx</code></pre>\n<h3 id=\"CanalAdmin部署\"><a href=\"#CanalAdmin部署\" class=\"headerlink\" title=\"CanalAdmin部署\"></a>CanalAdmin部署</h3><ul>\n<li><p>1.集群配置</p>\n<pre><code class=\"yaml\">#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441</code></pre>\n</li>\n<li><p>2.Server管理</p>\n<pre><code class=\"textmate\">ServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110</code></pre>\n</li>\n<li><p>3.Instance管理</p>\n<pre><code class=\"textmate\">注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置</code></pre>\n</li>\n</ul>\n<h4 id=\"一个Canal服务读取多个MySQL实例-docker中操作\"><a href=\"#一个Canal服务读取多个MySQL实例-docker中操作\" class=\"headerlink\" title=\"一个Canal服务读取多个MySQL实例(docker中操作)\"></a>一个Canal服务读取多个MySQL实例(docker中操作)</h4><pre><code class=\"textmate\">1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181</code></pre>\n<h3 id=\"参考配置-基础版，其他配置参考官网\"><a href=\"#参考配置-基础版，其他配置参考官网\" class=\"headerlink\" title=\"参考配置(基础版，其他配置参考官网)\"></a>参考配置(基础版，其他配置参考官网)</h3><ul>\n<li><p>canal.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181</code></pre>\n</li>\n<li><p>instance.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false</code></pre>\n</li>\n</ul>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ul>\n<li><p>服务都启动成功，客户端拉不到变更日志</p>\n<pre><code class=\"textmate\">注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(&quot;sap_system\\\\..*,user_center\\\\..*&quot;)</code></pre>\n</li>\n<li><p>一个Canal-Service,多个client，运行时报错</p>\n<pre><code class=\"textmate\">改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题</code></pre>\n</li>\n<li><p>zk中记录的点位异常</p>\n<pre><code class=\"textmate\">进入zookeeper安装目录 \ncd /bin\n./zkClient.sh  或  ./zkCli.sh\ndeleteall /otter/canal/destinations/instanceName(canal-admin中配置的instance名称)</code></pre>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><pre><code class=\"textmate\">1.对业务代码无侵入、实时性接近准实时\n2.支持集群，集群基于zk做集群管理\n3.提供多种接入方式、适配器等\n3.不适合做复杂的业务逻辑判断及计算；直接对表数据进行修改，出问题后影响较大</code></pre>\n"},{"title":"ES官方文档笔记","date":"2022-02-15T05:38:00.000Z","_content":"\n- [ElasticSearch官方教程(非最新版)](https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html)\n\n## 集群原理\n\n### 空集群\n\n```textmate\n一个运行中的Elasticsearch实例称为一个节点，而集群是由一个或者多个拥有相同cluster.name配置的节点组成，它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\n\n负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。\n\n作为用户，我们可以将请求发送到集群中的任何节点，包括主节点。每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。\n```\n\n### 集群健康\n\n```textmate\nElasticsearch的集群监控信息中包含了许多的统计数据，其中最为重要的一项就是集群健康，它在status字段中展示为green、yellow或者red。\nGET/_cluster/health\n1.green\n\t所有的主分片和副本分片都正常运行。\n2.yellow\n\t所有的主分片都正常运行，但不是所有的副本分片都正常运行。\n3.red\n\t有主分片没能正常运行。\n```\n\n### 索引\n\n```textmate\n索引实际上是指向一个或者多个物理分片的逻辑命名空间。\n一个 分片 是一个底层的工作单元 ，它仅保存了全部数据中的一部分,一个分片是一个 Lucene 的实例，它本身就是一个完整的搜索引擎。\n索引在默认情况下会被分配5个主分片，我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。\n\nElasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。\n\n一个分片可以是 主分片或者 副本 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。\n\n```\n\n- 添加索引语法\n\n```textmate\nPUT /blogs\n{\n   \"settings\" : {\n      \"number_of_shards\" : 3,  //分片数量\n      \"number_of_replicas\" : 1 //副本数量\n   }\n}\n```\n\n### 故障转移\n\n```textmate\n当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。 但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。\n```\n\n### 水平扩容\n\n```textmate\n拥有三个节点的集群——为了分散负载而对分片进行重新分配\n分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。\n\n\n主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够 存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。\n\n在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群\n```\n\n- 调整副本数量\n\n```textmate\nPUT /blogs/_settings\n{\n   \"number_of_replicas\" : 2\n}\n```\n\n### 故障转移\n\n```textmate\n| Node1 | Node2 | Node3 |\n|1* 2 3 |1 2*  3|1 2 3* |\n*代表主分片\n\n如果关闭Node1,则会失去1主分片，索引不能正常工作，此时集群状态是red;\n其他节点会立即将Node2或Node3上的副本分片提升为主分片，此时集群状态是yellow,该动作是瞬时发生的；\n如果重启Node1,集群可以将缺失的副本分片再次进行分配，如果Node1依然拥有之前的分片，则会尝试重用，仅从主分片复制改动过的数据文件\n```\n\n## 数据输入输出\n\n> 在 Elasticsearch 中， 每个字段的所有数据 都是 默认被索引的 。 即每个字段都有为了快速检索设置的专用倒排索引\n\n### 什么是文档\n\n```textmate\n在 Elasticsearch 中，术语 文档 有着特定的含义。它是指最顶层或者根对象, 这个根对象被序列化成 JSON 并存储到 Elasticsearch 中，指定了唯一 ID;\n\n字段的名字可以是任何合法的字符串，但 不可以 包含英文句号(.)。\n```\n\n### 文档元数据\n\n```textmate\n三个必须的元数据元素：\n  _index: 文档在哪存放\n  _type: 文档表示的对象类别\n  _id: 文档唯一标识\n```\n\n### 索引文档\n\n```textmate\n// 创建文档时使用自定义ID\nPUT /website/blog/123\n{\n  \"title\": \"My first blog entry\",\n  \"text\":  \"Just trying this out...\",\n  \"date\":  \"2014/01/01\"\n}\n\n//创建文档时使用ES自动生成的ID\nPOST /website/blog/\n{\n  \"title\": \"My second blog entry\",\n  \"text\":  \"Still trying this out...\",\n  \"date\":  \"2014/01/01\"\n}\n\n/**\ntips: 自动生成的 ID 是 URL-safe、 基于 Base64 编码且长度为20个字符的 GUID 字符串。 这些 GUID 字符串由可修改的 FlakeID 模式生成，这种模式允许多个节点并行生成唯一 ID ，且互相之间的冲突概率几乎为零。\n**/\n```\n\n### 处理冲突\n\n```textmate\n乐观并发控制\n每个文档都有一个 _version （版本）号，当文档被修改时版本号递增。 Elasticsearch 使用这个 _version 号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。\n```\n\n## 分布式文档存储\n\n### 路由一个文档到一个分片中\n\n```textmate\n计算公式：\nshard = hash(routing) % number_of_primary_shards(主分片的数量)\nrouting是可变值，默认是文档的_id,也可以设置成一个自定义的值。\n这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。\n```\n\n### 主副分片交互\n\n```textmate\n我们可以发送请求到集群中的任一节点。 每个节点都有能力处理任意请求。 每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。\n将所有的请求发送到 Node 1 ，我们将其称为 协调节点(coordinating node) 。\n\n\ntips:当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。\n```\n\n### 新建、索引和删除文档时步骤\n\n```textmate\n以下是在主副分片和任何副本分片上面 成功新建，索引和删除文档所需要的步骤顺序：\n\n1.客户端向 Node 1 发送新建、索引或者删除请求。\n2.节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。\n3.Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。\n```\n\n### 查询文档步骤\n\n```textmate\n以下是从主分片或者副本分片检索文档的步骤顺序：\n\n1、客户端向 Node 1 发送获取请求。\n2、节点使用文档的 _id 来确定文档属于分片 0 。分片 0 的副本分片存在于所有的三个节点上。 在这种情况下，它将请求转发到 Node2。\n3、Node2将文档返回给 Node 1 ，然后将文档返回给客户端。\n\n在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。\n\n在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。\n\n考虑到分页过深以及一次请求太多结果的情况，结果集在返回之前先进行排序。 但请记住一个请求经常跨越多个分片，每个分片都产生自己的排序结果，这些结果需要进行集中排序以保证整体顺序是正确的。\n\n深度分页问题: 在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。\n```\n\n### 更新局部文档步骤\n\n```textmate\n以下是部分更新一个文档的步骤：\n\n1.客户端向 Node 1 发送更新请求。\n2.它将请求转发到主分片所在的 Node 3 。\n3.Node 3 从主分片检索文档，修改 _source 字段中的 JSON ，并且尝试重新索引主分片的文档。 如果文档已经被另一个进程修改，它会重试步骤 3 ，超过 retry_on_conflict 次后放弃。\n4.如果 Node 3 成功地更新文档，它将新版本的文档并行转发到 Node 1 和 Node 2 上的副本分片，重新建立索引。 一旦所有副本分片都返回成功， Node 3 向协调节点也返回成功，协调节点向客户端返回成功。\n\nps: 当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果Elasticsearch仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。\n```\n\n## 分片内部原理\n\n### 倒排索引\n\n```textmate\n倒排索引被写入磁盘后是 不可改变 的:它永远不会修改。 不变性有重要的价值：\n\n1.不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。\n2.一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。\n3.其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。\n4.写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和 需要被缓存到内存的索引的使用量。\n\n当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档 可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。\n```\n\n### 索引与分片的比较\n\n```textmate\n一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个 Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片(Lucene 索引)，然后像 执行分布式检索 提到的那样，合并每个分片的结果到一个全局的结果集。\n```\n\n### 删除和更新\n\n```textmate\n当一个文档被 “删除” 时，它实际上只是在 .del 文件中被 标记 删除。一个被标记删除的文档仍然可以被查询匹配到， 但它会在最终结果被返回前从结果集中移除。\n\n文档更新也是类似的操作方式：当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。 可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。\n```\n\n### 持久化变更\n\n```textmate\nElasticsearch 增加了一个 translog(事务日志)，在每一次对 Elasticsearch 进行操作时均进行了日志记录\n1.一个文档被索引之后，就会被添加到内存缓冲区，并且 追加到了 translog \n2.刷新（refresh）, 缓存被清空但是事务日志不会\n3.事务日志持续积累文档\n4.每隔一段时间—例如 translog 变得越来越大，索引被刷新（flush）；一个新的 translog 被创建，并且一个全量提交被执行\n\t4.1所有在内存缓冲区的文档都被写入一个新的段。\n  4.2缓冲区被清空。\n  4.3一个提交点被写入硬盘。\n  4.4文件系统缓存通过 fsync 被刷新（flush）。\n  4.5老的 translog 被删除。\n```\n\n### Translog安全性\n\n```textmate\n在文件被 fsync 到磁盘前，被写入的文件在重启之后就会丢失。默认 translog 是每 5 秒被 fsync 刷新到硬盘， 或者在每次写请求完成之后执行(e.g. index, delete, update, bulk)。这个过程在主分片和复制分片都会发生。最终， 基本上，这意味着在整个请求被 fsync 到主分片和复制分片的translog之前，你的客户端不会得到一个 200 OK 响应。\n\n在每次请求后都执行一个 fsync 会带来一些性能损失，尽管实践表明这种损失相对较小（特别是bulk导入，它在一次请求中平摊了大量文档的开销）。\n\n但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync 还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。\n\n这个行为可以通过设置 durability 参数为 async 来启用：\nPUT /my_index/_settings\n{\n    \"index.translog.durability\": \"async\",\n    \"index.translog.sync_interval\": \"5s\"\n}\n这个选项可以针对索引单独设置，并且可以动态进行修改。如果你决定使用异步 translog 的话，你需要 保证 在发生crash时，丢失掉 sync_interval 时间段的数据也无所谓。\n```\n\n### 刷新\n\n```textmate\n在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做 refresh 。 默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch 是 近 实时搜索: 文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。\n// 手动刷新数据 \nPOST /_refresh  //刷新所有索引\nPOST /blogs/_refresh  //只刷新blogs索引\n```\n\n### 段合并\n\n```textmate\n目的：\n\t由于自动刷新流程每秒会创建一个新的段 ，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。 每一个段都会消耗文件句柄、内存和cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。\n\tElasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。\n\n流程：\n  1.当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。\n  2.合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。\n  3.合并结束，老的段被删除\n  \ntips:合并大的段需要消耗大量的I/O和CPU资源，默认下会对合并流程进行资源限制\n\noptimeze API(强制合并)\n介绍: optimize API大可看做是 强制合并 API。它会将一个分片强制合并到 max_num_segments 参数指定大小的段数目。 这样做的意图是减少段的数量（通常减少到一个），来提升搜索性能。\ntips: \n\t1.optimize API 不应该 被用在一个活跃的索引————一个正积极更新的索引。后台合并流程已经可以很好地完成工作。\n\t2.使用 optimize API 触发段合并的操作不会受到任何资源上的限制。这可能会消耗掉你节点上全部的I/O资源\n```\n\n## 常用查找语法\n\n### 精确查找(包含，不是等于)\n\n```textmate\n//term查数字\nGET /my_store/products/_search\n{\n    \"query\" : {\n        \"constant_score\" : { \n            \"filter\" : {\n                \"term\" : { \n                    \"price\" : 20\n                }\n            }\n        }\n    }\n}\n\n//term查文本\n原词可能会被分词,构建索引时，需要指定不分析值\n\"index\" : \"not_analyzed\" \n\n//terms匹配多个内容\t\n\n//运行非评分查询(精确查询)时的步骤\n1.查找匹配文档\n2.创建bitset(一个包含 0 和 1 的数组），它描述了哪个文档会包含该 term \n3.迭代bitsets\n4.增量计数\n```\n\n### 组合过滤器\n\n- 布尔过滤器\n\n```textmate\n{\n   \"bool\" : {\n      \"must\" :     [],  //相当于and\n      \"should\" :   [],  //相当于or\n      \"must_not\" : [],  //相当于not\n   }\n}\n```\n\n### 范围\n\n```textmate\n\"range\" : {\n    \"price\" : {\n        \"gte\" : 20,\n        \"lte\" : 40\n    }\n}\n/**\n  gt: > 大于（greater than）\n  lt: < 小于（less than）\n  gte: >= 大于或等于（greater than or equal to）\n  lte: <= 小于或等于（less than or equal to）\n**/\n\n// 特殊用法\n//1.时间计算： 查找时间戳在过去一小时内的所有文档\n\"range\" : {\n    \"timestamp\" : {\n        \"gt\" : \"now-1h\"\n    }\n}\n\"range\" : {\n    \"timestamp\" : {\n        \"gt\" : \"2014-01-01 00:00:00\",\n        \"lt\" : \"2014-01-01 00:00:00||+1M\"  //早于2014年1月1日加1月（2014年2月1日零时）\n    }\n}\n\n//2.字符串范围(效率较低)\n\"range\" : {\n    \"title\" : {\n        \"gte\" : \"a\",\n        \"lt\" :  \"b\"\n    }\n}\n```\n\n### Null值查询\n\n```textmate\n// 存在查询 exist\nGET /my_index/posts/_search\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"exists\" : { \"field\" : \"tags\" }\n            }\n        }\n    }\n}\n\n//不存在查询\nGET /my_index/posts/_search\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\": {\n                \"missing\" : { \"field\" : \"tags\" }\n            }\n        }\n    }\n}\n\n//对象的存在与不存在 \n//如果 first 和 last 都是空，那么 name 这个命名空间才会被认为不存在。\n{  //对象数据\n   \"name\" : {\n      \"first\" : \"John\",\n      \"last\" :  \"Smith\"\n   }\n}\n\n{ //查询语句\n    \"exists\" : { \"field\" : \"name\" }\n}\n\n{ //实际执行的语句\n    \"bool\": {\n        \"should\": [\n            { \"exists\": { \"field\": \"name.first\" }},\n            { \"exists\": { \"field\": \"name.last\" }}\n        ]\n    }\n}\n```\n\n### 缓存\n\n```textmate\n自动缓存\nElasticsearch 会基于使用频次自动缓存查询。如果一个非评分查询在最近的 256 次查询中被使用过（次数取决于查询类型），那么这个查询就会作为缓存的候选。但是，并不是所有的片段都能保证缓存 bitset 。只有那些文档数量超过 10,000 （或超过总文档数量的 3% )才会缓存 bitset 。因为小的片段可以很快的进行搜索和合并，这里缓存的意义不大。\n\n一旦缓存了，非评分计算的 bitset 会一直驻留在缓存中直到它被剔除。剔除规则是基于 LRU 的：一旦缓存满了，最近最少使用的过滤器会被剔除。\n```\n\n## 相关度\n\n### 相关度评分逻辑\n\n```textmate\nLucene（或 Elasticsearch）使用 布尔模型（Boolean model） 查找匹配文档，并用一个名为 实用评分函数（practical scoring function） 的公式来计算相关度。这个公式借鉴了 词频/逆向文档频率（term frequency/inverse document frequency） 和 向量空间模型（vector space model），同时也加入了一些现代的新特性，如协调因子（coordination factor），字段长度归一化（field length normalization），以及词或查询语句权重提升。\n```\n\n#### 布尔模型\n\n```textmate\n布尔模型（Boolean Model）只是在查询中使用 AND、OR 和 NOT（与、或和非）这样的条件来查找匹配的文档，以下查询：\n\nfull AND text AND search AND (elasticsearch OR lucene)\n会将所有包括词 full 、 text 和 search ，以及 elasticsearch 或 lucene 的文档作为结果集。\n```\n\n\n\n#### 词频/逆向文档频率(TF/IDF)\n\n```textmate\n当匹配到一组文档后，需要根据相关度排序这些文档，不是所有的文档都包含所有词，有些词比其他的词更重要。一个文档的相关度评分部分取决于每个查询词在文档中的 权重 。\n\n词频\n词在文档中出现的频度越高，权重越高 。\n\n逆向文档频率\n词在集合所有文档里出现的频次越高，权重越低 \n```\n\n#### 字段长度归一\n\n```textmate\n字段的长度越短，字段的权重越高。\n字段长度归一值(norm)\n```\n\n#### 组合使用\n\n```textmate\n词频（term frequency）、逆向文档频率（inverse document frequency）和字段长度归一值（field-length norm）——是在索引时计算并存储的。最后将它们结合在一起计算单个词在特定文档中的权重 。\n```\n\n### 脚本评分\n\n```textmate\n如果所有 function_score 内置的函数都无法满足应用场景，可以使用 script_score 函数自行实现逻辑\nElasticsearch 里使用 Groovy 作为默认的脚本语言\n例子:\n入参: \n\tprice和margin变量可以分别从文档中提取\n\tthreshold、discount、target是作为参数params传入的\n\nGET /_search\n{\n  \"function_score\": {\n    \"functions\": [\n      { ...location clause... }, \n      { ...price clause... }, \n      {\n        \"script_score\": {\n          \"params\": { \n            \"threshold\": 80,\n            \"discount\": 0.1,\n            \"target\": 10\n          },\n          \"script\": \"price  = doc['price'].value; margin = doc['margin'].value;\n          if (price < threshold) { return price * margin / target };\n          return price * (1 - discount) * margin / target;\" \n        }\n      }\n    ]\n  }\n}\n\ntips: \n  1.将这些变量作为参数 params 传递，我们可以查询时动态改变脚本无须重新编译。\n  2.JSON 不能接受内嵌的换行符，脚本中的换行符可以用 \\n 或 ; 符号替代\n```\n\n## 人类语言处理\n\n```textmate\n分词器\n  standard(标准分词器)、english(英文分词器)、icu(亚洲语言分词器)\n \n错误拼写匹配-语音匹配\n\t搜索发音相似的词，即使他们的拼写不同。 Soundex算法\n```\n\n## 聚合\n\n### 主要概念\n\n```textmate\n桶（Buckets）\n\t满足特定条件的文档的集合\n指标（Metrics）\n\t对桶内的文档进行统计计算\n每个聚合都是一个或者多个桶和零个或者多个指标的组合\n\n桶在概念上类似于 SQL 的分组（GROUP BY），而指标则类似于 COUNT() 、 SUM() 、 MAX() 等统计方法。\n\n例：\nSELECT COUNT(color)  FROM table GROUP BY color;\n1.COUNT(color) 相当于指标。\n2.GROUP BY color 相当于桶。\n```\n\n### 桶\n\n```textmate\n桶 简单来说就是满足特定条件的文档的集合\n1.当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件。如果匹配到，文档将放入相应的桶并接着进行聚合操作。\n2.桶也可以被嵌套在其他桶里面，提供层次化的或者有条件的划分方案。\n3.Elasticsearch 有很多种类型的桶，能让你通过很多种方式来划分文档（时间、最受欢迎的词、年龄区间、地理位置等等）。其实根本上都是通过同样的原理进行操作：基于条件来划分文档。\n```\n\n### 指标\n\n```textmate\n桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的的手段：它提供了一种给文档分组的方法来让我们可以计算感兴趣的指标。\n\n大多数 指标 是简单的数学运算（例如最小值、平均值、最大值，还有汇总），这些是通过文档的值来计算。在实践中，指标能让你计算像平均薪资、最高出售价格、95%的查询延迟这样的数据。\n\n聚合 \n\t由桶和指标组成的。 聚合可能只有一个桶，可能只有一个指标，或者可能两个都有。也有可能有一些桶嵌套在其他桶里面。\n```\n\n### 条形图\n\n```textmate\n聚合还有一个令人激动的特性就是能够十分容易地将它们转换成图表和图形。\n例:\nGET /cars/transactions/_search\n{\n   \"size\" : 0,\n   \"aggs\":{\n      \"price\":{\n         \"histogram\":{\n            \"field\": \"price\",\n            \"interval\": 20000\n         },\n         \"aggs\":{\n            \"revenue\": {\n               \"sum\": { \n                 \"field\" : \"price\"\n               }\n             }\n         }\n      }\n   }\n}\n\n//响应结果-直方图\n{\n...\n   \"aggregations\": {\n      \"price\": {\n         \"buckets\": [\n            {\n               \"key\": 0,\n               \"doc_count\": 3,\n               \"revenue\": {\n                  \"value\": 37000\n               }\n            },\n            {\n               \"key\": 20000,\n               \"doc_count\": 4,\n               \"revenue\": {\n                  \"value\": 95000\n               }\n            }\n         ]\n      }\n   }\n}\n```\n\n### 按时间统计\n\n```textmate\n//查询脚本\nGET /cars/transactions/_search\n{\n   \"size\" : 0,\n   \"aggs\": {\n      \"sales\": {\n         \"date_histogram\": {\n            \"field\": \"sold\",\n            \"interval\": \"month\", \n            \"format\": \"yyyy-MM-dd\",\n           \t\"min_doc_count\" : 0,    //强制返回空 buckets。\n            \"extended_bounds\" : {   //强制返回整年。\n                \"min\" : \"2014-01-01\",\n                \"max\" : \"2014-12-31\"\n            }\n         }\n      }\n   }\n}\n\n//返回结果\n{\n   ...\n   \"aggregations\": {\n      \"sales\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2014-01-01\",\n               \"key\": 1388534400000,\n               \"doc_count\": 1\n            },\n            {\n               \"key_as_string\": \"2014-02-01\",\n               \"key\": 1391212800000,\n               \"doc_count\": 1\n            }\n         ]\n...\n}\n```\n\n### Doc Values\n\n```textmate\n1.聚合使用一个叫 doc values 的数据结构。Doc values 可以使聚合更快、更高效并且内存友好\n2.Doc values 的存在是因为倒排索引只对某些操作是高效的。 倒排索引的优势 在于查找包含某个项的文档，而对于从另外一个方向的相反操作并不高效，即：确定哪些项是否存在单个文档里，聚合需要这种次级的访问模式。\n3.Doc Values 是在索引时与 倒排索引 同时生成。也就是说 Doc Values 和 倒排索引 一样，基于 Segement 生成并且是不可变的。同时 Doc Values 和 倒排索引 一样序列化到磁盘，这样对性能和扩展性有很大帮助。\n\nDoc Values 通过序列化把数据结构持久化到磁盘，我们可以充分利用操作系统的内存，而不是 JVM 的 Heap 。 当 working set 远小于系统的可用内存，系统会自动将 Doc Values 驻留在内存中，使得其读写十分快速；不过，当其远大于可用内存时，系统会根据需要从磁盘读取 Doc Values，然后选择性放到分页缓存中。\n\n原理:\n\tDoc values 通过转置两者间的关系来解决这个问题。倒排索引将词项映射到包含它们的文档，doc values 将文档映射到它们包含的词项\n\t\n用途:\nDoc values 不仅可以用于聚合。 任何需要查找某个文档包含的值的操作都必须使用它。 除了聚合，还包括排序，访问字段值的脚本，父子关系处理\n```\n\n## 地理位置\n\n```textmate\nElasticsearch 提供了 两种表示地理位置的方式：\n1.用纬度－经度表示的坐标点使用 geo_point 字段类型\n2.用GeoJSON 格式定义的复杂地理形状，使用 geo_shape 字段类型。\n\nGeo-points 允许你找到距离另一个坐标点一定范围内的坐标点、计算出两点之间的距离来排序或进行相关性打分、或者聚合到显示在地图上的一个网格。另一方面，Geo-shapes 纯粹是用来过滤的。它们可以用来判断两个地理形状是否有重合或者某个地理形状是否完全包含了其他地理形状。\n\nGeohashes 是一种将经纬度坐标（ lat/lon ）编码成字符串的方式。这么做的初衷只是为了让地理位置在 url 上呈现的形式更加友好，但现在 geohashes 已经变成一种在数据库中有效索引地理坐标点和地理形状的方式。\nGeohashes 把整个世界分为 32 个单元的格子 —— 4 行 8 列 —— 每一个格子都用一个字母或者数字标识。\n```\n\n## 数据建模\n\n```textmate\nElasticsearch建模\n\t关联关系处理 、 嵌套对象 和 父-子关系文档 \n另外ES支持多种扩容方式\n```\n\n## 运维\n\n```textmate\n支持动态更新的参数\nhttps://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-update-settings.html\n集群备份、快照恢复\n```\n\n\n\n","source":"_posts/backend/storage/es.md","raw":"---\ntitle: ES官方文档笔记\ndate: 2022-02-15 13:38:00\ntags:\n- es\ncategories:\n- 存储\n---\n\n- [ElasticSearch官方教程(非最新版)](https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html)\n\n## 集群原理\n\n### 空集群\n\n```textmate\n一个运行中的Elasticsearch实例称为一个节点，而集群是由一个或者多个拥有相同cluster.name配置的节点组成，它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\n\n负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。\n\n作为用户，我们可以将请求发送到集群中的任何节点，包括主节点。每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。\n```\n\n### 集群健康\n\n```textmate\nElasticsearch的集群监控信息中包含了许多的统计数据，其中最为重要的一项就是集群健康，它在status字段中展示为green、yellow或者red。\nGET/_cluster/health\n1.green\n\t所有的主分片和副本分片都正常运行。\n2.yellow\n\t所有的主分片都正常运行，但不是所有的副本分片都正常运行。\n3.red\n\t有主分片没能正常运行。\n```\n\n### 索引\n\n```textmate\n索引实际上是指向一个或者多个物理分片的逻辑命名空间。\n一个 分片 是一个底层的工作单元 ，它仅保存了全部数据中的一部分,一个分片是一个 Lucene 的实例，它本身就是一个完整的搜索引擎。\n索引在默认情况下会被分配5个主分片，我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。\n\nElasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。\n\n一个分片可以是 主分片或者 副本 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。\n\n```\n\n- 添加索引语法\n\n```textmate\nPUT /blogs\n{\n   \"settings\" : {\n      \"number_of_shards\" : 3,  //分片数量\n      \"number_of_replicas\" : 1 //副本数量\n   }\n}\n```\n\n### 故障转移\n\n```textmate\n当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。 但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。\n```\n\n### 水平扩容\n\n```textmate\n拥有三个节点的集群——为了分散负载而对分片进行重新分配\n分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。\n\n\n主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够 存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。\n\n在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群\n```\n\n- 调整副本数量\n\n```textmate\nPUT /blogs/_settings\n{\n   \"number_of_replicas\" : 2\n}\n```\n\n### 故障转移\n\n```textmate\n| Node1 | Node2 | Node3 |\n|1* 2 3 |1 2*  3|1 2 3* |\n*代表主分片\n\n如果关闭Node1,则会失去1主分片，索引不能正常工作，此时集群状态是red;\n其他节点会立即将Node2或Node3上的副本分片提升为主分片，此时集群状态是yellow,该动作是瞬时发生的；\n如果重启Node1,集群可以将缺失的副本分片再次进行分配，如果Node1依然拥有之前的分片，则会尝试重用，仅从主分片复制改动过的数据文件\n```\n\n## 数据输入输出\n\n> 在 Elasticsearch 中， 每个字段的所有数据 都是 默认被索引的 。 即每个字段都有为了快速检索设置的专用倒排索引\n\n### 什么是文档\n\n```textmate\n在 Elasticsearch 中，术语 文档 有着特定的含义。它是指最顶层或者根对象, 这个根对象被序列化成 JSON 并存储到 Elasticsearch 中，指定了唯一 ID;\n\n字段的名字可以是任何合法的字符串，但 不可以 包含英文句号(.)。\n```\n\n### 文档元数据\n\n```textmate\n三个必须的元数据元素：\n  _index: 文档在哪存放\n  _type: 文档表示的对象类别\n  _id: 文档唯一标识\n```\n\n### 索引文档\n\n```textmate\n// 创建文档时使用自定义ID\nPUT /website/blog/123\n{\n  \"title\": \"My first blog entry\",\n  \"text\":  \"Just trying this out...\",\n  \"date\":  \"2014/01/01\"\n}\n\n//创建文档时使用ES自动生成的ID\nPOST /website/blog/\n{\n  \"title\": \"My second blog entry\",\n  \"text\":  \"Still trying this out...\",\n  \"date\":  \"2014/01/01\"\n}\n\n/**\ntips: 自动生成的 ID 是 URL-safe、 基于 Base64 编码且长度为20个字符的 GUID 字符串。 这些 GUID 字符串由可修改的 FlakeID 模式生成，这种模式允许多个节点并行生成唯一 ID ，且互相之间的冲突概率几乎为零。\n**/\n```\n\n### 处理冲突\n\n```textmate\n乐观并发控制\n每个文档都有一个 _version （版本）号，当文档被修改时版本号递增。 Elasticsearch 使用这个 _version 号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。\n```\n\n## 分布式文档存储\n\n### 路由一个文档到一个分片中\n\n```textmate\n计算公式：\nshard = hash(routing) % number_of_primary_shards(主分片的数量)\nrouting是可变值，默认是文档的_id,也可以设置成一个自定义的值。\n这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。\n```\n\n### 主副分片交互\n\n```textmate\n我们可以发送请求到集群中的任一节点。 每个节点都有能力处理任意请求。 每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。\n将所有的请求发送到 Node 1 ，我们将其称为 协调节点(coordinating node) 。\n\n\ntips:当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。\n```\n\n### 新建、索引和删除文档时步骤\n\n```textmate\n以下是在主副分片和任何副本分片上面 成功新建，索引和删除文档所需要的步骤顺序：\n\n1.客户端向 Node 1 发送新建、索引或者删除请求。\n2.节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。\n3.Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。\n```\n\n### 查询文档步骤\n\n```textmate\n以下是从主分片或者副本分片检索文档的步骤顺序：\n\n1、客户端向 Node 1 发送获取请求。\n2、节点使用文档的 _id 来确定文档属于分片 0 。分片 0 的副本分片存在于所有的三个节点上。 在这种情况下，它将请求转发到 Node2。\n3、Node2将文档返回给 Node 1 ，然后将文档返回给客户端。\n\n在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。\n\n在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。\n\n考虑到分页过深以及一次请求太多结果的情况，结果集在返回之前先进行排序。 但请记住一个请求经常跨越多个分片，每个分片都产生自己的排序结果，这些结果需要进行集中排序以保证整体顺序是正确的。\n\n深度分页问题: 在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。\n```\n\n### 更新局部文档步骤\n\n```textmate\n以下是部分更新一个文档的步骤：\n\n1.客户端向 Node 1 发送更新请求。\n2.它将请求转发到主分片所在的 Node 3 。\n3.Node 3 从主分片检索文档，修改 _source 字段中的 JSON ，并且尝试重新索引主分片的文档。 如果文档已经被另一个进程修改，它会重试步骤 3 ，超过 retry_on_conflict 次后放弃。\n4.如果 Node 3 成功地更新文档，它将新版本的文档并行转发到 Node 1 和 Node 2 上的副本分片，重新建立索引。 一旦所有副本分片都返回成功， Node 3 向协调节点也返回成功，协调节点向客户端返回成功。\n\nps: 当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果Elasticsearch仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。\n```\n\n## 分片内部原理\n\n### 倒排索引\n\n```textmate\n倒排索引被写入磁盘后是 不可改变 的:它永远不会修改。 不变性有重要的价值：\n\n1.不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。\n2.一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。\n3.其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。\n4.写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和 需要被缓存到内存的索引的使用量。\n\n当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档 可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。\n```\n\n### 索引与分片的比较\n\n```textmate\n一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个 Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片(Lucene 索引)，然后像 执行分布式检索 提到的那样，合并每个分片的结果到一个全局的结果集。\n```\n\n### 删除和更新\n\n```textmate\n当一个文档被 “删除” 时，它实际上只是在 .del 文件中被 标记 删除。一个被标记删除的文档仍然可以被查询匹配到， 但它会在最终结果被返回前从结果集中移除。\n\n文档更新也是类似的操作方式：当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。 可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。\n```\n\n### 持久化变更\n\n```textmate\nElasticsearch 增加了一个 translog(事务日志)，在每一次对 Elasticsearch 进行操作时均进行了日志记录\n1.一个文档被索引之后，就会被添加到内存缓冲区，并且 追加到了 translog \n2.刷新（refresh）, 缓存被清空但是事务日志不会\n3.事务日志持续积累文档\n4.每隔一段时间—例如 translog 变得越来越大，索引被刷新（flush）；一个新的 translog 被创建，并且一个全量提交被执行\n\t4.1所有在内存缓冲区的文档都被写入一个新的段。\n  4.2缓冲区被清空。\n  4.3一个提交点被写入硬盘。\n  4.4文件系统缓存通过 fsync 被刷新（flush）。\n  4.5老的 translog 被删除。\n```\n\n### Translog安全性\n\n```textmate\n在文件被 fsync 到磁盘前，被写入的文件在重启之后就会丢失。默认 translog 是每 5 秒被 fsync 刷新到硬盘， 或者在每次写请求完成之后执行(e.g. index, delete, update, bulk)。这个过程在主分片和复制分片都会发生。最终， 基本上，这意味着在整个请求被 fsync 到主分片和复制分片的translog之前，你的客户端不会得到一个 200 OK 响应。\n\n在每次请求后都执行一个 fsync 会带来一些性能损失，尽管实践表明这种损失相对较小（特别是bulk导入，它在一次请求中平摊了大量文档的开销）。\n\n但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync 还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。\n\n这个行为可以通过设置 durability 参数为 async 来启用：\nPUT /my_index/_settings\n{\n    \"index.translog.durability\": \"async\",\n    \"index.translog.sync_interval\": \"5s\"\n}\n这个选项可以针对索引单独设置，并且可以动态进行修改。如果你决定使用异步 translog 的话，你需要 保证 在发生crash时，丢失掉 sync_interval 时间段的数据也无所谓。\n```\n\n### 刷新\n\n```textmate\n在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做 refresh 。 默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch 是 近 实时搜索: 文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。\n// 手动刷新数据 \nPOST /_refresh  //刷新所有索引\nPOST /blogs/_refresh  //只刷新blogs索引\n```\n\n### 段合并\n\n```textmate\n目的：\n\t由于自动刷新流程每秒会创建一个新的段 ，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。 每一个段都会消耗文件句柄、内存和cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。\n\tElasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。\n\n流程：\n  1.当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。\n  2.合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。\n  3.合并结束，老的段被删除\n  \ntips:合并大的段需要消耗大量的I/O和CPU资源，默认下会对合并流程进行资源限制\n\noptimeze API(强制合并)\n介绍: optimize API大可看做是 强制合并 API。它会将一个分片强制合并到 max_num_segments 参数指定大小的段数目。 这样做的意图是减少段的数量（通常减少到一个），来提升搜索性能。\ntips: \n\t1.optimize API 不应该 被用在一个活跃的索引————一个正积极更新的索引。后台合并流程已经可以很好地完成工作。\n\t2.使用 optimize API 触发段合并的操作不会受到任何资源上的限制。这可能会消耗掉你节点上全部的I/O资源\n```\n\n## 常用查找语法\n\n### 精确查找(包含，不是等于)\n\n```textmate\n//term查数字\nGET /my_store/products/_search\n{\n    \"query\" : {\n        \"constant_score\" : { \n            \"filter\" : {\n                \"term\" : { \n                    \"price\" : 20\n                }\n            }\n        }\n    }\n}\n\n//term查文本\n原词可能会被分词,构建索引时，需要指定不分析值\n\"index\" : \"not_analyzed\" \n\n//terms匹配多个内容\t\n\n//运行非评分查询(精确查询)时的步骤\n1.查找匹配文档\n2.创建bitset(一个包含 0 和 1 的数组），它描述了哪个文档会包含该 term \n3.迭代bitsets\n4.增量计数\n```\n\n### 组合过滤器\n\n- 布尔过滤器\n\n```textmate\n{\n   \"bool\" : {\n      \"must\" :     [],  //相当于and\n      \"should\" :   [],  //相当于or\n      \"must_not\" : [],  //相当于not\n   }\n}\n```\n\n### 范围\n\n```textmate\n\"range\" : {\n    \"price\" : {\n        \"gte\" : 20,\n        \"lte\" : 40\n    }\n}\n/**\n  gt: > 大于（greater than）\n  lt: < 小于（less than）\n  gte: >= 大于或等于（greater than or equal to）\n  lte: <= 小于或等于（less than or equal to）\n**/\n\n// 特殊用法\n//1.时间计算： 查找时间戳在过去一小时内的所有文档\n\"range\" : {\n    \"timestamp\" : {\n        \"gt\" : \"now-1h\"\n    }\n}\n\"range\" : {\n    \"timestamp\" : {\n        \"gt\" : \"2014-01-01 00:00:00\",\n        \"lt\" : \"2014-01-01 00:00:00||+1M\"  //早于2014年1月1日加1月（2014年2月1日零时）\n    }\n}\n\n//2.字符串范围(效率较低)\n\"range\" : {\n    \"title\" : {\n        \"gte\" : \"a\",\n        \"lt\" :  \"b\"\n    }\n}\n```\n\n### Null值查询\n\n```textmate\n// 存在查询 exist\nGET /my_index/posts/_search\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"exists\" : { \"field\" : \"tags\" }\n            }\n        }\n    }\n}\n\n//不存在查询\nGET /my_index/posts/_search\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\": {\n                \"missing\" : { \"field\" : \"tags\" }\n            }\n        }\n    }\n}\n\n//对象的存在与不存在 \n//如果 first 和 last 都是空，那么 name 这个命名空间才会被认为不存在。\n{  //对象数据\n   \"name\" : {\n      \"first\" : \"John\",\n      \"last\" :  \"Smith\"\n   }\n}\n\n{ //查询语句\n    \"exists\" : { \"field\" : \"name\" }\n}\n\n{ //实际执行的语句\n    \"bool\": {\n        \"should\": [\n            { \"exists\": { \"field\": \"name.first\" }},\n            { \"exists\": { \"field\": \"name.last\" }}\n        ]\n    }\n}\n```\n\n### 缓存\n\n```textmate\n自动缓存\nElasticsearch 会基于使用频次自动缓存查询。如果一个非评分查询在最近的 256 次查询中被使用过（次数取决于查询类型），那么这个查询就会作为缓存的候选。但是，并不是所有的片段都能保证缓存 bitset 。只有那些文档数量超过 10,000 （或超过总文档数量的 3% )才会缓存 bitset 。因为小的片段可以很快的进行搜索和合并，这里缓存的意义不大。\n\n一旦缓存了，非评分计算的 bitset 会一直驻留在缓存中直到它被剔除。剔除规则是基于 LRU 的：一旦缓存满了，最近最少使用的过滤器会被剔除。\n```\n\n## 相关度\n\n### 相关度评分逻辑\n\n```textmate\nLucene（或 Elasticsearch）使用 布尔模型（Boolean model） 查找匹配文档，并用一个名为 实用评分函数（practical scoring function） 的公式来计算相关度。这个公式借鉴了 词频/逆向文档频率（term frequency/inverse document frequency） 和 向量空间模型（vector space model），同时也加入了一些现代的新特性，如协调因子（coordination factor），字段长度归一化（field length normalization），以及词或查询语句权重提升。\n```\n\n#### 布尔模型\n\n```textmate\n布尔模型（Boolean Model）只是在查询中使用 AND、OR 和 NOT（与、或和非）这样的条件来查找匹配的文档，以下查询：\n\nfull AND text AND search AND (elasticsearch OR lucene)\n会将所有包括词 full 、 text 和 search ，以及 elasticsearch 或 lucene 的文档作为结果集。\n```\n\n\n\n#### 词频/逆向文档频率(TF/IDF)\n\n```textmate\n当匹配到一组文档后，需要根据相关度排序这些文档，不是所有的文档都包含所有词，有些词比其他的词更重要。一个文档的相关度评分部分取决于每个查询词在文档中的 权重 。\n\n词频\n词在文档中出现的频度越高，权重越高 。\n\n逆向文档频率\n词在集合所有文档里出现的频次越高，权重越低 \n```\n\n#### 字段长度归一\n\n```textmate\n字段的长度越短，字段的权重越高。\n字段长度归一值(norm)\n```\n\n#### 组合使用\n\n```textmate\n词频（term frequency）、逆向文档频率（inverse document frequency）和字段长度归一值（field-length norm）——是在索引时计算并存储的。最后将它们结合在一起计算单个词在特定文档中的权重 。\n```\n\n### 脚本评分\n\n```textmate\n如果所有 function_score 内置的函数都无法满足应用场景，可以使用 script_score 函数自行实现逻辑\nElasticsearch 里使用 Groovy 作为默认的脚本语言\n例子:\n入参: \n\tprice和margin变量可以分别从文档中提取\n\tthreshold、discount、target是作为参数params传入的\n\nGET /_search\n{\n  \"function_score\": {\n    \"functions\": [\n      { ...location clause... }, \n      { ...price clause... }, \n      {\n        \"script_score\": {\n          \"params\": { \n            \"threshold\": 80,\n            \"discount\": 0.1,\n            \"target\": 10\n          },\n          \"script\": \"price  = doc['price'].value; margin = doc['margin'].value;\n          if (price < threshold) { return price * margin / target };\n          return price * (1 - discount) * margin / target;\" \n        }\n      }\n    ]\n  }\n}\n\ntips: \n  1.将这些变量作为参数 params 传递，我们可以查询时动态改变脚本无须重新编译。\n  2.JSON 不能接受内嵌的换行符，脚本中的换行符可以用 \\n 或 ; 符号替代\n```\n\n## 人类语言处理\n\n```textmate\n分词器\n  standard(标准分词器)、english(英文分词器)、icu(亚洲语言分词器)\n \n错误拼写匹配-语音匹配\n\t搜索发音相似的词，即使他们的拼写不同。 Soundex算法\n```\n\n## 聚合\n\n### 主要概念\n\n```textmate\n桶（Buckets）\n\t满足特定条件的文档的集合\n指标（Metrics）\n\t对桶内的文档进行统计计算\n每个聚合都是一个或者多个桶和零个或者多个指标的组合\n\n桶在概念上类似于 SQL 的分组（GROUP BY），而指标则类似于 COUNT() 、 SUM() 、 MAX() 等统计方法。\n\n例：\nSELECT COUNT(color)  FROM table GROUP BY color;\n1.COUNT(color) 相当于指标。\n2.GROUP BY color 相当于桶。\n```\n\n### 桶\n\n```textmate\n桶 简单来说就是满足特定条件的文档的集合\n1.当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件。如果匹配到，文档将放入相应的桶并接着进行聚合操作。\n2.桶也可以被嵌套在其他桶里面，提供层次化的或者有条件的划分方案。\n3.Elasticsearch 有很多种类型的桶，能让你通过很多种方式来划分文档（时间、最受欢迎的词、年龄区间、地理位置等等）。其实根本上都是通过同样的原理进行操作：基于条件来划分文档。\n```\n\n### 指标\n\n```textmate\n桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的的手段：它提供了一种给文档分组的方法来让我们可以计算感兴趣的指标。\n\n大多数 指标 是简单的数学运算（例如最小值、平均值、最大值，还有汇总），这些是通过文档的值来计算。在实践中，指标能让你计算像平均薪资、最高出售价格、95%的查询延迟这样的数据。\n\n聚合 \n\t由桶和指标组成的。 聚合可能只有一个桶，可能只有一个指标，或者可能两个都有。也有可能有一些桶嵌套在其他桶里面。\n```\n\n### 条形图\n\n```textmate\n聚合还有一个令人激动的特性就是能够十分容易地将它们转换成图表和图形。\n例:\nGET /cars/transactions/_search\n{\n   \"size\" : 0,\n   \"aggs\":{\n      \"price\":{\n         \"histogram\":{\n            \"field\": \"price\",\n            \"interval\": 20000\n         },\n         \"aggs\":{\n            \"revenue\": {\n               \"sum\": { \n                 \"field\" : \"price\"\n               }\n             }\n         }\n      }\n   }\n}\n\n//响应结果-直方图\n{\n...\n   \"aggregations\": {\n      \"price\": {\n         \"buckets\": [\n            {\n               \"key\": 0,\n               \"doc_count\": 3,\n               \"revenue\": {\n                  \"value\": 37000\n               }\n            },\n            {\n               \"key\": 20000,\n               \"doc_count\": 4,\n               \"revenue\": {\n                  \"value\": 95000\n               }\n            }\n         ]\n      }\n   }\n}\n```\n\n### 按时间统计\n\n```textmate\n//查询脚本\nGET /cars/transactions/_search\n{\n   \"size\" : 0,\n   \"aggs\": {\n      \"sales\": {\n         \"date_histogram\": {\n            \"field\": \"sold\",\n            \"interval\": \"month\", \n            \"format\": \"yyyy-MM-dd\",\n           \t\"min_doc_count\" : 0,    //强制返回空 buckets。\n            \"extended_bounds\" : {   //强制返回整年。\n                \"min\" : \"2014-01-01\",\n                \"max\" : \"2014-12-31\"\n            }\n         }\n      }\n   }\n}\n\n//返回结果\n{\n   ...\n   \"aggregations\": {\n      \"sales\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2014-01-01\",\n               \"key\": 1388534400000,\n               \"doc_count\": 1\n            },\n            {\n               \"key_as_string\": \"2014-02-01\",\n               \"key\": 1391212800000,\n               \"doc_count\": 1\n            }\n         ]\n...\n}\n```\n\n### Doc Values\n\n```textmate\n1.聚合使用一个叫 doc values 的数据结构。Doc values 可以使聚合更快、更高效并且内存友好\n2.Doc values 的存在是因为倒排索引只对某些操作是高效的。 倒排索引的优势 在于查找包含某个项的文档，而对于从另外一个方向的相反操作并不高效，即：确定哪些项是否存在单个文档里，聚合需要这种次级的访问模式。\n3.Doc Values 是在索引时与 倒排索引 同时生成。也就是说 Doc Values 和 倒排索引 一样，基于 Segement 生成并且是不可变的。同时 Doc Values 和 倒排索引 一样序列化到磁盘，这样对性能和扩展性有很大帮助。\n\nDoc Values 通过序列化把数据结构持久化到磁盘，我们可以充分利用操作系统的内存，而不是 JVM 的 Heap 。 当 working set 远小于系统的可用内存，系统会自动将 Doc Values 驻留在内存中，使得其读写十分快速；不过，当其远大于可用内存时，系统会根据需要从磁盘读取 Doc Values，然后选择性放到分页缓存中。\n\n原理:\n\tDoc values 通过转置两者间的关系来解决这个问题。倒排索引将词项映射到包含它们的文档，doc values 将文档映射到它们包含的词项\n\t\n用途:\nDoc values 不仅可以用于聚合。 任何需要查找某个文档包含的值的操作都必须使用它。 除了聚合，还包括排序，访问字段值的脚本，父子关系处理\n```\n\n## 地理位置\n\n```textmate\nElasticsearch 提供了 两种表示地理位置的方式：\n1.用纬度－经度表示的坐标点使用 geo_point 字段类型\n2.用GeoJSON 格式定义的复杂地理形状，使用 geo_shape 字段类型。\n\nGeo-points 允许你找到距离另一个坐标点一定范围内的坐标点、计算出两点之间的距离来排序或进行相关性打分、或者聚合到显示在地图上的一个网格。另一方面，Geo-shapes 纯粹是用来过滤的。它们可以用来判断两个地理形状是否有重合或者某个地理形状是否完全包含了其他地理形状。\n\nGeohashes 是一种将经纬度坐标（ lat/lon ）编码成字符串的方式。这么做的初衷只是为了让地理位置在 url 上呈现的形式更加友好，但现在 geohashes 已经变成一种在数据库中有效索引地理坐标点和地理形状的方式。\nGeohashes 把整个世界分为 32 个单元的格子 —— 4 行 8 列 —— 每一个格子都用一个字母或者数字标识。\n```\n\n## 数据建模\n\n```textmate\nElasticsearch建模\n\t关联关系处理 、 嵌套对象 和 父-子关系文档 \n另外ES支持多种扩容方式\n```\n\n## 运维\n\n```textmate\n支持动态更新的参数\nhttps://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-update-settings.html\n集群备份、快照恢复\n```\n\n\n\n","slug":"backend/storage/es","published":1,"updated":"2022-02-15T05:45:21.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry0002pjrnvdpkfgppf","content":"<ul>\n<li><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html\">ElasticSearch官方教程(非最新版)</a></li>\n</ul>\n<h2 id=\"集群原理\"><a href=\"#集群原理\" class=\"headerlink\" title=\"集群原理\"></a>集群原理</h2><h3 id=\"空集群\"><a href=\"#空集群\" class=\"headerlink\" title=\"空集群\"></a>空集群</h3><pre><code class=\"textmate\">一个运行中的Elasticsearch实例称为一个节点，而集群是由一个或者多个拥有相同cluster.name配置的节点组成，它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\n\n负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。\n\n作为用户，我们可以将请求发送到集群中的任何节点，包括主节点。每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。</code></pre>\n<h3 id=\"集群健康\"><a href=\"#集群健康\" class=\"headerlink\" title=\"集群健康\"></a>集群健康</h3><pre><code class=\"textmate\">Elasticsearch的集群监控信息中包含了许多的统计数据，其中最为重要的一项就是集群健康，它在status字段中展示为green、yellow或者red。\nGET/_cluster/health\n1.green\n    所有的主分片和副本分片都正常运行。\n2.yellow\n    所有的主分片都正常运行，但不是所有的副本分片都正常运行。\n3.red\n    有主分片没能正常运行。</code></pre>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><pre><code class=\"textmate\">索引实际上是指向一个或者多个物理分片的逻辑命名空间。\n一个 分片 是一个底层的工作单元 ，它仅保存了全部数据中的一部分,一个分片是一个 Lucene 的实例，它本身就是一个完整的搜索引擎。\n索引在默认情况下会被分配5个主分片，我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。\n\nElasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。\n\n一个分片可以是 主分片或者 副本 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。\n</code></pre>\n<ul>\n<li>添加索引语法</li>\n</ul>\n<pre><code class=\"textmate\">PUT /blogs\n&#123;\n   &quot;settings&quot; : &#123;\n      &quot;number_of_shards&quot; : 3,  //分片数量\n      &quot;number_of_replicas&quot; : 1 //副本数量\n   &#125;\n&#125;</code></pre>\n<h3 id=\"故障转移\"><a href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h3><pre><code class=\"textmate\">当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。 但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。</code></pre>\n<h3 id=\"水平扩容\"><a href=\"#水平扩容\" class=\"headerlink\" title=\"水平扩容\"></a>水平扩容</h3><pre><code class=\"textmate\">拥有三个节点的集群——为了分散负载而对分片进行重新分配\n分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。\n\n\n主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够 存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。\n\n在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群</code></pre>\n<ul>\n<li>调整副本数量</li>\n</ul>\n<pre><code class=\"textmate\">PUT /blogs/_settings\n&#123;\n   &quot;number_of_replicas&quot; : 2\n&#125;</code></pre>\n<h3 id=\"故障转移-1\"><a href=\"#故障转移-1\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h3><pre><code class=\"textmate\">| Node1 | Node2 | Node3 |\n|1* 2 3 |1 2*  3|1 2 3* |\n*代表主分片\n\n如果关闭Node1,则会失去1主分片，索引不能正常工作，此时集群状态是red;\n其他节点会立即将Node2或Node3上的副本分片提升为主分片，此时集群状态是yellow,该动作是瞬时发生的；\n如果重启Node1,集群可以将缺失的副本分片再次进行分配，如果Node1依然拥有之前的分片，则会尝试重用，仅从主分片复制改动过的数据文件</code></pre>\n<h2 id=\"数据输入输出\"><a href=\"#数据输入输出\" class=\"headerlink\" title=\"数据输入输出\"></a>数据输入输出</h2><blockquote>\n<p>在 Elasticsearch 中， 每个字段的所有数据 都是 默认被索引的 。 即每个字段都有为了快速检索设置的专用倒排索引</p>\n</blockquote>\n<h3 id=\"什么是文档\"><a href=\"#什么是文档\" class=\"headerlink\" title=\"什么是文档\"></a>什么是文档</h3><pre><code class=\"textmate\">在 Elasticsearch 中，术语 文档 有着特定的含义。它是指最顶层或者根对象, 这个根对象被序列化成 JSON 并存储到 Elasticsearch 中，指定了唯一 ID;\n\n字段的名字可以是任何合法的字符串，但 不可以 包含英文句号(.)。</code></pre>\n<h3 id=\"文档元数据\"><a href=\"#文档元数据\" class=\"headerlink\" title=\"文档元数据\"></a>文档元数据</h3><pre><code class=\"textmate\">三个必须的元数据元素：\n  _index: 文档在哪存放\n  _type: 文档表示的对象类别\n  _id: 文档唯一标识</code></pre>\n<h3 id=\"索引文档\"><a href=\"#索引文档\" class=\"headerlink\" title=\"索引文档\"></a>索引文档</h3><pre><code class=\"textmate\">// 创建文档时使用自定义ID\nPUT /website/blog/123\n&#123;\n  &quot;title&quot;: &quot;My first blog entry&quot;,\n  &quot;text&quot;:  &quot;Just trying this out...&quot;,\n  &quot;date&quot;:  &quot;2014/01/01&quot;\n&#125;\n\n//创建文档时使用ES自动生成的ID\nPOST /website/blog/\n&#123;\n  &quot;title&quot;: &quot;My second blog entry&quot;,\n  &quot;text&quot;:  &quot;Still trying this out...&quot;,\n  &quot;date&quot;:  &quot;2014/01/01&quot;\n&#125;\n\n/**\ntips: 自动生成的 ID 是 URL-safe、 基于 Base64 编码且长度为20个字符的 GUID 字符串。 这些 GUID 字符串由可修改的 FlakeID 模式生成，这种模式允许多个节点并行生成唯一 ID ，且互相之间的冲突概率几乎为零。\n**/</code></pre>\n<h3 id=\"处理冲突\"><a href=\"#处理冲突\" class=\"headerlink\" title=\"处理冲突\"></a>处理冲突</h3><pre><code class=\"textmate\">乐观并发控制\n每个文档都有一个 _version （版本）号，当文档被修改时版本号递增。 Elasticsearch 使用这个 _version 号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。</code></pre>\n<h2 id=\"分布式文档存储\"><a href=\"#分布式文档存储\" class=\"headerlink\" title=\"分布式文档存储\"></a>分布式文档存储</h2><h3 id=\"路由一个文档到一个分片中\"><a href=\"#路由一个文档到一个分片中\" class=\"headerlink\" title=\"路由一个文档到一个分片中\"></a>路由一个文档到一个分片中</h3><pre><code class=\"textmate\">计算公式：\nshard = hash(routing) % number_of_primary_shards(主分片的数量)\nrouting是可变值，默认是文档的_id,也可以设置成一个自定义的值。\n这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</code></pre>\n<h3 id=\"主副分片交互\"><a href=\"#主副分片交互\" class=\"headerlink\" title=\"主副分片交互\"></a>主副分片交互</h3><pre><code class=\"textmate\">我们可以发送请求到集群中的任一节点。 每个节点都有能力处理任意请求。 每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。\n将所有的请求发送到 Node 1 ，我们将其称为 协调节点(coordinating node) 。\n\n\ntips:当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。</code></pre>\n<h3 id=\"新建、索引和删除文档时步骤\"><a href=\"#新建、索引和删除文档时步骤\" class=\"headerlink\" title=\"新建、索引和删除文档时步骤\"></a>新建、索引和删除文档时步骤</h3><pre><code class=\"textmate\">以下是在主副分片和任何副本分片上面 成功新建，索引和删除文档所需要的步骤顺序：\n\n1.客户端向 Node 1 发送新建、索引或者删除请求。\n2.节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。\n3.Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。</code></pre>\n<h3 id=\"查询文档步骤\"><a href=\"#查询文档步骤\" class=\"headerlink\" title=\"查询文档步骤\"></a>查询文档步骤</h3><pre><code class=\"textmate\">以下是从主分片或者副本分片检索文档的步骤顺序：\n\n1、客户端向 Node 1 发送获取请求。\n2、节点使用文档的 _id 来确定文档属于分片 0 。分片 0 的副本分片存在于所有的三个节点上。 在这种情况下，它将请求转发到 Node2。\n3、Node2将文档返回给 Node 1 ，然后将文档返回给客户端。\n\n在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。\n\n在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。\n\n考虑到分页过深以及一次请求太多结果的情况，结果集在返回之前先进行排序。 但请记住一个请求经常跨越多个分片，每个分片都产生自己的排序结果，这些结果需要进行集中排序以保证整体顺序是正确的。\n\n深度分页问题: 在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。</code></pre>\n<h3 id=\"更新局部文档步骤\"><a href=\"#更新局部文档步骤\" class=\"headerlink\" title=\"更新局部文档步骤\"></a>更新局部文档步骤</h3><pre><code class=\"textmate\">以下是部分更新一个文档的步骤：\n\n1.客户端向 Node 1 发送更新请求。\n2.它将请求转发到主分片所在的 Node 3 。\n3.Node 3 从主分片检索文档，修改 _source 字段中的 JSON ，并且尝试重新索引主分片的文档。 如果文档已经被另一个进程修改，它会重试步骤 3 ，超过 retry_on_conflict 次后放弃。\n4.如果 Node 3 成功地更新文档，它将新版本的文档并行转发到 Node 1 和 Node 2 上的副本分片，重新建立索引。 一旦所有副本分片都返回成功， Node 3 向协调节点也返回成功，协调节点向客户端返回成功。\n\nps: 当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果Elasticsearch仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</code></pre>\n<h2 id=\"分片内部原理\"><a href=\"#分片内部原理\" class=\"headerlink\" title=\"分片内部原理\"></a>分片内部原理</h2><h3 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h3><pre><code class=\"textmate\">倒排索引被写入磁盘后是 不可改变 的:它永远不会修改。 不变性有重要的价值：\n\n1.不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。\n2.一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。\n3.其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。\n4.写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和 需要被缓存到内存的索引的使用量。\n\n当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档 可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</code></pre>\n<h3 id=\"索引与分片的比较\"><a href=\"#索引与分片的比较\" class=\"headerlink\" title=\"索引与分片的比较\"></a>索引与分片的比较</h3><pre><code class=\"textmate\">一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个 Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片(Lucene 索引)，然后像 执行分布式检索 提到的那样，合并每个分片的结果到一个全局的结果集。</code></pre>\n<h3 id=\"删除和更新\"><a href=\"#删除和更新\" class=\"headerlink\" title=\"删除和更新\"></a>删除和更新</h3><pre><code class=\"textmate\">当一个文档被 “删除” 时，它实际上只是在 .del 文件中被 标记 删除。一个被标记删除的文档仍然可以被查询匹配到， 但它会在最终结果被返回前从结果集中移除。\n\n文档更新也是类似的操作方式：当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。 可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</code></pre>\n<h3 id=\"持久化变更\"><a href=\"#持久化变更\" class=\"headerlink\" title=\"持久化变更\"></a>持久化变更</h3><pre><code class=\"textmate\">Elasticsearch 增加了一个 translog(事务日志)，在每一次对 Elasticsearch 进行操作时均进行了日志记录\n1.一个文档被索引之后，就会被添加到内存缓冲区，并且 追加到了 translog \n2.刷新（refresh）, 缓存被清空但是事务日志不会\n3.事务日志持续积累文档\n4.每隔一段时间—例如 translog 变得越来越大，索引被刷新（flush）；一个新的 translog 被创建，并且一个全量提交被执行\n    4.1所有在内存缓冲区的文档都被写入一个新的段。\n  4.2缓冲区被清空。\n  4.3一个提交点被写入硬盘。\n  4.4文件系统缓存通过 fsync 被刷新（flush）。\n  4.5老的 translog 被删除。</code></pre>\n<h3 id=\"Translog安全性\"><a href=\"#Translog安全性\" class=\"headerlink\" title=\"Translog安全性\"></a>Translog安全性</h3><pre><code class=\"textmate\">在文件被 fsync 到磁盘前，被写入的文件在重启之后就会丢失。默认 translog 是每 5 秒被 fsync 刷新到硬盘， 或者在每次写请求完成之后执行(e.g. index, delete, update, bulk)。这个过程在主分片和复制分片都会发生。最终， 基本上，这意味着在整个请求被 fsync 到主分片和复制分片的translog之前，你的客户端不会得到一个 200 OK 响应。\n\n在每次请求后都执行一个 fsync 会带来一些性能损失，尽管实践表明这种损失相对较小（特别是bulk导入，它在一次请求中平摊了大量文档的开销）。\n\n但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync 还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。\n\n这个行为可以通过设置 durability 参数为 async 来启用：\nPUT /my_index/_settings\n&#123;\n    &quot;index.translog.durability&quot;: &quot;async&quot;,\n    &quot;index.translog.sync_interval&quot;: &quot;5s&quot;\n&#125;\n这个选项可以针对索引单独设置，并且可以动态进行修改。如果你决定使用异步 translog 的话，你需要 保证 在发生crash时，丢失掉 sync_interval 时间段的数据也无所谓。</code></pre>\n<h3 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h3><pre><code class=\"textmate\">在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做 refresh 。 默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch 是 近 实时搜索: 文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。\n// 手动刷新数据 \nPOST /_refresh  //刷新所有索引\nPOST /blogs/_refresh  //只刷新blogs索引</code></pre>\n<h3 id=\"段合并\"><a href=\"#段合并\" class=\"headerlink\" title=\"段合并\"></a>段合并</h3><pre><code class=\"textmate\">目的：\n    由于自动刷新流程每秒会创建一个新的段 ，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。 每一个段都会消耗文件句柄、内存和cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。\n    Elasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。\n\n流程：\n  1.当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。\n  2.合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。\n  3.合并结束，老的段被删除\n\ntips:合并大的段需要消耗大量的I/O和CPU资源，默认下会对合并流程进行资源限制\n\noptimeze API(强制合并)\n介绍: optimize API大可看做是 强制合并 API。它会将一个分片强制合并到 max_num_segments 参数指定大小的段数目。 这样做的意图是减少段的数量（通常减少到一个），来提升搜索性能。\ntips: \n    1.optimize API 不应该 被用在一个活跃的索引————一个正积极更新的索引。后台合并流程已经可以很好地完成工作。\n    2.使用 optimize API 触发段合并的操作不会受到任何资源上的限制。这可能会消耗掉你节点上全部的I/O资源</code></pre>\n<h2 id=\"常用查找语法\"><a href=\"#常用查找语法\" class=\"headerlink\" title=\"常用查找语法\"></a>常用查找语法</h2><h3 id=\"精确查找-包含，不是等于\"><a href=\"#精确查找-包含，不是等于\" class=\"headerlink\" title=\"精确查找(包含，不是等于)\"></a>精确查找(包含，不是等于)</h3><pre><code class=\"textmate\">//term查数字\nGET /my_store/products/_search\n&#123;\n    &quot;query&quot; : &#123;\n        &quot;constant_score&quot; : &#123; \n            &quot;filter&quot; : &#123;\n                &quot;term&quot; : &#123; \n                    &quot;price&quot; : 20\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n//term查文本\n原词可能会被分词,构建索引时，需要指定不分析值\n&quot;index&quot; : &quot;not_analyzed&quot; \n\n//terms匹配多个内容    \n\n//运行非评分查询(精确查询)时的步骤\n1.查找匹配文档\n2.创建bitset(一个包含 0 和 1 的数组），它描述了哪个文档会包含该 term \n3.迭代bitsets\n4.增量计数</code></pre>\n<h3 id=\"组合过滤器\"><a href=\"#组合过滤器\" class=\"headerlink\" title=\"组合过滤器\"></a>组合过滤器</h3><ul>\n<li>布尔过滤器</li>\n</ul>\n<pre><code class=\"textmate\">&#123;\n   &quot;bool&quot; : &#123;\n      &quot;must&quot; :     [],  //相当于and\n      &quot;should&quot; :   [],  //相当于or\n      &quot;must_not&quot; : [],  //相当于not\n   &#125;\n&#125;</code></pre>\n<h3 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h3><pre><code class=\"textmate\">&quot;range&quot; : &#123;\n    &quot;price&quot; : &#123;\n        &quot;gte&quot; : 20,\n        &quot;lte&quot; : 40\n    &#125;\n&#125;\n/**\n  gt: &gt; 大于（greater than）\n  lt: &lt; 小于（less than）\n  gte: &gt;= 大于或等于（greater than or equal to）\n  lte: &lt;= 小于或等于（less than or equal to）\n**/\n\n// 特殊用法\n//1.时间计算： 查找时间戳在过去一小时内的所有文档\n&quot;range&quot; : &#123;\n    &quot;timestamp&quot; : &#123;\n        &quot;gt&quot; : &quot;now-1h&quot;\n    &#125;\n&#125;\n&quot;range&quot; : &#123;\n    &quot;timestamp&quot; : &#123;\n        &quot;gt&quot; : &quot;2014-01-01 00:00:00&quot;,\n        &quot;lt&quot; : &quot;2014-01-01 00:00:00||+1M&quot;  //早于2014年1月1日加1月（2014年2月1日零时）\n    &#125;\n&#125;\n\n//2.字符串范围(效率较低)\n&quot;range&quot; : &#123;\n    &quot;title&quot; : &#123;\n        &quot;gte&quot; : &quot;a&quot;,\n        &quot;lt&quot; :  &quot;b&quot;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"Null值查询\"><a href=\"#Null值查询\" class=\"headerlink\" title=\"Null值查询\"></a>Null值查询</h3><pre><code class=\"textmate\">// 存在查询 exist\nGET /my_index/posts/_search\n&#123;\n    &quot;query&quot; : &#123;\n        &quot;constant_score&quot; : &#123;\n            &quot;filter&quot; : &#123;\n                &quot;exists&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n//不存在查询\nGET /my_index/posts/_search\n&#123;\n    &quot;query&quot; : &#123;\n        &quot;constant_score&quot; : &#123;\n            &quot;filter&quot;: &#123;\n                &quot;missing&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n//对象的存在与不存在 \n//如果 first 和 last 都是空，那么 name 这个命名空间才会被认为不存在。\n&#123;  //对象数据\n   &quot;name&quot; : &#123;\n      &quot;first&quot; : &quot;John&quot;,\n      &quot;last&quot; :  &quot;Smith&quot;\n   &#125;\n&#125;\n\n&#123; //查询语句\n    &quot;exists&quot; : &#123; &quot;field&quot; : &quot;name&quot; &#125;\n&#125;\n\n&#123; //实际执行的语句\n    &quot;bool&quot;: &#123;\n        &quot;should&quot;: [\n            &#123; &quot;exists&quot;: &#123; &quot;field&quot;: &quot;name.first&quot; &#125;&#125;,\n            &#123; &quot;exists&quot;: &#123; &quot;field&quot;: &quot;name.last&quot; &#125;&#125;\n        ]\n    &#125;\n&#125;</code></pre>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><pre><code class=\"textmate\">自动缓存\nElasticsearch 会基于使用频次自动缓存查询。如果一个非评分查询在最近的 256 次查询中被使用过（次数取决于查询类型），那么这个查询就会作为缓存的候选。但是，并不是所有的片段都能保证缓存 bitset 。只有那些文档数量超过 10,000 （或超过总文档数量的 3% )才会缓存 bitset 。因为小的片段可以很快的进行搜索和合并，这里缓存的意义不大。\n\n一旦缓存了，非评分计算的 bitset 会一直驻留在缓存中直到它被剔除。剔除规则是基于 LRU 的：一旦缓存满了，最近最少使用的过滤器会被剔除。</code></pre>\n<h2 id=\"相关度\"><a href=\"#相关度\" class=\"headerlink\" title=\"相关度\"></a>相关度</h2><h3 id=\"相关度评分逻辑\"><a href=\"#相关度评分逻辑\" class=\"headerlink\" title=\"相关度评分逻辑\"></a>相关度评分逻辑</h3><pre><code class=\"textmate\">Lucene（或 Elasticsearch）使用 布尔模型（Boolean model） 查找匹配文档，并用一个名为 实用评分函数（practical scoring function） 的公式来计算相关度。这个公式借鉴了 词频/逆向文档频率（term frequency/inverse document frequency） 和 向量空间模型（vector space model），同时也加入了一些现代的新特性，如协调因子（coordination factor），字段长度归一化（field length normalization），以及词或查询语句权重提升。</code></pre>\n<h4 id=\"布尔模型\"><a href=\"#布尔模型\" class=\"headerlink\" title=\"布尔模型\"></a>布尔模型</h4><pre><code class=\"textmate\">布尔模型（Boolean Model）只是在查询中使用 AND、OR 和 NOT（与、或和非）这样的条件来查找匹配的文档，以下查询：\n\nfull AND text AND search AND (elasticsearch OR lucene)\n会将所有包括词 full 、 text 和 search ，以及 elasticsearch 或 lucene 的文档作为结果集。</code></pre>\n<h4 id=\"词频-逆向文档频率-TF-IDF\"><a href=\"#词频-逆向文档频率-TF-IDF\" class=\"headerlink\" title=\"词频/逆向文档频率(TF/IDF)\"></a>词频/逆向文档频率(TF/IDF)</h4><pre><code class=\"textmate\">当匹配到一组文档后，需要根据相关度排序这些文档，不是所有的文档都包含所有词，有些词比其他的词更重要。一个文档的相关度评分部分取决于每个查询词在文档中的 权重 。\n\n词频\n词在文档中出现的频度越高，权重越高 。\n\n逆向文档频率\n词在集合所有文档里出现的频次越高，权重越低 </code></pre>\n<h4 id=\"字段长度归一\"><a href=\"#字段长度归一\" class=\"headerlink\" title=\"字段长度归一\"></a>字段长度归一</h4><pre><code class=\"textmate\">字段的长度越短，字段的权重越高。\n字段长度归一值(norm)</code></pre>\n<h4 id=\"组合使用\"><a href=\"#组合使用\" class=\"headerlink\" title=\"组合使用\"></a>组合使用</h4><pre><code class=\"textmate\">词频（term frequency）、逆向文档频率（inverse document frequency）和字段长度归一值（field-length norm）——是在索引时计算并存储的。最后将它们结合在一起计算单个词在特定文档中的权重 。</code></pre>\n<h3 id=\"脚本评分\"><a href=\"#脚本评分\" class=\"headerlink\" title=\"脚本评分\"></a>脚本评分</h3><pre><code class=\"textmate\">如果所有 function_score 内置的函数都无法满足应用场景，可以使用 script_score 函数自行实现逻辑\nElasticsearch 里使用 Groovy 作为默认的脚本语言\n例子:\n入参: \n    price和margin变量可以分别从文档中提取\n    threshold、discount、target是作为参数params传入的\n\nGET /_search\n&#123;\n  &quot;function_score&quot;: &#123;\n    &quot;functions&quot;: [\n      &#123; ...location clause... &#125;, \n      &#123; ...price clause... &#125;, \n      &#123;\n        &quot;script_score&quot;: &#123;\n          &quot;params&quot;: &#123; \n            &quot;threshold&quot;: 80,\n            &quot;discount&quot;: 0.1,\n            &quot;target&quot;: 10\n          &#125;,\n          &quot;script&quot;: &quot;price  = doc[&#39;price&#39;].value; margin = doc[&#39;margin&#39;].value;\n          if (price &lt; threshold) &#123; return price * margin / target &#125;;\n          return price * (1 - discount) * margin / target;&quot; \n        &#125;\n      &#125;\n    ]\n  &#125;\n&#125;\n\ntips: \n  1.将这些变量作为参数 params 传递，我们可以查询时动态改变脚本无须重新编译。\n  2.JSON 不能接受内嵌的换行符，脚本中的换行符可以用 \\n 或 ; 符号替代</code></pre>\n<h2 id=\"人类语言处理\"><a href=\"#人类语言处理\" class=\"headerlink\" title=\"人类语言处理\"></a>人类语言处理</h2><pre><code class=\"textmate\">分词器\n  standard(标准分词器)、english(英文分词器)、icu(亚洲语言分词器)\n\n错误拼写匹配-语音匹配\n    搜索发音相似的词，即使他们的拼写不同。 Soundex算法</code></pre>\n<h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h2><h3 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h3><pre><code class=\"textmate\">桶（Buckets）\n    满足特定条件的文档的集合\n指标（Metrics）\n    对桶内的文档进行统计计算\n每个聚合都是一个或者多个桶和零个或者多个指标的组合\n\n桶在概念上类似于 SQL 的分组（GROUP BY），而指标则类似于 COUNT() 、 SUM() 、 MAX() 等统计方法。\n\n例：\nSELECT COUNT(color)  FROM table GROUP BY color;\n1.COUNT(color) 相当于指标。\n2.GROUP BY color 相当于桶。</code></pre>\n<h3 id=\"桶\"><a href=\"#桶\" class=\"headerlink\" title=\"桶\"></a>桶</h3><pre><code class=\"textmate\">桶 简单来说就是满足特定条件的文档的集合\n1.当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件。如果匹配到，文档将放入相应的桶并接着进行聚合操作。\n2.桶也可以被嵌套在其他桶里面，提供层次化的或者有条件的划分方案。\n3.Elasticsearch 有很多种类型的桶，能让你通过很多种方式来划分文档（时间、最受欢迎的词、年龄区间、地理位置等等）。其实根本上都是通过同样的原理进行操作：基于条件来划分文档。</code></pre>\n<h3 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h3><pre><code class=\"textmate\">桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的的手段：它提供了一种给文档分组的方法来让我们可以计算感兴趣的指标。\n\n大多数 指标 是简单的数学运算（例如最小值、平均值、最大值，还有汇总），这些是通过文档的值来计算。在实践中，指标能让你计算像平均薪资、最高出售价格、95%的查询延迟这样的数据。\n\n聚合 \n    由桶和指标组成的。 聚合可能只有一个桶，可能只有一个指标，或者可能两个都有。也有可能有一些桶嵌套在其他桶里面。</code></pre>\n<h3 id=\"条形图\"><a href=\"#条形图\" class=\"headerlink\" title=\"条形图\"></a>条形图</h3><pre><code class=\"textmate\">聚合还有一个令人激动的特性就是能够十分容易地将它们转换成图表和图形。\n例:\nGET /cars/transactions/_search\n&#123;\n   &quot;size&quot; : 0,\n   &quot;aggs&quot;:&#123;\n      &quot;price&quot;:&#123;\n         &quot;histogram&quot;:&#123;\n            &quot;field&quot;: &quot;price&quot;,\n            &quot;interval&quot;: 20000\n         &#125;,\n         &quot;aggs&quot;:&#123;\n            &quot;revenue&quot;: &#123;\n               &quot;sum&quot;: &#123; \n                 &quot;field&quot; : &quot;price&quot;\n               &#125;\n             &#125;\n         &#125;\n      &#125;\n   &#125;\n&#125;\n\n//响应结果-直方图\n&#123;\n...\n   &quot;aggregations&quot;: &#123;\n      &quot;price&quot;: &#123;\n         &quot;buckets&quot;: [\n            &#123;\n               &quot;key&quot;: 0,\n               &quot;doc_count&quot;: 3,\n               &quot;revenue&quot;: &#123;\n                  &quot;value&quot;: 37000\n               &#125;\n            &#125;,\n            &#123;\n               &quot;key&quot;: 20000,\n               &quot;doc_count&quot;: 4,\n               &quot;revenue&quot;: &#123;\n                  &quot;value&quot;: 95000\n               &#125;\n            &#125;\n         ]\n      &#125;\n   &#125;\n&#125;</code></pre>\n<h3 id=\"按时间统计\"><a href=\"#按时间统计\" class=\"headerlink\" title=\"按时间统计\"></a>按时间统计</h3><pre><code class=\"textmate\">//查询脚本\nGET /cars/transactions/_search\n&#123;\n   &quot;size&quot; : 0,\n   &quot;aggs&quot;: &#123;\n      &quot;sales&quot;: &#123;\n         &quot;date_histogram&quot;: &#123;\n            &quot;field&quot;: &quot;sold&quot;,\n            &quot;interval&quot;: &quot;month&quot;, \n            &quot;format&quot;: &quot;yyyy-MM-dd&quot;,\n               &quot;min_doc_count&quot; : 0,    //强制返回空 buckets。\n            &quot;extended_bounds&quot; : &#123;   //强制返回整年。\n                &quot;min&quot; : &quot;2014-01-01&quot;,\n                &quot;max&quot; : &quot;2014-12-31&quot;\n            &#125;\n         &#125;\n      &#125;\n   &#125;\n&#125;\n\n//返回结果\n&#123;\n   ...\n   &quot;aggregations&quot;: &#123;\n      &quot;sales&quot;: &#123;\n         &quot;buckets&quot;: [\n            &#123;\n               &quot;key_as_string&quot;: &quot;2014-01-01&quot;,\n               &quot;key&quot;: 1388534400000,\n               &quot;doc_count&quot;: 1\n            &#125;,\n            &#123;\n               &quot;key_as_string&quot;: &quot;2014-02-01&quot;,\n               &quot;key&quot;: 1391212800000,\n               &quot;doc_count&quot;: 1\n            &#125;\n         ]\n...\n&#125;</code></pre>\n<h3 id=\"Doc-Values\"><a href=\"#Doc-Values\" class=\"headerlink\" title=\"Doc Values\"></a>Doc Values</h3><pre><code class=\"textmate\">1.聚合使用一个叫 doc values 的数据结构。Doc values 可以使聚合更快、更高效并且内存友好\n2.Doc values 的存在是因为倒排索引只对某些操作是高效的。 倒排索引的优势 在于查找包含某个项的文档，而对于从另外一个方向的相反操作并不高效，即：确定哪些项是否存在单个文档里，聚合需要这种次级的访问模式。\n3.Doc Values 是在索引时与 倒排索引 同时生成。也就是说 Doc Values 和 倒排索引 一样，基于 Segement 生成并且是不可变的。同时 Doc Values 和 倒排索引 一样序列化到磁盘，这样对性能和扩展性有很大帮助。\n\nDoc Values 通过序列化把数据结构持久化到磁盘，我们可以充分利用操作系统的内存，而不是 JVM 的 Heap 。 当 working set 远小于系统的可用内存，系统会自动将 Doc Values 驻留在内存中，使得其读写十分快速；不过，当其远大于可用内存时，系统会根据需要从磁盘读取 Doc Values，然后选择性放到分页缓存中。\n\n原理:\n    Doc values 通过转置两者间的关系来解决这个问题。倒排索引将词项映射到包含它们的文档，doc values 将文档映射到它们包含的词项\n\n用途:\nDoc values 不仅可以用于聚合。 任何需要查找某个文档包含的值的操作都必须使用它。 除了聚合，还包括排序，访问字段值的脚本，父子关系处理</code></pre>\n<h2 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h2><pre><code class=\"textmate\">Elasticsearch 提供了 两种表示地理位置的方式：\n1.用纬度－经度表示的坐标点使用 geo_point 字段类型\n2.用GeoJSON 格式定义的复杂地理形状，使用 geo_shape 字段类型。\n\nGeo-points 允许你找到距离另一个坐标点一定范围内的坐标点、计算出两点之间的距离来排序或进行相关性打分、或者聚合到显示在地图上的一个网格。另一方面，Geo-shapes 纯粹是用来过滤的。它们可以用来判断两个地理形状是否有重合或者某个地理形状是否完全包含了其他地理形状。\n\nGeohashes 是一种将经纬度坐标（ lat/lon ）编码成字符串的方式。这么做的初衷只是为了让地理位置在 url 上呈现的形式更加友好，但现在 geohashes 已经变成一种在数据库中有效索引地理坐标点和地理形状的方式。\nGeohashes 把整个世界分为 32 个单元的格子 —— 4 行 8 列 —— 每一个格子都用一个字母或者数字标识。</code></pre>\n<h2 id=\"数据建模\"><a href=\"#数据建模\" class=\"headerlink\" title=\"数据建模\"></a>数据建模</h2><pre><code class=\"textmate\">Elasticsearch建模\n    关联关系处理 、 嵌套对象 和 父-子关系文档 \n另外ES支持多种扩容方式</code></pre>\n<h2 id=\"运维\"><a href=\"#运维\" class=\"headerlink\" title=\"运维\"></a>运维</h2><pre><code class=\"textmate\">支持动态更新的参数\nhttps://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-update-settings.html\n集群备份、快照恢复</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html\">ElasticSearch官方教程(非最新版)</a></li>\n</ul>\n<h2 id=\"集群原理\"><a href=\"#集群原理\" class=\"headerlink\" title=\"集群原理\"></a>集群原理</h2><h3 id=\"空集群\"><a href=\"#空集群\" class=\"headerlink\" title=\"空集群\"></a>空集群</h3><pre><code class=\"textmate\">一个运行中的Elasticsearch实例称为一个节点，而集群是由一个或者多个拥有相同cluster.name配置的节点组成，它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\n\n负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。\n\n作为用户，我们可以将请求发送到集群中的任何节点，包括主节点。每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。</code></pre>\n<h3 id=\"集群健康\"><a href=\"#集群健康\" class=\"headerlink\" title=\"集群健康\"></a>集群健康</h3><pre><code class=\"textmate\">Elasticsearch的集群监控信息中包含了许多的统计数据，其中最为重要的一项就是集群健康，它在status字段中展示为green、yellow或者red。\nGET/_cluster/health\n1.green\n    所有的主分片和副本分片都正常运行。\n2.yellow\n    所有的主分片都正常运行，但不是所有的副本分片都正常运行。\n3.red\n    有主分片没能正常运行。</code></pre>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><pre><code class=\"textmate\">索引实际上是指向一个或者多个物理分片的逻辑命名空间。\n一个 分片 是一个底层的工作单元 ，它仅保存了全部数据中的一部分,一个分片是一个 Lucene 的实例，它本身就是一个完整的搜索引擎。\n索引在默认情况下会被分配5个主分片，我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。\n\nElasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。\n\n一个分片可以是 主分片或者 副本 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。\n</code></pre>\n<ul>\n<li>添加索引语法</li>\n</ul>\n<pre><code class=\"textmate\">PUT /blogs\n&#123;\n   &quot;settings&quot; : &#123;\n      &quot;number_of_shards&quot; : 3,  //分片数量\n      &quot;number_of_replicas&quot; : 1 //副本数量\n   &#125;\n&#125;</code></pre>\n<h3 id=\"故障转移\"><a href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h3><pre><code class=\"textmate\">当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。 但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。</code></pre>\n<h3 id=\"水平扩容\"><a href=\"#水平扩容\" class=\"headerlink\" title=\"水平扩容\"></a>水平扩容</h3><pre><code class=\"textmate\">拥有三个节点的集群——为了分散负载而对分片进行重新分配\n分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。\n\n\n主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够 存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。） 但是，读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。\n\n在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群</code></pre>\n<ul>\n<li>调整副本数量</li>\n</ul>\n<pre><code class=\"textmate\">PUT /blogs/_settings\n&#123;\n   &quot;number_of_replicas&quot; : 2\n&#125;</code></pre>\n<h3 id=\"故障转移-1\"><a href=\"#故障转移-1\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h3><pre><code class=\"textmate\">| Node1 | Node2 | Node3 |\n|1* 2 3 |1 2*  3|1 2 3* |\n*代表主分片\n\n如果关闭Node1,则会失去1主分片，索引不能正常工作，此时集群状态是red;\n其他节点会立即将Node2或Node3上的副本分片提升为主分片，此时集群状态是yellow,该动作是瞬时发生的；\n如果重启Node1,集群可以将缺失的副本分片再次进行分配，如果Node1依然拥有之前的分片，则会尝试重用，仅从主分片复制改动过的数据文件</code></pre>\n<h2 id=\"数据输入输出\"><a href=\"#数据输入输出\" class=\"headerlink\" title=\"数据输入输出\"></a>数据输入输出</h2><blockquote>\n<p>在 Elasticsearch 中， 每个字段的所有数据 都是 默认被索引的 。 即每个字段都有为了快速检索设置的专用倒排索引</p>\n</blockquote>\n<h3 id=\"什么是文档\"><a href=\"#什么是文档\" class=\"headerlink\" title=\"什么是文档\"></a>什么是文档</h3><pre><code class=\"textmate\">在 Elasticsearch 中，术语 文档 有着特定的含义。它是指最顶层或者根对象, 这个根对象被序列化成 JSON 并存储到 Elasticsearch 中，指定了唯一 ID;\n\n字段的名字可以是任何合法的字符串，但 不可以 包含英文句号(.)。</code></pre>\n<h3 id=\"文档元数据\"><a href=\"#文档元数据\" class=\"headerlink\" title=\"文档元数据\"></a>文档元数据</h3><pre><code class=\"textmate\">三个必须的元数据元素：\n  _index: 文档在哪存放\n  _type: 文档表示的对象类别\n  _id: 文档唯一标识</code></pre>\n<h3 id=\"索引文档\"><a href=\"#索引文档\" class=\"headerlink\" title=\"索引文档\"></a>索引文档</h3><pre><code class=\"textmate\">// 创建文档时使用自定义ID\nPUT /website/blog/123\n&#123;\n  &quot;title&quot;: &quot;My first blog entry&quot;,\n  &quot;text&quot;:  &quot;Just trying this out...&quot;,\n  &quot;date&quot;:  &quot;2014/01/01&quot;\n&#125;\n\n//创建文档时使用ES自动生成的ID\nPOST /website/blog/\n&#123;\n  &quot;title&quot;: &quot;My second blog entry&quot;,\n  &quot;text&quot;:  &quot;Still trying this out...&quot;,\n  &quot;date&quot;:  &quot;2014/01/01&quot;\n&#125;\n\n/**\ntips: 自动生成的 ID 是 URL-safe、 基于 Base64 编码且长度为20个字符的 GUID 字符串。 这些 GUID 字符串由可修改的 FlakeID 模式生成，这种模式允许多个节点并行生成唯一 ID ，且互相之间的冲突概率几乎为零。\n**/</code></pre>\n<h3 id=\"处理冲突\"><a href=\"#处理冲突\" class=\"headerlink\" title=\"处理冲突\"></a>处理冲突</h3><pre><code class=\"textmate\">乐观并发控制\n每个文档都有一个 _version （版本）号，当文档被修改时版本号递增。 Elasticsearch 使用这个 _version 号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。</code></pre>\n<h2 id=\"分布式文档存储\"><a href=\"#分布式文档存储\" class=\"headerlink\" title=\"分布式文档存储\"></a>分布式文档存储</h2><h3 id=\"路由一个文档到一个分片中\"><a href=\"#路由一个文档到一个分片中\" class=\"headerlink\" title=\"路由一个文档到一个分片中\"></a>路由一个文档到一个分片中</h3><pre><code class=\"textmate\">计算公式：\nshard = hash(routing) % number_of_primary_shards(主分片的数量)\nrouting是可变值，默认是文档的_id,也可以设置成一个自定义的值。\n这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</code></pre>\n<h3 id=\"主副分片交互\"><a href=\"#主副分片交互\" class=\"headerlink\" title=\"主副分片交互\"></a>主副分片交互</h3><pre><code class=\"textmate\">我们可以发送请求到集群中的任一节点。 每个节点都有能力处理任意请求。 每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。\n将所有的请求发送到 Node 1 ，我们将其称为 协调节点(coordinating node) 。\n\n\ntips:当发送请求的时候， 为了扩展负载，更好的做法是轮询集群中所有的节点。</code></pre>\n<h3 id=\"新建、索引和删除文档时步骤\"><a href=\"#新建、索引和删除文档时步骤\" class=\"headerlink\" title=\"新建、索引和删除文档时步骤\"></a>新建、索引和删除文档时步骤</h3><pre><code class=\"textmate\">以下是在主副分片和任何副本分片上面 成功新建，索引和删除文档所需要的步骤顺序：\n\n1.客户端向 Node 1 发送新建、索引或者删除请求。\n2.节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。\n3.Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。</code></pre>\n<h3 id=\"查询文档步骤\"><a href=\"#查询文档步骤\" class=\"headerlink\" title=\"查询文档步骤\"></a>查询文档步骤</h3><pre><code class=\"textmate\">以下是从主分片或者副本分片检索文档的步骤顺序：\n\n1、客户端向 Node 1 发送获取请求。\n2、节点使用文档的 _id 来确定文档属于分片 0 。分片 0 的副本分片存在于所有的三个节点上。 在这种情况下，它将请求转发到 Node2。\n3、Node2将文档返回给 Node 1 ，然后将文档返回给客户端。\n\n在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。\n\n在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。\n\n考虑到分页过深以及一次请求太多结果的情况，结果集在返回之前先进行排序。 但请记住一个请求经常跨越多个分片，每个分片都产生自己的排序结果，这些结果需要进行集中排序以保证整体顺序是正确的。\n\n深度分页问题: 在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。</code></pre>\n<h3 id=\"更新局部文档步骤\"><a href=\"#更新局部文档步骤\" class=\"headerlink\" title=\"更新局部文档步骤\"></a>更新局部文档步骤</h3><pre><code class=\"textmate\">以下是部分更新一个文档的步骤：\n\n1.客户端向 Node 1 发送更新请求。\n2.它将请求转发到主分片所在的 Node 3 。\n3.Node 3 从主分片检索文档，修改 _source 字段中的 JSON ，并且尝试重新索引主分片的文档。 如果文档已经被另一个进程修改，它会重试步骤 3 ，超过 retry_on_conflict 次后放弃。\n4.如果 Node 3 成功地更新文档，它将新版本的文档并行转发到 Node 1 和 Node 2 上的副本分片，重新建立索引。 一旦所有副本分片都返回成功， Node 3 向协调节点也返回成功，协调节点向客户端返回成功。\n\nps: 当主分片把更改转发到副本分片时， 它不会转发更新请求。 相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。 如果Elasticsearch仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</code></pre>\n<h2 id=\"分片内部原理\"><a href=\"#分片内部原理\" class=\"headerlink\" title=\"分片内部原理\"></a>分片内部原理</h2><h3 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h3><pre><code class=\"textmate\">倒排索引被写入磁盘后是 不可改变 的:它永远不会修改。 不变性有重要的价值：\n\n1.不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。\n2.一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。\n3.其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。\n4.写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和 需要被缓存到内存的索引的使用量。\n\n当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档 可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</code></pre>\n<h3 id=\"索引与分片的比较\"><a href=\"#索引与分片的比较\" class=\"headerlink\" title=\"索引与分片的比较\"></a>索引与分片的比较</h3><pre><code class=\"textmate\">一个 Lucene 索引 我们在 Elasticsearch 称作 分片 。 一个 Elasticsearch 索引 是分片的集合。 当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片(Lucene 索引)，然后像 执行分布式检索 提到的那样，合并每个分片的结果到一个全局的结果集。</code></pre>\n<h3 id=\"删除和更新\"><a href=\"#删除和更新\" class=\"headerlink\" title=\"删除和更新\"></a>删除和更新</h3><pre><code class=\"textmate\">当一个文档被 “删除” 时，它实际上只是在 .del 文件中被 标记 删除。一个被标记删除的文档仍然可以被查询匹配到， 但它会在最终结果被返回前从结果集中移除。\n\n文档更新也是类似的操作方式：当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。 可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</code></pre>\n<h3 id=\"持久化变更\"><a href=\"#持久化变更\" class=\"headerlink\" title=\"持久化变更\"></a>持久化变更</h3><pre><code class=\"textmate\">Elasticsearch 增加了一个 translog(事务日志)，在每一次对 Elasticsearch 进行操作时均进行了日志记录\n1.一个文档被索引之后，就会被添加到内存缓冲区，并且 追加到了 translog \n2.刷新（refresh）, 缓存被清空但是事务日志不会\n3.事务日志持续积累文档\n4.每隔一段时间—例如 translog 变得越来越大，索引被刷新（flush）；一个新的 translog 被创建，并且一个全量提交被执行\n    4.1所有在内存缓冲区的文档都被写入一个新的段。\n  4.2缓冲区被清空。\n  4.3一个提交点被写入硬盘。\n  4.4文件系统缓存通过 fsync 被刷新（flush）。\n  4.5老的 translog 被删除。</code></pre>\n<h3 id=\"Translog安全性\"><a href=\"#Translog安全性\" class=\"headerlink\" title=\"Translog安全性\"></a>Translog安全性</h3><pre><code class=\"textmate\">在文件被 fsync 到磁盘前，被写入的文件在重启之后就会丢失。默认 translog 是每 5 秒被 fsync 刷新到硬盘， 或者在每次写请求完成之后执行(e.g. index, delete, update, bulk)。这个过程在主分片和复制分片都会发生。最终， 基本上，这意味着在整个请求被 fsync 到主分片和复制分片的translog之前，你的客户端不会得到一个 200 OK 响应。\n\n在每次请求后都执行一个 fsync 会带来一些性能损失，尽管实践表明这种损失相对较小（特别是bulk导入，它在一次请求中平摊了大量文档的开销）。\n\n但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的 fsync 还是比较有益的。比如，写入的数据被缓存到内存中，再每5秒执行一次 fsync 。\n\n这个行为可以通过设置 durability 参数为 async 来启用：\nPUT /my_index/_settings\n&#123;\n    &quot;index.translog.durability&quot;: &quot;async&quot;,\n    &quot;index.translog.sync_interval&quot;: &quot;5s&quot;\n&#125;\n这个选项可以针对索引单独设置，并且可以动态进行修改。如果你决定使用异步 translog 的话，你需要 保证 在发生crash时，丢失掉 sync_interval 时间段的数据也无所谓。</code></pre>\n<h3 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h3><pre><code class=\"textmate\">在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做 refresh 。 默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch 是 近 实时搜索: 文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。\n// 手动刷新数据 \nPOST /_refresh  //刷新所有索引\nPOST /blogs/_refresh  //只刷新blogs索引</code></pre>\n<h3 id=\"段合并\"><a href=\"#段合并\" class=\"headerlink\" title=\"段合并\"></a>段合并</h3><pre><code class=\"textmate\">目的：\n    由于自动刷新流程每秒会创建一个新的段 ，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。 每一个段都会消耗文件句柄、内存和cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。\n    Elasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。\n\n流程：\n  1.当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。\n  2.合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会中断索引和搜索。\n  3.合并结束，老的段被删除\n\ntips:合并大的段需要消耗大量的I/O和CPU资源，默认下会对合并流程进行资源限制\n\noptimeze API(强制合并)\n介绍: optimize API大可看做是 强制合并 API。它会将一个分片强制合并到 max_num_segments 参数指定大小的段数目。 这样做的意图是减少段的数量（通常减少到一个），来提升搜索性能。\ntips: \n    1.optimize API 不应该 被用在一个活跃的索引————一个正积极更新的索引。后台合并流程已经可以很好地完成工作。\n    2.使用 optimize API 触发段合并的操作不会受到任何资源上的限制。这可能会消耗掉你节点上全部的I/O资源</code></pre>\n<h2 id=\"常用查找语法\"><a href=\"#常用查找语法\" class=\"headerlink\" title=\"常用查找语法\"></a>常用查找语法</h2><h3 id=\"精确查找-包含，不是等于\"><a href=\"#精确查找-包含，不是等于\" class=\"headerlink\" title=\"精确查找(包含，不是等于)\"></a>精确查找(包含，不是等于)</h3><pre><code class=\"textmate\">//term查数字\nGET /my_store/products/_search\n&#123;\n    &quot;query&quot; : &#123;\n        &quot;constant_score&quot; : &#123; \n            &quot;filter&quot; : &#123;\n                &quot;term&quot; : &#123; \n                    &quot;price&quot; : 20\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n//term查文本\n原词可能会被分词,构建索引时，需要指定不分析值\n&quot;index&quot; : &quot;not_analyzed&quot; \n\n//terms匹配多个内容    \n\n//运行非评分查询(精确查询)时的步骤\n1.查找匹配文档\n2.创建bitset(一个包含 0 和 1 的数组），它描述了哪个文档会包含该 term \n3.迭代bitsets\n4.增量计数</code></pre>\n<h3 id=\"组合过滤器\"><a href=\"#组合过滤器\" class=\"headerlink\" title=\"组合过滤器\"></a>组合过滤器</h3><ul>\n<li>布尔过滤器</li>\n</ul>\n<pre><code class=\"textmate\">&#123;\n   &quot;bool&quot; : &#123;\n      &quot;must&quot; :     [],  //相当于and\n      &quot;should&quot; :   [],  //相当于or\n      &quot;must_not&quot; : [],  //相当于not\n   &#125;\n&#125;</code></pre>\n<h3 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h3><pre><code class=\"textmate\">&quot;range&quot; : &#123;\n    &quot;price&quot; : &#123;\n        &quot;gte&quot; : 20,\n        &quot;lte&quot; : 40\n    &#125;\n&#125;\n/**\n  gt: &gt; 大于（greater than）\n  lt: &lt; 小于（less than）\n  gte: &gt;= 大于或等于（greater than or equal to）\n  lte: &lt;= 小于或等于（less than or equal to）\n**/\n\n// 特殊用法\n//1.时间计算： 查找时间戳在过去一小时内的所有文档\n&quot;range&quot; : &#123;\n    &quot;timestamp&quot; : &#123;\n        &quot;gt&quot; : &quot;now-1h&quot;\n    &#125;\n&#125;\n&quot;range&quot; : &#123;\n    &quot;timestamp&quot; : &#123;\n        &quot;gt&quot; : &quot;2014-01-01 00:00:00&quot;,\n        &quot;lt&quot; : &quot;2014-01-01 00:00:00||+1M&quot;  //早于2014年1月1日加1月（2014年2月1日零时）\n    &#125;\n&#125;\n\n//2.字符串范围(效率较低)\n&quot;range&quot; : &#123;\n    &quot;title&quot; : &#123;\n        &quot;gte&quot; : &quot;a&quot;,\n        &quot;lt&quot; :  &quot;b&quot;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"Null值查询\"><a href=\"#Null值查询\" class=\"headerlink\" title=\"Null值查询\"></a>Null值查询</h3><pre><code class=\"textmate\">// 存在查询 exist\nGET /my_index/posts/_search\n&#123;\n    &quot;query&quot; : &#123;\n        &quot;constant_score&quot; : &#123;\n            &quot;filter&quot; : &#123;\n                &quot;exists&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n//不存在查询\nGET /my_index/posts/_search\n&#123;\n    &quot;query&quot; : &#123;\n        &quot;constant_score&quot; : &#123;\n            &quot;filter&quot;: &#123;\n                &quot;missing&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n//对象的存在与不存在 \n//如果 first 和 last 都是空，那么 name 这个命名空间才会被认为不存在。\n&#123;  //对象数据\n   &quot;name&quot; : &#123;\n      &quot;first&quot; : &quot;John&quot;,\n      &quot;last&quot; :  &quot;Smith&quot;\n   &#125;\n&#125;\n\n&#123; //查询语句\n    &quot;exists&quot; : &#123; &quot;field&quot; : &quot;name&quot; &#125;\n&#125;\n\n&#123; //实际执行的语句\n    &quot;bool&quot;: &#123;\n        &quot;should&quot;: [\n            &#123; &quot;exists&quot;: &#123; &quot;field&quot;: &quot;name.first&quot; &#125;&#125;,\n            &#123; &quot;exists&quot;: &#123; &quot;field&quot;: &quot;name.last&quot; &#125;&#125;\n        ]\n    &#125;\n&#125;</code></pre>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><pre><code class=\"textmate\">自动缓存\nElasticsearch 会基于使用频次自动缓存查询。如果一个非评分查询在最近的 256 次查询中被使用过（次数取决于查询类型），那么这个查询就会作为缓存的候选。但是，并不是所有的片段都能保证缓存 bitset 。只有那些文档数量超过 10,000 （或超过总文档数量的 3% )才会缓存 bitset 。因为小的片段可以很快的进行搜索和合并，这里缓存的意义不大。\n\n一旦缓存了，非评分计算的 bitset 会一直驻留在缓存中直到它被剔除。剔除规则是基于 LRU 的：一旦缓存满了，最近最少使用的过滤器会被剔除。</code></pre>\n<h2 id=\"相关度\"><a href=\"#相关度\" class=\"headerlink\" title=\"相关度\"></a>相关度</h2><h3 id=\"相关度评分逻辑\"><a href=\"#相关度评分逻辑\" class=\"headerlink\" title=\"相关度评分逻辑\"></a>相关度评分逻辑</h3><pre><code class=\"textmate\">Lucene（或 Elasticsearch）使用 布尔模型（Boolean model） 查找匹配文档，并用一个名为 实用评分函数（practical scoring function） 的公式来计算相关度。这个公式借鉴了 词频/逆向文档频率（term frequency/inverse document frequency） 和 向量空间模型（vector space model），同时也加入了一些现代的新特性，如协调因子（coordination factor），字段长度归一化（field length normalization），以及词或查询语句权重提升。</code></pre>\n<h4 id=\"布尔模型\"><a href=\"#布尔模型\" class=\"headerlink\" title=\"布尔模型\"></a>布尔模型</h4><pre><code class=\"textmate\">布尔模型（Boolean Model）只是在查询中使用 AND、OR 和 NOT（与、或和非）这样的条件来查找匹配的文档，以下查询：\n\nfull AND text AND search AND (elasticsearch OR lucene)\n会将所有包括词 full 、 text 和 search ，以及 elasticsearch 或 lucene 的文档作为结果集。</code></pre>\n<h4 id=\"词频-逆向文档频率-TF-IDF\"><a href=\"#词频-逆向文档频率-TF-IDF\" class=\"headerlink\" title=\"词频/逆向文档频率(TF/IDF)\"></a>词频/逆向文档频率(TF/IDF)</h4><pre><code class=\"textmate\">当匹配到一组文档后，需要根据相关度排序这些文档，不是所有的文档都包含所有词，有些词比其他的词更重要。一个文档的相关度评分部分取决于每个查询词在文档中的 权重 。\n\n词频\n词在文档中出现的频度越高，权重越高 。\n\n逆向文档频率\n词在集合所有文档里出现的频次越高，权重越低 </code></pre>\n<h4 id=\"字段长度归一\"><a href=\"#字段长度归一\" class=\"headerlink\" title=\"字段长度归一\"></a>字段长度归一</h4><pre><code class=\"textmate\">字段的长度越短，字段的权重越高。\n字段长度归一值(norm)</code></pre>\n<h4 id=\"组合使用\"><a href=\"#组合使用\" class=\"headerlink\" title=\"组合使用\"></a>组合使用</h4><pre><code class=\"textmate\">词频（term frequency）、逆向文档频率（inverse document frequency）和字段长度归一值（field-length norm）——是在索引时计算并存储的。最后将它们结合在一起计算单个词在特定文档中的权重 。</code></pre>\n<h3 id=\"脚本评分\"><a href=\"#脚本评分\" class=\"headerlink\" title=\"脚本评分\"></a>脚本评分</h3><pre><code class=\"textmate\">如果所有 function_score 内置的函数都无法满足应用场景，可以使用 script_score 函数自行实现逻辑\nElasticsearch 里使用 Groovy 作为默认的脚本语言\n例子:\n入参: \n    price和margin变量可以分别从文档中提取\n    threshold、discount、target是作为参数params传入的\n\nGET /_search\n&#123;\n  &quot;function_score&quot;: &#123;\n    &quot;functions&quot;: [\n      &#123; ...location clause... &#125;, \n      &#123; ...price clause... &#125;, \n      &#123;\n        &quot;script_score&quot;: &#123;\n          &quot;params&quot;: &#123; \n            &quot;threshold&quot;: 80,\n            &quot;discount&quot;: 0.1,\n            &quot;target&quot;: 10\n          &#125;,\n          &quot;script&quot;: &quot;price  = doc[&#39;price&#39;].value; margin = doc[&#39;margin&#39;].value;\n          if (price &lt; threshold) &#123; return price * margin / target &#125;;\n          return price * (1 - discount) * margin / target;&quot; \n        &#125;\n      &#125;\n    ]\n  &#125;\n&#125;\n\ntips: \n  1.将这些变量作为参数 params 传递，我们可以查询时动态改变脚本无须重新编译。\n  2.JSON 不能接受内嵌的换行符，脚本中的换行符可以用 \\n 或 ; 符号替代</code></pre>\n<h2 id=\"人类语言处理\"><a href=\"#人类语言处理\" class=\"headerlink\" title=\"人类语言处理\"></a>人类语言处理</h2><pre><code class=\"textmate\">分词器\n  standard(标准分词器)、english(英文分词器)、icu(亚洲语言分词器)\n\n错误拼写匹配-语音匹配\n    搜索发音相似的词，即使他们的拼写不同。 Soundex算法</code></pre>\n<h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h2><h3 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h3><pre><code class=\"textmate\">桶（Buckets）\n    满足特定条件的文档的集合\n指标（Metrics）\n    对桶内的文档进行统计计算\n每个聚合都是一个或者多个桶和零个或者多个指标的组合\n\n桶在概念上类似于 SQL 的分组（GROUP BY），而指标则类似于 COUNT() 、 SUM() 、 MAX() 等统计方法。\n\n例：\nSELECT COUNT(color)  FROM table GROUP BY color;\n1.COUNT(color) 相当于指标。\n2.GROUP BY color 相当于桶。</code></pre>\n<h3 id=\"桶\"><a href=\"#桶\" class=\"headerlink\" title=\"桶\"></a>桶</h3><pre><code class=\"textmate\">桶 简单来说就是满足特定条件的文档的集合\n1.当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件。如果匹配到，文档将放入相应的桶并接着进行聚合操作。\n2.桶也可以被嵌套在其他桶里面，提供层次化的或者有条件的划分方案。\n3.Elasticsearch 有很多种类型的桶，能让你通过很多种方式来划分文档（时间、最受欢迎的词、年龄区间、地理位置等等）。其实根本上都是通过同样的原理进行操作：基于条件来划分文档。</code></pre>\n<h3 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h3><pre><code class=\"textmate\">桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的的手段：它提供了一种给文档分组的方法来让我们可以计算感兴趣的指标。\n\n大多数 指标 是简单的数学运算（例如最小值、平均值、最大值，还有汇总），这些是通过文档的值来计算。在实践中，指标能让你计算像平均薪资、最高出售价格、95%的查询延迟这样的数据。\n\n聚合 \n    由桶和指标组成的。 聚合可能只有一个桶，可能只有一个指标，或者可能两个都有。也有可能有一些桶嵌套在其他桶里面。</code></pre>\n<h3 id=\"条形图\"><a href=\"#条形图\" class=\"headerlink\" title=\"条形图\"></a>条形图</h3><pre><code class=\"textmate\">聚合还有一个令人激动的特性就是能够十分容易地将它们转换成图表和图形。\n例:\nGET /cars/transactions/_search\n&#123;\n   &quot;size&quot; : 0,\n   &quot;aggs&quot;:&#123;\n      &quot;price&quot;:&#123;\n         &quot;histogram&quot;:&#123;\n            &quot;field&quot;: &quot;price&quot;,\n            &quot;interval&quot;: 20000\n         &#125;,\n         &quot;aggs&quot;:&#123;\n            &quot;revenue&quot;: &#123;\n               &quot;sum&quot;: &#123; \n                 &quot;field&quot; : &quot;price&quot;\n               &#125;\n             &#125;\n         &#125;\n      &#125;\n   &#125;\n&#125;\n\n//响应结果-直方图\n&#123;\n...\n   &quot;aggregations&quot;: &#123;\n      &quot;price&quot;: &#123;\n         &quot;buckets&quot;: [\n            &#123;\n               &quot;key&quot;: 0,\n               &quot;doc_count&quot;: 3,\n               &quot;revenue&quot;: &#123;\n                  &quot;value&quot;: 37000\n               &#125;\n            &#125;,\n            &#123;\n               &quot;key&quot;: 20000,\n               &quot;doc_count&quot;: 4,\n               &quot;revenue&quot;: &#123;\n                  &quot;value&quot;: 95000\n               &#125;\n            &#125;\n         ]\n      &#125;\n   &#125;\n&#125;</code></pre>\n<h3 id=\"按时间统计\"><a href=\"#按时间统计\" class=\"headerlink\" title=\"按时间统计\"></a>按时间统计</h3><pre><code class=\"textmate\">//查询脚本\nGET /cars/transactions/_search\n&#123;\n   &quot;size&quot; : 0,\n   &quot;aggs&quot;: &#123;\n      &quot;sales&quot;: &#123;\n         &quot;date_histogram&quot;: &#123;\n            &quot;field&quot;: &quot;sold&quot;,\n            &quot;interval&quot;: &quot;month&quot;, \n            &quot;format&quot;: &quot;yyyy-MM-dd&quot;,\n               &quot;min_doc_count&quot; : 0,    //强制返回空 buckets。\n            &quot;extended_bounds&quot; : &#123;   //强制返回整年。\n                &quot;min&quot; : &quot;2014-01-01&quot;,\n                &quot;max&quot; : &quot;2014-12-31&quot;\n            &#125;\n         &#125;\n      &#125;\n   &#125;\n&#125;\n\n//返回结果\n&#123;\n   ...\n   &quot;aggregations&quot;: &#123;\n      &quot;sales&quot;: &#123;\n         &quot;buckets&quot;: [\n            &#123;\n               &quot;key_as_string&quot;: &quot;2014-01-01&quot;,\n               &quot;key&quot;: 1388534400000,\n               &quot;doc_count&quot;: 1\n            &#125;,\n            &#123;\n               &quot;key_as_string&quot;: &quot;2014-02-01&quot;,\n               &quot;key&quot;: 1391212800000,\n               &quot;doc_count&quot;: 1\n            &#125;\n         ]\n...\n&#125;</code></pre>\n<h3 id=\"Doc-Values\"><a href=\"#Doc-Values\" class=\"headerlink\" title=\"Doc Values\"></a>Doc Values</h3><pre><code class=\"textmate\">1.聚合使用一个叫 doc values 的数据结构。Doc values 可以使聚合更快、更高效并且内存友好\n2.Doc values 的存在是因为倒排索引只对某些操作是高效的。 倒排索引的优势 在于查找包含某个项的文档，而对于从另外一个方向的相反操作并不高效，即：确定哪些项是否存在单个文档里，聚合需要这种次级的访问模式。\n3.Doc Values 是在索引时与 倒排索引 同时生成。也就是说 Doc Values 和 倒排索引 一样，基于 Segement 生成并且是不可变的。同时 Doc Values 和 倒排索引 一样序列化到磁盘，这样对性能和扩展性有很大帮助。\n\nDoc Values 通过序列化把数据结构持久化到磁盘，我们可以充分利用操作系统的内存，而不是 JVM 的 Heap 。 当 working set 远小于系统的可用内存，系统会自动将 Doc Values 驻留在内存中，使得其读写十分快速；不过，当其远大于可用内存时，系统会根据需要从磁盘读取 Doc Values，然后选择性放到分页缓存中。\n\n原理:\n    Doc values 通过转置两者间的关系来解决这个问题。倒排索引将词项映射到包含它们的文档，doc values 将文档映射到它们包含的词项\n\n用途:\nDoc values 不仅可以用于聚合。 任何需要查找某个文档包含的值的操作都必须使用它。 除了聚合，还包括排序，访问字段值的脚本，父子关系处理</code></pre>\n<h2 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h2><pre><code class=\"textmate\">Elasticsearch 提供了 两种表示地理位置的方式：\n1.用纬度－经度表示的坐标点使用 geo_point 字段类型\n2.用GeoJSON 格式定义的复杂地理形状，使用 geo_shape 字段类型。\n\nGeo-points 允许你找到距离另一个坐标点一定范围内的坐标点、计算出两点之间的距离来排序或进行相关性打分、或者聚合到显示在地图上的一个网格。另一方面，Geo-shapes 纯粹是用来过滤的。它们可以用来判断两个地理形状是否有重合或者某个地理形状是否完全包含了其他地理形状。\n\nGeohashes 是一种将经纬度坐标（ lat/lon ）编码成字符串的方式。这么做的初衷只是为了让地理位置在 url 上呈现的形式更加友好，但现在 geohashes 已经变成一种在数据库中有效索引地理坐标点和地理形状的方式。\nGeohashes 把整个世界分为 32 个单元的格子 —— 4 行 8 列 —— 每一个格子都用一个字母或者数字标识。</code></pre>\n<h2 id=\"数据建模\"><a href=\"#数据建模\" class=\"headerlink\" title=\"数据建模\"></a>数据建模</h2><pre><code class=\"textmate\">Elasticsearch建模\n    关联关系处理 、 嵌套对象 和 父-子关系文档 \n另外ES支持多种扩容方式</code></pre>\n<h2 id=\"运维\"><a href=\"#运维\" class=\"headerlink\" title=\"运维\"></a>运维</h2><pre><code class=\"textmate\">支持动态更新的参数\nhttps://www.elastic.co/guide/en/elasticsearch/reference/5.6/cluster-update-settings.html\n集群备份、快照恢复</code></pre>\n"},{"title":"Redis学习笔记","description":"redis","date":"2021-02-02T11:59:00.000Z","_content":"\n### Redis相关\n\n#### RedisTemplate配置\n```java\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory){\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(connectionFactory);\n\n        //key的序列化方式\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        // string的key序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n\n        //value的序列化方式\n        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        om.registerModule(new JavaTimeModule());\n        serializer.setObjectMapper(om);\n\n        //string的value序列化方式\n        template.setValueSerializer(serializer);\n        // hash的value序列化方式\n        template.setHashValueSerializer(stringRedisSerializer);\n        \n        template.afterPropertiesSet();\n        return template;\n    }\n}\n```\n### RedisTemplate k-v序列化差异\n<img src=\"https://im-fan.gitee.io/img/cache/redisTemplate-serialize.png\"/>\n\n### RedisTemplate 操作hash\n```java\n//redis中的hash相当于java中的HashMap\n\nString key = \"key\";\nMap<String,String> hashMap = new HashMap<>();\nhashMap.put(\"a\",JSON.toJSONString(new Object()));\nhashMap.put(\"b\",JSON.toJSONString(new Object()));\n\n//所有值\nredisTemplate.opsForHash().putAll(key,hashMap);\n\n//获取单个值\nList<String> hashKey = new ArrayList<>();\nhashKey.add(\"a\"); // 获取hash中的某个key下的值\nredisTemplate.opsForHash().multiGet(key,hashKey);\n\n//设置单个值\nString hk = \"hash 的key\";\nString hv = \"hash 的value\";\nredisTemplate.opsForHash().put(key,hk,hv);\n\n//删除key\nString[] hkeys = {hk};\nredisTemplate.opsForHash().delete(key, hkeys);\n\n```\n\n### Redis原子操作的两种方式\n#### Lua脚本\n```shell\n-- lua语法 https://www.runoob.com/lua/lua-tutorial.html\n-- 实现一个原子锁,存在key则返回失败,否则返回存储并返回成功\n-- 关键字必须大写 参数1:value 参数2:有效时长\n\n-- call 与 pcall区别  call执行错误就直接返回,pcall错误则返回一个带 err 域的 Lua 表(table),用于表示错误\n\n-- 存在则直接返回失败\nlocal val = redis.call(\"get\",KEYS[1])\n\n-- 不存在,则获取锁\nif val then\n    return 0\nelse\n    redis.call(\"set\",KEYS[1],ARGV[1])\n    redis.call('expire',KEYS[1],ARGV[2])\n    return 1\nend\n```\n```java\n@Service\npublic class LuaService {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * lua文件所在路径\n     * @parm key 键\n     * @param ttl 过期时间，秒\n     **/\n    public boolean getAtomLock(String key,long ttl){\n        String lockKey = \"my:lock:\" + key;\n        // lua脚本所在resource目录下的相对路径\n        String luaName = \"lua/atom_lock.lua\";\n        // 执行 lua 脚本\n        DefaultRedisScript<Long> redisScript = new DefaultRedisScript<>();\n        // 指定 lua 脚本\n        redisScript.setScriptSource(new ResourceScriptSource(new ClassPathResource(luaName)));\n        // 指定返回类型\n        redisScript.setResultType(Long.class);\n        // 参数一：redisScript，参数二：key列表，参数三：arg（可多个）\n        Long result = (Long) redisTemplate.execute(redisScript, Collections.singletonList(lockKey),1,ttl);\n        return result != null && result == 1L;\n    }\n}\n\n```\n#### 事务操作\n- execute方式\n```java\n@Service\npublic class RedisService {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 不存则在获取锁\n     * @param key\n     * @param value 值\n     * @param expire 过期时间，秒\n     * **/\n    public boolean setAndExpireIfAbsent(final String key, final String value, final long expire) {\n        boolean isSuccess = (boolean) redisTemplate.execute((RedisCallback) connection -> {\n            Object object = connection.execute(\"set\",\n                    key.getBytes(),\n                    value.getBytes(),\n                    SafeEncoder.encode(\"NX\"),\n                    SafeEncoder.encode(\"EX\"),\n                    Protocol.toByteArray(expire));\n            return null != object;\n        });\n        return isSuccess;\n    }\n}\n```\n\n","source":"_posts/backend/storage/redis.md","raw":"---\ntitle: Redis学习笔记\ndescription: redis\ndate: 2021-02-02 19:59:00\ntags:\n- cache\ncategories:\n- 存储\n---\n\n### Redis相关\n\n#### RedisTemplate配置\n```java\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory){\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(connectionFactory);\n\n        //key的序列化方式\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        // string的key序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n\n        //value的序列化方式\n        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        om.registerModule(new JavaTimeModule());\n        serializer.setObjectMapper(om);\n\n        //string的value序列化方式\n        template.setValueSerializer(serializer);\n        // hash的value序列化方式\n        template.setHashValueSerializer(stringRedisSerializer);\n        \n        template.afterPropertiesSet();\n        return template;\n    }\n}\n```\n### RedisTemplate k-v序列化差异\n<img src=\"https://im-fan.gitee.io/img/cache/redisTemplate-serialize.png\"/>\n\n### RedisTemplate 操作hash\n```java\n//redis中的hash相当于java中的HashMap\n\nString key = \"key\";\nMap<String,String> hashMap = new HashMap<>();\nhashMap.put(\"a\",JSON.toJSONString(new Object()));\nhashMap.put(\"b\",JSON.toJSONString(new Object()));\n\n//所有值\nredisTemplate.opsForHash().putAll(key,hashMap);\n\n//获取单个值\nList<String> hashKey = new ArrayList<>();\nhashKey.add(\"a\"); // 获取hash中的某个key下的值\nredisTemplate.opsForHash().multiGet(key,hashKey);\n\n//设置单个值\nString hk = \"hash 的key\";\nString hv = \"hash 的value\";\nredisTemplate.opsForHash().put(key,hk,hv);\n\n//删除key\nString[] hkeys = {hk};\nredisTemplate.opsForHash().delete(key, hkeys);\n\n```\n\n### Redis原子操作的两种方式\n#### Lua脚本\n```shell\n-- lua语法 https://www.runoob.com/lua/lua-tutorial.html\n-- 实现一个原子锁,存在key则返回失败,否则返回存储并返回成功\n-- 关键字必须大写 参数1:value 参数2:有效时长\n\n-- call 与 pcall区别  call执行错误就直接返回,pcall错误则返回一个带 err 域的 Lua 表(table),用于表示错误\n\n-- 存在则直接返回失败\nlocal val = redis.call(\"get\",KEYS[1])\n\n-- 不存在,则获取锁\nif val then\n    return 0\nelse\n    redis.call(\"set\",KEYS[1],ARGV[1])\n    redis.call('expire',KEYS[1],ARGV[2])\n    return 1\nend\n```\n```java\n@Service\npublic class LuaService {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * lua文件所在路径\n     * @parm key 键\n     * @param ttl 过期时间，秒\n     **/\n    public boolean getAtomLock(String key,long ttl){\n        String lockKey = \"my:lock:\" + key;\n        // lua脚本所在resource目录下的相对路径\n        String luaName = \"lua/atom_lock.lua\";\n        // 执行 lua 脚本\n        DefaultRedisScript<Long> redisScript = new DefaultRedisScript<>();\n        // 指定 lua 脚本\n        redisScript.setScriptSource(new ResourceScriptSource(new ClassPathResource(luaName)));\n        // 指定返回类型\n        redisScript.setResultType(Long.class);\n        // 参数一：redisScript，参数二：key列表，参数三：arg（可多个）\n        Long result = (Long) redisTemplate.execute(redisScript, Collections.singletonList(lockKey),1,ttl);\n        return result != null && result == 1L;\n    }\n}\n\n```\n#### 事务操作\n- execute方式\n```java\n@Service\npublic class RedisService {\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 不存则在获取锁\n     * @param key\n     * @param value 值\n     * @param expire 过期时间，秒\n     * **/\n    public boolean setAndExpireIfAbsent(final String key, final String value, final long expire) {\n        boolean isSuccess = (boolean) redisTemplate.execute((RedisCallback) connection -> {\n            Object object = connection.execute(\"set\",\n                    key.getBytes(),\n                    value.getBytes(),\n                    SafeEncoder.encode(\"NX\"),\n                    SafeEncoder.encode(\"EX\"),\n                    Protocol.toByteArray(expire));\n            return null != object;\n        });\n        return isSuccess;\n    }\n}\n```\n\n","slug":"backend/storage/redis","published":1,"updated":"2021-07-26T07:38:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry1002sjrnvccce4spi","content":"<h3 id=\"Redis相关\"><a href=\"#Redis相关\" class=\"headerlink\" title=\"Redis相关\"></a>Redis相关</h3><h4 id=\"RedisTemplate配置\"><a href=\"#RedisTemplate配置\" class=\"headerlink\" title=\"RedisTemplate配置\"></a>RedisTemplate配置</h4><pre><code class=\"java\">@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport &#123;\n    @Bean\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory)&#123;\n        RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;();\n        template.setConnectionFactory(connectionFactory);\n\n        //key的序列化方式\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        // string的key序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n\n        //value的序列化方式\n        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        om.registerModule(new JavaTimeModule());\n        serializer.setObjectMapper(om);\n\n        //string的value序列化方式\n        template.setValueSerializer(serializer);\n        // hash的value序列化方式\n        template.setHashValueSerializer(stringRedisSerializer);\n\n        template.afterPropertiesSet();\n        return template;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"RedisTemplate-k-v序列化差异\"><a href=\"#RedisTemplate-k-v序列化差异\" class=\"headerlink\" title=\"RedisTemplate k-v序列化差异\"></a>RedisTemplate k-v序列化差异</h3><img src=\"https://im-fan.gitee.io/img/cache/redisTemplate-serialize.png\"/>\n\n<h3 id=\"RedisTemplate-操作hash\"><a href=\"#RedisTemplate-操作hash\" class=\"headerlink\" title=\"RedisTemplate 操作hash\"></a>RedisTemplate 操作hash</h3><pre><code class=\"java\">//redis中的hash相当于java中的HashMap\n\nString key = &quot;key&quot;;\nMap&lt;String,String&gt; hashMap = new HashMap&lt;&gt;();\nhashMap.put(&quot;a&quot;,JSON.toJSONString(new Object()));\nhashMap.put(&quot;b&quot;,JSON.toJSONString(new Object()));\n\n//所有值\nredisTemplate.opsForHash().putAll(key,hashMap);\n\n//获取单个值\nList&lt;String&gt; hashKey = new ArrayList&lt;&gt;();\nhashKey.add(&quot;a&quot;); // 获取hash中的某个key下的值\nredisTemplate.opsForHash().multiGet(key,hashKey);\n\n//设置单个值\nString hk = &quot;hash 的key&quot;;\nString hv = &quot;hash 的value&quot;;\nredisTemplate.opsForHash().put(key,hk,hv);\n\n//删除key\nString[] hkeys = &#123;hk&#125;;\nredisTemplate.opsForHash().delete(key, hkeys);\n</code></pre>\n<h3 id=\"Redis原子操作的两种方式\"><a href=\"#Redis原子操作的两种方式\" class=\"headerlink\" title=\"Redis原子操作的两种方式\"></a>Redis原子操作的两种方式</h3><h4 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h4><pre><code class=\"shell\">-- lua语法 https://www.runoob.com/lua/lua-tutorial.html\n-- 实现一个原子锁,存在key则返回失败,否则返回存储并返回成功\n-- 关键字必须大写 参数1:value 参数2:有效时长\n\n-- call 与 pcall区别  call执行错误就直接返回,pcall错误则返回一个带 err 域的 Lua 表(table),用于表示错误\n\n-- 存在则直接返回失败\nlocal val = redis.call(&quot;get&quot;,KEYS[1])\n\n-- 不存在,则获取锁\nif val then\n    return 0\nelse\n    redis.call(&quot;set&quot;,KEYS[1],ARGV[1])\n    redis.call(&#39;expire&#39;,KEYS[1],ARGV[2])\n    return 1\nend</code></pre>\n<pre><code class=\"java\">@Service\npublic class LuaService &#123;\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * lua文件所在路径\n     * @parm key 键\n     * @param ttl 过期时间，秒\n     **/\n    public boolean getAtomLock(String key,long ttl)&#123;\n        String lockKey = &quot;my:lock:&quot; + key;\n        // lua脚本所在resource目录下的相对路径\n        String luaName = &quot;lua/atom_lock.lua&quot;;\n        // 执行 lua 脚本\n        DefaultRedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;();\n        // 指定 lua 脚本\n        redisScript.setScriptSource(new ResourceScriptSource(new ClassPathResource(luaName)));\n        // 指定返回类型\n        redisScript.setResultType(Long.class);\n        // 参数一：redisScript，参数二：key列表，参数三：arg（可多个）\n        Long result = (Long) redisTemplate.execute(redisScript, Collections.singletonList(lockKey),1,ttl);\n        return result != null &amp;&amp; result == 1L;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"事务操作\"><a href=\"#事务操作\" class=\"headerlink\" title=\"事务操作\"></a>事务操作</h4><ul>\n<li><p>execute方式</p>\n<pre><code class=\"java\">@Service\npublic class RedisService &#123;\n\n  @Autowired\n  private RedisTemplate redisTemplate;\n\n  /**\n   * 不存则在获取锁\n   * @param key\n   * @param value 值\n   * @param expire 过期时间，秒\n   * **/\n  public boolean setAndExpireIfAbsent(final String key, final String value, final long expire) &#123;\n      boolean isSuccess = (boolean) redisTemplate.execute((RedisCallback) connection -&gt; &#123;\n          Object object = connection.execute(&quot;set&quot;,\n                  key.getBytes(),\n                  value.getBytes(),\n                  SafeEncoder.encode(&quot;NX&quot;),\n                  SafeEncoder.encode(&quot;EX&quot;),\n                  Protocol.toByteArray(expire));\n          return null != object;\n      &#125;);\n      return isSuccess;\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Redis相关\"><a href=\"#Redis相关\" class=\"headerlink\" title=\"Redis相关\"></a>Redis相关</h3><h4 id=\"RedisTemplate配置\"><a href=\"#RedisTemplate配置\" class=\"headerlink\" title=\"RedisTemplate配置\"></a>RedisTemplate配置</h4><pre><code class=\"java\">@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport &#123;\n    @Bean\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory)&#123;\n        RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;();\n        template.setConnectionFactory(connectionFactory);\n\n        //key的序列化方式\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        // string的key序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n\n        //value的序列化方式\n        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        om.registerModule(new JavaTimeModule());\n        serializer.setObjectMapper(om);\n\n        //string的value序列化方式\n        template.setValueSerializer(serializer);\n        // hash的value序列化方式\n        template.setHashValueSerializer(stringRedisSerializer);\n\n        template.afterPropertiesSet();\n        return template;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"RedisTemplate-k-v序列化差异\"><a href=\"#RedisTemplate-k-v序列化差异\" class=\"headerlink\" title=\"RedisTemplate k-v序列化差异\"></a>RedisTemplate k-v序列化差异</h3><img src=\"https://im-fan.gitee.io/img/cache/redisTemplate-serialize.png\"/>\n\n<h3 id=\"RedisTemplate-操作hash\"><a href=\"#RedisTemplate-操作hash\" class=\"headerlink\" title=\"RedisTemplate 操作hash\"></a>RedisTemplate 操作hash</h3><pre><code class=\"java\">//redis中的hash相当于java中的HashMap\n\nString key = &quot;key&quot;;\nMap&lt;String,String&gt; hashMap = new HashMap&lt;&gt;();\nhashMap.put(&quot;a&quot;,JSON.toJSONString(new Object()));\nhashMap.put(&quot;b&quot;,JSON.toJSONString(new Object()));\n\n//所有值\nredisTemplate.opsForHash().putAll(key,hashMap);\n\n//获取单个值\nList&lt;String&gt; hashKey = new ArrayList&lt;&gt;();\nhashKey.add(&quot;a&quot;); // 获取hash中的某个key下的值\nredisTemplate.opsForHash().multiGet(key,hashKey);\n\n//设置单个值\nString hk = &quot;hash 的key&quot;;\nString hv = &quot;hash 的value&quot;;\nredisTemplate.opsForHash().put(key,hk,hv);\n\n//删除key\nString[] hkeys = &#123;hk&#125;;\nredisTemplate.opsForHash().delete(key, hkeys);\n</code></pre>\n<h3 id=\"Redis原子操作的两种方式\"><a href=\"#Redis原子操作的两种方式\" class=\"headerlink\" title=\"Redis原子操作的两种方式\"></a>Redis原子操作的两种方式</h3><h4 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h4><pre><code class=\"shell\">-- lua语法 https://www.runoob.com/lua/lua-tutorial.html\n-- 实现一个原子锁,存在key则返回失败,否则返回存储并返回成功\n-- 关键字必须大写 参数1:value 参数2:有效时长\n\n-- call 与 pcall区别  call执行错误就直接返回,pcall错误则返回一个带 err 域的 Lua 表(table),用于表示错误\n\n-- 存在则直接返回失败\nlocal val = redis.call(&quot;get&quot;,KEYS[1])\n\n-- 不存在,则获取锁\nif val then\n    return 0\nelse\n    redis.call(&quot;set&quot;,KEYS[1],ARGV[1])\n    redis.call(&#39;expire&#39;,KEYS[1],ARGV[2])\n    return 1\nend</code></pre>\n<pre><code class=\"java\">@Service\npublic class LuaService &#123;\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * lua文件所在路径\n     * @parm key 键\n     * @param ttl 过期时间，秒\n     **/\n    public boolean getAtomLock(String key,long ttl)&#123;\n        String lockKey = &quot;my:lock:&quot; + key;\n        // lua脚本所在resource目录下的相对路径\n        String luaName = &quot;lua/atom_lock.lua&quot;;\n        // 执行 lua 脚本\n        DefaultRedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;();\n        // 指定 lua 脚本\n        redisScript.setScriptSource(new ResourceScriptSource(new ClassPathResource(luaName)));\n        // 指定返回类型\n        redisScript.setResultType(Long.class);\n        // 参数一：redisScript，参数二：key列表，参数三：arg（可多个）\n        Long result = (Long) redisTemplate.execute(redisScript, Collections.singletonList(lockKey),1,ttl);\n        return result != null &amp;&amp; result == 1L;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"事务操作\"><a href=\"#事务操作\" class=\"headerlink\" title=\"事务操作\"></a>事务操作</h4><ul>\n<li><p>execute方式</p>\n<pre><code class=\"java\">@Service\npublic class RedisService &#123;\n\n  @Autowired\n  private RedisTemplate redisTemplate;\n\n  /**\n   * 不存则在获取锁\n   * @param key\n   * @param value 值\n   * @param expire 过期时间，秒\n   * **/\n  public boolean setAndExpireIfAbsent(final String key, final String value, final long expire) &#123;\n      boolean isSuccess = (boolean) redisTemplate.execute((RedisCallback) connection -&gt; &#123;\n          Object object = connection.execute(&quot;set&quot;,\n                  key.getBytes(),\n                  value.getBytes(),\n                  SafeEncoder.encode(&quot;NX&quot;),\n                  SafeEncoder.encode(&quot;EX&quot;),\n                  Protocol.toByteArray(expire));\n          return null != object;\n      &#125;);\n      return isSuccess;\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n"},{"title":"MySQL相关-知识点","date":"2021-07-20T01:45:00.000Z","_content":"\n### 相关文档\n- [Jeremy Cole的博客](https://blog.jcole.us/innodb)\n- [MySQL8.0的源码文档](https://dev.mysql.com/doc/dev/mysql-server)\n- [mariadb-innodb原理文档(带图)](https://publications.sba-research.org/publications/WSDF2012_InnoDB.pdf)\n- [MySQL Team Blog](http://mysqlserverteam.com/)\n- [非官方MySQL8.0优化器指南](http://www.unofficialmysqlguide.com/optimizer-trace.html)\n\n## 部分总结\n### Innodb引擎的4大特性\n> [参考文档](https://www.cnblogs.com/zhs0/p/10528520.html)\n- 插入缓冲\n- 二次写\n- 自适应哈希\n- 预读\n\n#### 插入缓冲\n```textmate\n用于提升插入性能，分为Insert Buffer、Change Buffer\nchange buffering是insert buffer的加强，insert buffer只针对insert有效，change buffering对insert、delete、update(delete+insert)、purge都有效\n\n使用插入缓冲的条件：\n* 非聚集索引\n* 非唯一索引\n```\n\n#### 事务\n- 事务的特性ACID\n```textmate\n原子性(atomicity)：一个事务被事务不可分割的最小工作单元，要么全部提交，要么全部失败回滚。\n一致性(consistency)：数据库总是从一致性状态到另一个一致性状态，它只包含成功事务提交的结果\n隔离型(isolation)：事务所做的修改在最终提交一起，对其他事务是不可见的\n持久性(durability)：一旦事务提交，则其所做的修改就会永久保存到数据库中。\n```\n\n- 事务隔离级别 \n\n| |脏读|不可重复读|幻读|解决原理|\n|---|---|---|---|---|\n|读未提交|x|x|x||\n|读已提交|√|x|x||\n|可重复读|√|√|x|gap锁 (mysql默认级别)|\n|串行化|√|√|√|读锁|\n\n#### 重要文件\n- undolog\n- redolog\n- binlog\n\n#### 存储引擎\n- MyISAM\n- Heap\n- Merge\n- INNODB\n- ISAM\n\n## 《MySQL是怎样运行的：从根上理解MySQL》 读书笔记\n> 第一次读，摘录了其中部分知识点 2021-09-13读完\n\n### InnoDB数据格式\n- 内存与磁盘交互方式\n```textmate\nInnoDB 采取的方式是:将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小 一般为 16 KB。\n也就是在一般情况下，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB 内容刷新到磁盘中。\n```\n\n- 行格式\n<br/>[Compact行](https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-compact%E8%A1%8C%E6%A0%BC%E5%BC%8F.png)\n```textmate\n  Compact 、 Redundant 、Dynamic 和 Compressed\n  变长字段(varchar(n)、text等)占用内存：1. 真正的数据内容 2. 占用的字节数\n  对于 CHAR(M) 类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字 段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表。\n```\n\n- 数据太多造成的溢出\n```textmate\n  行溢出：一个页一般是 16KB ，当记录中的数据太多，当前页放不下的时候，会把多余的数据存储到其他页中；\n  MySQL 是以 页为单位管理存储空间，一个页一般16kb,16384字节，一个varchar最多存储65532个字节\n  对于占用存储空间非常大的列，在 记录的真实数据 处只会存储该列的一部 分数据，把剩余的数据分散存储在几个其他的页中，然后记录的真实数据处用20个字节存储指向这些页的地址 \n  (当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数)，从而可以找到剩余数据所在的页，\n```\n\n- 行溢出的临界点\n```textmate\nMySQL 中规定一个页中至少存放两行记录\n对于只有一个列的表，发生行溢出现象时需要满足这个式子: 136 + 2×(27 + n) > 16384 ， n > 8098\n重点:\n    不用关注这个临界点是什么，只要知道如果我们向一个行中存储了很大的数据时，可能发生 行溢出 的现象\n不论我们怎么对页中的记录做增删改操作，InnoDB始终会维护一条记录的单链表，链表中的各个 节点是按照主键值由小到大的顺序连接起来的\n```\n\n- 总结\n<br/>[InnoDB数据页结构](https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB_data_page.png)\n\n```textmate\n1. InnoDB为了不同的目的而设计了不同类型的页，我们把用于存放记录的页叫做 数据页 。\n2. 一个数据页可以被大致划分为7个部分，分别是\n   File Header ，表示页的一些通用信息，占固定的38字节。\n   Page Header ，表示数据页专有的一些信息，占固定的56个字节。\n   Infimum + Supremum ，两个虚拟的伪记录，分别表示页中的最小和最大记录，占固定的 26 个字节。\n   User Records :真实存储我们插入的记录的部分，大小不固定。\n   Free Space :页中尚未使用的部分，大小不确定。\n   Page Directory: 页中的某些记录相对位置，也就是各个槽在页面中的地址偏移量，大小不固定，插入的记录越多，这个部分占用的空间越多。\n   File Trailer :用于检验页是否完整的部分，占用固定的8个字节。\n3. 每个记录的头信息中都有一个 next_record 属性，从而使页中的所有记录串联成一个 单链表 。\n4. InnoDB 会为把页中的记录划分为若干个组，每个组的最后一个记录的地址偏移量作为一个 槽 ，存放在\n   Page Directory 中，所以在一个页中根据主键查找记录是非常快的，分为两步:\n   4.1 通过二分法确定该记录所在的槽。\n   4.2 通过记录的next_record属性遍历该槽所在的组中的各个记录。\n5. 每个数据页的 File Header 部分都有上一个和下一个页的编号，所以所有的数据页会组成一个 双链表 。\n6. 为保证从内存中同步到磁盘的页的完整性，在页的首部和尾部都会存储页中数据的校验和和页面最后修改时\n   对应的 LSN 值，如果首部和尾部的校验和和 LSN 值校验不成功的话，就说明同步过程出现了问题。\n```\n\n- Innodb通用页结构\n<br/>[Innodb通用页结构](https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n<br/>[Innodb通用页结构-解释](https://gitee.com/im-fan/fan-pic/raw/master/images/Innodb%E9%80%9A%E7%94%A8%E9%A1%B5%E7%BB%93%E6%9E%84-%E8%A7%A3%E9%87%8A.png)\n\n```textmate\n表空间结构(系统表空间/独立表空间)\n连续64个页面 = 一个区(默认1MB)\n每256个区被划分为一个组\n每个组的最开始的几个页面类型是固定的\n1.FSP_HDR 类型:这个类型的页面是用来登记整个表空间的一些整体属性以及本组所有的 区 ，也就是\n  extent 0 ~ extent 255 这256个区的属性，稍后详细唠叨。需要注意的一点是，整个表空间只有一 个 FSP_HDR 类型的页面。\n2.IBUF_BITMAP 类型:这个类型的页面是存储本组所有的区的所有页面关于 INSERT BUFFER 的信息。\n3.INODE 类型:这个类型的页面存储了许多称为 INODE 的数据结构，\n\n其余各组最开始的2个页面的类型是固定的\n1.DES 类型:全称是 extent descriptor ，用来登记本组256个区的属性，也就是说对于在 extent 256 区中的该类型页面存储的就是 extent 256 ~ extent 511 这些区的属性，对于在 extent 512 区中的该 类型页面存储的就是 extent 512 ~ extent 767 这些区的属性。上边介绍的 FSP_HDR 类型的页面其实 和 XDES 类型的页面的作用类似，只不过 FSP_HDR 类型的页面还会额外存储一些表空间的属性。\n2.IBUF_BITMAP\n```\n\n- [InnonDB文件结构总结](https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innondb%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png)\n\n\n### 索引\n```textmate\nSHOW INDEX FROM 表名 - 索引统计数据\n    对于InnoDB存储引擎来说，使用SHOW INDEX语句展示出来的某个索引列的Cardinality属性是一个估计 值，并不是精确的\n注意：\n    在MySQL 5.7.3以及之前的版本中，eq_range_index_dive_limit的默认值为10，之 后的版本默认值为200。\n    所以如果大家采用的是5.7.3以及之前的版本的话，很容易采用索引统计数据而 不是index dive的方式来计算查询成本。当你的查询中使用到了IN查询，但是却实际没有用到索引，就 应该考虑一下是不是由于 eq_range_index_dive_limit 值太小导致的。\n连接查询的成本计算公式:\n    连接查询总成本 = 单次访问驱动表的成本 + 驱动表扇出数 x 单次访问被驱动表的成本\n```\n#### InnoDB统计数据的方式\n```textmate\nInnoDB 以表为单位来收集统计数据，这些统计数据可以是基于磁盘的永久性统计数据，也可以是基于内存 的非永久性统计数据。\n    innodb_stats_persistent 控制着使用永久性统计数据还是非永久性统计数据; \n    innodb_stats_persistent_sample_pages 控制着永久性统计数据的采样页面数量; \n    innodb_stats_transient_sample_pages 控制着非永久性统计数据的采样页面数量; \n    innodb_stats_auto_recalc 控制着是否自动重新计算统计数据。\n我们可以针对某个具体的表，在创建和修改表时通过指定 STATS_PERSISTENT 、 STATS_AUTO_RECALC 、 STATS_SAMPLE_PAGES 的值来控制相关统计数据属性。\n    innodb_stats_method 决定着在统计某个索引列不重复值的数量时如何对待 NULL 值。\n通过配置将决定权交给用户\n    1.nulls_equal :认为所有 NULL 值都是相等的。这个值也是 innodb_stats_method 的默认值。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 多，所以倾向于不使用索引进行访问。\n    2.nulls_unequal :认为所有 NULL 值都是不相等的。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 少，所以倾向于使用索引进行访问。\n    3.nulls_ignored :直接把 NULL 值忽略掉。\n```\n\n#### SQL重写方式\n##### 条件化简\n```textmate\n1.移除不必要的括号\n2.常量传递\n    a = 5 AND b > a 改写为 a = 5 AND b > 5\n3.等值传递\n    a = b and b = c and c = 5 改写为 a = 5 and b = 5 and c = 5\n4.移除没用的条件\n    (a < 1 and b = b) OR (a = 6 OR 5 != 5) 改写为 (a < 1 and TRUE) OR (a = 6 OR FALSE)  ==>  a < 1 OR a = 6\n5.表达式计算\n    a =5 + 1 改写为 a=6\n6.having和where子句合并\n7.常量表检测\n```\n\n##### 外连接消除\n- 外连接和内连接区别\n```textmate\n外连接和内连接的本质区别就是:\n    对于外连接的驱动表的记录来说，如果无法在被驱动表中找到 匹配ON子句中的过滤条件的记录，那么该记录仍然会被加入到结果集中，对应的被驱动表记录的各个字段使用 NULL值填充;\n    而内连接的驱动表的记录如果无法在被驱动表中找到匹配ON子句中的过滤条件的记录，那么该记 录会被舍弃\n空值拒绝:\n    在被驱动表的WHERE子句符合空值拒绝的条件后，外连接和内连接可以相互转 换。这种转换带来的好处就是查询优化器可以通过评估表的不同连接顺序的成本，选出成本最低的那种连接顺序 来执行查询。\n```\n\n##### 子查询优化\n```textmate\n1.按返回的结果集区分子查询\n    标量子查询\n    行子查询\n    列子查询\n    表子查询\n2.按与外层查询关系来区分子查询\n    不相关子查询\n    相关子查询\n3.子查询在布尔表达式中的使用\n4.子查询语法注意事项\n    4.1 子查询必须用小括号扩起来\n    4.2 在 SELECT 子句中的子查询必须是标量子查询\n    4.3 在想要得到标量子查询或者行子查询，但又不能保证子查询的结果集只有一条记录时，应该使用LIMIT 1语句来限制记录数量。\n    4.4 对于[NOT]IN/ANY/SOME/ALL 子查询来说，子查询中不允许有 LIMIT 语句。\n    4.5 不允许在一条语句中增删改某个表的记录时同时还对该表进行子查询。\n\n    如果 IN 子查询符合转换为 semi-join 的条件，查询优化器会优先把该子查询为 semi-join ，然后再考虑下边5种执行半连接的策略中哪个成本最低:\n    Table pullout\n    DuplicateWeedout \n    LooseScan \n    Materialization \n    FirstMatch\n    选择成本最低的那种执行策略来执行子查询。\n    如果 IN 子查询不符合转换为 semi-join 的条件，那么查询优化器会从下边两种策略中找出一种成本更低的 方式执行子查询:\n    先将子查询物化之后再执行查询 执行 IN to EXISTS 转换。\n\n5.[NOT] EXISTS子查询的执行\n    如果 [NOT] EXISTS 子查询是不相关子查询，可以先执行子查询，得出该 [NOT] EXISTS 子查询的结果是 TRUE 还\n    是 FALSE ，并重写原先的查询语句\n\n6.对于派生表的优化\n    6.1 最容易想到的就是把派生表物化\n    6.2将派生表和外层的表合并，也就是将查询重写为没有派生表的形式\n```\n\n### Explain\n##### 查看优化器生成执行计划的整个过程\n```textmate\nSHOW VARIABLES LIKE 'optimizer_trace';\n 1. 打开optimizer trace功能 (默认情况下它是关闭的):\n    SET optimizer_trace=\"enabled=on\";\n 2. 这里输入你自己的查询语句 SELECT ...;\n 3. 从OPTIMIZER_TRACE表中查看上一个查询的优化过程 \n    SELECT * FROM information_schema.OPTIMIZER_TRACE;\n 4. 可能你还要观察其他语句执行的优化过程，重复上边的第2、3步 ...\n 5. 当你停止查看语句的优化过程时，把optimizer trace功能关闭 SET optimizer_trace=\"enabled=off\";\n```\n\n### 磁盘\n#### 总结\n```textmate\n1. 磁盘太慢，用内存作为缓存很有必要。\n2. Buffer Pool 本质上是 InnoDB 向操作系统申请的一段连续的内存空间，可以通过\n   innodb_buffer_pool_size 来调整它的大小。\n3. Buffer Pool 向操作系统申请的连续内存由控制块和缓存页组成，每个控制块和缓存页都是一一对应的，在\n   填充足够多的控制块和缓存页的组合后， Buffer Pool 剩余的空间可能产生不够填充一组控制块和缓存页，\n   这部分空间不能被使用，也被称为 碎片 。\n4. InnoDB 使用了许多 链表 来管理 Buffer Pool 。\n5. free链表 中每一个节点都代表一个空闲的缓存页，在将磁盘中的页加载到 Buffer Pool 时，会从 free链 表 中寻找空闲的缓存页。\n6. 为了快速定位某个页是否被加载到 Buffer Pool ，使用 表空间号 + 页号 作为 key ，缓存页作为 value ， 建立哈希表。\n7. 在 Buffer Pool 中被修改的页称为 脏页 ，脏页并不是立即刷新，而是被加入到 flush链表 中，待之后的某 个时刻同步到磁盘上。\n8. LRU链表 分为 young 和 old 两个区域，可以通过 innodb_old_blocks_pct 来调节 old 区域所占的比例。\n   首次从磁盘上加载到 Buffer Pool 的页会被放到 old 区域的头部，在 innodb_old_blocks_time 间隔时间内访 问该页不会把它移动到 young 区域头部。在 Buffer Pool 没有可用的空闲缓存页时，会首先淘汰掉 old 区 域的一些页。\n9. 我们可以通过指定 innodb_buffer_pool_instances 来控制 Buffer Pool 实例的个数，每个 Buffer Pool 实 例中都有各自独立的链表，互不干扰。\n10. 自 MySQL 5.7.5 版本之后，可以在服务器运行过程中调整 Buffer Pool 大小。每个 Buffer Pool 实例由若 干个 chunk 组成，每个 chunk 的大小可以在服务器启动时通过启动参数调整。\n11. 可以用下边的命令查看 Buffer Pool 的状态信息: SHOW ENGINE INNODB STATUS\\G\n```\n\n### 事务\n#### ReadView\n- [版本链](https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innodb-%E7%89%88%E6%9C%AC%E9%93%BE.png)\n\n```textmate\nREAD COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，\n核心问题就是:需要判断一下版本链中的哪个版本是当前事务可见的;\n```\n\n- ReadView包含信息\n\n```textmate\n1.m_ids :表示在生成 ReadView 时当前系统中活跃的读写事务的 事务id 列表。\n2.min_trx_id :表示在生成 ReadView 时当前系统中活跃的读写事务中最小的 事务id ，也就是 m_ids 中的最 小值。\n3.max_trx_id :表示生成 ReadView 时系统中应该分配给下一个事务的 id 值。\n  小贴士:\n  注意max_trx_id并不是m_ids中的最大值，事务id是递增分配的。比方说现在有id为1，2，3这三 个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，m_ids就包括1和2，mi n_trx_id的值就是1，max_trx_id的值就是4。\n4.creator_trx_id :表示生成该 ReadView 的事务的 事务id 。\n```\n\n- 区别\n\n```textmate\nREAD COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成ReadView的 时机不同\nREAD COMMITTED —— 同一事务每次读取数据前都生成一个ReadView\nREPEATABLE READ —— 同一事务在第一次读取数据时生成一个ReadView\n```\n\n- ReadView判断步骤\n\n```textmate\n1.如果被访问版本的 trx_id 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己 修改过的记录，所以该版本可以被当前事务访问。\n2.如果被访问版本的 trx_id 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 前已经提交，所以该版本可以被当前事务访问。\n3.如果被访问版本的 trx_id 属性值大于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 后才开启，所以该版本不可以被当前事务访问。\n4.如果被访问版本的 trx_id 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该\n  版本不可以被访问;如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。\n\nMVCC (Multi-Version Concurrency Control ，多版本并发控制)指的就 是在使用 READ COMMITTD 、 REPEATABLE READ 这两种隔离级别的事务在执行普通的 SEELCT 操作时访问记录的版 本链的过程，这样子可以使不同事务的 读-写 、 写-读 操作并发执行，从而提升系统性能。\n```\n\n- purge\n```textmate\n  insert undo 在事务提交之后就可以被释放掉了，而 update undo 由于还需要支持 MVCC ，不能立即 删除掉。\n  为了支持 MVCC ，对于 delete mark 操作来说，仅仅是在记录上打一个删除标记，并没有真正将它删除掉。\n  随着系统的运行，在确定系统中包含最早产生的那个 ReadView 的事务不会再访问某些 update undo日志 以及被 打了删除标记的记录后，有一个后台运行的 purge线程 会把它们真正的删除掉\n```\n### 锁\n#### 锁分类\n```textmate\n行级锁、表锁(S锁-共享锁、X锁-独占锁、IS-意向共享、IX-意向独占)\n总结:\n    IS、IX锁是表级锁，它们的提出仅仅为了在之后加表级别的S锁和X锁时可以快速判断表中的记录是否 被上锁，\n    以避免用遍历的方式来查看表中有没有上锁的记录，也就是说其实IS锁和IX锁是兼容的，IX锁和IX锁是 兼容的\n```\n\n- 兼容性\n\n|是否兼容|X|IX|S|IS|\n|---|---|---|---|---|\n|X|否|否|否|否|\n|IX|否|是|否|是|\n|S|否|否|是|是|\n|IS|否|是|是|是|\n\n- 锁结构(简易)\n```textmate\n  trx信息 :代表这个锁结构是哪个事务生成的。\n  is_waiting :代表当前事务是否在等待。\n```\n- 操作锁步骤\n```textmate\n  在事务 T1 提交之后，就会把该事务生成的 锁结构 释放掉，然后看看还有没有别的事务在等待获取锁， 发现了事务 T2 还在等待获取锁，\n  所以把事务 T2 对应的锁结构的 is_waiting 属性设置为 false ，然后 把该事务对应的线程唤醒，让它继续执行，此时事务 T2 就算获取到锁了\n```\n\n#### 事务隔离级别\n```textmate\n在 READ UNCOMMITTED 隔离级别下， 脏读 、 不可重复读 、 幻读 都可能发生。\n在 READ COMMITTED 隔离级别下， 不可重复读 、 幻读 可能发生， 脏读 不可以发生。\n在 REPEATABLE READ 隔离级别下， 幻读 可能发生， 脏读 和 不可重复读 不可以发生。\n在 SERIALIZABLE 隔离级别下，上述问题都不可以发生。\n\n脏读：读到另一个事务未提交的数据\n不可重复读: 同一个事务两次读取，第二次读取到了另外一个事务提交的数据\n幻读: 同一个事务两次读取范围数据，第二次读取到新的记录\n```\n","source":"_posts/backend/storage/mysql.md","raw":"---\ntitle: MySQL相关-知识点\ndate: 2021-07-20 09:45:00\ntags:\n- mysql\n\ncategories:\n- 存储\n---\n\n### 相关文档\n- [Jeremy Cole的博客](https://blog.jcole.us/innodb)\n- [MySQL8.0的源码文档](https://dev.mysql.com/doc/dev/mysql-server)\n- [mariadb-innodb原理文档(带图)](https://publications.sba-research.org/publications/WSDF2012_InnoDB.pdf)\n- [MySQL Team Blog](http://mysqlserverteam.com/)\n- [非官方MySQL8.0优化器指南](http://www.unofficialmysqlguide.com/optimizer-trace.html)\n\n## 部分总结\n### Innodb引擎的4大特性\n> [参考文档](https://www.cnblogs.com/zhs0/p/10528520.html)\n- 插入缓冲\n- 二次写\n- 自适应哈希\n- 预读\n\n#### 插入缓冲\n```textmate\n用于提升插入性能，分为Insert Buffer、Change Buffer\nchange buffering是insert buffer的加强，insert buffer只针对insert有效，change buffering对insert、delete、update(delete+insert)、purge都有效\n\n使用插入缓冲的条件：\n* 非聚集索引\n* 非唯一索引\n```\n\n#### 事务\n- 事务的特性ACID\n```textmate\n原子性(atomicity)：一个事务被事务不可分割的最小工作单元，要么全部提交，要么全部失败回滚。\n一致性(consistency)：数据库总是从一致性状态到另一个一致性状态，它只包含成功事务提交的结果\n隔离型(isolation)：事务所做的修改在最终提交一起，对其他事务是不可见的\n持久性(durability)：一旦事务提交，则其所做的修改就会永久保存到数据库中。\n```\n\n- 事务隔离级别 \n\n| |脏读|不可重复读|幻读|解决原理|\n|---|---|---|---|---|\n|读未提交|x|x|x||\n|读已提交|√|x|x||\n|可重复读|√|√|x|gap锁 (mysql默认级别)|\n|串行化|√|√|√|读锁|\n\n#### 重要文件\n- undolog\n- redolog\n- binlog\n\n#### 存储引擎\n- MyISAM\n- Heap\n- Merge\n- INNODB\n- ISAM\n\n## 《MySQL是怎样运行的：从根上理解MySQL》 读书笔记\n> 第一次读，摘录了其中部分知识点 2021-09-13读完\n\n### InnoDB数据格式\n- 内存与磁盘交互方式\n```textmate\nInnoDB 采取的方式是:将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小 一般为 16 KB。\n也就是在一般情况下，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB 内容刷新到磁盘中。\n```\n\n- 行格式\n<br/>[Compact行](https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-compact%E8%A1%8C%E6%A0%BC%E5%BC%8F.png)\n```textmate\n  Compact 、 Redundant 、Dynamic 和 Compressed\n  变长字段(varchar(n)、text等)占用内存：1. 真正的数据内容 2. 占用的字节数\n  对于 CHAR(M) 类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字 段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表。\n```\n\n- 数据太多造成的溢出\n```textmate\n  行溢出：一个页一般是 16KB ，当记录中的数据太多，当前页放不下的时候，会把多余的数据存储到其他页中；\n  MySQL 是以 页为单位管理存储空间，一个页一般16kb,16384字节，一个varchar最多存储65532个字节\n  对于占用存储空间非常大的列，在 记录的真实数据 处只会存储该列的一部 分数据，把剩余的数据分散存储在几个其他的页中，然后记录的真实数据处用20个字节存储指向这些页的地址 \n  (当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数)，从而可以找到剩余数据所在的页，\n```\n\n- 行溢出的临界点\n```textmate\nMySQL 中规定一个页中至少存放两行记录\n对于只有一个列的表，发生行溢出现象时需要满足这个式子: 136 + 2×(27 + n) > 16384 ， n > 8098\n重点:\n    不用关注这个临界点是什么，只要知道如果我们向一个行中存储了很大的数据时，可能发生 行溢出 的现象\n不论我们怎么对页中的记录做增删改操作，InnoDB始终会维护一条记录的单链表，链表中的各个 节点是按照主键值由小到大的顺序连接起来的\n```\n\n- 总结\n<br/>[InnoDB数据页结构](https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB_data_page.png)\n\n```textmate\n1. InnoDB为了不同的目的而设计了不同类型的页，我们把用于存放记录的页叫做 数据页 。\n2. 一个数据页可以被大致划分为7个部分，分别是\n   File Header ，表示页的一些通用信息，占固定的38字节。\n   Page Header ，表示数据页专有的一些信息，占固定的56个字节。\n   Infimum + Supremum ，两个虚拟的伪记录，分别表示页中的最小和最大记录，占固定的 26 个字节。\n   User Records :真实存储我们插入的记录的部分，大小不固定。\n   Free Space :页中尚未使用的部分，大小不确定。\n   Page Directory: 页中的某些记录相对位置，也就是各个槽在页面中的地址偏移量，大小不固定，插入的记录越多，这个部分占用的空间越多。\n   File Trailer :用于检验页是否完整的部分，占用固定的8个字节。\n3. 每个记录的头信息中都有一个 next_record 属性，从而使页中的所有记录串联成一个 单链表 。\n4. InnoDB 会为把页中的记录划分为若干个组，每个组的最后一个记录的地址偏移量作为一个 槽 ，存放在\n   Page Directory 中，所以在一个页中根据主键查找记录是非常快的，分为两步:\n   4.1 通过二分法确定该记录所在的槽。\n   4.2 通过记录的next_record属性遍历该槽所在的组中的各个记录。\n5. 每个数据页的 File Header 部分都有上一个和下一个页的编号，所以所有的数据页会组成一个 双链表 。\n6. 为保证从内存中同步到磁盘的页的完整性，在页的首部和尾部都会存储页中数据的校验和和页面最后修改时\n   对应的 LSN 值，如果首部和尾部的校验和和 LSN 值校验不成功的话，就说明同步过程出现了问题。\n```\n\n- Innodb通用页结构\n<br/>[Innodb通用页结构](https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n<br/>[Innodb通用页结构-解释](https://gitee.com/im-fan/fan-pic/raw/master/images/Innodb%E9%80%9A%E7%94%A8%E9%A1%B5%E7%BB%93%E6%9E%84-%E8%A7%A3%E9%87%8A.png)\n\n```textmate\n表空间结构(系统表空间/独立表空间)\n连续64个页面 = 一个区(默认1MB)\n每256个区被划分为一个组\n每个组的最开始的几个页面类型是固定的\n1.FSP_HDR 类型:这个类型的页面是用来登记整个表空间的一些整体属性以及本组所有的 区 ，也就是\n  extent 0 ~ extent 255 这256个区的属性，稍后详细唠叨。需要注意的一点是，整个表空间只有一 个 FSP_HDR 类型的页面。\n2.IBUF_BITMAP 类型:这个类型的页面是存储本组所有的区的所有页面关于 INSERT BUFFER 的信息。\n3.INODE 类型:这个类型的页面存储了许多称为 INODE 的数据结构，\n\n其余各组最开始的2个页面的类型是固定的\n1.DES 类型:全称是 extent descriptor ，用来登记本组256个区的属性，也就是说对于在 extent 256 区中的该类型页面存储的就是 extent 256 ~ extent 511 这些区的属性，对于在 extent 512 区中的该 类型页面存储的就是 extent 512 ~ extent 767 这些区的属性。上边介绍的 FSP_HDR 类型的页面其实 和 XDES 类型的页面的作用类似，只不过 FSP_HDR 类型的页面还会额外存储一些表空间的属性。\n2.IBUF_BITMAP\n```\n\n- [InnonDB文件结构总结](https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innondb%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png)\n\n\n### 索引\n```textmate\nSHOW INDEX FROM 表名 - 索引统计数据\n    对于InnoDB存储引擎来说，使用SHOW INDEX语句展示出来的某个索引列的Cardinality属性是一个估计 值，并不是精确的\n注意：\n    在MySQL 5.7.3以及之前的版本中，eq_range_index_dive_limit的默认值为10，之 后的版本默认值为200。\n    所以如果大家采用的是5.7.3以及之前的版本的话，很容易采用索引统计数据而 不是index dive的方式来计算查询成本。当你的查询中使用到了IN查询，但是却实际没有用到索引，就 应该考虑一下是不是由于 eq_range_index_dive_limit 值太小导致的。\n连接查询的成本计算公式:\n    连接查询总成本 = 单次访问驱动表的成本 + 驱动表扇出数 x 单次访问被驱动表的成本\n```\n#### InnoDB统计数据的方式\n```textmate\nInnoDB 以表为单位来收集统计数据，这些统计数据可以是基于磁盘的永久性统计数据，也可以是基于内存 的非永久性统计数据。\n    innodb_stats_persistent 控制着使用永久性统计数据还是非永久性统计数据; \n    innodb_stats_persistent_sample_pages 控制着永久性统计数据的采样页面数量; \n    innodb_stats_transient_sample_pages 控制着非永久性统计数据的采样页面数量; \n    innodb_stats_auto_recalc 控制着是否自动重新计算统计数据。\n我们可以针对某个具体的表，在创建和修改表时通过指定 STATS_PERSISTENT 、 STATS_AUTO_RECALC 、 STATS_SAMPLE_PAGES 的值来控制相关统计数据属性。\n    innodb_stats_method 决定着在统计某个索引列不重复值的数量时如何对待 NULL 值。\n通过配置将决定权交给用户\n    1.nulls_equal :认为所有 NULL 值都是相等的。这个值也是 innodb_stats_method 的默认值。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 多，所以倾向于不使用索引进行访问。\n    2.nulls_unequal :认为所有 NULL 值都是不相等的。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 少，所以倾向于使用索引进行访问。\n    3.nulls_ignored :直接把 NULL 值忽略掉。\n```\n\n#### SQL重写方式\n##### 条件化简\n```textmate\n1.移除不必要的括号\n2.常量传递\n    a = 5 AND b > a 改写为 a = 5 AND b > 5\n3.等值传递\n    a = b and b = c and c = 5 改写为 a = 5 and b = 5 and c = 5\n4.移除没用的条件\n    (a < 1 and b = b) OR (a = 6 OR 5 != 5) 改写为 (a < 1 and TRUE) OR (a = 6 OR FALSE)  ==>  a < 1 OR a = 6\n5.表达式计算\n    a =5 + 1 改写为 a=6\n6.having和where子句合并\n7.常量表检测\n```\n\n##### 外连接消除\n- 外连接和内连接区别\n```textmate\n外连接和内连接的本质区别就是:\n    对于外连接的驱动表的记录来说，如果无法在被驱动表中找到 匹配ON子句中的过滤条件的记录，那么该记录仍然会被加入到结果集中，对应的被驱动表记录的各个字段使用 NULL值填充;\n    而内连接的驱动表的记录如果无法在被驱动表中找到匹配ON子句中的过滤条件的记录，那么该记 录会被舍弃\n空值拒绝:\n    在被驱动表的WHERE子句符合空值拒绝的条件后，外连接和内连接可以相互转 换。这种转换带来的好处就是查询优化器可以通过评估表的不同连接顺序的成本，选出成本最低的那种连接顺序 来执行查询。\n```\n\n##### 子查询优化\n```textmate\n1.按返回的结果集区分子查询\n    标量子查询\n    行子查询\n    列子查询\n    表子查询\n2.按与外层查询关系来区分子查询\n    不相关子查询\n    相关子查询\n3.子查询在布尔表达式中的使用\n4.子查询语法注意事项\n    4.1 子查询必须用小括号扩起来\n    4.2 在 SELECT 子句中的子查询必须是标量子查询\n    4.3 在想要得到标量子查询或者行子查询，但又不能保证子查询的结果集只有一条记录时，应该使用LIMIT 1语句来限制记录数量。\n    4.4 对于[NOT]IN/ANY/SOME/ALL 子查询来说，子查询中不允许有 LIMIT 语句。\n    4.5 不允许在一条语句中增删改某个表的记录时同时还对该表进行子查询。\n\n    如果 IN 子查询符合转换为 semi-join 的条件，查询优化器会优先把该子查询为 semi-join ，然后再考虑下边5种执行半连接的策略中哪个成本最低:\n    Table pullout\n    DuplicateWeedout \n    LooseScan \n    Materialization \n    FirstMatch\n    选择成本最低的那种执行策略来执行子查询。\n    如果 IN 子查询不符合转换为 semi-join 的条件，那么查询优化器会从下边两种策略中找出一种成本更低的 方式执行子查询:\n    先将子查询物化之后再执行查询 执行 IN to EXISTS 转换。\n\n5.[NOT] EXISTS子查询的执行\n    如果 [NOT] EXISTS 子查询是不相关子查询，可以先执行子查询，得出该 [NOT] EXISTS 子查询的结果是 TRUE 还\n    是 FALSE ，并重写原先的查询语句\n\n6.对于派生表的优化\n    6.1 最容易想到的就是把派生表物化\n    6.2将派生表和外层的表合并，也就是将查询重写为没有派生表的形式\n```\n\n### Explain\n##### 查看优化器生成执行计划的整个过程\n```textmate\nSHOW VARIABLES LIKE 'optimizer_trace';\n 1. 打开optimizer trace功能 (默认情况下它是关闭的):\n    SET optimizer_trace=\"enabled=on\";\n 2. 这里输入你自己的查询语句 SELECT ...;\n 3. 从OPTIMIZER_TRACE表中查看上一个查询的优化过程 \n    SELECT * FROM information_schema.OPTIMIZER_TRACE;\n 4. 可能你还要观察其他语句执行的优化过程，重复上边的第2、3步 ...\n 5. 当你停止查看语句的优化过程时，把optimizer trace功能关闭 SET optimizer_trace=\"enabled=off\";\n```\n\n### 磁盘\n#### 总结\n```textmate\n1. 磁盘太慢，用内存作为缓存很有必要。\n2. Buffer Pool 本质上是 InnoDB 向操作系统申请的一段连续的内存空间，可以通过\n   innodb_buffer_pool_size 来调整它的大小。\n3. Buffer Pool 向操作系统申请的连续内存由控制块和缓存页组成，每个控制块和缓存页都是一一对应的，在\n   填充足够多的控制块和缓存页的组合后， Buffer Pool 剩余的空间可能产生不够填充一组控制块和缓存页，\n   这部分空间不能被使用，也被称为 碎片 。\n4. InnoDB 使用了许多 链表 来管理 Buffer Pool 。\n5. free链表 中每一个节点都代表一个空闲的缓存页，在将磁盘中的页加载到 Buffer Pool 时，会从 free链 表 中寻找空闲的缓存页。\n6. 为了快速定位某个页是否被加载到 Buffer Pool ，使用 表空间号 + 页号 作为 key ，缓存页作为 value ， 建立哈希表。\n7. 在 Buffer Pool 中被修改的页称为 脏页 ，脏页并不是立即刷新，而是被加入到 flush链表 中，待之后的某 个时刻同步到磁盘上。\n8. LRU链表 分为 young 和 old 两个区域，可以通过 innodb_old_blocks_pct 来调节 old 区域所占的比例。\n   首次从磁盘上加载到 Buffer Pool 的页会被放到 old 区域的头部，在 innodb_old_blocks_time 间隔时间内访 问该页不会把它移动到 young 区域头部。在 Buffer Pool 没有可用的空闲缓存页时，会首先淘汰掉 old 区 域的一些页。\n9. 我们可以通过指定 innodb_buffer_pool_instances 来控制 Buffer Pool 实例的个数，每个 Buffer Pool 实 例中都有各自独立的链表，互不干扰。\n10. 自 MySQL 5.7.5 版本之后，可以在服务器运行过程中调整 Buffer Pool 大小。每个 Buffer Pool 实例由若 干个 chunk 组成，每个 chunk 的大小可以在服务器启动时通过启动参数调整。\n11. 可以用下边的命令查看 Buffer Pool 的状态信息: SHOW ENGINE INNODB STATUS\\G\n```\n\n### 事务\n#### ReadView\n- [版本链](https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innodb-%E7%89%88%E6%9C%AC%E9%93%BE.png)\n\n```textmate\nREAD COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，\n核心问题就是:需要判断一下版本链中的哪个版本是当前事务可见的;\n```\n\n- ReadView包含信息\n\n```textmate\n1.m_ids :表示在生成 ReadView 时当前系统中活跃的读写事务的 事务id 列表。\n2.min_trx_id :表示在生成 ReadView 时当前系统中活跃的读写事务中最小的 事务id ，也就是 m_ids 中的最 小值。\n3.max_trx_id :表示生成 ReadView 时系统中应该分配给下一个事务的 id 值。\n  小贴士:\n  注意max_trx_id并不是m_ids中的最大值，事务id是递增分配的。比方说现在有id为1，2，3这三 个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，m_ids就包括1和2，mi n_trx_id的值就是1，max_trx_id的值就是4。\n4.creator_trx_id :表示生成该 ReadView 的事务的 事务id 。\n```\n\n- 区别\n\n```textmate\nREAD COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成ReadView的 时机不同\nREAD COMMITTED —— 同一事务每次读取数据前都生成一个ReadView\nREPEATABLE READ —— 同一事务在第一次读取数据时生成一个ReadView\n```\n\n- ReadView判断步骤\n\n```textmate\n1.如果被访问版本的 trx_id 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己 修改过的记录，所以该版本可以被当前事务访问。\n2.如果被访问版本的 trx_id 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 前已经提交，所以该版本可以被当前事务访问。\n3.如果被访问版本的 trx_id 属性值大于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 后才开启，所以该版本不可以被当前事务访问。\n4.如果被访问版本的 trx_id 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该\n  版本不可以被访问;如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。\n\nMVCC (Multi-Version Concurrency Control ，多版本并发控制)指的就 是在使用 READ COMMITTD 、 REPEATABLE READ 这两种隔离级别的事务在执行普通的 SEELCT 操作时访问记录的版 本链的过程，这样子可以使不同事务的 读-写 、 写-读 操作并发执行，从而提升系统性能。\n```\n\n- purge\n```textmate\n  insert undo 在事务提交之后就可以被释放掉了，而 update undo 由于还需要支持 MVCC ，不能立即 删除掉。\n  为了支持 MVCC ，对于 delete mark 操作来说，仅仅是在记录上打一个删除标记，并没有真正将它删除掉。\n  随着系统的运行，在确定系统中包含最早产生的那个 ReadView 的事务不会再访问某些 update undo日志 以及被 打了删除标记的记录后，有一个后台运行的 purge线程 会把它们真正的删除掉\n```\n### 锁\n#### 锁分类\n```textmate\n行级锁、表锁(S锁-共享锁、X锁-独占锁、IS-意向共享、IX-意向独占)\n总结:\n    IS、IX锁是表级锁，它们的提出仅仅为了在之后加表级别的S锁和X锁时可以快速判断表中的记录是否 被上锁，\n    以避免用遍历的方式来查看表中有没有上锁的记录，也就是说其实IS锁和IX锁是兼容的，IX锁和IX锁是 兼容的\n```\n\n- 兼容性\n\n|是否兼容|X|IX|S|IS|\n|---|---|---|---|---|\n|X|否|否|否|否|\n|IX|否|是|否|是|\n|S|否|否|是|是|\n|IS|否|是|是|是|\n\n- 锁结构(简易)\n```textmate\n  trx信息 :代表这个锁结构是哪个事务生成的。\n  is_waiting :代表当前事务是否在等待。\n```\n- 操作锁步骤\n```textmate\n  在事务 T1 提交之后，就会把该事务生成的 锁结构 释放掉，然后看看还有没有别的事务在等待获取锁， 发现了事务 T2 还在等待获取锁，\n  所以把事务 T2 对应的锁结构的 is_waiting 属性设置为 false ，然后 把该事务对应的线程唤醒，让它继续执行，此时事务 T2 就算获取到锁了\n```\n\n#### 事务隔离级别\n```textmate\n在 READ UNCOMMITTED 隔离级别下， 脏读 、 不可重复读 、 幻读 都可能发生。\n在 READ COMMITTED 隔离级别下， 不可重复读 、 幻读 可能发生， 脏读 不可以发生。\n在 REPEATABLE READ 隔离级别下， 幻读 可能发生， 脏读 和 不可重复读 不可以发生。\n在 SERIALIZABLE 隔离级别下，上述问题都不可以发生。\n\n脏读：读到另一个事务未提交的数据\n不可重复读: 同一个事务两次读取，第二次读取到了另外一个事务提交的数据\n幻读: 同一个事务两次读取范围数据，第二次读取到新的记录\n```\n","slug":"backend/storage/mysql","published":1,"updated":"2021-09-13T05:58:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry1002wjrnvbnlt4ysg","content":"<h3 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h3><ul>\n<li><a href=\"https://blog.jcole.us/innodb\">Jeremy Cole的博客</a></li>\n<li><a href=\"https://dev.mysql.com/doc/dev/mysql-server\">MySQL8.0的源码文档</a></li>\n<li><a href=\"https://publications.sba-research.org/publications/WSDF2012_InnoDB.pdf\">mariadb-innodb原理文档(带图)</a></li>\n<li><a href=\"http://mysqlserverteam.com/\">MySQL Team Blog</a></li>\n<li><a href=\"http://www.unofficialmysqlguide.com/optimizer-trace.html\">非官方MySQL8.0优化器指南</a></li>\n</ul>\n<h2 id=\"部分总结\"><a href=\"#部分总结\" class=\"headerlink\" title=\"部分总结\"></a>部分总结</h2><h3 id=\"Innodb引擎的4大特性\"><a href=\"#Innodb引擎的4大特性\" class=\"headerlink\" title=\"Innodb引擎的4大特性\"></a>Innodb引擎的4大特性</h3><blockquote>\n<p><a href=\"https://www.cnblogs.com/zhs0/p/10528520.html\">参考文档</a></p>\n</blockquote>\n<ul>\n<li>插入缓冲</li>\n<li>二次写</li>\n<li>自适应哈希</li>\n<li>预读</li>\n</ul>\n<h4 id=\"插入缓冲\"><a href=\"#插入缓冲\" class=\"headerlink\" title=\"插入缓冲\"></a>插入缓冲</h4><pre><code class=\"textmate\">用于提升插入性能，分为Insert Buffer、Change Buffer\nchange buffering是insert buffer的加强，insert buffer只针对insert有效，change buffering对insert、delete、update(delete+insert)、purge都有效\n\n使用插入缓冲的条件：\n* 非聚集索引\n* 非唯一索引</code></pre>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><ul>\n<li><p>事务的特性ACID</p>\n<pre><code class=\"textmate\">原子性(atomicity)：一个事务被事务不可分割的最小工作单元，要么全部提交，要么全部失败回滚。\n一致性(consistency)：数据库总是从一致性状态到另一个一致性状态，它只包含成功事务提交的结果\n隔离型(isolation)：事务所做的修改在最终提交一起，对其他事务是不可见的\n持久性(durability)：一旦事务提交，则其所做的修改就会永久保存到数据库中。</code></pre>\n</li>\n<li><p>事务隔离级别 </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>解决原理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>读已提交</td>\n<td>√</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>√</td>\n<td>√</td>\n<td>x</td>\n<td>gap锁 (mysql默认级别)</td>\n</tr>\n<tr>\n<td>串行化</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>读锁</td>\n</tr>\n</tbody></table>\n<h4 id=\"重要文件\"><a href=\"#重要文件\" class=\"headerlink\" title=\"重要文件\"></a>重要文件</h4><ul>\n<li>undolog</li>\n<li>redolog</li>\n<li>binlog</li>\n</ul>\n<h4 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h4><ul>\n<li>MyISAM</li>\n<li>Heap</li>\n<li>Merge</li>\n<li>INNODB</li>\n<li>ISAM</li>\n</ul>\n<h2 id=\"《MySQL是怎样运行的：从根上理解MySQL》-读书笔记\"><a href=\"#《MySQL是怎样运行的：从根上理解MySQL》-读书笔记\" class=\"headerlink\" title=\"《MySQL是怎样运行的：从根上理解MySQL》 读书笔记\"></a>《MySQL是怎样运行的：从根上理解MySQL》 读书笔记</h2><blockquote>\n<p>第一次读，摘录了其中部分知识点 2021-09-13读完</p>\n</blockquote>\n<h3 id=\"InnoDB数据格式\"><a href=\"#InnoDB数据格式\" class=\"headerlink\" title=\"InnoDB数据格式\"></a>InnoDB数据格式</h3><ul>\n<li><p>内存与磁盘交互方式</p>\n<pre><code class=\"textmate\">InnoDB 采取的方式是:将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小 一般为 16 KB。\n也就是在一般情况下，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB 内容刷新到磁盘中。</code></pre>\n</li>\n<li><p>行格式<br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-compact%E8%A1%8C%E6%A0%BC%E5%BC%8F.png\">Compact行</a></p>\n<pre><code class=\"textmate\">Compact 、 Redundant 、Dynamic 和 Compressed\n变长字段(varchar(n)、text等)占用内存：1. 真正的数据内容 2. 占用的字节数\n对于 CHAR(M) 类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字 段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表。</code></pre>\n</li>\n<li><p>数据太多造成的溢出</p>\n<pre><code class=\"textmate\">行溢出：一个页一般是 16KB ，当记录中的数据太多，当前页放不下的时候，会把多余的数据存储到其他页中；\nMySQL 是以 页为单位管理存储空间，一个页一般16kb,16384字节，一个varchar最多存储65532个字节\n对于占用存储空间非常大的列，在 记录的真实数据 处只会存储该列的一部 分数据，把剩余的数据分散存储在几个其他的页中，然后记录的真实数据处用20个字节存储指向这些页的地址 \n(当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数)，从而可以找到剩余数据所在的页，</code></pre>\n</li>\n<li><p>行溢出的临界点</p>\n<pre><code class=\"textmate\">MySQL 中规定一个页中至少存放两行记录\n对于只有一个列的表，发生行溢出现象时需要满足这个式子: 136 + 2×(27 + n) &gt; 16384 ， n &gt; 8098\n重点:\n  不用关注这个临界点是什么，只要知道如果我们向一个行中存储了很大的数据时，可能发生 行溢出 的现象\n不论我们怎么对页中的记录做增删改操作，InnoDB始终会维护一条记录的单链表，链表中的各个 节点是按照主键值由小到大的顺序连接起来的</code></pre>\n</li>\n<li><p>总结<br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB_data_page.png\">InnoDB数据页结构</a></p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1. InnoDB为了不同的目的而设计了不同类型的页，我们把用于存放记录的页叫做 数据页 。\n2. 一个数据页可以被大致划分为7个部分，分别是\n   File Header ，表示页的一些通用信息，占固定的38字节。\n   Page Header ，表示数据页专有的一些信息，占固定的56个字节。\n   Infimum + Supremum ，两个虚拟的伪记录，分别表示页中的最小和最大记录，占固定的 26 个字节。\n   User Records :真实存储我们插入的记录的部分，大小不固定。\n   Free Space :页中尚未使用的部分，大小不确定。\n   Page Directory: 页中的某些记录相对位置，也就是各个槽在页面中的地址偏移量，大小不固定，插入的记录越多，这个部分占用的空间越多。\n   File Trailer :用于检验页是否完整的部分，占用固定的8个字节。\n3. 每个记录的头信息中都有一个 next_record 属性，从而使页中的所有记录串联成一个 单链表 。\n4. InnoDB 会为把页中的记录划分为若干个组，每个组的最后一个记录的地址偏移量作为一个 槽 ，存放在\n   Page Directory 中，所以在一个页中根据主键查找记录是非常快的，分为两步:\n   4.1 通过二分法确定该记录所在的槽。\n   4.2 通过记录的next_record属性遍历该槽所在的组中的各个记录。\n5. 每个数据页的 File Header 部分都有上一个和下一个页的编号，所以所有的数据页会组成一个 双链表 。\n6. 为保证从内存中同步到磁盘的页的完整性，在页的首部和尾部都会存储页中数据的校验和和页面最后修改时\n   对应的 LSN 值，如果首部和尾部的校验和和 LSN 值校验不成功的话，就说明同步过程出现了问题。</code></pre>\n<ul>\n<li>Innodb通用页结构<br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\">Innodb通用页结构</a><br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/Innodb%E9%80%9A%E7%94%A8%E9%A1%B5%E7%BB%93%E6%9E%84-%E8%A7%A3%E9%87%8A.png\">Innodb通用页结构-解释</a></li>\n</ul>\n<pre><code class=\"textmate\">表空间结构(系统表空间/独立表空间)\n连续64个页面 = 一个区(默认1MB)\n每256个区被划分为一个组\n每个组的最开始的几个页面类型是固定的\n1.FSP_HDR 类型:这个类型的页面是用来登记整个表空间的一些整体属性以及本组所有的 区 ，也就是\n  extent 0 ~ extent 255 这256个区的属性，稍后详细唠叨。需要注意的一点是，整个表空间只有一 个 FSP_HDR 类型的页面。\n2.IBUF_BITMAP 类型:这个类型的页面是存储本组所有的区的所有页面关于 INSERT BUFFER 的信息。\n3.INODE 类型:这个类型的页面存储了许多称为 INODE 的数据结构，\n\n其余各组最开始的2个页面的类型是固定的\n1.DES 类型:全称是 extent descriptor ，用来登记本组256个区的属性，也就是说对于在 extent 256 区中的该类型页面存储的就是 extent 256 ~ extent 511 这些区的属性，对于在 extent 512 区中的该 类型页面存储的就是 extent 512 ~ extent 767 这些区的属性。上边介绍的 FSP_HDR 类型的页面其实 和 XDES 类型的页面的作用类似，只不过 FSP_HDR 类型的页面还会额外存储一些表空间的属性。\n2.IBUF_BITMAP</code></pre>\n<ul>\n<li><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innondb%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png\">InnonDB文件结构总结</a></li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><pre><code class=\"textmate\">SHOW INDEX FROM 表名 - 索引统计数据\n    对于InnoDB存储引擎来说，使用SHOW INDEX语句展示出来的某个索引列的Cardinality属性是一个估计 值，并不是精确的\n注意：\n    在MySQL 5.7.3以及之前的版本中，eq_range_index_dive_limit的默认值为10，之 后的版本默认值为200。\n    所以如果大家采用的是5.7.3以及之前的版本的话，很容易采用索引统计数据而 不是index dive的方式来计算查询成本。当你的查询中使用到了IN查询，但是却实际没有用到索引，就 应该考虑一下是不是由于 eq_range_index_dive_limit 值太小导致的。\n连接查询的成本计算公式:\n    连接查询总成本 = 单次访问驱动表的成本 + 驱动表扇出数 x 单次访问被驱动表的成本</code></pre>\n<h4 id=\"InnoDB统计数据的方式\"><a href=\"#InnoDB统计数据的方式\" class=\"headerlink\" title=\"InnoDB统计数据的方式\"></a>InnoDB统计数据的方式</h4><pre><code class=\"textmate\">InnoDB 以表为单位来收集统计数据，这些统计数据可以是基于磁盘的永久性统计数据，也可以是基于内存 的非永久性统计数据。\n    innodb_stats_persistent 控制着使用永久性统计数据还是非永久性统计数据; \n    innodb_stats_persistent_sample_pages 控制着永久性统计数据的采样页面数量; \n    innodb_stats_transient_sample_pages 控制着非永久性统计数据的采样页面数量; \n    innodb_stats_auto_recalc 控制着是否自动重新计算统计数据。\n我们可以针对某个具体的表，在创建和修改表时通过指定 STATS_PERSISTENT 、 STATS_AUTO_RECALC 、 STATS_SAMPLE_PAGES 的值来控制相关统计数据属性。\n    innodb_stats_method 决定着在统计某个索引列不重复值的数量时如何对待 NULL 值。\n通过配置将决定权交给用户\n    1.nulls_equal :认为所有 NULL 值都是相等的。这个值也是 innodb_stats_method 的默认值。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 多，所以倾向于不使用索引进行访问。\n    2.nulls_unequal :认为所有 NULL 值都是不相等的。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 少，所以倾向于使用索引进行访问。\n    3.nulls_ignored :直接把 NULL 值忽略掉。</code></pre>\n<h4 id=\"SQL重写方式\"><a href=\"#SQL重写方式\" class=\"headerlink\" title=\"SQL重写方式\"></a>SQL重写方式</h4><h5 id=\"条件化简\"><a href=\"#条件化简\" class=\"headerlink\" title=\"条件化简\"></a>条件化简</h5><pre><code class=\"textmate\">1.移除不必要的括号\n2.常量传递\n    a = 5 AND b &gt; a 改写为 a = 5 AND b &gt; 5\n3.等值传递\n    a = b and b = c and c = 5 改写为 a = 5 and b = 5 and c = 5\n4.移除没用的条件\n    (a &lt; 1 and b = b) OR (a = 6 OR 5 != 5) 改写为 (a &lt; 1 and TRUE) OR (a = 6 OR FALSE)  ==&gt;  a &lt; 1 OR a = 6\n5.表达式计算\n    a =5 + 1 改写为 a=6\n6.having和where子句合并\n7.常量表检测</code></pre>\n<h5 id=\"外连接消除\"><a href=\"#外连接消除\" class=\"headerlink\" title=\"外连接消除\"></a>外连接消除</h5><ul>\n<li>外连接和内连接区别<pre><code class=\"textmate\">外连接和内连接的本质区别就是:\n  对于外连接的驱动表的记录来说，如果无法在被驱动表中找到 匹配ON子句中的过滤条件的记录，那么该记录仍然会被加入到结果集中，对应的被驱动表记录的各个字段使用 NULL值填充;\n  而内连接的驱动表的记录如果无法在被驱动表中找到匹配ON子句中的过滤条件的记录，那么该记 录会被舍弃\n空值拒绝:\n  在被驱动表的WHERE子句符合空值拒绝的条件后，外连接和内连接可以相互转 换。这种转换带来的好处就是查询优化器可以通过评估表的不同连接顺序的成本，选出成本最低的那种连接顺序 来执行查询。</code></pre>\n</li>\n</ul>\n<h5 id=\"子查询优化\"><a href=\"#子查询优化\" class=\"headerlink\" title=\"子查询优化\"></a>子查询优化</h5><pre><code class=\"textmate\">1.按返回的结果集区分子查询\n    标量子查询\n    行子查询\n    列子查询\n    表子查询\n2.按与外层查询关系来区分子查询\n    不相关子查询\n    相关子查询\n3.子查询在布尔表达式中的使用\n4.子查询语法注意事项\n    4.1 子查询必须用小括号扩起来\n    4.2 在 SELECT 子句中的子查询必须是标量子查询\n    4.3 在想要得到标量子查询或者行子查询，但又不能保证子查询的结果集只有一条记录时，应该使用LIMIT 1语句来限制记录数量。\n    4.4 对于[NOT]IN/ANY/SOME/ALL 子查询来说，子查询中不允许有 LIMIT 语句。\n    4.5 不允许在一条语句中增删改某个表的记录时同时还对该表进行子查询。\n\n    如果 IN 子查询符合转换为 semi-join 的条件，查询优化器会优先把该子查询为 semi-join ，然后再考虑下边5种执行半连接的策略中哪个成本最低:\n    Table pullout\n    DuplicateWeedout \n    LooseScan \n    Materialization \n    FirstMatch\n    选择成本最低的那种执行策略来执行子查询。\n    如果 IN 子查询不符合转换为 semi-join 的条件，那么查询优化器会从下边两种策略中找出一种成本更低的 方式执行子查询:\n    先将子查询物化之后再执行查询 执行 IN to EXISTS 转换。\n\n5.[NOT] EXISTS子查询的执行\n    如果 [NOT] EXISTS 子查询是不相关子查询，可以先执行子查询，得出该 [NOT] EXISTS 子查询的结果是 TRUE 还\n    是 FALSE ，并重写原先的查询语句\n\n6.对于派生表的优化\n    6.1 最容易想到的就是把派生表物化\n    6.2将派生表和外层的表合并，也就是将查询重写为没有派生表的形式</code></pre>\n<h3 id=\"Explain\"><a href=\"#Explain\" class=\"headerlink\" title=\"Explain\"></a>Explain</h3><h5 id=\"查看优化器生成执行计划的整个过程\"><a href=\"#查看优化器生成执行计划的整个过程\" class=\"headerlink\" title=\"查看优化器生成执行计划的整个过程\"></a>查看优化器生成执行计划的整个过程</h5><pre><code class=\"textmate\">SHOW VARIABLES LIKE &#39;optimizer_trace&#39;;\n 1. 打开optimizer trace功能 (默认情况下它是关闭的):\n    SET optimizer_trace=&quot;enabled=on&quot;;\n 2. 这里输入你自己的查询语句 SELECT ...;\n 3. 从OPTIMIZER_TRACE表中查看上一个查询的优化过程 \n    SELECT * FROM information_schema.OPTIMIZER_TRACE;\n 4. 可能你还要观察其他语句执行的优化过程，重复上边的第2、3步 ...\n 5. 当你停止查看语句的优化过程时，把optimizer trace功能关闭 SET optimizer_trace=&quot;enabled=off&quot;;</code></pre>\n<h3 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h3><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code class=\"textmate\">1. 磁盘太慢，用内存作为缓存很有必要。\n2. Buffer Pool 本质上是 InnoDB 向操作系统申请的一段连续的内存空间，可以通过\n   innodb_buffer_pool_size 来调整它的大小。\n3. Buffer Pool 向操作系统申请的连续内存由控制块和缓存页组成，每个控制块和缓存页都是一一对应的，在\n   填充足够多的控制块和缓存页的组合后， Buffer Pool 剩余的空间可能产生不够填充一组控制块和缓存页，\n   这部分空间不能被使用，也被称为 碎片 。\n4. InnoDB 使用了许多 链表 来管理 Buffer Pool 。\n5. free链表 中每一个节点都代表一个空闲的缓存页，在将磁盘中的页加载到 Buffer Pool 时，会从 free链 表 中寻找空闲的缓存页。\n6. 为了快速定位某个页是否被加载到 Buffer Pool ，使用 表空间号 + 页号 作为 key ，缓存页作为 value ， 建立哈希表。\n7. 在 Buffer Pool 中被修改的页称为 脏页 ，脏页并不是立即刷新，而是被加入到 flush链表 中，待之后的某 个时刻同步到磁盘上。\n8. LRU链表 分为 young 和 old 两个区域，可以通过 innodb_old_blocks_pct 来调节 old 区域所占的比例。\n   首次从磁盘上加载到 Buffer Pool 的页会被放到 old 区域的头部，在 innodb_old_blocks_time 间隔时间内访 问该页不会把它移动到 young 区域头部。在 Buffer Pool 没有可用的空闲缓存页时，会首先淘汰掉 old 区 域的一些页。\n9. 我们可以通过指定 innodb_buffer_pool_instances 来控制 Buffer Pool 实例的个数，每个 Buffer Pool 实 例中都有各自独立的链表，互不干扰。\n10. 自 MySQL 5.7.5 版本之后，可以在服务器运行过程中调整 Buffer Pool 大小。每个 Buffer Pool 实例由若 干个 chunk 组成，每个 chunk 的大小可以在服务器启动时通过启动参数调整。\n11. 可以用下边的命令查看 Buffer Pool 的状态信息: SHOW ENGINE INNODB STATUS\\G</code></pre>\n<h3 id=\"事务-1\"><a href=\"#事务-1\" class=\"headerlink\" title=\"事务\"></a>事务</h3><h4 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a>ReadView</h4><ul>\n<li><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innodb-%E7%89%88%E6%9C%AC%E9%93%BE.png\">版本链</a></li>\n</ul>\n<pre><code class=\"textmate\">READ COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，\n核心问题就是:需要判断一下版本链中的哪个版本是当前事务可见的;</code></pre>\n<ul>\n<li>ReadView包含信息</li>\n</ul>\n<pre><code class=\"textmate\">1.m_ids :表示在生成 ReadView 时当前系统中活跃的读写事务的 事务id 列表。\n2.min_trx_id :表示在生成 ReadView 时当前系统中活跃的读写事务中最小的 事务id ，也就是 m_ids 中的最 小值。\n3.max_trx_id :表示生成 ReadView 时系统中应该分配给下一个事务的 id 值。\n  小贴士:\n  注意max_trx_id并不是m_ids中的最大值，事务id是递增分配的。比方说现在有id为1，2，3这三 个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，m_ids就包括1和2，mi n_trx_id的值就是1，max_trx_id的值就是4。\n4.creator_trx_id :表示生成该 ReadView 的事务的 事务id 。</code></pre>\n<ul>\n<li>区别</li>\n</ul>\n<pre><code class=\"textmate\">READ COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成ReadView的 时机不同\nREAD COMMITTED —— 同一事务每次读取数据前都生成一个ReadView\nREPEATABLE READ —— 同一事务在第一次读取数据时生成一个ReadView</code></pre>\n<ul>\n<li>ReadView判断步骤</li>\n</ul>\n<pre><code class=\"textmate\">1.如果被访问版本的 trx_id 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己 修改过的记录，所以该版本可以被当前事务访问。\n2.如果被访问版本的 trx_id 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 前已经提交，所以该版本可以被当前事务访问。\n3.如果被访问版本的 trx_id 属性值大于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 后才开启，所以该版本不可以被当前事务访问。\n4.如果被访问版本的 trx_id 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该\n  版本不可以被访问;如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。\n\nMVCC (Multi-Version Concurrency Control ，多版本并发控制)指的就 是在使用 READ COMMITTD 、 REPEATABLE READ 这两种隔离级别的事务在执行普通的 SEELCT 操作时访问记录的版 本链的过程，这样子可以使不同事务的 读-写 、 写-读 操作并发执行，从而提升系统性能。</code></pre>\n<ul>\n<li><p>purge</p>\n<pre><code class=\"textmate\">insert undo 在事务提交之后就可以被释放掉了，而 update undo 由于还需要支持 MVCC ，不能立即 删除掉。\n为了支持 MVCC ，对于 delete mark 操作来说，仅仅是在记录上打一个删除标记，并没有真正将它删除掉。\n随着系统的运行，在确定系统中包含最早产生的那个 ReadView 的事务不会再访问某些 update undo日志 以及被 打了删除标记的记录后，有一个后台运行的 purge线程 会把它们真正的删除掉</code></pre>\n<h3 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h3><h4 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h4><pre><code class=\"textmate\">行级锁、表锁(S锁-共享锁、X锁-独占锁、IS-意向共享、IX-意向独占)\n总结:\n  IS、IX锁是表级锁，它们的提出仅仅为了在之后加表级别的S锁和X锁时可以快速判断表中的记录是否 被上锁，\n  以避免用遍历的方式来查看表中有没有上锁的记录，也就是说其实IS锁和IX锁是兼容的，IX锁和IX锁是 兼容的</code></pre>\n</li>\n<li><p>兼容性</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>是否兼容</th>\n<th>X</th>\n<th>IX</th>\n<th>S</th>\n<th>IS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>S</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<ul>\n<li>锁结构(简易)<pre><code class=\"textmate\">trx信息 :代表这个锁结构是哪个事务生成的。\nis_waiting :代表当前事务是否在等待。</code></pre>\n</li>\n<li>操作锁步骤<pre><code class=\"textmate\">在事务 T1 提交之后，就会把该事务生成的 锁结构 释放掉，然后看看还有没有别的事务在等待获取锁， 发现了事务 T2 还在等待获取锁，\n所以把事务 T2 对应的锁结构的 is_waiting 属性设置为 false ，然后 把该事务对应的线程唤醒，让它继续执行，此时事务 T2 就算获取到锁了</code></pre>\n</li>\n</ul>\n<h4 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h4><pre><code class=\"textmate\">在 READ UNCOMMITTED 隔离级别下， 脏读 、 不可重复读 、 幻读 都可能发生。\n在 READ COMMITTED 隔离级别下， 不可重复读 、 幻读 可能发生， 脏读 不可以发生。\n在 REPEATABLE READ 隔离级别下， 幻读 可能发生， 脏读 和 不可重复读 不可以发生。\n在 SERIALIZABLE 隔离级别下，上述问题都不可以发生。\n\n脏读：读到另一个事务未提交的数据\n不可重复读: 同一个事务两次读取，第二次读取到了另外一个事务提交的数据\n幻读: 同一个事务两次读取范围数据，第二次读取到新的记录</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h3><ul>\n<li><a href=\"https://blog.jcole.us/innodb\">Jeremy Cole的博客</a></li>\n<li><a href=\"https://dev.mysql.com/doc/dev/mysql-server\">MySQL8.0的源码文档</a></li>\n<li><a href=\"https://publications.sba-research.org/publications/WSDF2012_InnoDB.pdf\">mariadb-innodb原理文档(带图)</a></li>\n<li><a href=\"http://mysqlserverteam.com/\">MySQL Team Blog</a></li>\n<li><a href=\"http://www.unofficialmysqlguide.com/optimizer-trace.html\">非官方MySQL8.0优化器指南</a></li>\n</ul>\n<h2 id=\"部分总结\"><a href=\"#部分总结\" class=\"headerlink\" title=\"部分总结\"></a>部分总结</h2><h3 id=\"Innodb引擎的4大特性\"><a href=\"#Innodb引擎的4大特性\" class=\"headerlink\" title=\"Innodb引擎的4大特性\"></a>Innodb引擎的4大特性</h3><blockquote>\n<p><a href=\"https://www.cnblogs.com/zhs0/p/10528520.html\">参考文档</a></p>\n</blockquote>\n<ul>\n<li>插入缓冲</li>\n<li>二次写</li>\n<li>自适应哈希</li>\n<li>预读</li>\n</ul>\n<h4 id=\"插入缓冲\"><a href=\"#插入缓冲\" class=\"headerlink\" title=\"插入缓冲\"></a>插入缓冲</h4><pre><code class=\"textmate\">用于提升插入性能，分为Insert Buffer、Change Buffer\nchange buffering是insert buffer的加强，insert buffer只针对insert有效，change buffering对insert、delete、update(delete+insert)、purge都有效\n\n使用插入缓冲的条件：\n* 非聚集索引\n* 非唯一索引</code></pre>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><ul>\n<li><p>事务的特性ACID</p>\n<pre><code class=\"textmate\">原子性(atomicity)：一个事务被事务不可分割的最小工作单元，要么全部提交，要么全部失败回滚。\n一致性(consistency)：数据库总是从一致性状态到另一个一致性状态，它只包含成功事务提交的结果\n隔离型(isolation)：事务所做的修改在最终提交一起，对其他事务是不可见的\n持久性(durability)：一旦事务提交，则其所做的修改就会永久保存到数据库中。</code></pre>\n</li>\n<li><p>事务隔离级别 </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>解决原理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>读已提交</td>\n<td>√</td>\n<td>x</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>√</td>\n<td>√</td>\n<td>x</td>\n<td>gap锁 (mysql默认级别)</td>\n</tr>\n<tr>\n<td>串行化</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>读锁</td>\n</tr>\n</tbody></table>\n<h4 id=\"重要文件\"><a href=\"#重要文件\" class=\"headerlink\" title=\"重要文件\"></a>重要文件</h4><ul>\n<li>undolog</li>\n<li>redolog</li>\n<li>binlog</li>\n</ul>\n<h4 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h4><ul>\n<li>MyISAM</li>\n<li>Heap</li>\n<li>Merge</li>\n<li>INNODB</li>\n<li>ISAM</li>\n</ul>\n<h2 id=\"《MySQL是怎样运行的：从根上理解MySQL》-读书笔记\"><a href=\"#《MySQL是怎样运行的：从根上理解MySQL》-读书笔记\" class=\"headerlink\" title=\"《MySQL是怎样运行的：从根上理解MySQL》 读书笔记\"></a>《MySQL是怎样运行的：从根上理解MySQL》 读书笔记</h2><blockquote>\n<p>第一次读，摘录了其中部分知识点 2021-09-13读完</p>\n</blockquote>\n<h3 id=\"InnoDB数据格式\"><a href=\"#InnoDB数据格式\" class=\"headerlink\" title=\"InnoDB数据格式\"></a>InnoDB数据格式</h3><ul>\n<li><p>内存与磁盘交互方式</p>\n<pre><code class=\"textmate\">InnoDB 采取的方式是:将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小 一般为 16 KB。\n也就是在一般情况下，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB 内容刷新到磁盘中。</code></pre>\n</li>\n<li><p>行格式<br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-compact%E8%A1%8C%E6%A0%BC%E5%BC%8F.png\">Compact行</a></p>\n<pre><code class=\"textmate\">Compact 、 Redundant 、Dynamic 和 Compressed\n变长字段(varchar(n)、text等)占用内存：1. 真正的数据内容 2. 占用的字节数\n对于 CHAR(M) 类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字 段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表。</code></pre>\n</li>\n<li><p>数据太多造成的溢出</p>\n<pre><code class=\"textmate\">行溢出：一个页一般是 16KB ，当记录中的数据太多，当前页放不下的时候，会把多余的数据存储到其他页中；\nMySQL 是以 页为单位管理存储空间，一个页一般16kb,16384字节，一个varchar最多存储65532个字节\n对于占用存储空间非常大的列，在 记录的真实数据 处只会存储该列的一部 分数据，把剩余的数据分散存储在几个其他的页中，然后记录的真实数据处用20个字节存储指向这些页的地址 \n(当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数)，从而可以找到剩余数据所在的页，</code></pre>\n</li>\n<li><p>行溢出的临界点</p>\n<pre><code class=\"textmate\">MySQL 中规定一个页中至少存放两行记录\n对于只有一个列的表，发生行溢出现象时需要满足这个式子: 136 + 2×(27 + n) &gt; 16384 ， n &gt; 8098\n重点:\n  不用关注这个临界点是什么，只要知道如果我们向一个行中存储了很大的数据时，可能发生 行溢出 的现象\n不论我们怎么对页中的记录做增删改操作，InnoDB始终会维护一条记录的单链表，链表中的各个 节点是按照主键值由小到大的顺序连接起来的</code></pre>\n</li>\n<li><p>总结<br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB_data_page.png\">InnoDB数据页结构</a></p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1. InnoDB为了不同的目的而设计了不同类型的页，我们把用于存放记录的页叫做 数据页 。\n2. 一个数据页可以被大致划分为7个部分，分别是\n   File Header ，表示页的一些通用信息，占固定的38字节。\n   Page Header ，表示数据页专有的一些信息，占固定的56个字节。\n   Infimum + Supremum ，两个虚拟的伪记录，分别表示页中的最小和最大记录，占固定的 26 个字节。\n   User Records :真实存储我们插入的记录的部分，大小不固定。\n   Free Space :页中尚未使用的部分，大小不确定。\n   Page Directory: 页中的某些记录相对位置，也就是各个槽在页面中的地址偏移量，大小不固定，插入的记录越多，这个部分占用的空间越多。\n   File Trailer :用于检验页是否完整的部分，占用固定的8个字节。\n3. 每个记录的头信息中都有一个 next_record 属性，从而使页中的所有记录串联成一个 单链表 。\n4. InnoDB 会为把页中的记录划分为若干个组，每个组的最后一个记录的地址偏移量作为一个 槽 ，存放在\n   Page Directory 中，所以在一个页中根据主键查找记录是非常快的，分为两步:\n   4.1 通过二分法确定该记录所在的槽。\n   4.2 通过记录的next_record属性遍历该槽所在的组中的各个记录。\n5. 每个数据页的 File Header 部分都有上一个和下一个页的编号，所以所有的数据页会组成一个 双链表 。\n6. 为保证从内存中同步到磁盘的页的完整性，在页的首部和尾部都会存储页中数据的校验和和页面最后修改时\n   对应的 LSN 值，如果首部和尾部的校验和和 LSN 值校验不成功的话，就说明同步过程出现了问题。</code></pre>\n<ul>\n<li>Innodb通用页结构<br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\">Innodb通用页结构</a><br><br/><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/Innodb%E9%80%9A%E7%94%A8%E9%A1%B5%E7%BB%93%E6%9E%84-%E8%A7%A3%E9%87%8A.png\">Innodb通用页结构-解释</a></li>\n</ul>\n<pre><code class=\"textmate\">表空间结构(系统表空间/独立表空间)\n连续64个页面 = 一个区(默认1MB)\n每256个区被划分为一个组\n每个组的最开始的几个页面类型是固定的\n1.FSP_HDR 类型:这个类型的页面是用来登记整个表空间的一些整体属性以及本组所有的 区 ，也就是\n  extent 0 ~ extent 255 这256个区的属性，稍后详细唠叨。需要注意的一点是，整个表空间只有一 个 FSP_HDR 类型的页面。\n2.IBUF_BITMAP 类型:这个类型的页面是存储本组所有的区的所有页面关于 INSERT BUFFER 的信息。\n3.INODE 类型:这个类型的页面存储了许多称为 INODE 的数据结构，\n\n其余各组最开始的2个页面的类型是固定的\n1.DES 类型:全称是 extent descriptor ，用来登记本组256个区的属性，也就是说对于在 extent 256 区中的该类型页面存储的就是 extent 256 ~ extent 511 这些区的属性，对于在 extent 512 区中的该 类型页面存储的就是 extent 512 ~ extent 767 这些区的属性。上边介绍的 FSP_HDR 类型的页面其实 和 XDES 类型的页面的作用类似，只不过 FSP_HDR 类型的页面还会额外存储一些表空间的属性。\n2.IBUF_BITMAP</code></pre>\n<ul>\n<li><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innondb%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png\">InnonDB文件结构总结</a></li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><pre><code class=\"textmate\">SHOW INDEX FROM 表名 - 索引统计数据\n    对于InnoDB存储引擎来说，使用SHOW INDEX语句展示出来的某个索引列的Cardinality属性是一个估计 值，并不是精确的\n注意：\n    在MySQL 5.7.3以及之前的版本中，eq_range_index_dive_limit的默认值为10，之 后的版本默认值为200。\n    所以如果大家采用的是5.7.3以及之前的版本的话，很容易采用索引统计数据而 不是index dive的方式来计算查询成本。当你的查询中使用到了IN查询，但是却实际没有用到索引，就 应该考虑一下是不是由于 eq_range_index_dive_limit 值太小导致的。\n连接查询的成本计算公式:\n    连接查询总成本 = 单次访问驱动表的成本 + 驱动表扇出数 x 单次访问被驱动表的成本</code></pre>\n<h4 id=\"InnoDB统计数据的方式\"><a href=\"#InnoDB统计数据的方式\" class=\"headerlink\" title=\"InnoDB统计数据的方式\"></a>InnoDB统计数据的方式</h4><pre><code class=\"textmate\">InnoDB 以表为单位来收集统计数据，这些统计数据可以是基于磁盘的永久性统计数据，也可以是基于内存 的非永久性统计数据。\n    innodb_stats_persistent 控制着使用永久性统计数据还是非永久性统计数据; \n    innodb_stats_persistent_sample_pages 控制着永久性统计数据的采样页面数量; \n    innodb_stats_transient_sample_pages 控制着非永久性统计数据的采样页面数量; \n    innodb_stats_auto_recalc 控制着是否自动重新计算统计数据。\n我们可以针对某个具体的表，在创建和修改表时通过指定 STATS_PERSISTENT 、 STATS_AUTO_RECALC 、 STATS_SAMPLE_PAGES 的值来控制相关统计数据属性。\n    innodb_stats_method 决定着在统计某个索引列不重复值的数量时如何对待 NULL 值。\n通过配置将决定权交给用户\n    1.nulls_equal :认为所有 NULL 值都是相等的。这个值也是 innodb_stats_method 的默认值。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 多，所以倾向于不使用索引进行访问。\n    2.nulls_unequal :认为所有 NULL 值都是不相等的。如果某个索引列中 NULL 值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别 少，所以倾向于使用索引进行访问。\n    3.nulls_ignored :直接把 NULL 值忽略掉。</code></pre>\n<h4 id=\"SQL重写方式\"><a href=\"#SQL重写方式\" class=\"headerlink\" title=\"SQL重写方式\"></a>SQL重写方式</h4><h5 id=\"条件化简\"><a href=\"#条件化简\" class=\"headerlink\" title=\"条件化简\"></a>条件化简</h5><pre><code class=\"textmate\">1.移除不必要的括号\n2.常量传递\n    a = 5 AND b &gt; a 改写为 a = 5 AND b &gt; 5\n3.等值传递\n    a = b and b = c and c = 5 改写为 a = 5 and b = 5 and c = 5\n4.移除没用的条件\n    (a &lt; 1 and b = b) OR (a = 6 OR 5 != 5) 改写为 (a &lt; 1 and TRUE) OR (a = 6 OR FALSE)  ==&gt;  a &lt; 1 OR a = 6\n5.表达式计算\n    a =5 + 1 改写为 a=6\n6.having和where子句合并\n7.常量表检测</code></pre>\n<h5 id=\"外连接消除\"><a href=\"#外连接消除\" class=\"headerlink\" title=\"外连接消除\"></a>外连接消除</h5><ul>\n<li>外连接和内连接区别<pre><code class=\"textmate\">外连接和内连接的本质区别就是:\n  对于外连接的驱动表的记录来说，如果无法在被驱动表中找到 匹配ON子句中的过滤条件的记录，那么该记录仍然会被加入到结果集中，对应的被驱动表记录的各个字段使用 NULL值填充;\n  而内连接的驱动表的记录如果无法在被驱动表中找到匹配ON子句中的过滤条件的记录，那么该记 录会被舍弃\n空值拒绝:\n  在被驱动表的WHERE子句符合空值拒绝的条件后，外连接和内连接可以相互转 换。这种转换带来的好处就是查询优化器可以通过评估表的不同连接顺序的成本，选出成本最低的那种连接顺序 来执行查询。</code></pre>\n</li>\n</ul>\n<h5 id=\"子查询优化\"><a href=\"#子查询优化\" class=\"headerlink\" title=\"子查询优化\"></a>子查询优化</h5><pre><code class=\"textmate\">1.按返回的结果集区分子查询\n    标量子查询\n    行子查询\n    列子查询\n    表子查询\n2.按与外层查询关系来区分子查询\n    不相关子查询\n    相关子查询\n3.子查询在布尔表达式中的使用\n4.子查询语法注意事项\n    4.1 子查询必须用小括号扩起来\n    4.2 在 SELECT 子句中的子查询必须是标量子查询\n    4.3 在想要得到标量子查询或者行子查询，但又不能保证子查询的结果集只有一条记录时，应该使用LIMIT 1语句来限制记录数量。\n    4.4 对于[NOT]IN/ANY/SOME/ALL 子查询来说，子查询中不允许有 LIMIT 语句。\n    4.5 不允许在一条语句中增删改某个表的记录时同时还对该表进行子查询。\n\n    如果 IN 子查询符合转换为 semi-join 的条件，查询优化器会优先把该子查询为 semi-join ，然后再考虑下边5种执行半连接的策略中哪个成本最低:\n    Table pullout\n    DuplicateWeedout \n    LooseScan \n    Materialization \n    FirstMatch\n    选择成本最低的那种执行策略来执行子查询。\n    如果 IN 子查询不符合转换为 semi-join 的条件，那么查询优化器会从下边两种策略中找出一种成本更低的 方式执行子查询:\n    先将子查询物化之后再执行查询 执行 IN to EXISTS 转换。\n\n5.[NOT] EXISTS子查询的执行\n    如果 [NOT] EXISTS 子查询是不相关子查询，可以先执行子查询，得出该 [NOT] EXISTS 子查询的结果是 TRUE 还\n    是 FALSE ，并重写原先的查询语句\n\n6.对于派生表的优化\n    6.1 最容易想到的就是把派生表物化\n    6.2将派生表和外层的表合并，也就是将查询重写为没有派生表的形式</code></pre>\n<h3 id=\"Explain\"><a href=\"#Explain\" class=\"headerlink\" title=\"Explain\"></a>Explain</h3><h5 id=\"查看优化器生成执行计划的整个过程\"><a href=\"#查看优化器生成执行计划的整个过程\" class=\"headerlink\" title=\"查看优化器生成执行计划的整个过程\"></a>查看优化器生成执行计划的整个过程</h5><pre><code class=\"textmate\">SHOW VARIABLES LIKE &#39;optimizer_trace&#39;;\n 1. 打开optimizer trace功能 (默认情况下它是关闭的):\n    SET optimizer_trace=&quot;enabled=on&quot;;\n 2. 这里输入你自己的查询语句 SELECT ...;\n 3. 从OPTIMIZER_TRACE表中查看上一个查询的优化过程 \n    SELECT * FROM information_schema.OPTIMIZER_TRACE;\n 4. 可能你还要观察其他语句执行的优化过程，重复上边的第2、3步 ...\n 5. 当你停止查看语句的优化过程时，把optimizer trace功能关闭 SET optimizer_trace=&quot;enabled=off&quot;;</code></pre>\n<h3 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h3><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code class=\"textmate\">1. 磁盘太慢，用内存作为缓存很有必要。\n2. Buffer Pool 本质上是 InnoDB 向操作系统申请的一段连续的内存空间，可以通过\n   innodb_buffer_pool_size 来调整它的大小。\n3. Buffer Pool 向操作系统申请的连续内存由控制块和缓存页组成，每个控制块和缓存页都是一一对应的，在\n   填充足够多的控制块和缓存页的组合后， Buffer Pool 剩余的空间可能产生不够填充一组控制块和缓存页，\n   这部分空间不能被使用，也被称为 碎片 。\n4. InnoDB 使用了许多 链表 来管理 Buffer Pool 。\n5. free链表 中每一个节点都代表一个空闲的缓存页，在将磁盘中的页加载到 Buffer Pool 时，会从 free链 表 中寻找空闲的缓存页。\n6. 为了快速定位某个页是否被加载到 Buffer Pool ，使用 表空间号 + 页号 作为 key ，缓存页作为 value ， 建立哈希表。\n7. 在 Buffer Pool 中被修改的页称为 脏页 ，脏页并不是立即刷新，而是被加入到 flush链表 中，待之后的某 个时刻同步到磁盘上。\n8. LRU链表 分为 young 和 old 两个区域，可以通过 innodb_old_blocks_pct 来调节 old 区域所占的比例。\n   首次从磁盘上加载到 Buffer Pool 的页会被放到 old 区域的头部，在 innodb_old_blocks_time 间隔时间内访 问该页不会把它移动到 young 区域头部。在 Buffer Pool 没有可用的空闲缓存页时，会首先淘汰掉 old 区 域的一些页。\n9. 我们可以通过指定 innodb_buffer_pool_instances 来控制 Buffer Pool 实例的个数，每个 Buffer Pool 实 例中都有各自独立的链表，互不干扰。\n10. 自 MySQL 5.7.5 版本之后，可以在服务器运行过程中调整 Buffer Pool 大小。每个 Buffer Pool 实例由若 干个 chunk 组成，每个 chunk 的大小可以在服务器启动时通过启动参数调整。\n11. 可以用下边的命令查看 Buffer Pool 的状态信息: SHOW ENGINE INNODB STATUS\\G</code></pre>\n<h3 id=\"事务-1\"><a href=\"#事务-1\" class=\"headerlink\" title=\"事务\"></a>事务</h3><h4 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a>ReadView</h4><ul>\n<li><a href=\"https://gitee.com/im-fan/fan-pic/raw/master/images/mysql-innodb-%E7%89%88%E6%9C%AC%E9%93%BE.png\">版本链</a></li>\n</ul>\n<pre><code class=\"textmate\">READ COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，\n核心问题就是:需要判断一下版本链中的哪个版本是当前事务可见的;</code></pre>\n<ul>\n<li>ReadView包含信息</li>\n</ul>\n<pre><code class=\"textmate\">1.m_ids :表示在生成 ReadView 时当前系统中活跃的读写事务的 事务id 列表。\n2.min_trx_id :表示在生成 ReadView 时当前系统中活跃的读写事务中最小的 事务id ，也就是 m_ids 中的最 小值。\n3.max_trx_id :表示生成 ReadView 时系统中应该分配给下一个事务的 id 值。\n  小贴士:\n  注意max_trx_id并不是m_ids中的最大值，事务id是递增分配的。比方说现在有id为1，2，3这三 个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，m_ids就包括1和2，mi n_trx_id的值就是1，max_trx_id的值就是4。\n4.creator_trx_id :表示生成该 ReadView 的事务的 事务id 。</code></pre>\n<ul>\n<li>区别</li>\n</ul>\n<pre><code class=\"textmate\">READ COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成ReadView的 时机不同\nREAD COMMITTED —— 同一事务每次读取数据前都生成一个ReadView\nREPEATABLE READ —— 同一事务在第一次读取数据时生成一个ReadView</code></pre>\n<ul>\n<li>ReadView判断步骤</li>\n</ul>\n<pre><code class=\"textmate\">1.如果被访问版本的 trx_id 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己 修改过的记录，所以该版本可以被当前事务访问。\n2.如果被访问版本的 trx_id 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 前已经提交，所以该版本可以被当前事务访问。\n3.如果被访问版本的 trx_id 属性值大于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生 成 ReadView 后才开启，所以该版本不可以被当前事务访问。\n4.如果被访问版本的 trx_id 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该\n  版本不可以被访问;如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。\n\nMVCC (Multi-Version Concurrency Control ，多版本并发控制)指的就 是在使用 READ COMMITTD 、 REPEATABLE READ 这两种隔离级别的事务在执行普通的 SEELCT 操作时访问记录的版 本链的过程，这样子可以使不同事务的 读-写 、 写-读 操作并发执行，从而提升系统性能。</code></pre>\n<ul>\n<li><p>purge</p>\n<pre><code class=\"textmate\">insert undo 在事务提交之后就可以被释放掉了，而 update undo 由于还需要支持 MVCC ，不能立即 删除掉。\n为了支持 MVCC ，对于 delete mark 操作来说，仅仅是在记录上打一个删除标记，并没有真正将它删除掉。\n随着系统的运行，在确定系统中包含最早产生的那个 ReadView 的事务不会再访问某些 update undo日志 以及被 打了删除标记的记录后，有一个后台运行的 purge线程 会把它们真正的删除掉</code></pre>\n<h3 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h3><h4 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h4><pre><code class=\"textmate\">行级锁、表锁(S锁-共享锁、X锁-独占锁、IS-意向共享、IX-意向独占)\n总结:\n  IS、IX锁是表级锁，它们的提出仅仅为了在之后加表级别的S锁和X锁时可以快速判断表中的记录是否 被上锁，\n  以避免用遍历的方式来查看表中有没有上锁的记录，也就是说其实IS锁和IX锁是兼容的，IX锁和IX锁是 兼容的</code></pre>\n</li>\n<li><p>兼容性</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>是否兼容</th>\n<th>X</th>\n<th>IX</th>\n<th>S</th>\n<th>IS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>S</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<ul>\n<li>锁结构(简易)<pre><code class=\"textmate\">trx信息 :代表这个锁结构是哪个事务生成的。\nis_waiting :代表当前事务是否在等待。</code></pre>\n</li>\n<li>操作锁步骤<pre><code class=\"textmate\">在事务 T1 提交之后，就会把该事务生成的 锁结构 释放掉，然后看看还有没有别的事务在等待获取锁， 发现了事务 T2 还在等待获取锁，\n所以把事务 T2 对应的锁结构的 is_waiting 属性设置为 false ，然后 把该事务对应的线程唤醒，让它继续执行，此时事务 T2 就算获取到锁了</code></pre>\n</li>\n</ul>\n<h4 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h4><pre><code class=\"textmate\">在 READ UNCOMMITTED 隔离级别下， 脏读 、 不可重复读 、 幻读 都可能发生。\n在 READ COMMITTED 隔离级别下， 不可重复读 、 幻读 可能发生， 脏读 不可以发生。\n在 REPEATABLE READ 隔离级别下， 幻读 可能发生， 脏读 和 不可重复读 不可以发生。\n在 SERIALIZABLE 隔离级别下，上述问题都不可以发生。\n\n脏读：读到另一个事务未提交的数据\n不可重复读: 同一个事务两次读取，第二次读取到了另外一个事务提交的数据\n幻读: 同一个事务两次读取范围数据，第二次读取到新的记录</code></pre>\n"},{"title":"Gradle学习笔记","description":"gradle","date":"2021-01-21T05:24:22.000Z","_content":"\n- [Gradle理解：configuration、dependency](https://blog.csdn.net/gdeer/article/details/104815986)\n\n### 关键字解释\n\n|关键字|关键字解释|值|值解释|\n|-|:-:|-|:-:|\n|plugins||id||\n|group|定义模块|||\n|version|模块版本号|||\n|sourceCompatibility||||\n|configurations|不同的 configuration 用来引用不同领域</br>（或不同用途）的 dependencies|||\n|buildscript|用于声明gradle自身依赖的插件，优先执行|ext||\n|||repositories||\n|||dependencies||\n|allprojects|对所有project的配置,包括root project|repositories||\n|subprojects|对所有Child Project的配置|||\n|repositories|查找jar包顺序|||\n|dependencies|定义依赖|||\n|test|定义测试依赖信息|||\n\n\n### dependencies依赖关键字\n\n|3+|2.+|描述|\n|-|-|:-:|\n|implementation||所依赖的库仅可在当前module使用，编译速度快|\n|api|compile|所依赖的库可在整工程使用，编译速度较implementation慢|\n|provided|compileOnly|仅在编译时有效，不参与打包，一般在发布no jar的库时候会用到，很少用|\n|apk|runtimeOnly|仅在生成apk的时候参与打包，编译时不参与|\n|testImplementation|testCompile|仅在单元测试代码的编译以及最终打包测试apk时有效|\n|debugImplementation|debugCompile|仅在debug模式的编译和最终的debug apk打包时有效|\n|releaseImplementation|releaseCompile|仅在Release模式的编译和最终的Release apk打包时有效|\n\n\n","source":"_posts/backend/java/build/gradle.md","raw":"---\ntitle: Gradle学习笔记\ndescription: gradle\ndate: 2021-01-21 13:24:22\ntags:\n- 项目编译\ncategories:\n- 后端\n- 项目编译\n---\n\n- [Gradle理解：configuration、dependency](https://blog.csdn.net/gdeer/article/details/104815986)\n\n### 关键字解释\n\n|关键字|关键字解释|值|值解释|\n|-|:-:|-|:-:|\n|plugins||id||\n|group|定义模块|||\n|version|模块版本号|||\n|sourceCompatibility||||\n|configurations|不同的 configuration 用来引用不同领域</br>（或不同用途）的 dependencies|||\n|buildscript|用于声明gradle自身依赖的插件，优先执行|ext||\n|||repositories||\n|||dependencies||\n|allprojects|对所有project的配置,包括root project|repositories||\n|subprojects|对所有Child Project的配置|||\n|repositories|查找jar包顺序|||\n|dependencies|定义依赖|||\n|test|定义测试依赖信息|||\n\n\n### dependencies依赖关键字\n\n|3+|2.+|描述|\n|-|-|:-:|\n|implementation||所依赖的库仅可在当前module使用，编译速度快|\n|api|compile|所依赖的库可在整工程使用，编译速度较implementation慢|\n|provided|compileOnly|仅在编译时有效，不参与打包，一般在发布no jar的库时候会用到，很少用|\n|apk|runtimeOnly|仅在生成apk的时候参与打包，编译时不参与|\n|testImplementation|testCompile|仅在单元测试代码的编译以及最终打包测试apk时有效|\n|debugImplementation|debugCompile|仅在debug模式的编译和最终的debug apk打包时有效|\n|releaseImplementation|releaseCompile|仅在Release模式的编译和最终的Release apk打包时有效|\n\n\n","slug":"backend/java/build/gradle","published":1,"updated":"2021-01-21T05:44:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry1002zjrnv2m6yel1a","content":"<ul>\n<li><a href=\"https://blog.csdn.net/gdeer/article/details/104815986\">Gradle理解：configuration、dependency</a></li>\n</ul>\n<h3 id=\"关键字解释\"><a href=\"#关键字解释\" class=\"headerlink\" title=\"关键字解释\"></a>关键字解释</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th align=\"center\">关键字解释</th>\n<th>值</th>\n<th align=\"center\">值解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plugins</td>\n<td align=\"center\"></td>\n<td>id</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>group</td>\n<td align=\"center\">定义模块</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>version</td>\n<td align=\"center\">模块版本号</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>sourceCompatibility</td>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>configurations</td>\n<td align=\"center\">不同的 configuration 用来引用不同领域</br>（或不同用途）的 dependencies</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>buildscript</td>\n<td align=\"center\">用于声明gradle自身依赖的插件，优先执行</td>\n<td>ext</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td>repositories</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td>dependencies</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>allprojects</td>\n<td align=\"center\">对所有project的配置,包括root project</td>\n<td>repositories</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>subprojects</td>\n<td align=\"center\">对所有Child Project的配置</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>repositories</td>\n<td align=\"center\">查找jar包顺序</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td align=\"center\">定义依赖</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>test</td>\n<td align=\"center\">定义测试依赖信息</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"dependencies依赖关键字\"><a href=\"#dependencies依赖关键字\" class=\"headerlink\" title=\"dependencies依赖关键字\"></a>dependencies依赖关键字</h3><table>\n<thead>\n<tr>\n<th>3+</th>\n<th>2.+</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>implementation</td>\n<td></td>\n<td align=\"center\">所依赖的库仅可在当前module使用，编译速度快</td>\n</tr>\n<tr>\n<td>api</td>\n<td>compile</td>\n<td align=\"center\">所依赖的库可在整工程使用，编译速度较implementation慢</td>\n</tr>\n<tr>\n<td>provided</td>\n<td>compileOnly</td>\n<td align=\"center\">仅在编译时有效，不参与打包，一般在发布no jar的库时候会用到，很少用</td>\n</tr>\n<tr>\n<td>apk</td>\n<td>runtimeOnly</td>\n<td align=\"center\">仅在生成apk的时候参与打包，编译时不参与</td>\n</tr>\n<tr>\n<td>testImplementation</td>\n<td>testCompile</td>\n<td align=\"center\">仅在单元测试代码的编译以及最终打包测试apk时有效</td>\n</tr>\n<tr>\n<td>debugImplementation</td>\n<td>debugCompile</td>\n<td align=\"center\">仅在debug模式的编译和最终的debug apk打包时有效</td>\n</tr>\n<tr>\n<td>releaseImplementation</td>\n<td>releaseCompile</td>\n<td align=\"center\">仅在Release模式的编译和最终的Release apk打包时有效</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://blog.csdn.net/gdeer/article/details/104815986\">Gradle理解：configuration、dependency</a></li>\n</ul>\n<h3 id=\"关键字解释\"><a href=\"#关键字解释\" class=\"headerlink\" title=\"关键字解释\"></a>关键字解释</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th align=\"center\">关键字解释</th>\n<th>值</th>\n<th align=\"center\">值解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plugins</td>\n<td align=\"center\"></td>\n<td>id</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>group</td>\n<td align=\"center\">定义模块</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>version</td>\n<td align=\"center\">模块版本号</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>sourceCompatibility</td>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>configurations</td>\n<td align=\"center\">不同的 configuration 用来引用不同领域</br>（或不同用途）的 dependencies</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>buildscript</td>\n<td align=\"center\">用于声明gradle自身依赖的插件，优先执行</td>\n<td>ext</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td>repositories</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td>dependencies</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>allprojects</td>\n<td align=\"center\">对所有project的配置,包括root project</td>\n<td>repositories</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>subprojects</td>\n<td align=\"center\">对所有Child Project的配置</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>repositories</td>\n<td align=\"center\">查找jar包顺序</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td align=\"center\">定义依赖</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>test</td>\n<td align=\"center\">定义测试依赖信息</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"dependencies依赖关键字\"><a href=\"#dependencies依赖关键字\" class=\"headerlink\" title=\"dependencies依赖关键字\"></a>dependencies依赖关键字</h3><table>\n<thead>\n<tr>\n<th>3+</th>\n<th>2.+</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>implementation</td>\n<td></td>\n<td align=\"center\">所依赖的库仅可在当前module使用，编译速度快</td>\n</tr>\n<tr>\n<td>api</td>\n<td>compile</td>\n<td align=\"center\">所依赖的库可在整工程使用，编译速度较implementation慢</td>\n</tr>\n<tr>\n<td>provided</td>\n<td>compileOnly</td>\n<td align=\"center\">仅在编译时有效，不参与打包，一般在发布no jar的库时候会用到，很少用</td>\n</tr>\n<tr>\n<td>apk</td>\n<td>runtimeOnly</td>\n<td align=\"center\">仅在生成apk的时候参与打包，编译时不参与</td>\n</tr>\n<tr>\n<td>testImplementation</td>\n<td>testCompile</td>\n<td align=\"center\">仅在单元测试代码的编译以及最终打包测试apk时有效</td>\n</tr>\n<tr>\n<td>debugImplementation</td>\n<td>debugCompile</td>\n<td align=\"center\">仅在debug模式的编译和最终的debug apk打包时有效</td>\n</tr>\n<tr>\n<td>releaseImplementation</td>\n<td>releaseCompile</td>\n<td align=\"center\">仅在Release模式的编译和最终的Release apk打包时有效</td>\n</tr>\n</tbody></table>\n"},{"title":"EasyExcel使用遇到的问题","description":"excel","date":"2020-10-20T09:22:53.000Z","_content":"\n### 导出设置标题格式\n- TitleHandler\n```java\npublic class TitleHandler implements CellWriteHandler{\n\n    //操作列\n    private List<Integer> columnIndexs;\n    //颜色\n    private Short colorIndex;\n\n    public TitleHandler(List<Integer> columnIndexs, Short colorIndex) {\n        this.columnIndexs = columnIndexs;\n        this.colorIndex = colorIndex;\n    }\n\n    @Override\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n        if(isHead){\n            // 设置列宽\n            Sheet sheet = writeSheetHolder.getSheet();\n            sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n            writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n            Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n            // 设置标题字体样式\n            WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n            WriteFont headWriteFont = new WriteFont();\n            headWriteFont.setFontName(\"宋体\");\n            headWriteFont.setFontHeightInPoints((short)14);\n            headWriteFont.setBold(true);\n            if (CollectionUtils.isNotEmpty(columnIndexs) &&\n                    colorIndex != null &&\n                    columnIndexs.contains(cell.getColumnIndex())) {\n                // 设置字体颜色\n                headWriteFont.setColor(colorIndex);\n            }\n            headWriteCellStyle.setWriteFont(headWriteFont);\n            headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n            CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n            cell.setCellStyle(cellStyle);\n        }\n    }\n}\n```\n\n- ExcelUtils\n```java\npublic class ExcelUtils {\n    /** 导出Excel **/\n    public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                   List data, HttpServletResponse response,\n                                   CellWriteHandler... cellWriteHandlers) throws IOException {\n        response.setContentType(\"application/vnd.ms-excel\");\n        response.setCharacterEncoding(\"utf-8\");\n        fileName = URLEncoder.encode(fileName, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n\n        // 列标题的策略\n        WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n        // 单元格策略\n        WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n        // 初始化表格样式\n        HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n        ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n                .sheet(sheetName)\n                .registerWriteHandler(horizontalCellStyleStrategy);\n\n        if (null != cellWriteHandlers && cellWriteHandlers.length > 0) {\n            for (int i = 0; i < cellWriteHandlers.length; i++) {\n                excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n            }\n        }\n        // 开始导出\n        excelWriterSheetBuilder.doWrite(data);\n    }\n}\n```\n- 使用\n```java\n/** 导出excel模板**/\npublic void exportTemplate(List<Integer> ids,HttpServletResponse response){\n    try {\n        List<XXX> result = getByIds(ids);\n\n        // 指定标红色的列\n        List<Integer> columns = Arrays.asList(0,1,2,3);\n\n        TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n        ExcelUtils.exportExcel(\"文件名\",\"sheet名称\",\n                XXX.class,result,response,titleHandler);\n    } catch (IOException e) {\n        log.warn(\"导出失败,error={}\",e);\n    }\n}\n```\n\n### 设置中文文件名\n\n```java\n// 代码中添加\nresponse.setContentType(\"application/vnd.ms-excel;charset=UTF-8\");\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n```\n\n### 导出失败返回错误信息\n```java\n// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(\"application/json\");\nresponse.setCharacterEncoding(\"utf-8\");\ntry {\n    response.getWriter().println(result);\n} catch (IOException ioException) {\n    log.warn(\"业务异常  msg={}\",ioException);\n}\n```\n\n### 常见错误\n#### 导出成功但是后台日志报类型转换异常\n```textmate\n错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可\n```\n\n#### poi流转对象问题(用easy-poi时遇到的问题)\n```textmate\n错误日志\n    Your stream was neither an OLE2 stream, nor an OOXML stream.\n原因\n    多次操作流导致文件类型异常\n解决方法\n    读取远程流后，直接用当前流转换成对象\n例:\n    //读取远程文件工具类\n    public static InputStream readUrlExcelFile(String urlPath) {\n        try{\n            URL url = new URL(urlPath);\n            URLConnection conn = url.openConnection();\n            int size = conn.getContentLength();\n            if(size < 0){\n                return null;\n            }\n            return conn.getInputStream();\n\n        } catch (IOException e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n    \n    //具体业务逻辑 流转对象用的是easy-poi\n    public static XXService{\n        public void saveExcel(String url){\n            InputStream inputStream;\n            try{\n                inputStream = FileUtils.readUrlExcelFile(request.getFilePath());\n                if(inputStream == null){\n                    System.out.println(\"文件读取失败\");\n                    return;\n                }\n    \n                ImportParams importParams = new ImportParams();\n                //标识开始行\n                importParams.setStartRows(0);\n                List<XXX> list = ExcelImportUtil.importExcel(inputStream,\n                        XXX.class,\n                        importParams);\n                        \n            } catch(Exception e){\n                e.printStackTrace();\n            } finally{\n                if(inputStream != null){\n                    inputStream.close();\n                }\n            }\n        }\n    }\n```\n","source":"_posts/backend/java/utils/excel.md","raw":"---\ntitle: EasyExcel使用遇到的问题\ndescription: excel\ndate: 2020-10-20 17:22:53\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n### 导出设置标题格式\n- TitleHandler\n```java\npublic class TitleHandler implements CellWriteHandler{\n\n    //操作列\n    private List<Integer> columnIndexs;\n    //颜色\n    private Short colorIndex;\n\n    public TitleHandler(List<Integer> columnIndexs, Short colorIndex) {\n        this.columnIndexs = columnIndexs;\n        this.colorIndex = colorIndex;\n    }\n\n    @Override\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n        if(isHead){\n            // 设置列宽\n            Sheet sheet = writeSheetHolder.getSheet();\n            sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n            writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n            Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n            // 设置标题字体样式\n            WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n            WriteFont headWriteFont = new WriteFont();\n            headWriteFont.setFontName(\"宋体\");\n            headWriteFont.setFontHeightInPoints((short)14);\n            headWriteFont.setBold(true);\n            if (CollectionUtils.isNotEmpty(columnIndexs) &&\n                    colorIndex != null &&\n                    columnIndexs.contains(cell.getColumnIndex())) {\n                // 设置字体颜色\n                headWriteFont.setColor(colorIndex);\n            }\n            headWriteCellStyle.setWriteFont(headWriteFont);\n            headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n            CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n            cell.setCellStyle(cellStyle);\n        }\n    }\n}\n```\n\n- ExcelUtils\n```java\npublic class ExcelUtils {\n    /** 导出Excel **/\n    public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                   List data, HttpServletResponse response,\n                                   CellWriteHandler... cellWriteHandlers) throws IOException {\n        response.setContentType(\"application/vnd.ms-excel\");\n        response.setCharacterEncoding(\"utf-8\");\n        fileName = URLEncoder.encode(fileName, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n\n        // 列标题的策略\n        WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n        // 单元格策略\n        WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n        // 初始化表格样式\n        HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n        ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n                .sheet(sheetName)\n                .registerWriteHandler(horizontalCellStyleStrategy);\n\n        if (null != cellWriteHandlers && cellWriteHandlers.length > 0) {\n            for (int i = 0; i < cellWriteHandlers.length; i++) {\n                excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n            }\n        }\n        // 开始导出\n        excelWriterSheetBuilder.doWrite(data);\n    }\n}\n```\n- 使用\n```java\n/** 导出excel模板**/\npublic void exportTemplate(List<Integer> ids,HttpServletResponse response){\n    try {\n        List<XXX> result = getByIds(ids);\n\n        // 指定标红色的列\n        List<Integer> columns = Arrays.asList(0,1,2,3);\n\n        TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n        ExcelUtils.exportExcel(\"文件名\",\"sheet名称\",\n                XXX.class,result,response,titleHandler);\n    } catch (IOException e) {\n        log.warn(\"导出失败,error={}\",e);\n    }\n}\n```\n\n### 设置中文文件名\n\n```java\n// 代码中添加\nresponse.setContentType(\"application/vnd.ms-excel;charset=UTF-8\");\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n```\n\n### 导出失败返回错误信息\n```java\n// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(\"application/json\");\nresponse.setCharacterEncoding(\"utf-8\");\ntry {\n    response.getWriter().println(result);\n} catch (IOException ioException) {\n    log.warn(\"业务异常  msg={}\",ioException);\n}\n```\n\n### 常见错误\n#### 导出成功但是后台日志报类型转换异常\n```textmate\n错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可\n```\n\n#### poi流转对象问题(用easy-poi时遇到的问题)\n```textmate\n错误日志\n    Your stream was neither an OLE2 stream, nor an OOXML stream.\n原因\n    多次操作流导致文件类型异常\n解决方法\n    读取远程流后，直接用当前流转换成对象\n例:\n    //读取远程文件工具类\n    public static InputStream readUrlExcelFile(String urlPath) {\n        try{\n            URL url = new URL(urlPath);\n            URLConnection conn = url.openConnection();\n            int size = conn.getContentLength();\n            if(size < 0){\n                return null;\n            }\n            return conn.getInputStream();\n\n        } catch (IOException e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n    \n    //具体业务逻辑 流转对象用的是easy-poi\n    public static XXService{\n        public void saveExcel(String url){\n            InputStream inputStream;\n            try{\n                inputStream = FileUtils.readUrlExcelFile(request.getFilePath());\n                if(inputStream == null){\n                    System.out.println(\"文件读取失败\");\n                    return;\n                }\n    \n                ImportParams importParams = new ImportParams();\n                //标识开始行\n                importParams.setStartRows(0);\n                List<XXX> list = ExcelImportUtil.importExcel(inputStream,\n                        XXX.class,\n                        importParams);\n                        \n            } catch(Exception e){\n                e.printStackTrace();\n            } finally{\n                if(inputStream != null){\n                    inputStream.close();\n                }\n            }\n        }\n    }\n```\n","slug":"backend/java/utils/excel","published":1,"updated":"2021-09-24T09:36:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry10033jrnv5er97ry5","content":"<h3 id=\"导出设置标题格式\"><a href=\"#导出设置标题格式\" class=\"headerlink\" title=\"导出设置标题格式\"></a>导出设置标题格式</h3><ul>\n<li><p>TitleHandler</p>\n<pre><code class=\"java\">public class TitleHandler implements CellWriteHandler&#123;\n\n  //操作列\n  private List&lt;Integer&gt; columnIndexs;\n  //颜色\n  private Short colorIndex;\n\n  public TitleHandler(List&lt;Integer&gt; columnIndexs, Short colorIndex) &#123;\n      this.columnIndexs = columnIndexs;\n      this.colorIndex = colorIndex;\n  &#125;\n\n  @Override\n  public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n      if(isHead)&#123;\n          // 设置列宽\n          Sheet sheet = writeSheetHolder.getSheet();\n          sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n          writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n          Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n          // 设置标题字体样式\n          WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n          WriteFont headWriteFont = new WriteFont();\n          headWriteFont.setFontName(&quot;宋体&quot;);\n          headWriteFont.setFontHeightInPoints((short)14);\n          headWriteFont.setBold(true);\n          if (CollectionUtils.isNotEmpty(columnIndexs) &amp;&amp;\n                  colorIndex != null &amp;&amp;\n                  columnIndexs.contains(cell.getColumnIndex())) &#123;\n              // 设置字体颜色\n              headWriteFont.setColor(colorIndex);\n          &#125;\n          headWriteCellStyle.setWriteFont(headWriteFont);\n          headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n          CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n          cell.setCellStyle(cellStyle);\n      &#125;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>ExcelUtils</p>\n<pre><code class=\"java\">public class ExcelUtils &#123;\n  /** 导出Excel **/\n  public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                 List data, HttpServletResponse response,\n                                 CellWriteHandler... cellWriteHandlers) throws IOException &#123;\n      response.setContentType(&quot;application/vnd.ms-excel&quot;);\n      response.setCharacterEncoding(&quot;utf-8&quot;);\n      fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);\n      response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);\n\n      // 列标题的策略\n      WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n      // 单元格策略\n      WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n      // 初始化表格样式\n      HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n      ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n              .sheet(sheetName)\n              .registerWriteHandler(horizontalCellStyleStrategy);\n\n      if (null != cellWriteHandlers &amp;&amp; cellWriteHandlers.length &gt; 0) &#123;\n          for (int i = 0; i &lt; cellWriteHandlers.length; i++) &#123;\n              excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n          &#125;\n      &#125;\n      // 开始导出\n      excelWriterSheetBuilder.doWrite(data);\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>使用</p>\n<pre><code class=\"java\">/** 导出excel模板**/\npublic void exportTemplate(List&lt;Integer&gt; ids,HttpServletResponse response)&#123;\n  try &#123;\n      List&lt;XXX&gt; result = getByIds(ids);\n\n      // 指定标红色的列\n      List&lt;Integer&gt; columns = Arrays.asList(0,1,2,3);\n\n      TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n      ExcelUtils.exportExcel(&quot;文件名&quot;,&quot;sheet名称&quot;,\n              XXX.class,result,response,titleHandler);\n  &#125; catch (IOException e) &#123;\n      log.warn(&quot;导出失败,error=&#123;&#125;&quot;,e);\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"设置中文文件名\"><a href=\"#设置中文文件名\" class=\"headerlink\" title=\"设置中文文件名\"></a>设置中文文件名</h3><pre><code class=\"java\">// 代码中添加\nresponse.setContentType(&quot;application/vnd.ms-excel;charset=UTF-8&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\nresponse.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</code></pre>\n<h3 id=\"导出失败返回错误信息\"><a href=\"#导出失败返回错误信息\" class=\"headerlink\" title=\"导出失败返回错误信息\"></a>导出失败返回错误信息</h3><pre><code class=\"java\">// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(&quot;application/json&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\ntry &#123;\n    response.getWriter().println(result);\n&#125; catch (IOException ioException) &#123;\n    log.warn(&quot;业务异常  msg=&#123;&#125;&quot;,ioException);\n&#125;</code></pre>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><h4 id=\"导出成功但是后台日志报类型转换异常\"><a href=\"#导出成功但是后台日志报类型转换异常\" class=\"headerlink\" title=\"导出成功但是后台日志报类型转换异常\"></a>导出成功但是后台日志报类型转换异常</h4><pre><code class=\"textmate\">错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可</code></pre>\n<h4 id=\"poi流转对象问题-用easy-poi时遇到的问题\"><a href=\"#poi流转对象问题-用easy-poi时遇到的问题\" class=\"headerlink\" title=\"poi流转对象问题(用easy-poi时遇到的问题)\"></a>poi流转对象问题(用easy-poi时遇到的问题)</h4><pre><code class=\"textmate\">错误日志\n    Your stream was neither an OLE2 stream, nor an OOXML stream.\n原因\n    多次操作流导致文件类型异常\n解决方法\n    读取远程流后，直接用当前流转换成对象\n例:\n    //读取远程文件工具类\n    public static InputStream readUrlExcelFile(String urlPath) &#123;\n        try&#123;\n            URL url = new URL(urlPath);\n            URLConnection conn = url.openConnection();\n            int size = conn.getContentLength();\n            if(size &lt; 0)&#123;\n                return null;\n            &#125;\n            return conn.getInputStream();\n\n        &#125; catch (IOException e)&#123;\n            e.printStackTrace();\n        &#125;\n        return null;\n    &#125;\n\n    //具体业务逻辑 流转对象用的是easy-poi\n    public static XXService&#123;\n        public void saveExcel(String url)&#123;\n            InputStream inputStream;\n            try&#123;\n                inputStream = FileUtils.readUrlExcelFile(request.getFilePath());\n                if(inputStream == null)&#123;\n                    System.out.println(&quot;文件读取失败&quot;);\n                    return;\n                &#125;\n\n                ImportParams importParams = new ImportParams();\n                //标识开始行\n                importParams.setStartRows(0);\n                List&lt;XXX&gt; list = ExcelImportUtil.importExcel(inputStream,\n                        XXX.class,\n                        importParams);\n\n            &#125; catch(Exception e)&#123;\n                e.printStackTrace();\n            &#125; finally&#123;\n                if(inputStream != null)&#123;\n                    inputStream.close();\n                &#125;\n            &#125;\n        &#125;\n    &#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"导出设置标题格式\"><a href=\"#导出设置标题格式\" class=\"headerlink\" title=\"导出设置标题格式\"></a>导出设置标题格式</h3><ul>\n<li><p>TitleHandler</p>\n<pre><code class=\"java\">public class TitleHandler implements CellWriteHandler&#123;\n\n  //操作列\n  private List&lt;Integer&gt; columnIndexs;\n  //颜色\n  private Short colorIndex;\n\n  public TitleHandler(List&lt;Integer&gt; columnIndexs, Short colorIndex) &#123;\n      this.columnIndexs = columnIndexs;\n      this.colorIndex = colorIndex;\n  &#125;\n\n  @Override\n  public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n      if(isHead)&#123;\n          // 设置列宽\n          Sheet sheet = writeSheetHolder.getSheet();\n          sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n          writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n          Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n          // 设置标题字体样式\n          WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n          WriteFont headWriteFont = new WriteFont();\n          headWriteFont.setFontName(&quot;宋体&quot;);\n          headWriteFont.setFontHeightInPoints((short)14);\n          headWriteFont.setBold(true);\n          if (CollectionUtils.isNotEmpty(columnIndexs) &amp;&amp;\n                  colorIndex != null &amp;&amp;\n                  columnIndexs.contains(cell.getColumnIndex())) &#123;\n              // 设置字体颜色\n              headWriteFont.setColor(colorIndex);\n          &#125;\n          headWriteCellStyle.setWriteFont(headWriteFont);\n          headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n          CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n          cell.setCellStyle(cellStyle);\n      &#125;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>ExcelUtils</p>\n<pre><code class=\"java\">public class ExcelUtils &#123;\n  /** 导出Excel **/\n  public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                 List data, HttpServletResponse response,\n                                 CellWriteHandler... cellWriteHandlers) throws IOException &#123;\n      response.setContentType(&quot;application/vnd.ms-excel&quot;);\n      response.setCharacterEncoding(&quot;utf-8&quot;);\n      fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);\n      response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);\n\n      // 列标题的策略\n      WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n      // 单元格策略\n      WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n      // 初始化表格样式\n      HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n      ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n              .sheet(sheetName)\n              .registerWriteHandler(horizontalCellStyleStrategy);\n\n      if (null != cellWriteHandlers &amp;&amp; cellWriteHandlers.length &gt; 0) &#123;\n          for (int i = 0; i &lt; cellWriteHandlers.length; i++) &#123;\n              excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n          &#125;\n      &#125;\n      // 开始导出\n      excelWriterSheetBuilder.doWrite(data);\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>使用</p>\n<pre><code class=\"java\">/** 导出excel模板**/\npublic void exportTemplate(List&lt;Integer&gt; ids,HttpServletResponse response)&#123;\n  try &#123;\n      List&lt;XXX&gt; result = getByIds(ids);\n\n      // 指定标红色的列\n      List&lt;Integer&gt; columns = Arrays.asList(0,1,2,3);\n\n      TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n      ExcelUtils.exportExcel(&quot;文件名&quot;,&quot;sheet名称&quot;,\n              XXX.class,result,response,titleHandler);\n  &#125; catch (IOException e) &#123;\n      log.warn(&quot;导出失败,error=&#123;&#125;&quot;,e);\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"设置中文文件名\"><a href=\"#设置中文文件名\" class=\"headerlink\" title=\"设置中文文件名\"></a>设置中文文件名</h3><pre><code class=\"java\">// 代码中添加\nresponse.setContentType(&quot;application/vnd.ms-excel;charset=UTF-8&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\nresponse.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</code></pre>\n<h3 id=\"导出失败返回错误信息\"><a href=\"#导出失败返回错误信息\" class=\"headerlink\" title=\"导出失败返回错误信息\"></a>导出失败返回错误信息</h3><pre><code class=\"java\">// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(&quot;application/json&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\ntry &#123;\n    response.getWriter().println(result);\n&#125; catch (IOException ioException) &#123;\n    log.warn(&quot;业务异常  msg=&#123;&#125;&quot;,ioException);\n&#125;</code></pre>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><h4 id=\"导出成功但是后台日志报类型转换异常\"><a href=\"#导出成功但是后台日志报类型转换异常\" class=\"headerlink\" title=\"导出成功但是后台日志报类型转换异常\"></a>导出成功但是后台日志报类型转换异常</h4><pre><code class=\"textmate\">错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可</code></pre>\n<h4 id=\"poi流转对象问题-用easy-poi时遇到的问题\"><a href=\"#poi流转对象问题-用easy-poi时遇到的问题\" class=\"headerlink\" title=\"poi流转对象问题(用easy-poi时遇到的问题)\"></a>poi流转对象问题(用easy-poi时遇到的问题)</h4><pre><code class=\"textmate\">错误日志\n    Your stream was neither an OLE2 stream, nor an OOXML stream.\n原因\n    多次操作流导致文件类型异常\n解决方法\n    读取远程流后，直接用当前流转换成对象\n例:\n    //读取远程文件工具类\n    public static InputStream readUrlExcelFile(String urlPath) &#123;\n        try&#123;\n            URL url = new URL(urlPath);\n            URLConnection conn = url.openConnection();\n            int size = conn.getContentLength();\n            if(size &lt; 0)&#123;\n                return null;\n            &#125;\n            return conn.getInputStream();\n\n        &#125; catch (IOException e)&#123;\n            e.printStackTrace();\n        &#125;\n        return null;\n    &#125;\n\n    //具体业务逻辑 流转对象用的是easy-poi\n    public static XXService&#123;\n        public void saveExcel(String url)&#123;\n            InputStream inputStream;\n            try&#123;\n                inputStream = FileUtils.readUrlExcelFile(request.getFilePath());\n                if(inputStream == null)&#123;\n                    System.out.println(&quot;文件读取失败&quot;);\n                    return;\n                &#125;\n\n                ImportParams importParams = new ImportParams();\n                //标识开始行\n                importParams.setStartRows(0);\n                List&lt;XXX&gt; list = ExcelImportUtil.importExcel(inputStream,\n                        XXX.class,\n                        importParams);\n\n            &#125; catch(Exception e)&#123;\n                e.printStackTrace();\n            &#125; finally&#123;\n                if(inputStream != null)&#123;\n                    inputStream.close();\n                &#125;\n            &#125;\n        &#125;\n    &#125;</code></pre>\n"},{"title":"大话数据结构-摘要","description":"大话数据结构-摘要","date":"2022-01-13T08:54:00.000Z","_content":"\n## 大话数据结构-摘要\n> 阅读《大话数据结构》一书，总结下来一些东西；总结的比较粗，部分思想暂时理解不了，先放一放，后面通过学习其他的东西后，再回过头来消化这些知识点\n\n### 1、数据结构\n\n> 数据结构是相互之间存在一种或多种特定关系的数据元素的集合\n\n#### 数据的逻辑结构\n\n1.集合结构\n属于同一集合，元素平等\n2.线性结构\n元素一对一\n3.树状结构\n元素一对多的层次关系\n4.图状结构\n元素多对多\n\n#### 数据的物理结构\n\n1.顺序存储\n元素存放在地址连续的存储单元，数据逻辑关系与物理关系一致\n2.链式结构\n把数据存在任务任意的 存储单元中，地址连不连续都可以；通过指针找到相关联的数据位置\n\n### 2、时间算法复杂度\n\n#### 推导方法\n\n1.用常数1取代时间中的所有加法常数\n2.修改的次函数中，只保留最高阶\n3.如果最高阶存在且不是1，则去除与这个项相乘的常数。\n得到的结果就是大O阶\n\n- 常数阶 O(1)\n\n```textmate\nint sum = 0,n=100; //执行一次\nsum = sum+n; //执行一次\nSystem.out.printf(sum); //执行一次\n\nO(1)\n```\n\n- 线性阶 O(n)\n- 对数阶 Ologn\n- 平方阶 \tO(n²)\n\n### 3、线性表\n\n- 顺序存储结构\n\n```textmate\n存储位置连续，插入慢，查找快(下标查找)\n```\n\n- 链式存储结构\n    - 单链表\n    - 静态链表\n    - 循环链表\n    - 双向循环链表\n\n```textmate\n查找慢，插入删除块；空间换时间\n```\n\n### 4、栈与队列\n\n- 栈\n\n```textmate\n栈是限定仅在队尾进行插入和删除操作的线性表\n作用：递归\n应用：四则运算表达式求值(后缀表达式)\n```\n\n- 队列\n\n```textmate\n队列是只允许在一端进行插入操作，另一端进行删除操作的线性表\n```\n\n### 5、串\n\n> 串是由0个或多个字符组成的有限序列，又叫字符串\n\n- KMP匹配算法\n\n### 6、树\n\n- 深度\n```textmate\n树中节点的最大层次，称为树的深度或高度\n```\n\n- 表示方法\n\n```textmate\n双亲表示法、孩子表示法、孩子兄弟表示法\n```\n\n- 二叉树\n\n```textmate\n1.每个节点最多有两颗子树，二叉树中不存在度大于2的节点\n2.左右字数是有顺序的，不能颠倒\n3.只有一颗子树，也要区分是左子树还是右子树\n\n五种基本形态\n\t1.空二叉树\n\t2.只有一个根节点\n\t3.根节点只有左子树\n\t4.根节点只有右子树\n\t5.根节点既有左子树又有右子树\n```\n\n- 特殊二叉树\n\n```textmate\n1.斜树\n2.满二叉树(左右节点数量完全相等)\n3.完全二叉树(在某一层上，左右节点数量相等)\n```\n\n- 二叉树遍历方法\n\n```textmate\n1.前序\n   \t从根节点开始，先左边后右依次遍历\n2.中序\n\t从最左边节点开始，先遍历根节点，后遍历右边节点\n3.后序\n\t从最左边节点开始，先遍历右边节点，最后遍历根节点\n4.层序遍历\n\t从根节点开始，逐层从左到右遍历\n```\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-first.png\" alt=\"tree-first\" style=\"zoom:30%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-middle.png\" alt=\"tree-middle\" style=\"zoom:33%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-last.png\" alt=\"image-20220113103906997\" style=\"zoom:31%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-level.png\" alt=\"image-20220113103925951\" style=\"zoom:33%;\" />\n\n- 树的应用\n\n  ```textmate\n  赫夫曼树\n  \t带权路径长度WPL最小的二叉树称为赫夫曼树\n  赫夫曼编码-压缩\n  ```\n\n### 7、图-Graph\n\n> 图是由顶点的有穷非空集合的顶点之间边的集合组成，通常表示为： G(V,E), 其中G是一个图，V是图G中顶点的结婚，E是图G中边的集合\n\n#### 图中的一些定义\n\n- 图中数据元素称为顶点(Vertex)\n\n- 图结构中，不允许没有顶点\n\n- 图中任意两个顶点之间都有可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的\n\n- 边的定义\n\n  ```textmate\n  无向边\n  有向边\n  ```\n\n### 8、查找\n\n#### 顺序表查找\n\n#### 有序表查找\n\n- 折半查找\n- 插值查找\n- 斐波那契查找\n\n#### 线性索引查找\n\n- 稠密索引\n\n  ```textmate\n  稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项；例：记事本\n  ```\n\n- 分块索引\n\n  ```textmate\n  块内无序，块间有序； 参考图书馆、档案馆存放书籍方式\n  ```\n\n- 倒排索引\n\n  ```textmate\n  索引项通用结构：\n  次关键码\n  记录号表\n  ```\n\n#### 二叉排序树\n\n#### 平衡二叉树(AVL树)\n\n```textmate\n构建思想: 每当插入一个节点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树各节点之间的链接关系，进行相应旋转，使之成为新的平衡子树\n```\n\n#### 多路查找树(B树)\n\n#### 哈希表查找\n\n```textmate\n散列技术最适合的求解问题是查找与给定值相等的记录；但是无法查找最大值、最小值等结果\n散列函数的构造方法：\n\t1.直接定址法\n\t2.数字分析法\n\t3.平方取中法\n\t4.折叠法\n\t5.除留余数法\n\t6.随机数法\n处理散列冲突的方法：\n\t1.开放定址法\n\t\t解决冲突的开放定址法称为线性探测法\n\t\t本来不是同义词却需要争夺同一个地址的情况，称为堆积\n\t\t为了不让关键字都堆积在一个区域。采用二次探测法/随机探测法 重新计算地址\n\t2.再散列函数法\n\t3.链地址法\n\t4.公共溢出区法\n```\n\n### 9、排序\n\n#### 排序分类\n\n```textmate\n根据在排序过程中待排序的记录是否全部被放置在内存中，排序分为:内排序和外排序\n内排序: 内排序是在排序的整个过程中，待排序的所有记录全部都被放置在内存中。\n外排序: 由于排序的记录个数太多，不能同时放置在内存，整个排序过程总需要在内外存之间多次交换数据才能进行\n内排序性能影响点：\n\t1.时间性能\n\t2.辅助空间\n\t3.算法的复杂性\n内排序分为: 插入排序、交换排序、选择排序和归并排序\n```\n\n#### 排序类型\n\n- [菜鸟教程-数据结构](https://www.runoob.com/data-structures/heap-storage.html)\n\n```textmate\n冒泡排序、简单选择排序、直接插入排序、希尔排序、堆排序、归并排序、快速排序\n```\n\n- 快速排序！！！\n    - 随机快排\n    - 双路快排\n    - 三路快排\n\n#### 排序方法效率比较\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/sort-rank.png\" alt=\"sort-rank\" style=\"zoom:50%;\" />\n\n### 结尾语\n\n- 没有什么是不可能的，不要被条条框框限制住自己的思维\n- 如果你有梦想的话，就要去捍卫它。当别人做不到，他们就想要告诉你，你也不能。如果你想要些什么。就努力去争取。\n","source":"_posts/backend/java/algorithm/book1.md","raw":"---\ntitle: 大话数据结构-摘要\ndescription: 大话数据结构-摘要\ndate: 2022-01-13 16:54:00\ntags:\n- 数据结构与算法\ncategories:\n- 后端\n- 数据结构与算法\n---\n\n## 大话数据结构-摘要\n> 阅读《大话数据结构》一书，总结下来一些东西；总结的比较粗，部分思想暂时理解不了，先放一放，后面通过学习其他的东西后，再回过头来消化这些知识点\n\n### 1、数据结构\n\n> 数据结构是相互之间存在一种或多种特定关系的数据元素的集合\n\n#### 数据的逻辑结构\n\n1.集合结构\n属于同一集合，元素平等\n2.线性结构\n元素一对一\n3.树状结构\n元素一对多的层次关系\n4.图状结构\n元素多对多\n\n#### 数据的物理结构\n\n1.顺序存储\n元素存放在地址连续的存储单元，数据逻辑关系与物理关系一致\n2.链式结构\n把数据存在任务任意的 存储单元中，地址连不连续都可以；通过指针找到相关联的数据位置\n\n### 2、时间算法复杂度\n\n#### 推导方法\n\n1.用常数1取代时间中的所有加法常数\n2.修改的次函数中，只保留最高阶\n3.如果最高阶存在且不是1，则去除与这个项相乘的常数。\n得到的结果就是大O阶\n\n- 常数阶 O(1)\n\n```textmate\nint sum = 0,n=100; //执行一次\nsum = sum+n; //执行一次\nSystem.out.printf(sum); //执行一次\n\nO(1)\n```\n\n- 线性阶 O(n)\n- 对数阶 Ologn\n- 平方阶 \tO(n²)\n\n### 3、线性表\n\n- 顺序存储结构\n\n```textmate\n存储位置连续，插入慢，查找快(下标查找)\n```\n\n- 链式存储结构\n    - 单链表\n    - 静态链表\n    - 循环链表\n    - 双向循环链表\n\n```textmate\n查找慢，插入删除块；空间换时间\n```\n\n### 4、栈与队列\n\n- 栈\n\n```textmate\n栈是限定仅在队尾进行插入和删除操作的线性表\n作用：递归\n应用：四则运算表达式求值(后缀表达式)\n```\n\n- 队列\n\n```textmate\n队列是只允许在一端进行插入操作，另一端进行删除操作的线性表\n```\n\n### 5、串\n\n> 串是由0个或多个字符组成的有限序列，又叫字符串\n\n- KMP匹配算法\n\n### 6、树\n\n- 深度\n```textmate\n树中节点的最大层次，称为树的深度或高度\n```\n\n- 表示方法\n\n```textmate\n双亲表示法、孩子表示法、孩子兄弟表示法\n```\n\n- 二叉树\n\n```textmate\n1.每个节点最多有两颗子树，二叉树中不存在度大于2的节点\n2.左右字数是有顺序的，不能颠倒\n3.只有一颗子树，也要区分是左子树还是右子树\n\n五种基本形态\n\t1.空二叉树\n\t2.只有一个根节点\n\t3.根节点只有左子树\n\t4.根节点只有右子树\n\t5.根节点既有左子树又有右子树\n```\n\n- 特殊二叉树\n\n```textmate\n1.斜树\n2.满二叉树(左右节点数量完全相等)\n3.完全二叉树(在某一层上，左右节点数量相等)\n```\n\n- 二叉树遍历方法\n\n```textmate\n1.前序\n   \t从根节点开始，先左边后右依次遍历\n2.中序\n\t从最左边节点开始，先遍历根节点，后遍历右边节点\n3.后序\n\t从最左边节点开始，先遍历右边节点，最后遍历根节点\n4.层序遍历\n\t从根节点开始，逐层从左到右遍历\n```\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-first.png\" alt=\"tree-first\" style=\"zoom:30%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-middle.png\" alt=\"tree-middle\" style=\"zoom:33%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-last.png\" alt=\"image-20220113103906997\" style=\"zoom:31%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-level.png\" alt=\"image-20220113103925951\" style=\"zoom:33%;\" />\n\n- 树的应用\n\n  ```textmate\n  赫夫曼树\n  \t带权路径长度WPL最小的二叉树称为赫夫曼树\n  赫夫曼编码-压缩\n  ```\n\n### 7、图-Graph\n\n> 图是由顶点的有穷非空集合的顶点之间边的集合组成，通常表示为： G(V,E), 其中G是一个图，V是图G中顶点的结婚，E是图G中边的集合\n\n#### 图中的一些定义\n\n- 图中数据元素称为顶点(Vertex)\n\n- 图结构中，不允许没有顶点\n\n- 图中任意两个顶点之间都有可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的\n\n- 边的定义\n\n  ```textmate\n  无向边\n  有向边\n  ```\n\n### 8、查找\n\n#### 顺序表查找\n\n#### 有序表查找\n\n- 折半查找\n- 插值查找\n- 斐波那契查找\n\n#### 线性索引查找\n\n- 稠密索引\n\n  ```textmate\n  稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项；例：记事本\n  ```\n\n- 分块索引\n\n  ```textmate\n  块内无序，块间有序； 参考图书馆、档案馆存放书籍方式\n  ```\n\n- 倒排索引\n\n  ```textmate\n  索引项通用结构：\n  次关键码\n  记录号表\n  ```\n\n#### 二叉排序树\n\n#### 平衡二叉树(AVL树)\n\n```textmate\n构建思想: 每当插入一个节点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树各节点之间的链接关系，进行相应旋转，使之成为新的平衡子树\n```\n\n#### 多路查找树(B树)\n\n#### 哈希表查找\n\n```textmate\n散列技术最适合的求解问题是查找与给定值相等的记录；但是无法查找最大值、最小值等结果\n散列函数的构造方法：\n\t1.直接定址法\n\t2.数字分析法\n\t3.平方取中法\n\t4.折叠法\n\t5.除留余数法\n\t6.随机数法\n处理散列冲突的方法：\n\t1.开放定址法\n\t\t解决冲突的开放定址法称为线性探测法\n\t\t本来不是同义词却需要争夺同一个地址的情况，称为堆积\n\t\t为了不让关键字都堆积在一个区域。采用二次探测法/随机探测法 重新计算地址\n\t2.再散列函数法\n\t3.链地址法\n\t4.公共溢出区法\n```\n\n### 9、排序\n\n#### 排序分类\n\n```textmate\n根据在排序过程中待排序的记录是否全部被放置在内存中，排序分为:内排序和外排序\n内排序: 内排序是在排序的整个过程中，待排序的所有记录全部都被放置在内存中。\n外排序: 由于排序的记录个数太多，不能同时放置在内存，整个排序过程总需要在内外存之间多次交换数据才能进行\n内排序性能影响点：\n\t1.时间性能\n\t2.辅助空间\n\t3.算法的复杂性\n内排序分为: 插入排序、交换排序、选择排序和归并排序\n```\n\n#### 排序类型\n\n- [菜鸟教程-数据结构](https://www.runoob.com/data-structures/heap-storage.html)\n\n```textmate\n冒泡排序、简单选择排序、直接插入排序、希尔排序、堆排序、归并排序、快速排序\n```\n\n- 快速排序！！！\n    - 随机快排\n    - 双路快排\n    - 三路快排\n\n#### 排序方法效率比较\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/sort-rank.png\" alt=\"sort-rank\" style=\"zoom:50%;\" />\n\n### 结尾语\n\n- 没有什么是不可能的，不要被条条框框限制住自己的思维\n- 如果你有梦想的话，就要去捍卫它。当别人做不到，他们就想要告诉你，你也不能。如果你想要些什么。就努力去争取。\n","slug":"backend/java/algorithm/book1","published":1,"updated":"2022-01-13T08:55:02.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry20036jrnvdarfd48g","content":"<h2 id=\"大话数据结构-摘要\"><a href=\"#大话数据结构-摘要\" class=\"headerlink\" title=\"大话数据结构-摘要\"></a>大话数据结构-摘要</h2><blockquote>\n<p>阅读《大话数据结构》一书，总结下来一些东西；总结的比较粗，部分思想暂时理解不了，先放一放，后面通过学习其他的东西后，再回过头来消化这些知识点</p>\n</blockquote>\n<h3 id=\"1、数据结构\"><a href=\"#1、数据结构\" class=\"headerlink\" title=\"1、数据结构\"></a>1、数据结构</h3><blockquote>\n<p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合</p>\n</blockquote>\n<h4 id=\"数据的逻辑结构\"><a href=\"#数据的逻辑结构\" class=\"headerlink\" title=\"数据的逻辑结构\"></a>数据的逻辑结构</h4><p>1.集合结构<br>属于同一集合，元素平等<br>2.线性结构<br>元素一对一<br>3.树状结构<br>元素一对多的层次关系<br>4.图状结构<br>元素多对多</p>\n<h4 id=\"数据的物理结构\"><a href=\"#数据的物理结构\" class=\"headerlink\" title=\"数据的物理结构\"></a>数据的物理结构</h4><p>1.顺序存储<br>元素存放在地址连续的存储单元，数据逻辑关系与物理关系一致<br>2.链式结构<br>把数据存在任务任意的 存储单元中，地址连不连续都可以；通过指针找到相关联的数据位置</p>\n<h3 id=\"2、时间算法复杂度\"><a href=\"#2、时间算法复杂度\" class=\"headerlink\" title=\"2、时间算法复杂度\"></a>2、时间算法复杂度</h3><h4 id=\"推导方法\"><a href=\"#推导方法\" class=\"headerlink\" title=\"推导方法\"></a>推导方法</h4><p>1.用常数1取代时间中的所有加法常数<br>2.修改的次函数中，只保留最高阶<br>3.如果最高阶存在且不是1，则去除与这个项相乘的常数。<br>得到的结果就是大O阶</p>\n<ul>\n<li>常数阶 O(1)</li>\n</ul>\n<pre><code class=\"textmate\">int sum = 0,n=100; //执行一次\nsum = sum+n; //执行一次\nSystem.out.printf(sum); //执行一次\n\nO(1)</code></pre>\n<ul>\n<li>线性阶 O(n)</li>\n<li>对数阶 Ologn</li>\n<li>平方阶     O(n²)</li>\n</ul>\n<h3 id=\"3、线性表\"><a href=\"#3、线性表\" class=\"headerlink\" title=\"3、线性表\"></a>3、线性表</h3><ul>\n<li>顺序存储结构</li>\n</ul>\n<pre><code class=\"textmate\">存储位置连续，插入慢，查找快(下标查找)</code></pre>\n<ul>\n<li>链式存储结构<ul>\n<li>单链表</li>\n<li>静态链表</li>\n<li>循环链表</li>\n<li>双向循环链表</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"textmate\">查找慢，插入删除块；空间换时间</code></pre>\n<h3 id=\"4、栈与队列\"><a href=\"#4、栈与队列\" class=\"headerlink\" title=\"4、栈与队列\"></a>4、栈与队列</h3><ul>\n<li>栈</li>\n</ul>\n<pre><code class=\"textmate\">栈是限定仅在队尾进行插入和删除操作的线性表\n作用：递归\n应用：四则运算表达式求值(后缀表达式)</code></pre>\n<ul>\n<li>队列</li>\n</ul>\n<pre><code class=\"textmate\">队列是只允许在一端进行插入操作，另一端进行删除操作的线性表</code></pre>\n<h3 id=\"5、串\"><a href=\"#5、串\" class=\"headerlink\" title=\"5、串\"></a>5、串</h3><blockquote>\n<p>串是由0个或多个字符组成的有限序列，又叫字符串</p>\n</blockquote>\n<ul>\n<li>KMP匹配算法</li>\n</ul>\n<h3 id=\"6、树\"><a href=\"#6、树\" class=\"headerlink\" title=\"6、树\"></a>6、树</h3><ul>\n<li><p>深度</p>\n<pre><code class=\"textmate\">树中节点的最大层次，称为树的深度或高度</code></pre>\n</li>\n<li><p>表示方法</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">双亲表示法、孩子表示法、孩子兄弟表示法</code></pre>\n<ul>\n<li>二叉树</li>\n</ul>\n<pre><code class=\"textmate\">1.每个节点最多有两颗子树，二叉树中不存在度大于2的节点\n2.左右字数是有顺序的，不能颠倒\n3.只有一颗子树，也要区分是左子树还是右子树\n\n五种基本形态\n    1.空二叉树\n    2.只有一个根节点\n    3.根节点只有左子树\n    4.根节点只有右子树\n    5.根节点既有左子树又有右子树</code></pre>\n<ul>\n<li>特殊二叉树</li>\n</ul>\n<pre><code class=\"textmate\">1.斜树\n2.满二叉树(左右节点数量完全相等)\n3.完全二叉树(在某一层上，左右节点数量相等)</code></pre>\n<ul>\n<li>二叉树遍历方法</li>\n</ul>\n<pre><code class=\"textmate\">1.前序\n       从根节点开始，先左边后右依次遍历\n2.中序\n    从最左边节点开始，先遍历根节点，后遍历右边节点\n3.后序\n    从最左边节点开始，先遍历右边节点，最后遍历根节点\n4.层序遍历\n    从根节点开始，逐层从左到右遍历</code></pre>\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-first.png\" alt=\"tree-first\" style=\"zoom:30%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-middle.png\" alt=\"tree-middle\" style=\"zoom:33%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-last.png\" alt=\"image-20220113103906997\" style=\"zoom:31%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-level.png\" alt=\"image-20220113103925951\" style=\"zoom:33%;\" />\n\n<ul>\n<li><p>树的应用</p>\n<pre><code class=\"textmate\">赫夫曼树\n    带权路径长度WPL最小的二叉树称为赫夫曼树\n赫夫曼编码-压缩</code></pre>\n</li>\n</ul>\n<h3 id=\"7、图-Graph\"><a href=\"#7、图-Graph\" class=\"headerlink\" title=\"7、图-Graph\"></a>7、图-Graph</h3><blockquote>\n<p>图是由顶点的有穷非空集合的顶点之间边的集合组成，通常表示为： G(V,E), 其中G是一个图，V是图G中顶点的结婚，E是图G中边的集合</p>\n</blockquote>\n<h4 id=\"图中的一些定义\"><a href=\"#图中的一些定义\" class=\"headerlink\" title=\"图中的一些定义\"></a>图中的一些定义</h4><ul>\n<li><p>图中数据元素称为顶点(Vertex)</p>\n</li>\n<li><p>图结构中，不允许没有顶点</p>\n</li>\n<li><p>图中任意两个顶点之间都有可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的</p>\n</li>\n<li><p>边的定义</p>\n<pre><code class=\"textmate\">无向边\n有向边</code></pre>\n</li>\n</ul>\n<h3 id=\"8、查找\"><a href=\"#8、查找\" class=\"headerlink\" title=\"8、查找\"></a>8、查找</h3><h4 id=\"顺序表查找\"><a href=\"#顺序表查找\" class=\"headerlink\" title=\"顺序表查找\"></a>顺序表查找</h4><h4 id=\"有序表查找\"><a href=\"#有序表查找\" class=\"headerlink\" title=\"有序表查找\"></a>有序表查找</h4><ul>\n<li>折半查找</li>\n<li>插值查找</li>\n<li>斐波那契查找</li>\n</ul>\n<h4 id=\"线性索引查找\"><a href=\"#线性索引查找\" class=\"headerlink\" title=\"线性索引查找\"></a>线性索引查找</h4><ul>\n<li><p>稠密索引</p>\n<pre><code class=\"textmate\">稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项；例：记事本</code></pre>\n</li>\n<li><p>分块索引</p>\n<pre><code class=\"textmate\">块内无序，块间有序； 参考图书馆、档案馆存放书籍方式</code></pre>\n</li>\n<li><p>倒排索引</p>\n<pre><code class=\"textmate\">索引项通用结构：\n次关键码\n记录号表</code></pre>\n</li>\n</ul>\n<h4 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h4><h4 id=\"平衡二叉树-AVL树\"><a href=\"#平衡二叉树-AVL树\" class=\"headerlink\" title=\"平衡二叉树(AVL树)\"></a>平衡二叉树(AVL树)</h4><pre><code class=\"textmate\">构建思想: 每当插入一个节点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树各节点之间的链接关系，进行相应旋转，使之成为新的平衡子树</code></pre>\n<h4 id=\"多路查找树-B树\"><a href=\"#多路查找树-B树\" class=\"headerlink\" title=\"多路查找树(B树)\"></a>多路查找树(B树)</h4><h4 id=\"哈希表查找\"><a href=\"#哈希表查找\" class=\"headerlink\" title=\"哈希表查找\"></a>哈希表查找</h4><pre><code class=\"textmate\">散列技术最适合的求解问题是查找与给定值相等的记录；但是无法查找最大值、最小值等结果\n散列函数的构造方法：\n    1.直接定址法\n    2.数字分析法\n    3.平方取中法\n    4.折叠法\n    5.除留余数法\n    6.随机数法\n处理散列冲突的方法：\n    1.开放定址法\n        解决冲突的开放定址法称为线性探测法\n        本来不是同义词却需要争夺同一个地址的情况，称为堆积\n        为了不让关键字都堆积在一个区域。采用二次探测法/随机探测法 重新计算地址\n    2.再散列函数法\n    3.链地址法\n    4.公共溢出区法</code></pre>\n<h3 id=\"9、排序\"><a href=\"#9、排序\" class=\"headerlink\" title=\"9、排序\"></a>9、排序</h3><h4 id=\"排序分类\"><a href=\"#排序分类\" class=\"headerlink\" title=\"排序分类\"></a>排序分类</h4><pre><code class=\"textmate\">根据在排序过程中待排序的记录是否全部被放置在内存中，排序分为:内排序和外排序\n内排序: 内排序是在排序的整个过程中，待排序的所有记录全部都被放置在内存中。\n外排序: 由于排序的记录个数太多，不能同时放置在内存，整个排序过程总需要在内外存之间多次交换数据才能进行\n内排序性能影响点：\n    1.时间性能\n    2.辅助空间\n    3.算法的复杂性\n内排序分为: 插入排序、交换排序、选择排序和归并排序</code></pre>\n<h4 id=\"排序类型\"><a href=\"#排序类型\" class=\"headerlink\" title=\"排序类型\"></a>排序类型</h4><ul>\n<li><a href=\"https://www.runoob.com/data-structures/heap-storage.html\">菜鸟教程-数据结构</a></li>\n</ul>\n<pre><code class=\"textmate\">冒泡排序、简单选择排序、直接插入排序、希尔排序、堆排序、归并排序、快速排序</code></pre>\n<ul>\n<li>快速排序！！！<ul>\n<li>随机快排</li>\n<li>双路快排</li>\n<li>三路快排</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"排序方法效率比较\"><a href=\"#排序方法效率比较\" class=\"headerlink\" title=\"排序方法效率比较\"></a>排序方法效率比较</h4><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/sort-rank.png\" alt=\"sort-rank\" style=\"zoom:50%;\" />\n\n<h3 id=\"结尾语\"><a href=\"#结尾语\" class=\"headerlink\" title=\"结尾语\"></a>结尾语</h3><ul>\n<li>没有什么是不可能的，不要被条条框框限制住自己的思维</li>\n<li>如果你有梦想的话，就要去捍卫它。当别人做不到，他们就想要告诉你，你也不能。如果你想要些什么。就努力去争取。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"大话数据结构-摘要\"><a href=\"#大话数据结构-摘要\" class=\"headerlink\" title=\"大话数据结构-摘要\"></a>大话数据结构-摘要</h2><blockquote>\n<p>阅读《大话数据结构》一书，总结下来一些东西；总结的比较粗，部分思想暂时理解不了，先放一放，后面通过学习其他的东西后，再回过头来消化这些知识点</p>\n</blockquote>\n<h3 id=\"1、数据结构\"><a href=\"#1、数据结构\" class=\"headerlink\" title=\"1、数据结构\"></a>1、数据结构</h3><blockquote>\n<p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合</p>\n</blockquote>\n<h4 id=\"数据的逻辑结构\"><a href=\"#数据的逻辑结构\" class=\"headerlink\" title=\"数据的逻辑结构\"></a>数据的逻辑结构</h4><p>1.集合结构<br>属于同一集合，元素平等<br>2.线性结构<br>元素一对一<br>3.树状结构<br>元素一对多的层次关系<br>4.图状结构<br>元素多对多</p>\n<h4 id=\"数据的物理结构\"><a href=\"#数据的物理结构\" class=\"headerlink\" title=\"数据的物理结构\"></a>数据的物理结构</h4><p>1.顺序存储<br>元素存放在地址连续的存储单元，数据逻辑关系与物理关系一致<br>2.链式结构<br>把数据存在任务任意的 存储单元中，地址连不连续都可以；通过指针找到相关联的数据位置</p>\n<h3 id=\"2、时间算法复杂度\"><a href=\"#2、时间算法复杂度\" class=\"headerlink\" title=\"2、时间算法复杂度\"></a>2、时间算法复杂度</h3><h4 id=\"推导方法\"><a href=\"#推导方法\" class=\"headerlink\" title=\"推导方法\"></a>推导方法</h4><p>1.用常数1取代时间中的所有加法常数<br>2.修改的次函数中，只保留最高阶<br>3.如果最高阶存在且不是1，则去除与这个项相乘的常数。<br>得到的结果就是大O阶</p>\n<ul>\n<li>常数阶 O(1)</li>\n</ul>\n<pre><code class=\"textmate\">int sum = 0,n=100; //执行一次\nsum = sum+n; //执行一次\nSystem.out.printf(sum); //执行一次\n\nO(1)</code></pre>\n<ul>\n<li>线性阶 O(n)</li>\n<li>对数阶 Ologn</li>\n<li>平方阶     O(n²)</li>\n</ul>\n<h3 id=\"3、线性表\"><a href=\"#3、线性表\" class=\"headerlink\" title=\"3、线性表\"></a>3、线性表</h3><ul>\n<li>顺序存储结构</li>\n</ul>\n<pre><code class=\"textmate\">存储位置连续，插入慢，查找快(下标查找)</code></pre>\n<ul>\n<li>链式存储结构<ul>\n<li>单链表</li>\n<li>静态链表</li>\n<li>循环链表</li>\n<li>双向循环链表</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"textmate\">查找慢，插入删除块；空间换时间</code></pre>\n<h3 id=\"4、栈与队列\"><a href=\"#4、栈与队列\" class=\"headerlink\" title=\"4、栈与队列\"></a>4、栈与队列</h3><ul>\n<li>栈</li>\n</ul>\n<pre><code class=\"textmate\">栈是限定仅在队尾进行插入和删除操作的线性表\n作用：递归\n应用：四则运算表达式求值(后缀表达式)</code></pre>\n<ul>\n<li>队列</li>\n</ul>\n<pre><code class=\"textmate\">队列是只允许在一端进行插入操作，另一端进行删除操作的线性表</code></pre>\n<h3 id=\"5、串\"><a href=\"#5、串\" class=\"headerlink\" title=\"5、串\"></a>5、串</h3><blockquote>\n<p>串是由0个或多个字符组成的有限序列，又叫字符串</p>\n</blockquote>\n<ul>\n<li>KMP匹配算法</li>\n</ul>\n<h3 id=\"6、树\"><a href=\"#6、树\" class=\"headerlink\" title=\"6、树\"></a>6、树</h3><ul>\n<li><p>深度</p>\n<pre><code class=\"textmate\">树中节点的最大层次，称为树的深度或高度</code></pre>\n</li>\n<li><p>表示方法</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">双亲表示法、孩子表示法、孩子兄弟表示法</code></pre>\n<ul>\n<li>二叉树</li>\n</ul>\n<pre><code class=\"textmate\">1.每个节点最多有两颗子树，二叉树中不存在度大于2的节点\n2.左右字数是有顺序的，不能颠倒\n3.只有一颗子树，也要区分是左子树还是右子树\n\n五种基本形态\n    1.空二叉树\n    2.只有一个根节点\n    3.根节点只有左子树\n    4.根节点只有右子树\n    5.根节点既有左子树又有右子树</code></pre>\n<ul>\n<li>特殊二叉树</li>\n</ul>\n<pre><code class=\"textmate\">1.斜树\n2.满二叉树(左右节点数量完全相等)\n3.完全二叉树(在某一层上，左右节点数量相等)</code></pre>\n<ul>\n<li>二叉树遍历方法</li>\n</ul>\n<pre><code class=\"textmate\">1.前序\n       从根节点开始，先左边后右依次遍历\n2.中序\n    从最左边节点开始，先遍历根节点，后遍历右边节点\n3.后序\n    从最左边节点开始，先遍历右边节点，最后遍历根节点\n4.层序遍历\n    从根节点开始，逐层从左到右遍历</code></pre>\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-first.png\" alt=\"tree-first\" style=\"zoom:30%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-middle.png\" alt=\"tree-middle\" style=\"zoom:33%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-last.png\" alt=\"image-20220113103906997\" style=\"zoom:31%;\" />\n\n<img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/tree-level.png\" alt=\"image-20220113103925951\" style=\"zoom:33%;\" />\n\n<ul>\n<li><p>树的应用</p>\n<pre><code class=\"textmate\">赫夫曼树\n    带权路径长度WPL最小的二叉树称为赫夫曼树\n赫夫曼编码-压缩</code></pre>\n</li>\n</ul>\n<h3 id=\"7、图-Graph\"><a href=\"#7、图-Graph\" class=\"headerlink\" title=\"7、图-Graph\"></a>7、图-Graph</h3><blockquote>\n<p>图是由顶点的有穷非空集合的顶点之间边的集合组成，通常表示为： G(V,E), 其中G是一个图，V是图G中顶点的结婚，E是图G中边的集合</p>\n</blockquote>\n<h4 id=\"图中的一些定义\"><a href=\"#图中的一些定义\" class=\"headerlink\" title=\"图中的一些定义\"></a>图中的一些定义</h4><ul>\n<li><p>图中数据元素称为顶点(Vertex)</p>\n</li>\n<li><p>图结构中，不允许没有顶点</p>\n</li>\n<li><p>图中任意两个顶点之间都有可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的</p>\n</li>\n<li><p>边的定义</p>\n<pre><code class=\"textmate\">无向边\n有向边</code></pre>\n</li>\n</ul>\n<h3 id=\"8、查找\"><a href=\"#8、查找\" class=\"headerlink\" title=\"8、查找\"></a>8、查找</h3><h4 id=\"顺序表查找\"><a href=\"#顺序表查找\" class=\"headerlink\" title=\"顺序表查找\"></a>顺序表查找</h4><h4 id=\"有序表查找\"><a href=\"#有序表查找\" class=\"headerlink\" title=\"有序表查找\"></a>有序表查找</h4><ul>\n<li>折半查找</li>\n<li>插值查找</li>\n<li>斐波那契查找</li>\n</ul>\n<h4 id=\"线性索引查找\"><a href=\"#线性索引查找\" class=\"headerlink\" title=\"线性索引查找\"></a>线性索引查找</h4><ul>\n<li><p>稠密索引</p>\n<pre><code class=\"textmate\">稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项；例：记事本</code></pre>\n</li>\n<li><p>分块索引</p>\n<pre><code class=\"textmate\">块内无序，块间有序； 参考图书馆、档案馆存放书籍方式</code></pre>\n</li>\n<li><p>倒排索引</p>\n<pre><code class=\"textmate\">索引项通用结构：\n次关键码\n记录号表</code></pre>\n</li>\n</ul>\n<h4 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h4><h4 id=\"平衡二叉树-AVL树\"><a href=\"#平衡二叉树-AVL树\" class=\"headerlink\" title=\"平衡二叉树(AVL树)\"></a>平衡二叉树(AVL树)</h4><pre><code class=\"textmate\">构建思想: 每当插入一个节点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树各节点之间的链接关系，进行相应旋转，使之成为新的平衡子树</code></pre>\n<h4 id=\"多路查找树-B树\"><a href=\"#多路查找树-B树\" class=\"headerlink\" title=\"多路查找树(B树)\"></a>多路查找树(B树)</h4><h4 id=\"哈希表查找\"><a href=\"#哈希表查找\" class=\"headerlink\" title=\"哈希表查找\"></a>哈希表查找</h4><pre><code class=\"textmate\">散列技术最适合的求解问题是查找与给定值相等的记录；但是无法查找最大值、最小值等结果\n散列函数的构造方法：\n    1.直接定址法\n    2.数字分析法\n    3.平方取中法\n    4.折叠法\n    5.除留余数法\n    6.随机数法\n处理散列冲突的方法：\n    1.开放定址法\n        解决冲突的开放定址法称为线性探测法\n        本来不是同义词却需要争夺同一个地址的情况，称为堆积\n        为了不让关键字都堆积在一个区域。采用二次探测法/随机探测法 重新计算地址\n    2.再散列函数法\n    3.链地址法\n    4.公共溢出区法</code></pre>\n<h3 id=\"9、排序\"><a href=\"#9、排序\" class=\"headerlink\" title=\"9、排序\"></a>9、排序</h3><h4 id=\"排序分类\"><a href=\"#排序分类\" class=\"headerlink\" title=\"排序分类\"></a>排序分类</h4><pre><code class=\"textmate\">根据在排序过程中待排序的记录是否全部被放置在内存中，排序分为:内排序和外排序\n内排序: 内排序是在排序的整个过程中，待排序的所有记录全部都被放置在内存中。\n外排序: 由于排序的记录个数太多，不能同时放置在内存，整个排序过程总需要在内外存之间多次交换数据才能进行\n内排序性能影响点：\n    1.时间性能\n    2.辅助空间\n    3.算法的复杂性\n内排序分为: 插入排序、交换排序、选择排序和归并排序</code></pre>\n<h4 id=\"排序类型\"><a href=\"#排序类型\" class=\"headerlink\" title=\"排序类型\"></a>排序类型</h4><ul>\n<li><a href=\"https://www.runoob.com/data-structures/heap-storage.html\">菜鸟教程-数据结构</a></li>\n</ul>\n<pre><code class=\"textmate\">冒泡排序、简单选择排序、直接插入排序、希尔排序、堆排序、归并排序、快速排序</code></pre>\n<ul>\n<li>快速排序！！！<ul>\n<li>随机快排</li>\n<li>双路快排</li>\n<li>三路快排</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"排序方法效率比较\"><a href=\"#排序方法效率比较\" class=\"headerlink\" title=\"排序方法效率比较\"></a>排序方法效率比较</h4><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/sort-rank.png\" alt=\"sort-rank\" style=\"zoom:50%;\" />\n\n<h3 id=\"结尾语\"><a href=\"#结尾语\" class=\"headerlink\" title=\"结尾语\"></a>结尾语</h3><ul>\n<li>没有什么是不可能的，不要被条条框框限制住自己的思维</li>\n<li>如果你有梦想的话，就要去捍卫它。当别人做不到，他们就想要告诉你，你也不能。如果你想要些什么。就努力去争取。</li>\n</ul>\n"},{"title":"Java解析Swagger文档接口及参数","description":"解析swagger-ui","date":"2020-11-11T11:30:00.000Z","_content":"\n### 相关依赖包\n```xml\n<dependencies>\n    <!--swagger依赖-->\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger2</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <dependency>\n        <groupId>com.github.xiaoymin</groupId>\n        <artifactId>swagger-bootstrap-ui</artifactId>\n        <version>1.9.6</version>\n    </dependency>\n    \n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>fastjson</artifactId>\n        <version>1.2.73</version>\n    </dependency>\n</dependencies>\n```\n\n### Swagger文档相关接口\n```textmate\n1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本\n```\n\n### 主要代码\n```java\n    class Test{\n    /**\n     * 加载swagger文档中的接口信息\n     * @Date 2020/11/6 11:31\n     * @Author fan\n    **/\n    public boolean loadSwaggerAPI(Integer lesseeId,String url){\n        try {\n            log.info(\"开始加载Swagger文档,url={}\",url);\n            String result = OkhttpClientUtil.get(url);\n            JSONObject jsonObject = JSON.parseObject(result);\n            if(jsonObject == null){\n                return false;\n            }\n            //移除对象描述信息\n            String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(\"info\"))).get(\"title\");\n            JSONObject paths = (JSONObject) jsonObject.get(\"paths\");\n            JSONObject definitions = (JSONObject) jsonObject.get(\"definitions\");\n            Map<String,JSONObject> paramMap = JSONObject.toJavaObject(definitions,Map.class);\n    \n            List<PublicResourceInfo> resourceInfos = new ArrayList<>();\n            for(Map.Entry<String,Object> entry :  paths.entrySet()){\n                String apiUrl = entry.getKey();\n                String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n                JSONObject methodInfo = (JSONObject) entry.getValue();\n    \n                for(Map.Entry<String,Object> methodEntry : methodInfo.entrySet()){\n                    String requestType = methodEntry.getKey().toUpperCase();\n    \n                    JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                    String apiName = String.valueOf(requestTypeInfo.get(\"summary\"));\n                    String moduleName = StringUtils.join((List<String>)requestTypeInfo.get(\"tags\"),\",\");\n    \n                    PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                    resourceInfo.setPlatformNameCn(platform);\n                    resourceInfo.setApiPath(apiUrl);\n                    resourceInfo.setPerms(perms);\n                    resourceInfo.setApiName(apiName);\n                    resourceInfo.setRequestType(requestType);\n                    resourceInfo.setModuleNameCn(moduleName);\n    \n                    //解析swagger-ui中的出参入参\n                    JSONArray parameterJson = (JSONArray) requestTypeInfo.get(\"parameters\");\n                    Object requestParam = null;\n                    Map<String,Object> requestParamMap = new HashMap<>();\n                    if(parameterJson != null){\n                        for(Object object : parameterJson){\n                            JSONObject schema = (JSONObject) ((JSONObject) object).get(\"schema\");\n                            if (schema != null){\n                                String ref = (String) schema.get(\"$ref\");\n                                requestParam = parseRequestToJson(null,paramMap,ref);\n                            } else {\n                                String mapKey = (String) ((JSONObject) object).get(\"name\");\n                                String type = ((JSONObject) object).getString(\"type\");\n                                Object value = setValueByType(type,null);\n                                requestParamMap.put(mapKey,value);\n                            }\n                        }\n                    }\n    \n                    if(requestParam != null){\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                    } else {\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                    }\n    \n                    //返回值类型都用标准类型，不解析其他格式\n                    JSONObject response = (JSONObject) requestTypeInfo.get(\"responses\");\n                    Object responseResult = null;\n                    if(response != null){\n                        JSONObject schema = (JSONObject) ((JSONObject)response.get(\"200\")).get(\"schema\");\n                        if(schema != null){\n                            String ref = (String) schema.get(\"$ref\");\n                            responseResult = parseRequestToJson(null,paramMap,ref);\n                        }\n                    }\n                    if(responseResult != null){\n                        resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                    }\n    \n                    resourceInfos.add(resourceInfo);\n                }\n            }\n            log.info(\"解析完成=====>{}\",JSONObject.toJSONString(resourceInfos));\n        } catch (IOException e) {\n            log.error(\"加载Swagger文档中接口失败，url={}\",url);\n            return false;\n        }\n        return true;\n    }\n    \n    /**\n     * 解析swagger-ui中出参和入参为json\n     * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n     * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n     * @Date 2020/11/11 16:01\n     * @Author fan\n    **/\n    private Object parseRequestToJson(Map<String,Integer> forEachCache,Map<String,JSONObject> paramMap, String paramRef){\n        if(StringUtils.isBlank(paramRef)){\n            return \"\";\n        }\n    \n        //对象标识\n        String paramKey = paramRef.substring(paramRef.lastIndexOf(\"/\")+1);\n    \n        //控制递归次数，同一个对象循环超过1次就返回空\n        if(forEachCache == null){\n            forEachCache = new HashMap<>();\n        }\n        Integer forEachCount = forEachCache.get(paramKey);\n        if(forEachCount != null && forEachCount >= 1){\n            return null;\n        } else {\n            forEachCache.put(paramKey,1);\n        }\n    \n        //对象值\n        JSONObject paramJson = paramMap.get(paramKey);\n        JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(\"properties\")));\n    \n        Map<String,Object> columnMap = new HashMap<>();\n        for(Map.Entry<String,Object> entry : propertiesJson.entrySet()){\n            String key = entry.getKey();\n            Object value = new JSONObject();\n            JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n            String type = valueJson.getString(\"type\");\n            Object obj = valueJson.get(\"items\");\n    \n            if(obj != null){\n                JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n                String ref = (String) property.get(\"$ref\");\n                //有下一级，则递归\n                if(StringUtils.isNotBlank(ref)){\n                    value = parseRequestToJson(forEachCache,paramMap,ref);\n                }\n            }\n            value = setValueByType(type,value);\n            columnMap.put(key,value);\n        }\n        return columnMap;\n    }\n    \n    /**  根据参数类型设置value **/\n    private Object setValueByType(String type,Object value){\n        if(\"array\".equals(type)){\n            JSONArray jsonArray = new JSONArray();\n            if(value == null){\n                value = new JSONObject();\n            }\n            jsonArray.add(value);\n            return JSONArray.toJSONString(jsonArray);\n        }\n        if(\"integer\".equals(type)){\n            return 0;\n        }\n        if(\"boolean\".equals(type)){\n            return true;\n        }\n        if(\"object\".equals(type)){\n            return value;\n        }\n        return \"\";\n    }\n}\n```\n","source":"_posts/backend/java/utils/swagger.md","raw":"---\ntitle: Java解析Swagger文档接口及参数\ndescription: 解析swagger-ui\ndate: 2020-11-11 19:30\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n### 相关依赖包\n```xml\n<dependencies>\n    <!--swagger依赖-->\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger2</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n    <dependency>\n        <groupId>com.github.xiaoymin</groupId>\n        <artifactId>swagger-bootstrap-ui</artifactId>\n        <version>1.9.6</version>\n    </dependency>\n    \n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>fastjson</artifactId>\n        <version>1.2.73</version>\n    </dependency>\n</dependencies>\n```\n\n### Swagger文档相关接口\n```textmate\n1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本\n```\n\n### 主要代码\n```java\n    class Test{\n    /**\n     * 加载swagger文档中的接口信息\n     * @Date 2020/11/6 11:31\n     * @Author fan\n    **/\n    public boolean loadSwaggerAPI(Integer lesseeId,String url){\n        try {\n            log.info(\"开始加载Swagger文档,url={}\",url);\n            String result = OkhttpClientUtil.get(url);\n            JSONObject jsonObject = JSON.parseObject(result);\n            if(jsonObject == null){\n                return false;\n            }\n            //移除对象描述信息\n            String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(\"info\"))).get(\"title\");\n            JSONObject paths = (JSONObject) jsonObject.get(\"paths\");\n            JSONObject definitions = (JSONObject) jsonObject.get(\"definitions\");\n            Map<String,JSONObject> paramMap = JSONObject.toJavaObject(definitions,Map.class);\n    \n            List<PublicResourceInfo> resourceInfos = new ArrayList<>();\n            for(Map.Entry<String,Object> entry :  paths.entrySet()){\n                String apiUrl = entry.getKey();\n                String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n                JSONObject methodInfo = (JSONObject) entry.getValue();\n    \n                for(Map.Entry<String,Object> methodEntry : methodInfo.entrySet()){\n                    String requestType = methodEntry.getKey().toUpperCase();\n    \n                    JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                    String apiName = String.valueOf(requestTypeInfo.get(\"summary\"));\n                    String moduleName = StringUtils.join((List<String>)requestTypeInfo.get(\"tags\"),\",\");\n    \n                    PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                    resourceInfo.setPlatformNameCn(platform);\n                    resourceInfo.setApiPath(apiUrl);\n                    resourceInfo.setPerms(perms);\n                    resourceInfo.setApiName(apiName);\n                    resourceInfo.setRequestType(requestType);\n                    resourceInfo.setModuleNameCn(moduleName);\n    \n                    //解析swagger-ui中的出参入参\n                    JSONArray parameterJson = (JSONArray) requestTypeInfo.get(\"parameters\");\n                    Object requestParam = null;\n                    Map<String,Object> requestParamMap = new HashMap<>();\n                    if(parameterJson != null){\n                        for(Object object : parameterJson){\n                            JSONObject schema = (JSONObject) ((JSONObject) object).get(\"schema\");\n                            if (schema != null){\n                                String ref = (String) schema.get(\"$ref\");\n                                requestParam = parseRequestToJson(null,paramMap,ref);\n                            } else {\n                                String mapKey = (String) ((JSONObject) object).get(\"name\");\n                                String type = ((JSONObject) object).getString(\"type\");\n                                Object value = setValueByType(type,null);\n                                requestParamMap.put(mapKey,value);\n                            }\n                        }\n                    }\n    \n                    if(requestParam != null){\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                    } else {\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                    }\n    \n                    //返回值类型都用标准类型，不解析其他格式\n                    JSONObject response = (JSONObject) requestTypeInfo.get(\"responses\");\n                    Object responseResult = null;\n                    if(response != null){\n                        JSONObject schema = (JSONObject) ((JSONObject)response.get(\"200\")).get(\"schema\");\n                        if(schema != null){\n                            String ref = (String) schema.get(\"$ref\");\n                            responseResult = parseRequestToJson(null,paramMap,ref);\n                        }\n                    }\n                    if(responseResult != null){\n                        resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                    }\n    \n                    resourceInfos.add(resourceInfo);\n                }\n            }\n            log.info(\"解析完成=====>{}\",JSONObject.toJSONString(resourceInfos));\n        } catch (IOException e) {\n            log.error(\"加载Swagger文档中接口失败，url={}\",url);\n            return false;\n        }\n        return true;\n    }\n    \n    /**\n     * 解析swagger-ui中出参和入参为json\n     * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n     * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n     * @Date 2020/11/11 16:01\n     * @Author fan\n    **/\n    private Object parseRequestToJson(Map<String,Integer> forEachCache,Map<String,JSONObject> paramMap, String paramRef){\n        if(StringUtils.isBlank(paramRef)){\n            return \"\";\n        }\n    \n        //对象标识\n        String paramKey = paramRef.substring(paramRef.lastIndexOf(\"/\")+1);\n    \n        //控制递归次数，同一个对象循环超过1次就返回空\n        if(forEachCache == null){\n            forEachCache = new HashMap<>();\n        }\n        Integer forEachCount = forEachCache.get(paramKey);\n        if(forEachCount != null && forEachCount >= 1){\n            return null;\n        } else {\n            forEachCache.put(paramKey,1);\n        }\n    \n        //对象值\n        JSONObject paramJson = paramMap.get(paramKey);\n        JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(\"properties\")));\n    \n        Map<String,Object> columnMap = new HashMap<>();\n        for(Map.Entry<String,Object> entry : propertiesJson.entrySet()){\n            String key = entry.getKey();\n            Object value = new JSONObject();\n            JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n            String type = valueJson.getString(\"type\");\n            Object obj = valueJson.get(\"items\");\n    \n            if(obj != null){\n                JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n                String ref = (String) property.get(\"$ref\");\n                //有下一级，则递归\n                if(StringUtils.isNotBlank(ref)){\n                    value = parseRequestToJson(forEachCache,paramMap,ref);\n                }\n            }\n            value = setValueByType(type,value);\n            columnMap.put(key,value);\n        }\n        return columnMap;\n    }\n    \n    /**  根据参数类型设置value **/\n    private Object setValueByType(String type,Object value){\n        if(\"array\".equals(type)){\n            JSONArray jsonArray = new JSONArray();\n            if(value == null){\n                value = new JSONObject();\n            }\n            jsonArray.add(value);\n            return JSONArray.toJSONString(jsonArray);\n        }\n        if(\"integer\".equals(type)){\n            return 0;\n        }\n        if(\"boolean\".equals(type)){\n            return true;\n        }\n        if(\"object\".equals(type)){\n            return value;\n        }\n        return \"\";\n    }\n}\n```\n","slug":"backend/java/utils/swagger","published":1,"updated":"2022-01-12T06:06:38.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry3003ajrnvf9vz8nk1","content":"<h3 id=\"相关依赖包\"><a href=\"#相关依赖包\" class=\"headerlink\" title=\"相关依赖包\"></a>相关依赖包</h3><pre><code class=\"xml\">&lt;dependencies&gt;\n    &lt;!--swagger依赖--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n        &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n        &lt;version&gt;2.9.2&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n        &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n        &lt;version&gt;2.9.2&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n        &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;\n        &lt;version&gt;1.9.6&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n        &lt;version&gt;1.2.73&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n<h3 id=\"Swagger文档相关接口\"><a href=\"#Swagger文档相关接口\" class=\"headerlink\" title=\"Swagger文档相关接口\"></a>Swagger文档相关接口</h3><pre><code class=\"textmate\">1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本</code></pre>\n<h3 id=\"主要代码\"><a href=\"#主要代码\" class=\"headerlink\" title=\"主要代码\"></a>主要代码</h3><pre><code class=\"java\">    class Test&#123;\n    /**\n     * 加载swagger文档中的接口信息\n     * @Date 2020/11/6 11:31\n     * @Author fan\n    **/\n    public boolean loadSwaggerAPI(Integer lesseeId,String url)&#123;\n        try &#123;\n            log.info(&quot;开始加载Swagger文档,url=&#123;&#125;&quot;,url);\n            String result = OkhttpClientUtil.get(url);\n            JSONObject jsonObject = JSON.parseObject(result);\n            if(jsonObject == null)&#123;\n                return false;\n            &#125;\n            //移除对象描述信息\n            String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(&quot;info&quot;))).get(&quot;title&quot;);\n            JSONObject paths = (JSONObject) jsonObject.get(&quot;paths&quot;);\n            JSONObject definitions = (JSONObject) jsonObject.get(&quot;definitions&quot;);\n            Map&lt;String,JSONObject&gt; paramMap = JSONObject.toJavaObject(definitions,Map.class);\n\n            List&lt;PublicResourceInfo&gt; resourceInfos = new ArrayList&lt;&gt;();\n            for(Map.Entry&lt;String,Object&gt; entry :  paths.entrySet())&#123;\n                String apiUrl = entry.getKey();\n                String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n                JSONObject methodInfo = (JSONObject) entry.getValue();\n\n                for(Map.Entry&lt;String,Object&gt; methodEntry : methodInfo.entrySet())&#123;\n                    String requestType = methodEntry.getKey().toUpperCase();\n\n                    JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                    String apiName = String.valueOf(requestTypeInfo.get(&quot;summary&quot;));\n                    String moduleName = StringUtils.join((List&lt;String&gt;)requestTypeInfo.get(&quot;tags&quot;),&quot;,&quot;);\n\n                    PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                    resourceInfo.setPlatformNameCn(platform);\n                    resourceInfo.setApiPath(apiUrl);\n                    resourceInfo.setPerms(perms);\n                    resourceInfo.setApiName(apiName);\n                    resourceInfo.setRequestType(requestType);\n                    resourceInfo.setModuleNameCn(moduleName);\n\n                    //解析swagger-ui中的出参入参\n                    JSONArray parameterJson = (JSONArray) requestTypeInfo.get(&quot;parameters&quot;);\n                    Object requestParam = null;\n                    Map&lt;String,Object&gt; requestParamMap = new HashMap&lt;&gt;();\n                    if(parameterJson != null)&#123;\n                        for(Object object : parameterJson)&#123;\n                            JSONObject schema = (JSONObject) ((JSONObject) object).get(&quot;schema&quot;);\n                            if (schema != null)&#123;\n                                String ref = (String) schema.get(&quot;$ref&quot;);\n                                requestParam = parseRequestToJson(null,paramMap,ref);\n                            &#125; else &#123;\n                                String mapKey = (String) ((JSONObject) object).get(&quot;name&quot;);\n                                String type = ((JSONObject) object).getString(&quot;type&quot;);\n                                Object value = setValueByType(type,null);\n                                requestParamMap.put(mapKey,value);\n                            &#125;\n                        &#125;\n                    &#125;\n\n                    if(requestParam != null)&#123;\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                    &#125; else &#123;\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                    &#125;\n\n                    //返回值类型都用标准类型，不解析其他格式\n                    JSONObject response = (JSONObject) requestTypeInfo.get(&quot;responses&quot;);\n                    Object responseResult = null;\n                    if(response != null)&#123;\n                        JSONObject schema = (JSONObject) ((JSONObject)response.get(&quot;200&quot;)).get(&quot;schema&quot;);\n                        if(schema != null)&#123;\n                            String ref = (String) schema.get(&quot;$ref&quot;);\n                            responseResult = parseRequestToJson(null,paramMap,ref);\n                        &#125;\n                    &#125;\n                    if(responseResult != null)&#123;\n                        resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                    &#125;\n\n                    resourceInfos.add(resourceInfo);\n                &#125;\n            &#125;\n            log.info(&quot;解析完成=====&gt;&#123;&#125;&quot;,JSONObject.toJSONString(resourceInfos));\n        &#125; catch (IOException e) &#123;\n            log.error(&quot;加载Swagger文档中接口失败，url=&#123;&#125;&quot;,url);\n            return false;\n        &#125;\n        return true;\n    &#125;\n\n    /**\n     * 解析swagger-ui中出参和入参为json\n     * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n     * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n     * @Date 2020/11/11 16:01\n     * @Author fan\n    **/\n    private Object parseRequestToJson(Map&lt;String,Integer&gt; forEachCache,Map&lt;String,JSONObject&gt; paramMap, String paramRef)&#123;\n        if(StringUtils.isBlank(paramRef))&#123;\n            return &quot;&quot;;\n        &#125;\n\n        //对象标识\n        String paramKey = paramRef.substring(paramRef.lastIndexOf(&quot;/&quot;)+1);\n\n        //控制递归次数，同一个对象循环超过1次就返回空\n        if(forEachCache == null)&#123;\n            forEachCache = new HashMap&lt;&gt;();\n        &#125;\n        Integer forEachCount = forEachCache.get(paramKey);\n        if(forEachCount != null &amp;&amp; forEachCount &gt;= 1)&#123;\n            return null;\n        &#125; else &#123;\n            forEachCache.put(paramKey,1);\n        &#125;\n\n        //对象值\n        JSONObject paramJson = paramMap.get(paramKey);\n        JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(&quot;properties&quot;)));\n\n        Map&lt;String,Object&gt; columnMap = new HashMap&lt;&gt;();\n        for(Map.Entry&lt;String,Object&gt; entry : propertiesJson.entrySet())&#123;\n            String key = entry.getKey();\n            Object value = new JSONObject();\n            JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n            String type = valueJson.getString(&quot;type&quot;);\n            Object obj = valueJson.get(&quot;items&quot;);\n\n            if(obj != null)&#123;\n                JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n                String ref = (String) property.get(&quot;$ref&quot;);\n                //有下一级，则递归\n                if(StringUtils.isNotBlank(ref))&#123;\n                    value = parseRequestToJson(forEachCache,paramMap,ref);\n                &#125;\n            &#125;\n            value = setValueByType(type,value);\n            columnMap.put(key,value);\n        &#125;\n        return columnMap;\n    &#125;\n\n    /**  根据参数类型设置value **/\n    private Object setValueByType(String type,Object value)&#123;\n        if(&quot;array&quot;.equals(type))&#123;\n            JSONArray jsonArray = new JSONArray();\n            if(value == null)&#123;\n                value = new JSONObject();\n            &#125;\n            jsonArray.add(value);\n            return JSONArray.toJSONString(jsonArray);\n        &#125;\n        if(&quot;integer&quot;.equals(type))&#123;\n            return 0;\n        &#125;\n        if(&quot;boolean&quot;.equals(type))&#123;\n            return true;\n        &#125;\n        if(&quot;object&quot;.equals(type))&#123;\n            return value;\n        &#125;\n        return &quot;&quot;;\n    &#125;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关依赖包\"><a href=\"#相关依赖包\" class=\"headerlink\" title=\"相关依赖包\"></a>相关依赖包</h3><pre><code class=\"xml\">&lt;dependencies&gt;\n    &lt;!--swagger依赖--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n        &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n        &lt;version&gt;2.9.2&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n        &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n        &lt;version&gt;2.9.2&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n        &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;\n        &lt;version&gt;1.9.6&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n        &lt;version&gt;1.2.73&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n<h3 id=\"Swagger文档相关接口\"><a href=\"#Swagger文档相关接口\" class=\"headerlink\" title=\"Swagger文档相关接口\"></a>Swagger文档相关接口</h3><pre><code class=\"textmate\">1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本</code></pre>\n<h3 id=\"主要代码\"><a href=\"#主要代码\" class=\"headerlink\" title=\"主要代码\"></a>主要代码</h3><pre><code class=\"java\">    class Test&#123;\n    /**\n     * 加载swagger文档中的接口信息\n     * @Date 2020/11/6 11:31\n     * @Author fan\n    **/\n    public boolean loadSwaggerAPI(Integer lesseeId,String url)&#123;\n        try &#123;\n            log.info(&quot;开始加载Swagger文档,url=&#123;&#125;&quot;,url);\n            String result = OkhttpClientUtil.get(url);\n            JSONObject jsonObject = JSON.parseObject(result);\n            if(jsonObject == null)&#123;\n                return false;\n            &#125;\n            //移除对象描述信息\n            String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(&quot;info&quot;))).get(&quot;title&quot;);\n            JSONObject paths = (JSONObject) jsonObject.get(&quot;paths&quot;);\n            JSONObject definitions = (JSONObject) jsonObject.get(&quot;definitions&quot;);\n            Map&lt;String,JSONObject&gt; paramMap = JSONObject.toJavaObject(definitions,Map.class);\n\n            List&lt;PublicResourceInfo&gt; resourceInfos = new ArrayList&lt;&gt;();\n            for(Map.Entry&lt;String,Object&gt; entry :  paths.entrySet())&#123;\n                String apiUrl = entry.getKey();\n                String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n                JSONObject methodInfo = (JSONObject) entry.getValue();\n\n                for(Map.Entry&lt;String,Object&gt; methodEntry : methodInfo.entrySet())&#123;\n                    String requestType = methodEntry.getKey().toUpperCase();\n\n                    JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                    String apiName = String.valueOf(requestTypeInfo.get(&quot;summary&quot;));\n                    String moduleName = StringUtils.join((List&lt;String&gt;)requestTypeInfo.get(&quot;tags&quot;),&quot;,&quot;);\n\n                    PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                    resourceInfo.setPlatformNameCn(platform);\n                    resourceInfo.setApiPath(apiUrl);\n                    resourceInfo.setPerms(perms);\n                    resourceInfo.setApiName(apiName);\n                    resourceInfo.setRequestType(requestType);\n                    resourceInfo.setModuleNameCn(moduleName);\n\n                    //解析swagger-ui中的出参入参\n                    JSONArray parameterJson = (JSONArray) requestTypeInfo.get(&quot;parameters&quot;);\n                    Object requestParam = null;\n                    Map&lt;String,Object&gt; requestParamMap = new HashMap&lt;&gt;();\n                    if(parameterJson != null)&#123;\n                        for(Object object : parameterJson)&#123;\n                            JSONObject schema = (JSONObject) ((JSONObject) object).get(&quot;schema&quot;);\n                            if (schema != null)&#123;\n                                String ref = (String) schema.get(&quot;$ref&quot;);\n                                requestParam = parseRequestToJson(null,paramMap,ref);\n                            &#125; else &#123;\n                                String mapKey = (String) ((JSONObject) object).get(&quot;name&quot;);\n                                String type = ((JSONObject) object).getString(&quot;type&quot;);\n                                Object value = setValueByType(type,null);\n                                requestParamMap.put(mapKey,value);\n                            &#125;\n                        &#125;\n                    &#125;\n\n                    if(requestParam != null)&#123;\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                    &#125; else &#123;\n                        resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                    &#125;\n\n                    //返回值类型都用标准类型，不解析其他格式\n                    JSONObject response = (JSONObject) requestTypeInfo.get(&quot;responses&quot;);\n                    Object responseResult = null;\n                    if(response != null)&#123;\n                        JSONObject schema = (JSONObject) ((JSONObject)response.get(&quot;200&quot;)).get(&quot;schema&quot;);\n                        if(schema != null)&#123;\n                            String ref = (String) schema.get(&quot;$ref&quot;);\n                            responseResult = parseRequestToJson(null,paramMap,ref);\n                        &#125;\n                    &#125;\n                    if(responseResult != null)&#123;\n                        resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                    &#125;\n\n                    resourceInfos.add(resourceInfo);\n                &#125;\n            &#125;\n            log.info(&quot;解析完成=====&gt;&#123;&#125;&quot;,JSONObject.toJSONString(resourceInfos));\n        &#125; catch (IOException e) &#123;\n            log.error(&quot;加载Swagger文档中接口失败，url=&#123;&#125;&quot;,url);\n            return false;\n        &#125;\n        return true;\n    &#125;\n\n    /**\n     * 解析swagger-ui中出参和入参为json\n     * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n     * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n     * @Date 2020/11/11 16:01\n     * @Author fan\n    **/\n    private Object parseRequestToJson(Map&lt;String,Integer&gt; forEachCache,Map&lt;String,JSONObject&gt; paramMap, String paramRef)&#123;\n        if(StringUtils.isBlank(paramRef))&#123;\n            return &quot;&quot;;\n        &#125;\n\n        //对象标识\n        String paramKey = paramRef.substring(paramRef.lastIndexOf(&quot;/&quot;)+1);\n\n        //控制递归次数，同一个对象循环超过1次就返回空\n        if(forEachCache == null)&#123;\n            forEachCache = new HashMap&lt;&gt;();\n        &#125;\n        Integer forEachCount = forEachCache.get(paramKey);\n        if(forEachCount != null &amp;&amp; forEachCount &gt;= 1)&#123;\n            return null;\n        &#125; else &#123;\n            forEachCache.put(paramKey,1);\n        &#125;\n\n        //对象值\n        JSONObject paramJson = paramMap.get(paramKey);\n        JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(&quot;properties&quot;)));\n\n        Map&lt;String,Object&gt; columnMap = new HashMap&lt;&gt;();\n        for(Map.Entry&lt;String,Object&gt; entry : propertiesJson.entrySet())&#123;\n            String key = entry.getKey();\n            Object value = new JSONObject();\n            JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n            String type = valueJson.getString(&quot;type&quot;);\n            Object obj = valueJson.get(&quot;items&quot;);\n\n            if(obj != null)&#123;\n                JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n                String ref = (String) property.get(&quot;$ref&quot;);\n                //有下一级，则递归\n                if(StringUtils.isNotBlank(ref))&#123;\n                    value = parseRequestToJson(forEachCache,paramMap,ref);\n                &#125;\n            &#125;\n            value = setValueByType(type,value);\n            columnMap.put(key,value);\n        &#125;\n        return columnMap;\n    &#125;\n\n    /**  根据参数类型设置value **/\n    private Object setValueByType(String type,Object value)&#123;\n        if(&quot;array&quot;.equals(type))&#123;\n            JSONArray jsonArray = new JSONArray();\n            if(value == null)&#123;\n                value = new JSONObject();\n            &#125;\n            jsonArray.add(value);\n            return JSONArray.toJSONString(jsonArray);\n        &#125;\n        if(&quot;integer&quot;.equals(type))&#123;\n            return 0;\n        &#125;\n        if(&quot;boolean&quot;.equals(type))&#123;\n            return true;\n        &#125;\n        if(&quot;object&quot;.equals(type))&#123;\n            return value;\n        &#125;\n        return &quot;&quot;;\n    &#125;\n&#125;</code></pre>\n"},{"title":"IO","description":"io","date":"2021-08-11T01:31:00.000Z","_content":"\n### IO模型\n|类型|解释|\n|---|---|\n|阻塞IO|返回数据就绪状态后，用户线程才能做其他动作|\n|非阻塞IO|用户线程不断询问数据是否就绪|\n|多路复用IO|即NIO(NewIO)  有一个线程不断去轮询多个 socket 的状态，只有当 socket 真正有读写事件时，才真正调用实际的 IO 读写操作，这个操作在内核中，比用户线程效率高<br/>缺点：一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询。|\n|信号驱动IO|当用户线程发起一个 IO 请求操作，会给对应的 socket 注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到之后，在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作|\n|异步IO|最理想的IO模型  <br/>1.用户线程发起read操作，内核立即返回响应。<br/>2.内核接收到请求后，准备数据->copy至用户线程->给用户线程发信号<br/>比较：   信号驱动IO是需要client端调用函数操作IO，异步IO是内核异步处理，client端无需处理|\n\n- 多路复用IO\n\n```textmate\nIO多路复用模型的IO涉及两种系统调用，一种是IO操作的系\n统调用，另一种是select/epoll就绪查询系统调用。IO多路复用模型建立在操作系统的基础 设施之上，即操作系统的内核必须能够提供多路分离的系统调用select/epoll。\n优点:一个选择器查询线程，可以同时处理成千上万的网络连接， 所以，用户程序不必创建大量的线程，也不必维护这些线程，从而大大减小了系统的开 销。这是一个线程维护一个连接的阻塞IO模式相比，使用多路IO复用模型的最大优势。\n缺点:本质上，select/epoll系统调用是阻塞式的，属于同步IO。需要在读写事件就绪后，由系统调用本身负责进行读写，也就是说这个读写过程是阻塞 的\n```\n\n### IO包\n|包名|类型/包|类名|\n|---|---|---|\n|java.io|字节流|InputStream|\n|  |  |OutputStream|\n|  |字符流|Reader|\n|  | |Writer|\n|java.nio|channels包||\n|java.nio|charset包||\n|java.nio|Buffer包||\n|java.nio|ByteOrder||\n|java.nio|MappedByteBuffer||\n\n\n### 文件句柄(文件描述符)\n\n- 解释\n```textmate\n文件句柄，也叫文件描述符。在Linux系统中，文件可分为:普通文件、目录文件、链 接文件和设备文件。\n文件描述符(File Descriptor)是内核为了高效管理已被打开的文件所 创建的索引，它是一个非负整数(通常是小整数)，用于指代被打开的文件。\n所有的IO系 统调用，包括socket的读写调用，都是通过文件描述符完成的。\n```\n\n- Linux的系统默认值为1024，需要解除文件句柄数的限制\n- 调整步骤\n\n```textmate\n1.查看一个进程最大文件句柄数量\n  ulimit -n\n\n2.调整最大句柄数(当期会话有效)\n  ulimit -n 1000000\n\n3.永久调整最大句柄数(root权限)\n    vim /etc/rc.local\n    添加  ulimit -SHn 1000000\n    解释: 选项-S表示软性极限值，-H表示硬性极限值。硬 性极限是实际的限制，就是最大可以是100万，不能再多了。软性极限值则是系统发出警告 (Warning)的极限值，超过这个极限值，内核会发出警告。\n\n4.终极解除Linux系统的最大文件打开数量的限制\n    vim /etc/security/limits.conf\n    添加 \n        soft nofile 1000000\n        hard nofile 1000000\n    解释: soft nofile表示软性极限，hard nofile表示硬性极限。\n```\n\n### NIO\n#### Java NIO类库包含以下三个核心组件\n- Channel(通道)\n- Buffer(缓冲区)\n- Selector(选择器)\n\n#### NIO与OIO(Old IO)对比\n```textmate\n1)OIO是面向流(Stream Oriented)的，NIO是面向缓冲区(Buffer Oriented)的。 \n面向流:\n    在一般的OIO操作中，面向字节流或字符流的IO操作，总是以流式的方式顺序地从一个流(Stream)中读取一个或多个字节，因此，我们不能随意地改变读取指针的位置。\n面向缓冲区:\n    在NIO操作中则不同，NIO中引入了Channel(通道)和Buffer(缓冲区)的概念。面向缓冲 区的读取和写入，只需要从通道中读取数据到缓冲区中，或将数据从缓冲区中写入到通道 中。\n    NIO不像OIO那样是顺序操作，可以随意地读取Buffer中任意位置的数据。\n\n(2)OIO的操作是阻塞的，而NIO的操作是非阻塞的。\n    OIO操作都是阻塞的，例如，我们调用一个 read方法读取一个文件的内容，那么调用read的线程会被阻塞住，直到read操作完成。\n    而在NIO的非阻塞模式中，当我们调用read方法时，如果此时有数据，则read读取数据并返回;如果此时没有数据，则read也会直接返回，而不会阻塞当前线程。\n    NIO的非阻塞: NIO使用了通道和 通道的多路复用技术。\n(3)OIO没有选择器(Selector)概念，而NIO有选择器的概念。\nNIO的实现是基于底层的选择器的系统调用，所以NIO的需要底层操作系统提供支持。\n```\n#### 通道(Channel)\n```textmate\nOIO: InputStream、OutputStream\nNIO: 向通道中写入数据，也可以从通道中读取数据\n```\n#### 缓冲区(Buffer)\n```textmate\n所谓通道的读取，就是将数据从通道读取到缓冲区中;所谓通道的写入，就是将 数据从缓冲区中写入到通道中。\n```\n\n### 选择器(Selector)\n```textmate\nSelector 选择器可以理解为一个IO事件的监听与查询 器。通过选择器，一个线程可以查询多个通道的IO事件的就绪状态\n```\n\n## Buffer类\n|属性|说明|\n|:---:|---|\n|capacity|容量，即可以容纳的最大数据量;在缓冲区创建时设置并且不能改变|\n|limit|上限，缓冲区中当前的数据量|\n|position|位置，缓冲区中下一个要被读或写的元素的索引|\n|mark|调用 mark()方法来设置 mark=position，再调用 reset()可以让 position 恢复到 mark 标记的位置，即 position=mark|\n\n","source":"_posts/backend/java/netty/io.md","raw":"---\ntitle: IO\ndescription: io\ndate: 2021-08-11 09:31:00\ntags:\n- io\ncategories:\n- 后端\n- io\n---\n\n### IO模型\n|类型|解释|\n|---|---|\n|阻塞IO|返回数据就绪状态后，用户线程才能做其他动作|\n|非阻塞IO|用户线程不断询问数据是否就绪|\n|多路复用IO|即NIO(NewIO)  有一个线程不断去轮询多个 socket 的状态，只有当 socket 真正有读写事件时，才真正调用实际的 IO 读写操作，这个操作在内核中，比用户线程效率高<br/>缺点：一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询。|\n|信号驱动IO|当用户线程发起一个 IO 请求操作，会给对应的 socket 注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到之后，在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作|\n|异步IO|最理想的IO模型  <br/>1.用户线程发起read操作，内核立即返回响应。<br/>2.内核接收到请求后，准备数据->copy至用户线程->给用户线程发信号<br/>比较：   信号驱动IO是需要client端调用函数操作IO，异步IO是内核异步处理，client端无需处理|\n\n- 多路复用IO\n\n```textmate\nIO多路复用模型的IO涉及两种系统调用，一种是IO操作的系\n统调用，另一种是select/epoll就绪查询系统调用。IO多路复用模型建立在操作系统的基础 设施之上，即操作系统的内核必须能够提供多路分离的系统调用select/epoll。\n优点:一个选择器查询线程，可以同时处理成千上万的网络连接， 所以，用户程序不必创建大量的线程，也不必维护这些线程，从而大大减小了系统的开 销。这是一个线程维护一个连接的阻塞IO模式相比，使用多路IO复用模型的最大优势。\n缺点:本质上，select/epoll系统调用是阻塞式的，属于同步IO。需要在读写事件就绪后，由系统调用本身负责进行读写，也就是说这个读写过程是阻塞 的\n```\n\n### IO包\n|包名|类型/包|类名|\n|---|---|---|\n|java.io|字节流|InputStream|\n|  |  |OutputStream|\n|  |字符流|Reader|\n|  | |Writer|\n|java.nio|channels包||\n|java.nio|charset包||\n|java.nio|Buffer包||\n|java.nio|ByteOrder||\n|java.nio|MappedByteBuffer||\n\n\n### 文件句柄(文件描述符)\n\n- 解释\n```textmate\n文件句柄，也叫文件描述符。在Linux系统中，文件可分为:普通文件、目录文件、链 接文件和设备文件。\n文件描述符(File Descriptor)是内核为了高效管理已被打开的文件所 创建的索引，它是一个非负整数(通常是小整数)，用于指代被打开的文件。\n所有的IO系 统调用，包括socket的读写调用，都是通过文件描述符完成的。\n```\n\n- Linux的系统默认值为1024，需要解除文件句柄数的限制\n- 调整步骤\n\n```textmate\n1.查看一个进程最大文件句柄数量\n  ulimit -n\n\n2.调整最大句柄数(当期会话有效)\n  ulimit -n 1000000\n\n3.永久调整最大句柄数(root权限)\n    vim /etc/rc.local\n    添加  ulimit -SHn 1000000\n    解释: 选项-S表示软性极限值，-H表示硬性极限值。硬 性极限是实际的限制，就是最大可以是100万，不能再多了。软性极限值则是系统发出警告 (Warning)的极限值，超过这个极限值，内核会发出警告。\n\n4.终极解除Linux系统的最大文件打开数量的限制\n    vim /etc/security/limits.conf\n    添加 \n        soft nofile 1000000\n        hard nofile 1000000\n    解释: soft nofile表示软性极限，hard nofile表示硬性极限。\n```\n\n### NIO\n#### Java NIO类库包含以下三个核心组件\n- Channel(通道)\n- Buffer(缓冲区)\n- Selector(选择器)\n\n#### NIO与OIO(Old IO)对比\n```textmate\n1)OIO是面向流(Stream Oriented)的，NIO是面向缓冲区(Buffer Oriented)的。 \n面向流:\n    在一般的OIO操作中，面向字节流或字符流的IO操作，总是以流式的方式顺序地从一个流(Stream)中读取一个或多个字节，因此，我们不能随意地改变读取指针的位置。\n面向缓冲区:\n    在NIO操作中则不同，NIO中引入了Channel(通道)和Buffer(缓冲区)的概念。面向缓冲 区的读取和写入，只需要从通道中读取数据到缓冲区中，或将数据从缓冲区中写入到通道 中。\n    NIO不像OIO那样是顺序操作，可以随意地读取Buffer中任意位置的数据。\n\n(2)OIO的操作是阻塞的，而NIO的操作是非阻塞的。\n    OIO操作都是阻塞的，例如，我们调用一个 read方法读取一个文件的内容，那么调用read的线程会被阻塞住，直到read操作完成。\n    而在NIO的非阻塞模式中，当我们调用read方法时，如果此时有数据，则read读取数据并返回;如果此时没有数据，则read也会直接返回，而不会阻塞当前线程。\n    NIO的非阻塞: NIO使用了通道和 通道的多路复用技术。\n(3)OIO没有选择器(Selector)概念，而NIO有选择器的概念。\nNIO的实现是基于底层的选择器的系统调用，所以NIO的需要底层操作系统提供支持。\n```\n#### 通道(Channel)\n```textmate\nOIO: InputStream、OutputStream\nNIO: 向通道中写入数据，也可以从通道中读取数据\n```\n#### 缓冲区(Buffer)\n```textmate\n所谓通道的读取，就是将数据从通道读取到缓冲区中;所谓通道的写入，就是将 数据从缓冲区中写入到通道中。\n```\n\n### 选择器(Selector)\n```textmate\nSelector 选择器可以理解为一个IO事件的监听与查询 器。通过选择器，一个线程可以查询多个通道的IO事件的就绪状态\n```\n\n## Buffer类\n|属性|说明|\n|:---:|---|\n|capacity|容量，即可以容纳的最大数据量;在缓冲区创建时设置并且不能改变|\n|limit|上限，缓冲区中当前的数据量|\n|position|位置，缓冲区中下一个要被读或写的元素的索引|\n|mark|调用 mark()方法来设置 mark=position，再调用 reset()可以让 position 恢复到 mark 标记的位置，即 position=mark|\n\n","slug":"backend/java/netty/io","published":1,"updated":"2021-11-01T13:53:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry3003djrnv3ezh39ia","content":"<h3 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阻塞IO</td>\n<td>返回数据就绪状态后，用户线程才能做其他动作</td>\n</tr>\n<tr>\n<td>非阻塞IO</td>\n<td>用户线程不断询问数据是否就绪</td>\n</tr>\n<tr>\n<td>多路复用IO</td>\n<td>即NIO(NewIO)  有一个线程不断去轮询多个 socket 的状态，只有当 socket 真正有读写事件时，才真正调用实际的 IO 读写操作，这个操作在内核中，比用户线程效率高<br/>缺点：一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询。</td>\n</tr>\n<tr>\n<td>信号驱动IO</td>\n<td>当用户线程发起一个 IO 请求操作，会给对应的 socket 注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到之后，在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作</td>\n</tr>\n<tr>\n<td>异步IO</td>\n<td>最理想的IO模型  <br/>1.用户线程发起read操作，内核立即返回响应。<br/>2.内核接收到请求后，准备数据-&gt;copy至用户线程-&gt;给用户线程发信号<br/>比较：   信号驱动IO是需要client端调用函数操作IO，异步IO是内核异步处理，client端无需处理</td>\n</tr>\n</tbody></table>\n<ul>\n<li>多路复用IO</li>\n</ul>\n<pre><code class=\"textmate\">IO多路复用模型的IO涉及两种系统调用，一种是IO操作的系\n统调用，另一种是select/epoll就绪查询系统调用。IO多路复用模型建立在操作系统的基础 设施之上，即操作系统的内核必须能够提供多路分离的系统调用select/epoll。\n优点:一个选择器查询线程，可以同时处理成千上万的网络连接， 所以，用户程序不必创建大量的线程，也不必维护这些线程，从而大大减小了系统的开 销。这是一个线程维护一个连接的阻塞IO模式相比，使用多路IO复用模型的最大优势。\n缺点:本质上，select/epoll系统调用是阻塞式的，属于同步IO。需要在读写事件就绪后，由系统调用本身负责进行读写，也就是说这个读写过程是阻塞 的</code></pre>\n<h3 id=\"IO包\"><a href=\"#IO包\" class=\"headerlink\" title=\"IO包\"></a>IO包</h3><table>\n<thead>\n<tr>\n<th>包名</th>\n<th>类型/包</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java.io</td>\n<td>字节流</td>\n<td>InputStream</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>OutputStream</td>\n</tr>\n<tr>\n<td></td>\n<td>字符流</td>\n<td>Reader</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Writer</td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>channels包</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>charset包</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>Buffer包</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>ByteOrder</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>MappedByteBuffer</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"文件句柄-文件描述符\"><a href=\"#文件句柄-文件描述符\" class=\"headerlink\" title=\"文件句柄(文件描述符)\"></a>文件句柄(文件描述符)</h3><ul>\n<li><p>解释</p>\n<pre><code class=\"textmate\">文件句柄，也叫文件描述符。在Linux系统中，文件可分为:普通文件、目录文件、链 接文件和设备文件。\n文件描述符(File Descriptor)是内核为了高效管理已被打开的文件所 创建的索引，它是一个非负整数(通常是小整数)，用于指代被打开的文件。\n所有的IO系 统调用，包括socket的读写调用，都是通过文件描述符完成的。</code></pre>\n</li>\n<li><p>Linux的系统默认值为1024，需要解除文件句柄数的限制</p>\n</li>\n<li><p>调整步骤</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.查看一个进程最大文件句柄数量\n  ulimit -n\n\n2.调整最大句柄数(当期会话有效)\n  ulimit -n 1000000\n\n3.永久调整最大句柄数(root权限)\n    vim /etc/rc.local\n    添加  ulimit -SHn 1000000\n    解释: 选项-S表示软性极限值，-H表示硬性极限值。硬 性极限是实际的限制，就是最大可以是100万，不能再多了。软性极限值则是系统发出警告 (Warning)的极限值，超过这个极限值，内核会发出警告。\n\n4.终极解除Linux系统的最大文件打开数量的限制\n    vim /etc/security/limits.conf\n    添加 \n        soft nofile 1000000\n        hard nofile 1000000\n    解释: soft nofile表示软性极限，hard nofile表示硬性极限。</code></pre>\n<h3 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h3><h4 id=\"Java-NIO类库包含以下三个核心组件\"><a href=\"#Java-NIO类库包含以下三个核心组件\" class=\"headerlink\" title=\"Java NIO类库包含以下三个核心组件\"></a>Java NIO类库包含以下三个核心组件</h4><ul>\n<li>Channel(通道)</li>\n<li>Buffer(缓冲区)</li>\n<li>Selector(选择器)</li>\n</ul>\n<h4 id=\"NIO与OIO-Old-IO-对比\"><a href=\"#NIO与OIO-Old-IO-对比\" class=\"headerlink\" title=\"NIO与OIO(Old IO)对比\"></a>NIO与OIO(Old IO)对比</h4><pre><code class=\"textmate\">1)OIO是面向流(Stream Oriented)的，NIO是面向缓冲区(Buffer Oriented)的。 \n面向流:\n    在一般的OIO操作中，面向字节流或字符流的IO操作，总是以流式的方式顺序地从一个流(Stream)中读取一个或多个字节，因此，我们不能随意地改变读取指针的位置。\n面向缓冲区:\n    在NIO操作中则不同，NIO中引入了Channel(通道)和Buffer(缓冲区)的概念。面向缓冲 区的读取和写入，只需要从通道中读取数据到缓冲区中，或将数据从缓冲区中写入到通道 中。\n    NIO不像OIO那样是顺序操作，可以随意地读取Buffer中任意位置的数据。\n\n(2)OIO的操作是阻塞的，而NIO的操作是非阻塞的。\n    OIO操作都是阻塞的，例如，我们调用一个 read方法读取一个文件的内容，那么调用read的线程会被阻塞住，直到read操作完成。\n    而在NIO的非阻塞模式中，当我们调用read方法时，如果此时有数据，则read读取数据并返回;如果此时没有数据，则read也会直接返回，而不会阻塞当前线程。\n    NIO的非阻塞: NIO使用了通道和 通道的多路复用技术。\n(3)OIO没有选择器(Selector)概念，而NIO有选择器的概念。\nNIO的实现是基于底层的选择器的系统调用，所以NIO的需要底层操作系统提供支持。</code></pre>\n<h4 id=\"通道-Channel\"><a href=\"#通道-Channel\" class=\"headerlink\" title=\"通道(Channel)\"></a>通道(Channel)</h4><pre><code class=\"textmate\">OIO: InputStream、OutputStream\nNIO: 向通道中写入数据，也可以从通道中读取数据</code></pre>\n<h4 id=\"缓冲区-Buffer\"><a href=\"#缓冲区-Buffer\" class=\"headerlink\" title=\"缓冲区(Buffer)\"></a>缓冲区(Buffer)</h4><pre><code class=\"textmate\">所谓通道的读取，就是将数据从通道读取到缓冲区中;所谓通道的写入，就是将 数据从缓冲区中写入到通道中。</code></pre>\n<h3 id=\"选择器-Selector\"><a href=\"#选择器-Selector\" class=\"headerlink\" title=\"选择器(Selector)\"></a>选择器(Selector)</h3><pre><code class=\"textmate\">Selector 选择器可以理解为一个IO事件的监听与查询 器。通过选择器，一个线程可以查询多个通道的IO事件的就绪状态</code></pre>\n<h2 id=\"Buffer类\"><a href=\"#Buffer类\" class=\"headerlink\" title=\"Buffer类\"></a>Buffer类</h2><table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">capacity</td>\n<td>容量，即可以容纳的最大数据量;在缓冲区创建时设置并且不能改变</td>\n</tr>\n<tr>\n<td align=\"center\">limit</td>\n<td>上限，缓冲区中当前的数据量</td>\n</tr>\n<tr>\n<td align=\"center\">position</td>\n<td>位置，缓冲区中下一个要被读或写的元素的索引</td>\n</tr>\n<tr>\n<td align=\"center\">mark</td>\n<td>调用 mark()方法来设置 mark=position，再调用 reset()可以让 position 恢复到 mark 标记的位置，即 position=mark</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阻塞IO</td>\n<td>返回数据就绪状态后，用户线程才能做其他动作</td>\n</tr>\n<tr>\n<td>非阻塞IO</td>\n<td>用户线程不断询问数据是否就绪</td>\n</tr>\n<tr>\n<td>多路复用IO</td>\n<td>即NIO(NewIO)  有一个线程不断去轮询多个 socket 的状态，只有当 socket 真正有读写事件时，才真正调用实际的 IO 读写操作，这个操作在内核中，比用户线程效率高<br/>缺点：一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询。</td>\n</tr>\n<tr>\n<td>信号驱动IO</td>\n<td>当用户线程发起一个 IO 请求操作，会给对应的 socket 注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到之后，在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作</td>\n</tr>\n<tr>\n<td>异步IO</td>\n<td>最理想的IO模型  <br/>1.用户线程发起read操作，内核立即返回响应。<br/>2.内核接收到请求后，准备数据-&gt;copy至用户线程-&gt;给用户线程发信号<br/>比较：   信号驱动IO是需要client端调用函数操作IO，异步IO是内核异步处理，client端无需处理</td>\n</tr>\n</tbody></table>\n<ul>\n<li>多路复用IO</li>\n</ul>\n<pre><code class=\"textmate\">IO多路复用模型的IO涉及两种系统调用，一种是IO操作的系\n统调用，另一种是select/epoll就绪查询系统调用。IO多路复用模型建立在操作系统的基础 设施之上，即操作系统的内核必须能够提供多路分离的系统调用select/epoll。\n优点:一个选择器查询线程，可以同时处理成千上万的网络连接， 所以，用户程序不必创建大量的线程，也不必维护这些线程，从而大大减小了系统的开 销。这是一个线程维护一个连接的阻塞IO模式相比，使用多路IO复用模型的最大优势。\n缺点:本质上，select/epoll系统调用是阻塞式的，属于同步IO。需要在读写事件就绪后，由系统调用本身负责进行读写，也就是说这个读写过程是阻塞 的</code></pre>\n<h3 id=\"IO包\"><a href=\"#IO包\" class=\"headerlink\" title=\"IO包\"></a>IO包</h3><table>\n<thead>\n<tr>\n<th>包名</th>\n<th>类型/包</th>\n<th>类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java.io</td>\n<td>字节流</td>\n<td>InputStream</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>OutputStream</td>\n</tr>\n<tr>\n<td></td>\n<td>字符流</td>\n<td>Reader</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Writer</td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>channels包</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>charset包</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>Buffer包</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>ByteOrder</td>\n<td></td>\n</tr>\n<tr>\n<td>java.nio</td>\n<td>MappedByteBuffer</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"文件句柄-文件描述符\"><a href=\"#文件句柄-文件描述符\" class=\"headerlink\" title=\"文件句柄(文件描述符)\"></a>文件句柄(文件描述符)</h3><ul>\n<li><p>解释</p>\n<pre><code class=\"textmate\">文件句柄，也叫文件描述符。在Linux系统中，文件可分为:普通文件、目录文件、链 接文件和设备文件。\n文件描述符(File Descriptor)是内核为了高效管理已被打开的文件所 创建的索引，它是一个非负整数(通常是小整数)，用于指代被打开的文件。\n所有的IO系 统调用，包括socket的读写调用，都是通过文件描述符完成的。</code></pre>\n</li>\n<li><p>Linux的系统默认值为1024，需要解除文件句柄数的限制</p>\n</li>\n<li><p>调整步骤</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.查看一个进程最大文件句柄数量\n  ulimit -n\n\n2.调整最大句柄数(当期会话有效)\n  ulimit -n 1000000\n\n3.永久调整最大句柄数(root权限)\n    vim /etc/rc.local\n    添加  ulimit -SHn 1000000\n    解释: 选项-S表示软性极限值，-H表示硬性极限值。硬 性极限是实际的限制，就是最大可以是100万，不能再多了。软性极限值则是系统发出警告 (Warning)的极限值，超过这个极限值，内核会发出警告。\n\n4.终极解除Linux系统的最大文件打开数量的限制\n    vim /etc/security/limits.conf\n    添加 \n        soft nofile 1000000\n        hard nofile 1000000\n    解释: soft nofile表示软性极限，hard nofile表示硬性极限。</code></pre>\n<h3 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h3><h4 id=\"Java-NIO类库包含以下三个核心组件\"><a href=\"#Java-NIO类库包含以下三个核心组件\" class=\"headerlink\" title=\"Java NIO类库包含以下三个核心组件\"></a>Java NIO类库包含以下三个核心组件</h4><ul>\n<li>Channel(通道)</li>\n<li>Buffer(缓冲区)</li>\n<li>Selector(选择器)</li>\n</ul>\n<h4 id=\"NIO与OIO-Old-IO-对比\"><a href=\"#NIO与OIO-Old-IO-对比\" class=\"headerlink\" title=\"NIO与OIO(Old IO)对比\"></a>NIO与OIO(Old IO)对比</h4><pre><code class=\"textmate\">1)OIO是面向流(Stream Oriented)的，NIO是面向缓冲区(Buffer Oriented)的。 \n面向流:\n    在一般的OIO操作中，面向字节流或字符流的IO操作，总是以流式的方式顺序地从一个流(Stream)中读取一个或多个字节，因此，我们不能随意地改变读取指针的位置。\n面向缓冲区:\n    在NIO操作中则不同，NIO中引入了Channel(通道)和Buffer(缓冲区)的概念。面向缓冲 区的读取和写入，只需要从通道中读取数据到缓冲区中，或将数据从缓冲区中写入到通道 中。\n    NIO不像OIO那样是顺序操作，可以随意地读取Buffer中任意位置的数据。\n\n(2)OIO的操作是阻塞的，而NIO的操作是非阻塞的。\n    OIO操作都是阻塞的，例如，我们调用一个 read方法读取一个文件的内容，那么调用read的线程会被阻塞住，直到read操作完成。\n    而在NIO的非阻塞模式中，当我们调用read方法时，如果此时有数据，则read读取数据并返回;如果此时没有数据，则read也会直接返回，而不会阻塞当前线程。\n    NIO的非阻塞: NIO使用了通道和 通道的多路复用技术。\n(3)OIO没有选择器(Selector)概念，而NIO有选择器的概念。\nNIO的实现是基于底层的选择器的系统调用，所以NIO的需要底层操作系统提供支持。</code></pre>\n<h4 id=\"通道-Channel\"><a href=\"#通道-Channel\" class=\"headerlink\" title=\"通道(Channel)\"></a>通道(Channel)</h4><pre><code class=\"textmate\">OIO: InputStream、OutputStream\nNIO: 向通道中写入数据，也可以从通道中读取数据</code></pre>\n<h4 id=\"缓冲区-Buffer\"><a href=\"#缓冲区-Buffer\" class=\"headerlink\" title=\"缓冲区(Buffer)\"></a>缓冲区(Buffer)</h4><pre><code class=\"textmate\">所谓通道的读取，就是将数据从通道读取到缓冲区中;所谓通道的写入，就是将 数据从缓冲区中写入到通道中。</code></pre>\n<h3 id=\"选择器-Selector\"><a href=\"#选择器-Selector\" class=\"headerlink\" title=\"选择器(Selector)\"></a>选择器(Selector)</h3><pre><code class=\"textmate\">Selector 选择器可以理解为一个IO事件的监听与查询 器。通过选择器，一个线程可以查询多个通道的IO事件的就绪状态</code></pre>\n<h2 id=\"Buffer类\"><a href=\"#Buffer类\" class=\"headerlink\" title=\"Buffer类\"></a>Buffer类</h2><table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">capacity</td>\n<td>容量，即可以容纳的最大数据量;在缓冲区创建时设置并且不能改变</td>\n</tr>\n<tr>\n<td align=\"center\">limit</td>\n<td>上限，缓冲区中当前的数据量</td>\n</tr>\n<tr>\n<td align=\"center\">position</td>\n<td>位置，缓冲区中下一个要被读或写的元素的索引</td>\n</tr>\n<tr>\n<td align=\"center\">mark</td>\n<td>调用 mark()方法来设置 mark=position，再调用 reset()可以让 position 恢复到 mark 标记的位置，即 position=mark</td>\n</tr>\n</tbody></table>\n"},{"title":"MybatisPlus使用笔记","description":"mybatis-plus","date":"2020-12-10T04:00:00.000Z","_content":"\n- [官网](https://mp.baomidou.com/)\n\n### 常用配置\n```yaml\n#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\n      id-type: AUTO\n      #字段策略 IGNORED:\"忽略判断\",NOT_NULL:\"非 NULL 判断\"),NOT_EMPTY:\"非空判断\"\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: 'null'\n```\n### 常见问题\n\n- 1.selectOne() 查询出多条数据会报错\n```textmate\nselectOne不是存在多条数据时只返回一条！！！\n报错信息：\n   org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException:\n   Expected one result (or null) to be returned by selectOne(), but found: 2\n解决方法:\n    1.手动添加\n    wrapper最后加上(最好带上排序，每次返回固定的值) .last(\"limit 1\")\n    2.切面统一处理,如下\n```\n```java\n@Aspect\n@Component\npublic class MybatisPlusAspect {\n\n    // 配置织入点\n    @Pointcut(\"execution(public * com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(..))\")\n    public void selectOneAspect() {\n    }\n\n    @Before(\"selectOneAspect()\")\n    public void beforeSelect(JoinPoint point) {\n        Object arg = point.getArgs()[0];\n        if (arg instanceof AbstractWrapper) {\n            arg = (AbstractWrapper) arg;\n            ((AbstractWrapper) arg).last(\"limit 1\");\n        }\n    }\n}\n```\n\n### Idea生成代码插件推荐\n- [EasyCode-MybatisCodeHelper](https://plugins.jetbrains.com/plugin/13847-easycode-mybatiscodehelper)\n","source":"_posts/backend/java/utils/mybatis-plus.md","raw":"---\ntitle: MybatisPlus使用笔记\ndescription: mybatis-plus\ndate: 2020-12-10 12:00:00\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n- [官网](https://mp.baomidou.com/)\n\n### 常用配置\n```yaml\n#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\n      id-type: AUTO\n      #字段策略 IGNORED:\"忽略判断\",NOT_NULL:\"非 NULL 判断\"),NOT_EMPTY:\"非空判断\"\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: 'null'\n```\n### 常见问题\n\n- 1.selectOne() 查询出多条数据会报错\n```textmate\nselectOne不是存在多条数据时只返回一条！！！\n报错信息：\n   org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException:\n   Expected one result (or null) to be returned by selectOne(), but found: 2\n解决方法:\n    1.手动添加\n    wrapper最后加上(最好带上排序，每次返回固定的值) .last(\"limit 1\")\n    2.切面统一处理,如下\n```\n```java\n@Aspect\n@Component\npublic class MybatisPlusAspect {\n\n    // 配置织入点\n    @Pointcut(\"execution(public * com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(..))\")\n    public void selectOneAspect() {\n    }\n\n    @Before(\"selectOneAspect()\")\n    public void beforeSelect(JoinPoint point) {\n        Object arg = point.getArgs()[0];\n        if (arg instanceof AbstractWrapper) {\n            arg = (AbstractWrapper) arg;\n            ((AbstractWrapper) arg).last(\"limit 1\");\n        }\n    }\n}\n```\n\n### Idea生成代码插件推荐\n- [EasyCode-MybatisCodeHelper](https://plugins.jetbrains.com/plugin/13847-easycode-mybatiscodehelper)\n","slug":"backend/java/utils/mybatis-plus","published":1,"updated":"2021-03-20T06:40:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyry3003gjrnvdor7db8p","content":"<ul>\n<li><a href=\"https://mp.baomidou.com/\">官网</a></li>\n</ul>\n<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><pre><code class=\"yaml\">#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:&quot;数据库ID自增&quot;, INPUT:&quot;用户输入ID&quot;, ID_WORKER:&quot;全局唯一ID (数字类型唯一ID)&quot;, UUID:&quot;全局唯一ID UUID&quot;;\n      id-type: AUTO\n      #字段策略 IGNORED:&quot;忽略判断&quot;,NOT_NULL:&quot;非 NULL 判断&quot;),NOT_EMPTY:&quot;非空判断&quot;\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: &#39;null&#39;</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li><p>1.selectOne() 查询出多条数据会报错</p>\n<pre><code class=\"textmate\">selectOne不是存在多条数据时只返回一条！！！\n报错信息：\n org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException:\n Expected one result (or null) to be returned by selectOne(), but found: 2\n解决方法:\n  1.手动添加\n  wrapper最后加上(最好带上排序，每次返回固定的值) .last(&quot;limit 1&quot;)\n  2.切面统一处理,如下</code></pre>\n<pre><code class=\"java\">@Aspect\n@Component\npublic class MybatisPlusAspect &#123;\n\n  // 配置织入点\n  @Pointcut(&quot;execution(public * com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(..))&quot;)\n  public void selectOneAspect() &#123;\n  &#125;\n\n  @Before(&quot;selectOneAspect()&quot;)\n  public void beforeSelect(JoinPoint point) &#123;\n      Object arg = point.getArgs()[0];\n      if (arg instanceof AbstractWrapper) &#123;\n          arg = (AbstractWrapper) arg;\n          ((AbstractWrapper) arg).last(&quot;limit 1&quot;);\n      &#125;\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"Idea生成代码插件推荐\"><a href=\"#Idea生成代码插件推荐\" class=\"headerlink\" title=\"Idea生成代码插件推荐\"></a>Idea生成代码插件推荐</h3><ul>\n<li><a href=\"https://plugins.jetbrains.com/plugin/13847-easycode-mybatiscodehelper\">EasyCode-MybatisCodeHelper</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://mp.baomidou.com/\">官网</a></li>\n</ul>\n<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><pre><code class=\"yaml\">#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:&quot;数据库ID自增&quot;, INPUT:&quot;用户输入ID&quot;, ID_WORKER:&quot;全局唯一ID (数字类型唯一ID)&quot;, UUID:&quot;全局唯一ID UUID&quot;;\n      id-type: AUTO\n      #字段策略 IGNORED:&quot;忽略判断&quot;,NOT_NULL:&quot;非 NULL 判断&quot;),NOT_EMPTY:&quot;非空判断&quot;\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: &#39;null&#39;</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li><p>1.selectOne() 查询出多条数据会报错</p>\n<pre><code class=\"textmate\">selectOne不是存在多条数据时只返回一条！！！\n报错信息：\n org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException:\n Expected one result (or null) to be returned by selectOne(), but found: 2\n解决方法:\n  1.手动添加\n  wrapper最后加上(最好带上排序，每次返回固定的值) .last(&quot;limit 1&quot;)\n  2.切面统一处理,如下</code></pre>\n<pre><code class=\"java\">@Aspect\n@Component\npublic class MybatisPlusAspect &#123;\n\n  // 配置织入点\n  @Pointcut(&quot;execution(public * com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(..))&quot;)\n  public void selectOneAspect() &#123;\n  &#125;\n\n  @Before(&quot;selectOneAspect()&quot;)\n  public void beforeSelect(JoinPoint point) &#123;\n      Object arg = point.getArgs()[0];\n      if (arg instanceof AbstractWrapper) &#123;\n          arg = (AbstractWrapper) arg;\n          ((AbstractWrapper) arg).last(&quot;limit 1&quot;);\n      &#125;\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"Idea生成代码插件推荐\"><a href=\"#Idea生成代码插件推荐\" class=\"headerlink\" title=\"Idea生成代码插件推荐\"></a>Idea生成代码插件推荐</h3><ul>\n<li><a href=\"https://plugins.jetbrains.com/plugin/13847-easycode-mybatiscodehelper\">EasyCode-MybatisCodeHelper</a></li>\n</ul>\n"},{"title":"高并发相关","description":"高并发","date":"2021-11-22T12:06:00.000Z","_content":"\n# 高并发相关\n>高并发相关书籍总结文档\n\n## 基础\n#### 进程的结构\n>由程序段、数据端和进程控制块组成\n```textmate\n线程的大致结构\n线程描述信息、程序计数器和栈内存组成\n\n区别\n1.进程是进程代码段的一次顺序执行流程，一个进程有一个或多个线程组成\n2.线程是CPU调度最小单位；进项是操作系统分配资源的最小单位。\n3.线程从进程的内部演进而来。\n4.进程之间相互独立；进程中的各个线程不完全独立，共享进程的方法区内存、堆内存、系统资源等\n5.切换速度不同： 线程上下文切换比进程上下文切换速度快。\n```\n\n#### Java线程和OS线程关系\n```textmate\n一对一模型，缺点是创建一个用户线程也要创建一个内核线程，开销大\n```\n\n#### Java线程底层实现\n```textmate\nWindows上采用Win32 API实现\nUNIX和Linux采用Pthread( POSIX标准的扩展，提供用户级或内核级库)\n```\n\n#### JDK创建Linux线程源码\n```textmate\nsrc/hotspot/os/linux/os_linux.cpp\n```\n\n#### 创建线程的方式\n```textmate\nThread/Runnable/FutureTask/线程池(ThreadPoolExecutor)\n\nSynchronousQueued(同步队列)\n必须有take线程在阻塞等待，offer操作才能成功；否则会为新任务开一条新线程去执行\n\n关闭线程池方法\nshutdown/shutdownNow/awaitTermination\n```\n\n#### 确定线程池的线程数\n```textmate\n分类：\nIO密集型   最佳线程数 = CPU核心线程的2倍\nCPU密集型  最佳线程数 = CPU核心线程数量\n混合型     最佳线程数 = ((线程等待时间+线程 CPU 时间)/线程 CPU 时间 )* CPU 核数 = 最佳线程数目 =(线程等待时间与线程 CPU 时间之比 + 1)* CPU 核数\n```\n\n#### Java对象的三个部分\n```textmate\n1.对象头\n对象头包括三个字段，\nMark Word(标记字)，用于存储自身运行时的数据 例如 GC 标志位、哈希码、锁状态等信息。\nClass Pointer(类对象指针)，用于存放方法区 Class 对象的地址，虚拟机通 过这个指针来确定这个对象是哪个类的实例。\nArray Length(数组长度)。如果对象是一个 Java 数组，那么此字段必须有， 用于记录数组长度的数据;如果对象不是一个 Java 数组，那么此字段不存在，所以这是一个可选 字段。\n\n2.对象体\n对象体包含了对象的实例变量(成员变量)。用于成员属性值，包括父类的成员属性值。这 部分内存按 4 字节对齐。\n\n3.对齐字节\n对齐字节也叫做填充对齐，其作用是用来保证 Java 对象在所占内存字节数为 8 的倍数(8N bytes)。HotSpot VM 的内存管理要求对象起始地址必须是 8 字节的整数倍。对象头本身是 8 的 倍数，当对象的实例变量数据不是 8 的倍数，便需要填充数据来保证 8 字节的对齐。\n```\n\n#### 对象结构中的核心字段作用\n```textmate\n(1)Mark Word(标记字)字段主要用来表示对象的线程锁状态，另外还可以用来配合 GC、 存放该对象的 hashCode。\n(2)Class Pointer(类对象指针)字段是一个指向方法区中 Class 信息的指针，意味着该对象 可随时知道自己是哪个 Class 的实例。\n(3)Array Length(数组长度)字段也占用 32 位(在 32 位 JVM 中)的字节，这是可选的， 只有当本对象是一个数组对象时才会有这个部分。\n(4)对象体用于保存对象属性值，是对象的主体部分，占用的内存空间大小取决于对象的属 性数量和类型。\n(5)对齐字节并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。当对象实 例数据部分没有对齐(8 字节的整数倍)时，就需要通过对齐填充来补全。\n```\n\n#### 对象结构中的字段长度\n```textmate\nMark Word、Class Pointer、Array Length 等字段的长度，都与 JVM 的位数有关。Mark Word 的长度为 JVM 的一个 Word(字)大小，也就是说 32 位 JVM 的 Mark Word 为 32 位，64 位 JVM 为 64 位。Class Pointer(类对象指针)字段的长度也为 JVM 的一个 Word(字)大小，即 32 位的 JVM为32位，64位的JVM为64位。\n所以，在 32 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 32 位的;在 64 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 64 位的。\n对于对象指针而言，如果 JVM 中对象数量过多，使用 64 位的指针将浪费大量内存，通过简 单统计，64 位的 JVM 将会比 32 位的 JVM 多耗费 50%的内存。为了节约内存可以使用选项 +UseCompressedOops 开启指针压缩。选项 UseCompressedOops 中的 Oop 部分为 Ordinary object pointer 普通对象指针的缩写。\n\n如果开启 UseCompressedOops 选项，以下类型的指针将从 64 位压缩至 32 位:\n1.Class 对象的属性指针(即静态变量)\n2.Object 对象的属性指针(即成员变量)\n3.普通对象数组的元素指针\n当然，也不是所有的指针都会压缩，一些特殊类型的指针不会压缩，比如指向 PermGen(永 久代)的 Class 对象指针(JDK8 中指向元空间的 Class 对象指针)、本地变量、堆栈元素、入参、返 回值和 NULL 指针等。\n```\n\n#### JOL\n```textmate\nJOL 全称为 Java Object Layout，是分析 JVM 中对象的结构布局的工具，该工具大量使用了 Unsafe、JVMTI 来解码内部布局情况，其分析结果相对比较精准的。要使用 JOL 工具，先引入 Maven 的依赖坐标:\n<!--Java Object Layout --> \n<dependency>\n\t<groupId>org.openjdk.jol</groupId> \n\t<artifactId>jol-core</artifactId> \n\t<version>0.11</version>\n</dependency>\n```\n\n#### 锁分类\n> 偏向锁、轻量级锁、重量级锁\n#### 偏向锁\n```textmate\n偏向锁的核心原理是:\n\t如果不存在线程竞争的一个线程获得了锁，那么锁就进入偏向状态， 此时 Mark Word 的结构变为偏向锁结构，锁对象的锁标志位(lock)被改为 01，偏向标志位 (biased_lock)被改为 1，然后线程的 ID 记录在锁对象的 Mark Word 中(使用 CAS 操作完成)以后该线程获取锁的时，判断一下线程 ID 和标志位，就可以直接进入同步块，连 CAS 操作都不 需要，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。\n偏向锁的主要作用:\n\t消除无竞争情况下的同步原语，进一步提升程序性能，所在于没有锁竞 争的场合，偏向锁有很好的优化效果。但是，一旦有第二条线程需要竞争锁，那么偏向模式立即 结束，进入轻量级锁的状态。\n偏向锁的缺点:\n\t如果锁对象时常被多条线程竞争，那偏向锁就是多余的，并且其撤销的过程 会带来一些性能开销。\n```\n\n#### 轻量级锁\n```textmate\n轻量锁存在的目的是尽可能不用动用操作系统层面的互斥锁，因为那个性能会比较差，轻量级锁是一种自旋锁；\n轻量级锁主要有两种:\n\t(1)普通自旋锁，\n\t\t所谓普通自旋锁，就是指当有线程来竞争锁时，抢锁线程会在原地循环等待，而不是被阻塞，直到那个占有锁的线程释放锁之后，这个抢锁线程就可以马上获得锁的。默认情况下，自旋的次数为 10 次，用户可以通过-XX:PreBlockSpin 选项来进行更改。\n\t(2)自适应自旋锁。\n\t\t所谓自适应自旋锁，就是等待线程空循环的自旋次数并非是固定的，而是会动态着根据实际 情况来改变自旋等待的次数，自旋次数由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定\nJDK1.6 的轻量级锁使用的是普通自旋锁，且需要使用 -XX:+UseSpinning 选 项手工开启。JDK1.7 后，轻量级锁使用自适应自旋锁，JVM 启动时自动开启，且自 旋时间由 JVM 自动控制。\n```\n\n#### 重量级锁\n```textmate\nJVM 中每个对象都会有一个监视器，监视器和对象一起创建、销毁\nMonitor 是一种同步工具，也可以说是一种同步机制，主要特点是:\n(1)同步。\n\tMonitor 所保护的临界区代码，是互斥的执行。一个 Monitor 是一个运行许可，任一个线程进入临界区代码都需要获得这个许可，离开时把许可归还。\n(2)协作。\n\tMonitor 提供 Signal 机制:允许正持有许可的线程暂时放弃许可进入阻塞等待状 态，等待其他线程发送 Signal去唤醒;其他拥有许可的线程可以发送 Signal，唤醒正在阻塞等待 的线程，让它可以重新获得许可并启动执行。\n```\n\n#### 三种内置锁的对比\n|锁|优点|缺点|适用场景|\n|---|---|---|---|\n|偏向锁|加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距|如果线程间存在锁竞争，会带来额外的锁撤销的消耗|适用于只有一个线程访问 临界区场景|\n|轻量级锁|竞争的线程不会阻塞，提高了程序的响应速度|抢不到锁的线程会CAS自旋等待，消耗CPU|锁占用时间短，吞吐量低|\n|重量级锁|线程竞争不使用自旋，不会消耗CPU|线程阻塞，响应时间缓慢|锁占用时间较长，吞吐量高|\n\n#### 线程通信\n```textmate\n定义:当多个线程共同操作共享的资源时，线程间通过某种方式互相告 知自己的状态，以避免无效的资源争夺。\n分类:等待-通知、共享内存、管道流。\n1.等待-通知\n\t\"等待-通知\" 是Java中使用最为普遍的线程间通信方式，其最为经典的案例就是 “生产者-消费者”模式。\n2.共享内存\n\t通过实现Runnable或内部类的形式，共享同一个变量\n3.管道通信就是使用java.io.PipedInputStream 和 java.io.PipedOutputStream进行通信\n\nwait 方法的原理:\n\t首先 JVM 会释放当前线程的对象锁 Monitor 的 Owner 资格;其次 JVM 会 当前线程移入 Monitor 的 WaitSet 队列，而这些操作都和对象锁 Monitor 是相关的。\n\t所以，wait 方法必须在 synchronized 同步块的内部使用。在当前线程执行 wait 方法前，必须 通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\nnotify 方法的原理:\n\tJVM 从对象锁的 Monitor 的 WaitSet 队列，移动一条线程到其 EntryList 队列，这些操作都与对象锁的 Monitor 有关。\n\t所以，notify 方法也必须在 synchronized 同步块的内部使用。在执行 notify 方法前，当前线 程也必须通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\n\n```\n\n### CAS\n#### ABA问题解决方案\n```textmate\nAtomicStampedReference  compareAndSet\nAtomicMarkableReference   \n\tAtomicMarkableReference适用只要知道对象是否有被修改过，而不适用于对象被反复修改的 场景。\n```\n\n#### 提高高并发场景下CAS操作性能\n```textmate\nLongAdder 以空间换时间的方式提升高并发场景下 CAS 操作性能\n\tLongAdder 的实现思路，与 ConcurrentHashMap 中分段锁基本原理非常相似，本质上，都是不同的线程在不同的单元上进行操作，这样减少了线程竞争，提高了并发效率\n```\n\n### 可见性和缓存一致性\n```textmate\n1. 总线锁\n\t效率低，开销大\n2. 缓存锁\n\t MESI 协议，保证缓存一致性\n\t 缓存一致性:缓存一致性机制就整体来说，是当某块CPU对缓存中的数据进行操作了之后， 就通知其他 CPU 放弃储存在它们内部的缓存，或者从主内存中重新读取\n\n    CPU 对 Cache 副 本如何与主存内容保持一致有几种写入方式可供选择，主要的写入方式有以下两种\n\t1)Write-through(直写模式)  更新低一级缓存和存储器，数据写入速度慢\n\t2)Write-back(回写模式)  只写入缓存，发现数据有变动，才将数据更新到存储器\n```\n\n#### MESI协议解释\n```textmate\nM: 被修改(Modified)\nE: 独享的(Exclusive)\nS: 共享的(Shared)\nI: 无效的(Invalid)\n```\n\n#### 指令重排\n```textmate\nAs-if-Serial规则： 不管如何重排序，都必须保证代码在单线程下的运行正确。\n\n扩展:\n\tJIT 是 Just In Time 的缩写, 也就是“即时编译器”。JVM 读入“.class” 文件的字 节码后，默认情况下是解释执行的。但是对于运行频率很高(如>5000 次)的字节码， JVM 采用了 JIT 技术，将直接编译为机器指令，以提高性能。\n```\n\n#### 硬件层面的内存屏障\n```texxtmate\n1. 硬件层的内存屏障定义\n\t内存屏障(Memory Barrier)又称内存栅栏(Memory Fences)，是让一个 CPU 高速缓存的内 存状态对其他 CPU 内核可见的一项技术，也是一项保障跨 CPU 内核有序执行指令的技术。\n\t硬件层常用的内存屏障分为三种:读屏障(Load Barrier)、写屏障(Store Barrier)、全屏障 (Full Barrier)。\n\n2.作用\n\t1).阻止屏障两侧的指令重排序\n\t2).强制让高速缓存的数据失效\n```\n\n#### JMM(Java内存模型)\n> JMM 并不像 JVM 内存结构一样是真实存在的运行实体，更多体现为一种规范和规则\n```textmate\n1.核心的价值在于解决可见性和有序性。\n2.JMM的另一大价值，在于能屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证最终的一致。\n\nJava 内存模型的规定:\n\t(1)所有变量存储在主内存中。 \n\t(2)每个线程都有自己的工作内存，且对变量的操作都是在工作内存中进行。 \n\t(3)不同线程之间无法直接访问彼此工作内存中的变量，要想访问只能通过主内存来传递。\n\nvolatile内存屏障操作\n\tLoadLoad、LoadStore、StoreStore、StoreLoad\n\nHappens-Before(先行发生)规则\n```\n\n## 显式锁\n### Lock\n```textmate\nLock锁对比Java内置锁\n1.可中断获取锁\n2.可非阻塞获取锁\n3.可限时抢锁\n```\n\n### ReentrantLock\n```textmate\n1)“可重入”含义:表示该锁能够支持一个线程对资源的重复加锁，也就是说，一个线程 可以多次进入同一个锁所同步的临界区代码块。比如，同一线程在外层函数获得锁后，在内层函 数能再次获取该锁，甚至多次抢占到同一把锁。\n2)“独占”含义:在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能等待， 只有拥有锁的线程释放了锁后，其他的线程才能够获取锁。\n```\n\n### Condition\n>  Lock代替了synchronized方法和语句的使用，而Condition代替了对象监视器方法的使用\n```textmate\nCondition实例本质上绑定到一个锁。要获取特定Lock实例的Condition实例，请使用其newCondition()方法。\n\n基于显示锁进行“等待-通知”方式的线程间通信接口\nCondition 的“等待-通知”方法和 Object 的“等待-通知”方法的语义等效关系为:\n\t- Condition 类的 awiat 方法和 Object 类的 wait 方法等效。\n\t- Condition 类的 signal 方法和 Object 类的 notify 方法等效。\n\t- Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效。\nCondition 对象的 signal(通知)方法和同一个对象的 await(等待)方法是一一配对使用的， 也就是说，一个 Condition 对象的 signal(或 signalAll)方法，不能去唤醒其他 Condition 对象上的 await 线程。\n```\n\n### LockSupport\n> LockSupport 是 JUC 提供的一线程阻塞与唤醒的工具类，该工具类可以让线程在任意位置阻 塞和唤醒，其所有的方法都是静态方法。\n\n- LockSupport.park()和 Thread.sleep()的区别\n```textmate\n从功能上说，LockSupport.park()与 Thread.sleep()方法类似，都是让线程阻塞，二者的区别如下:\n(1)Thread.sleep()没法从外部唤醒，只能自己醒过来;而被LockSupport.park()方法阻塞的线程可以通过调用LockSupport.unpark()方法去唤醒。\n(2)Thread.sleep()方法声明了 InterruptedException 中断异常，这是一个受检异常，调用者需要捕获这个异常或者再抛出;而使用 LockSupport.park()方法时，不需要捕获中断异常。\n(3)LockSupport.park()方法、Thread.sleep()方法所阻塞的线程，当被阻塞线程的 Thread.interrup(t方法被调用时，被阻塞线程都会响应线程的中断信号，唤醒线程的执行。不同的是， 二者对中断信号的响应的方式不同。LockSupport.park( )方法不会抛出InterruptedException异常， 仅仅设置了线程的中断标志;而Thread.sleep()方法还会抛出InterruptedException 异常。\n(4)与 Thread.sleep()相比，使用 LockSupport.park()能更精准、更加灵活的阻塞、唤醒指定 线程。\n(5)Thread.sleep()本身就是一个 Native 方法;LockSupport.park()并不是一个 Native 方法，只是调用了一个Unsafe 类的Native方法(名字也叫 park)去实现。\n(6)LockSupport.park()方法还允许设置一个 Blocker 对象，主要用来给监视工具或诊断工具 确定线程受阻塞的原因。\n```\n\n-  LockSupport.park( )与 Object.wait()的区别\n```textmate\nLockSupport.park()与 Object.wait()方法也类似，都是让线程阻塞，二者的区别如下:\n(1)Object.wait()方法需要在synchronized块中执行;而LockSupport.park()可以在任意地方执行。\n(2)当被阻塞线程被中断时，Object.wait()方法抛出了中断异常，调用者需要捕获或者再抛出;当被阻塞线程被中断时，LockSupport.park()不会抛出异常，使用时不需要处理中断异常。\n(3)线程如果在Object.wait()执行之前去执行Object.notify()，会抛出 IllegalMonitorStateException异常，是不被允许的;而线程如果在LockSupport.park()执行之前去执行LockSupport.unPark()，不会抛出任何异常，是被允许的。\n```\n\n### 显式锁分类\n```textmate\n1. 可重入锁与不可重入锁\n\t可重入: 递归锁，同一个线程可重复获取当前对象的锁\n\t不可重入: 同一时间，只有一个线程能持有对象的锁\n2. 悲观锁和乐观锁\n\t悲观锁: 每次操作都会加锁\n\t乐观锁: 基于AQS实现的锁都是乐观锁，操作不会加锁，采取在写时先读出当前版本号，然后加锁操作(失败则重复该操作)\n\t悲观锁适用于写多读少的场景，遇到高并发写时性能高；乐观锁用于读多写少的情况\n3. 公平锁和非公平锁\n\t公平锁就是保障了各个线程获取锁都是按照顺序来的，先到的线程先获取锁，抢锁成功的次序体现为 FIFO(先进先出)顺序\n4. 可中断锁和不可中断锁\n\t在抢锁过程中能通过某些方法去终止抢占过程，那就是可中断锁，否则就是不可 中断锁。\n5. 共享锁和独占锁\n\t“独占锁”指的是每次只能有一个线程能持有的锁。\n\t“共享锁”允许多个线程同时获取锁，容许线程并发进入临界区。\n\n其他\n\tCAS自旋锁可能会导致\"总线风暴\"，CLH 自旋锁(基于队列(具体为单向链表)排队的一种自旋锁),避免了总线风暴\n\tAQS是CLH的一个变种\n\n```\n\n\n### 高并发设计模式\n```textmate\n1.安全的单例模式\n2.Master-Worker模式\n3.ForkJoin模式\n4.生产者消费者模式\n5.Future模式\n```\n","source":"_posts/backend/java/thread/concurrent.md","raw":"---\ntitle: 高并发相关\ndescription: 高并发\ndate: 2021-11-22 20:06:00\ntags:\n- 高并发\ncategories:\n- 后端\n- 高并发\n---\n\n# 高并发相关\n>高并发相关书籍总结文档\n\n## 基础\n#### 进程的结构\n>由程序段、数据端和进程控制块组成\n```textmate\n线程的大致结构\n线程描述信息、程序计数器和栈内存组成\n\n区别\n1.进程是进程代码段的一次顺序执行流程，一个进程有一个或多个线程组成\n2.线程是CPU调度最小单位；进项是操作系统分配资源的最小单位。\n3.线程从进程的内部演进而来。\n4.进程之间相互独立；进程中的各个线程不完全独立，共享进程的方法区内存、堆内存、系统资源等\n5.切换速度不同： 线程上下文切换比进程上下文切换速度快。\n```\n\n#### Java线程和OS线程关系\n```textmate\n一对一模型，缺点是创建一个用户线程也要创建一个内核线程，开销大\n```\n\n#### Java线程底层实现\n```textmate\nWindows上采用Win32 API实现\nUNIX和Linux采用Pthread( POSIX标准的扩展，提供用户级或内核级库)\n```\n\n#### JDK创建Linux线程源码\n```textmate\nsrc/hotspot/os/linux/os_linux.cpp\n```\n\n#### 创建线程的方式\n```textmate\nThread/Runnable/FutureTask/线程池(ThreadPoolExecutor)\n\nSynchronousQueued(同步队列)\n必须有take线程在阻塞等待，offer操作才能成功；否则会为新任务开一条新线程去执行\n\n关闭线程池方法\nshutdown/shutdownNow/awaitTermination\n```\n\n#### 确定线程池的线程数\n```textmate\n分类：\nIO密集型   最佳线程数 = CPU核心线程的2倍\nCPU密集型  最佳线程数 = CPU核心线程数量\n混合型     最佳线程数 = ((线程等待时间+线程 CPU 时间)/线程 CPU 时间 )* CPU 核数 = 最佳线程数目 =(线程等待时间与线程 CPU 时间之比 + 1)* CPU 核数\n```\n\n#### Java对象的三个部分\n```textmate\n1.对象头\n对象头包括三个字段，\nMark Word(标记字)，用于存储自身运行时的数据 例如 GC 标志位、哈希码、锁状态等信息。\nClass Pointer(类对象指针)，用于存放方法区 Class 对象的地址，虚拟机通 过这个指针来确定这个对象是哪个类的实例。\nArray Length(数组长度)。如果对象是一个 Java 数组，那么此字段必须有， 用于记录数组长度的数据;如果对象不是一个 Java 数组，那么此字段不存在，所以这是一个可选 字段。\n\n2.对象体\n对象体包含了对象的实例变量(成员变量)。用于成员属性值，包括父类的成员属性值。这 部分内存按 4 字节对齐。\n\n3.对齐字节\n对齐字节也叫做填充对齐，其作用是用来保证 Java 对象在所占内存字节数为 8 的倍数(8N bytes)。HotSpot VM 的内存管理要求对象起始地址必须是 8 字节的整数倍。对象头本身是 8 的 倍数，当对象的实例变量数据不是 8 的倍数，便需要填充数据来保证 8 字节的对齐。\n```\n\n#### 对象结构中的核心字段作用\n```textmate\n(1)Mark Word(标记字)字段主要用来表示对象的线程锁状态，另外还可以用来配合 GC、 存放该对象的 hashCode。\n(2)Class Pointer(类对象指针)字段是一个指向方法区中 Class 信息的指针，意味着该对象 可随时知道自己是哪个 Class 的实例。\n(3)Array Length(数组长度)字段也占用 32 位(在 32 位 JVM 中)的字节，这是可选的， 只有当本对象是一个数组对象时才会有这个部分。\n(4)对象体用于保存对象属性值，是对象的主体部分，占用的内存空间大小取决于对象的属 性数量和类型。\n(5)对齐字节并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。当对象实 例数据部分没有对齐(8 字节的整数倍)时，就需要通过对齐填充来补全。\n```\n\n#### 对象结构中的字段长度\n```textmate\nMark Word、Class Pointer、Array Length 等字段的长度，都与 JVM 的位数有关。Mark Word 的长度为 JVM 的一个 Word(字)大小，也就是说 32 位 JVM 的 Mark Word 为 32 位，64 位 JVM 为 64 位。Class Pointer(类对象指针)字段的长度也为 JVM 的一个 Word(字)大小，即 32 位的 JVM为32位，64位的JVM为64位。\n所以，在 32 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 32 位的;在 64 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 64 位的。\n对于对象指针而言，如果 JVM 中对象数量过多，使用 64 位的指针将浪费大量内存，通过简 单统计，64 位的 JVM 将会比 32 位的 JVM 多耗费 50%的内存。为了节约内存可以使用选项 +UseCompressedOops 开启指针压缩。选项 UseCompressedOops 中的 Oop 部分为 Ordinary object pointer 普通对象指针的缩写。\n\n如果开启 UseCompressedOops 选项，以下类型的指针将从 64 位压缩至 32 位:\n1.Class 对象的属性指针(即静态变量)\n2.Object 对象的属性指针(即成员变量)\n3.普通对象数组的元素指针\n当然，也不是所有的指针都会压缩，一些特殊类型的指针不会压缩，比如指向 PermGen(永 久代)的 Class 对象指针(JDK8 中指向元空间的 Class 对象指针)、本地变量、堆栈元素、入参、返 回值和 NULL 指针等。\n```\n\n#### JOL\n```textmate\nJOL 全称为 Java Object Layout，是分析 JVM 中对象的结构布局的工具，该工具大量使用了 Unsafe、JVMTI 来解码内部布局情况，其分析结果相对比较精准的。要使用 JOL 工具，先引入 Maven 的依赖坐标:\n<!--Java Object Layout --> \n<dependency>\n\t<groupId>org.openjdk.jol</groupId> \n\t<artifactId>jol-core</artifactId> \n\t<version>0.11</version>\n</dependency>\n```\n\n#### 锁分类\n> 偏向锁、轻量级锁、重量级锁\n#### 偏向锁\n```textmate\n偏向锁的核心原理是:\n\t如果不存在线程竞争的一个线程获得了锁，那么锁就进入偏向状态， 此时 Mark Word 的结构变为偏向锁结构，锁对象的锁标志位(lock)被改为 01，偏向标志位 (biased_lock)被改为 1，然后线程的 ID 记录在锁对象的 Mark Word 中(使用 CAS 操作完成)以后该线程获取锁的时，判断一下线程 ID 和标志位，就可以直接进入同步块，连 CAS 操作都不 需要，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。\n偏向锁的主要作用:\n\t消除无竞争情况下的同步原语，进一步提升程序性能，所在于没有锁竞 争的场合，偏向锁有很好的优化效果。但是，一旦有第二条线程需要竞争锁，那么偏向模式立即 结束，进入轻量级锁的状态。\n偏向锁的缺点:\n\t如果锁对象时常被多条线程竞争，那偏向锁就是多余的，并且其撤销的过程 会带来一些性能开销。\n```\n\n#### 轻量级锁\n```textmate\n轻量锁存在的目的是尽可能不用动用操作系统层面的互斥锁，因为那个性能会比较差，轻量级锁是一种自旋锁；\n轻量级锁主要有两种:\n\t(1)普通自旋锁，\n\t\t所谓普通自旋锁，就是指当有线程来竞争锁时，抢锁线程会在原地循环等待，而不是被阻塞，直到那个占有锁的线程释放锁之后，这个抢锁线程就可以马上获得锁的。默认情况下，自旋的次数为 10 次，用户可以通过-XX:PreBlockSpin 选项来进行更改。\n\t(2)自适应自旋锁。\n\t\t所谓自适应自旋锁，就是等待线程空循环的自旋次数并非是固定的，而是会动态着根据实际 情况来改变自旋等待的次数，自旋次数由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定\nJDK1.6 的轻量级锁使用的是普通自旋锁，且需要使用 -XX:+UseSpinning 选 项手工开启。JDK1.7 后，轻量级锁使用自适应自旋锁，JVM 启动时自动开启，且自 旋时间由 JVM 自动控制。\n```\n\n#### 重量级锁\n```textmate\nJVM 中每个对象都会有一个监视器，监视器和对象一起创建、销毁\nMonitor 是一种同步工具，也可以说是一种同步机制，主要特点是:\n(1)同步。\n\tMonitor 所保护的临界区代码，是互斥的执行。一个 Monitor 是一个运行许可，任一个线程进入临界区代码都需要获得这个许可，离开时把许可归还。\n(2)协作。\n\tMonitor 提供 Signal 机制:允许正持有许可的线程暂时放弃许可进入阻塞等待状 态，等待其他线程发送 Signal去唤醒;其他拥有许可的线程可以发送 Signal，唤醒正在阻塞等待 的线程，让它可以重新获得许可并启动执行。\n```\n\n#### 三种内置锁的对比\n|锁|优点|缺点|适用场景|\n|---|---|---|---|\n|偏向锁|加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距|如果线程间存在锁竞争，会带来额外的锁撤销的消耗|适用于只有一个线程访问 临界区场景|\n|轻量级锁|竞争的线程不会阻塞，提高了程序的响应速度|抢不到锁的线程会CAS自旋等待，消耗CPU|锁占用时间短，吞吐量低|\n|重量级锁|线程竞争不使用自旋，不会消耗CPU|线程阻塞，响应时间缓慢|锁占用时间较长，吞吐量高|\n\n#### 线程通信\n```textmate\n定义:当多个线程共同操作共享的资源时，线程间通过某种方式互相告 知自己的状态，以避免无效的资源争夺。\n分类:等待-通知、共享内存、管道流。\n1.等待-通知\n\t\"等待-通知\" 是Java中使用最为普遍的线程间通信方式，其最为经典的案例就是 “生产者-消费者”模式。\n2.共享内存\n\t通过实现Runnable或内部类的形式，共享同一个变量\n3.管道通信就是使用java.io.PipedInputStream 和 java.io.PipedOutputStream进行通信\n\nwait 方法的原理:\n\t首先 JVM 会释放当前线程的对象锁 Monitor 的 Owner 资格;其次 JVM 会 当前线程移入 Monitor 的 WaitSet 队列，而这些操作都和对象锁 Monitor 是相关的。\n\t所以，wait 方法必须在 synchronized 同步块的内部使用。在当前线程执行 wait 方法前，必须 通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\nnotify 方法的原理:\n\tJVM 从对象锁的 Monitor 的 WaitSet 队列，移动一条线程到其 EntryList 队列，这些操作都与对象锁的 Monitor 有关。\n\t所以，notify 方法也必须在 synchronized 同步块的内部使用。在执行 notify 方法前，当前线 程也必须通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\n\n```\n\n### CAS\n#### ABA问题解决方案\n```textmate\nAtomicStampedReference  compareAndSet\nAtomicMarkableReference   \n\tAtomicMarkableReference适用只要知道对象是否有被修改过，而不适用于对象被反复修改的 场景。\n```\n\n#### 提高高并发场景下CAS操作性能\n```textmate\nLongAdder 以空间换时间的方式提升高并发场景下 CAS 操作性能\n\tLongAdder 的实现思路，与 ConcurrentHashMap 中分段锁基本原理非常相似，本质上，都是不同的线程在不同的单元上进行操作，这样减少了线程竞争，提高了并发效率\n```\n\n### 可见性和缓存一致性\n```textmate\n1. 总线锁\n\t效率低，开销大\n2. 缓存锁\n\t MESI 协议，保证缓存一致性\n\t 缓存一致性:缓存一致性机制就整体来说，是当某块CPU对缓存中的数据进行操作了之后， 就通知其他 CPU 放弃储存在它们内部的缓存，或者从主内存中重新读取\n\n    CPU 对 Cache 副 本如何与主存内容保持一致有几种写入方式可供选择，主要的写入方式有以下两种\n\t1)Write-through(直写模式)  更新低一级缓存和存储器，数据写入速度慢\n\t2)Write-back(回写模式)  只写入缓存，发现数据有变动，才将数据更新到存储器\n```\n\n#### MESI协议解释\n```textmate\nM: 被修改(Modified)\nE: 独享的(Exclusive)\nS: 共享的(Shared)\nI: 无效的(Invalid)\n```\n\n#### 指令重排\n```textmate\nAs-if-Serial规则： 不管如何重排序，都必须保证代码在单线程下的运行正确。\n\n扩展:\n\tJIT 是 Just In Time 的缩写, 也就是“即时编译器”。JVM 读入“.class” 文件的字 节码后，默认情况下是解释执行的。但是对于运行频率很高(如>5000 次)的字节码， JVM 采用了 JIT 技术，将直接编译为机器指令，以提高性能。\n```\n\n#### 硬件层面的内存屏障\n```texxtmate\n1. 硬件层的内存屏障定义\n\t内存屏障(Memory Barrier)又称内存栅栏(Memory Fences)，是让一个 CPU 高速缓存的内 存状态对其他 CPU 内核可见的一项技术，也是一项保障跨 CPU 内核有序执行指令的技术。\n\t硬件层常用的内存屏障分为三种:读屏障(Load Barrier)、写屏障(Store Barrier)、全屏障 (Full Barrier)。\n\n2.作用\n\t1).阻止屏障两侧的指令重排序\n\t2).强制让高速缓存的数据失效\n```\n\n#### JMM(Java内存模型)\n> JMM 并不像 JVM 内存结构一样是真实存在的运行实体，更多体现为一种规范和规则\n```textmate\n1.核心的价值在于解决可见性和有序性。\n2.JMM的另一大价值，在于能屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证最终的一致。\n\nJava 内存模型的规定:\n\t(1)所有变量存储在主内存中。 \n\t(2)每个线程都有自己的工作内存，且对变量的操作都是在工作内存中进行。 \n\t(3)不同线程之间无法直接访问彼此工作内存中的变量，要想访问只能通过主内存来传递。\n\nvolatile内存屏障操作\n\tLoadLoad、LoadStore、StoreStore、StoreLoad\n\nHappens-Before(先行发生)规则\n```\n\n## 显式锁\n### Lock\n```textmate\nLock锁对比Java内置锁\n1.可中断获取锁\n2.可非阻塞获取锁\n3.可限时抢锁\n```\n\n### ReentrantLock\n```textmate\n1)“可重入”含义:表示该锁能够支持一个线程对资源的重复加锁，也就是说，一个线程 可以多次进入同一个锁所同步的临界区代码块。比如，同一线程在外层函数获得锁后，在内层函 数能再次获取该锁，甚至多次抢占到同一把锁。\n2)“独占”含义:在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能等待， 只有拥有锁的线程释放了锁后，其他的线程才能够获取锁。\n```\n\n### Condition\n>  Lock代替了synchronized方法和语句的使用，而Condition代替了对象监视器方法的使用\n```textmate\nCondition实例本质上绑定到一个锁。要获取特定Lock实例的Condition实例，请使用其newCondition()方法。\n\n基于显示锁进行“等待-通知”方式的线程间通信接口\nCondition 的“等待-通知”方法和 Object 的“等待-通知”方法的语义等效关系为:\n\t- Condition 类的 awiat 方法和 Object 类的 wait 方法等效。\n\t- Condition 类的 signal 方法和 Object 类的 notify 方法等效。\n\t- Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效。\nCondition 对象的 signal(通知)方法和同一个对象的 await(等待)方法是一一配对使用的， 也就是说，一个 Condition 对象的 signal(或 signalAll)方法，不能去唤醒其他 Condition 对象上的 await 线程。\n```\n\n### LockSupport\n> LockSupport 是 JUC 提供的一线程阻塞与唤醒的工具类，该工具类可以让线程在任意位置阻 塞和唤醒，其所有的方法都是静态方法。\n\n- LockSupport.park()和 Thread.sleep()的区别\n```textmate\n从功能上说，LockSupport.park()与 Thread.sleep()方法类似，都是让线程阻塞，二者的区别如下:\n(1)Thread.sleep()没法从外部唤醒，只能自己醒过来;而被LockSupport.park()方法阻塞的线程可以通过调用LockSupport.unpark()方法去唤醒。\n(2)Thread.sleep()方法声明了 InterruptedException 中断异常，这是一个受检异常，调用者需要捕获这个异常或者再抛出;而使用 LockSupport.park()方法时，不需要捕获中断异常。\n(3)LockSupport.park()方法、Thread.sleep()方法所阻塞的线程，当被阻塞线程的 Thread.interrup(t方法被调用时，被阻塞线程都会响应线程的中断信号，唤醒线程的执行。不同的是， 二者对中断信号的响应的方式不同。LockSupport.park( )方法不会抛出InterruptedException异常， 仅仅设置了线程的中断标志;而Thread.sleep()方法还会抛出InterruptedException 异常。\n(4)与 Thread.sleep()相比，使用 LockSupport.park()能更精准、更加灵活的阻塞、唤醒指定 线程。\n(5)Thread.sleep()本身就是一个 Native 方法;LockSupport.park()并不是一个 Native 方法，只是调用了一个Unsafe 类的Native方法(名字也叫 park)去实现。\n(6)LockSupport.park()方法还允许设置一个 Blocker 对象，主要用来给监视工具或诊断工具 确定线程受阻塞的原因。\n```\n\n-  LockSupport.park( )与 Object.wait()的区别\n```textmate\nLockSupport.park()与 Object.wait()方法也类似，都是让线程阻塞，二者的区别如下:\n(1)Object.wait()方法需要在synchronized块中执行;而LockSupport.park()可以在任意地方执行。\n(2)当被阻塞线程被中断时，Object.wait()方法抛出了中断异常，调用者需要捕获或者再抛出;当被阻塞线程被中断时，LockSupport.park()不会抛出异常，使用时不需要处理中断异常。\n(3)线程如果在Object.wait()执行之前去执行Object.notify()，会抛出 IllegalMonitorStateException异常，是不被允许的;而线程如果在LockSupport.park()执行之前去执行LockSupport.unPark()，不会抛出任何异常，是被允许的。\n```\n\n### 显式锁分类\n```textmate\n1. 可重入锁与不可重入锁\n\t可重入: 递归锁，同一个线程可重复获取当前对象的锁\n\t不可重入: 同一时间，只有一个线程能持有对象的锁\n2. 悲观锁和乐观锁\n\t悲观锁: 每次操作都会加锁\n\t乐观锁: 基于AQS实现的锁都是乐观锁，操作不会加锁，采取在写时先读出当前版本号，然后加锁操作(失败则重复该操作)\n\t悲观锁适用于写多读少的场景，遇到高并发写时性能高；乐观锁用于读多写少的情况\n3. 公平锁和非公平锁\n\t公平锁就是保障了各个线程获取锁都是按照顺序来的，先到的线程先获取锁，抢锁成功的次序体现为 FIFO(先进先出)顺序\n4. 可中断锁和不可中断锁\n\t在抢锁过程中能通过某些方法去终止抢占过程，那就是可中断锁，否则就是不可 中断锁。\n5. 共享锁和独占锁\n\t“独占锁”指的是每次只能有一个线程能持有的锁。\n\t“共享锁”允许多个线程同时获取锁，容许线程并发进入临界区。\n\n其他\n\tCAS自旋锁可能会导致\"总线风暴\"，CLH 自旋锁(基于队列(具体为单向链表)排队的一种自旋锁),避免了总线风暴\n\tAQS是CLH的一个变种\n\n```\n\n\n### 高并发设计模式\n```textmate\n1.安全的单例模式\n2.Master-Worker模式\n3.ForkJoin模式\n4.生产者消费者模式\n5.Future模式\n```\n","slug":"backend/java/thread/concurrent","published":1,"updated":"2021-11-22T12:28:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyryb006mjrnv1m1t2iwu","content":"<h1 id=\"高并发相关\"><a href=\"#高并发相关\" class=\"headerlink\" title=\"高并发相关\"></a>高并发相关</h1><blockquote>\n<p>高并发相关书籍总结文档</p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h4 id=\"进程的结构\"><a href=\"#进程的结构\" class=\"headerlink\" title=\"进程的结构\"></a>进程的结构</h4><blockquote>\n<p>由程序段、数据端和进程控制块组成</p>\n</blockquote>\n<pre><code class=\"textmate\">线程的大致结构\n线程描述信息、程序计数器和栈内存组成\n\n区别\n1.进程是进程代码段的一次顺序执行流程，一个进程有一个或多个线程组成\n2.线程是CPU调度最小单位；进项是操作系统分配资源的最小单位。\n3.线程从进程的内部演进而来。\n4.进程之间相互独立；进程中的各个线程不完全独立，共享进程的方法区内存、堆内存、系统资源等\n5.切换速度不同： 线程上下文切换比进程上下文切换速度快。</code></pre>\n<h4 id=\"Java线程和OS线程关系\"><a href=\"#Java线程和OS线程关系\" class=\"headerlink\" title=\"Java线程和OS线程关系\"></a>Java线程和OS线程关系</h4><pre><code class=\"textmate\">一对一模型，缺点是创建一个用户线程也要创建一个内核线程，开销大</code></pre>\n<h4 id=\"Java线程底层实现\"><a href=\"#Java线程底层实现\" class=\"headerlink\" title=\"Java线程底层实现\"></a>Java线程底层实现</h4><pre><code class=\"textmate\">Windows上采用Win32 API实现\nUNIX和Linux采用Pthread( POSIX标准的扩展，提供用户级或内核级库)</code></pre>\n<h4 id=\"JDK创建Linux线程源码\"><a href=\"#JDK创建Linux线程源码\" class=\"headerlink\" title=\"JDK创建Linux线程源码\"></a>JDK创建Linux线程源码</h4><pre><code class=\"textmate\">src/hotspot/os/linux/os_linux.cpp</code></pre>\n<h4 id=\"创建线程的方式\"><a href=\"#创建线程的方式\" class=\"headerlink\" title=\"创建线程的方式\"></a>创建线程的方式</h4><pre><code class=\"textmate\">Thread/Runnable/FutureTask/线程池(ThreadPoolExecutor)\n\nSynchronousQueued(同步队列)\n必须有take线程在阻塞等待，offer操作才能成功；否则会为新任务开一条新线程去执行\n\n关闭线程池方法\nshutdown/shutdownNow/awaitTermination</code></pre>\n<h4 id=\"确定线程池的线程数\"><a href=\"#确定线程池的线程数\" class=\"headerlink\" title=\"确定线程池的线程数\"></a>确定线程池的线程数</h4><pre><code class=\"textmate\">分类：\nIO密集型   最佳线程数 = CPU核心线程的2倍\nCPU密集型  最佳线程数 = CPU核心线程数量\n混合型     最佳线程数 = ((线程等待时间+线程 CPU 时间)/线程 CPU 时间 )* CPU 核数 = 最佳线程数目 =(线程等待时间与线程 CPU 时间之比 + 1)* CPU 核数</code></pre>\n<h4 id=\"Java对象的三个部分\"><a href=\"#Java对象的三个部分\" class=\"headerlink\" title=\"Java对象的三个部分\"></a>Java对象的三个部分</h4><pre><code class=\"textmate\">1.对象头\n对象头包括三个字段，\nMark Word(标记字)，用于存储自身运行时的数据 例如 GC 标志位、哈希码、锁状态等信息。\nClass Pointer(类对象指针)，用于存放方法区 Class 对象的地址，虚拟机通 过这个指针来确定这个对象是哪个类的实例。\nArray Length(数组长度)。如果对象是一个 Java 数组，那么此字段必须有， 用于记录数组长度的数据;如果对象不是一个 Java 数组，那么此字段不存在，所以这是一个可选 字段。\n\n2.对象体\n对象体包含了对象的实例变量(成员变量)。用于成员属性值，包括父类的成员属性值。这 部分内存按 4 字节对齐。\n\n3.对齐字节\n对齐字节也叫做填充对齐，其作用是用来保证 Java 对象在所占内存字节数为 8 的倍数(8N bytes)。HotSpot VM 的内存管理要求对象起始地址必须是 8 字节的整数倍。对象头本身是 8 的 倍数，当对象的实例变量数据不是 8 的倍数，便需要填充数据来保证 8 字节的对齐。</code></pre>\n<h4 id=\"对象结构中的核心字段作用\"><a href=\"#对象结构中的核心字段作用\" class=\"headerlink\" title=\"对象结构中的核心字段作用\"></a>对象结构中的核心字段作用</h4><pre><code class=\"textmate\">(1)Mark Word(标记字)字段主要用来表示对象的线程锁状态，另外还可以用来配合 GC、 存放该对象的 hashCode。\n(2)Class Pointer(类对象指针)字段是一个指向方法区中 Class 信息的指针，意味着该对象 可随时知道自己是哪个 Class 的实例。\n(3)Array Length(数组长度)字段也占用 32 位(在 32 位 JVM 中)的字节，这是可选的， 只有当本对象是一个数组对象时才会有这个部分。\n(4)对象体用于保存对象属性值，是对象的主体部分，占用的内存空间大小取决于对象的属 性数量和类型。\n(5)对齐字节并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。当对象实 例数据部分没有对齐(8 字节的整数倍)时，就需要通过对齐填充来补全。</code></pre>\n<h4 id=\"对象结构中的字段长度\"><a href=\"#对象结构中的字段长度\" class=\"headerlink\" title=\"对象结构中的字段长度\"></a>对象结构中的字段长度</h4><pre><code class=\"textmate\">Mark Word、Class Pointer、Array Length 等字段的长度，都与 JVM 的位数有关。Mark Word 的长度为 JVM 的一个 Word(字)大小，也就是说 32 位 JVM 的 Mark Word 为 32 位，64 位 JVM 为 64 位。Class Pointer(类对象指针)字段的长度也为 JVM 的一个 Word(字)大小，即 32 位的 JVM为32位，64位的JVM为64位。\n所以，在 32 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 32 位的;在 64 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 64 位的。\n对于对象指针而言，如果 JVM 中对象数量过多，使用 64 位的指针将浪费大量内存，通过简 单统计，64 位的 JVM 将会比 32 位的 JVM 多耗费 50%的内存。为了节约内存可以使用选项 +UseCompressedOops 开启指针压缩。选项 UseCompressedOops 中的 Oop 部分为 Ordinary object pointer 普通对象指针的缩写。\n\n如果开启 UseCompressedOops 选项，以下类型的指针将从 64 位压缩至 32 位:\n1.Class 对象的属性指针(即静态变量)\n2.Object 对象的属性指针(即成员变量)\n3.普通对象数组的元素指针\n当然，也不是所有的指针都会压缩，一些特殊类型的指针不会压缩，比如指向 PermGen(永 久代)的 Class 对象指针(JDK8 中指向元空间的 Class 对象指针)、本地变量、堆栈元素、入参、返 回值和 NULL 指针等。</code></pre>\n<h4 id=\"JOL\"><a href=\"#JOL\" class=\"headerlink\" title=\"JOL\"></a>JOL</h4><pre><code class=\"textmate\">JOL 全称为 Java Object Layout，是分析 JVM 中对象的结构布局的工具，该工具大量使用了 Unsafe、JVMTI 来解码内部布局情况，其分析结果相对比较精准的。要使用 JOL 工具，先引入 Maven 的依赖坐标:\n&lt;!--Java Object Layout --&gt; \n&lt;dependency&gt;\n    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt; \n    &lt;artifactId&gt;jol-core&lt;/artifactId&gt; \n    &lt;version&gt;0.11&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<h4 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h4><blockquote>\n<p>偏向锁、轻量级锁、重量级锁</p>\n</blockquote>\n<h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><pre><code class=\"textmate\">偏向锁的核心原理是:\n    如果不存在线程竞争的一个线程获得了锁，那么锁就进入偏向状态， 此时 Mark Word 的结构变为偏向锁结构，锁对象的锁标志位(lock)被改为 01，偏向标志位 (biased_lock)被改为 1，然后线程的 ID 记录在锁对象的 Mark Word 中(使用 CAS 操作完成)以后该线程获取锁的时，判断一下线程 ID 和标志位，就可以直接进入同步块，连 CAS 操作都不 需要，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。\n偏向锁的主要作用:\n    消除无竞争情况下的同步原语，进一步提升程序性能，所在于没有锁竞 争的场合，偏向锁有很好的优化效果。但是，一旦有第二条线程需要竞争锁，那么偏向模式立即 结束，进入轻量级锁的状态。\n偏向锁的缺点:\n    如果锁对象时常被多条线程竞争，那偏向锁就是多余的，并且其撤销的过程 会带来一些性能开销。</code></pre>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><pre><code class=\"textmate\">轻量锁存在的目的是尽可能不用动用操作系统层面的互斥锁，因为那个性能会比较差，轻量级锁是一种自旋锁；\n轻量级锁主要有两种:\n    (1)普通自旋锁，\n        所谓普通自旋锁，就是指当有线程来竞争锁时，抢锁线程会在原地循环等待，而不是被阻塞，直到那个占有锁的线程释放锁之后，这个抢锁线程就可以马上获得锁的。默认情况下，自旋的次数为 10 次，用户可以通过-XX:PreBlockSpin 选项来进行更改。\n    (2)自适应自旋锁。\n        所谓自适应自旋锁，就是等待线程空循环的自旋次数并非是固定的，而是会动态着根据实际 情况来改变自旋等待的次数，自旋次数由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定\nJDK1.6 的轻量级锁使用的是普通自旋锁，且需要使用 -XX:+UseSpinning 选 项手工开启。JDK1.7 后，轻量级锁使用自适应自旋锁，JVM 启动时自动开启，且自 旋时间由 JVM 自动控制。</code></pre>\n<h4 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h4><pre><code class=\"textmate\">JVM 中每个对象都会有一个监视器，监视器和对象一起创建、销毁\nMonitor 是一种同步工具，也可以说是一种同步机制，主要特点是:\n(1)同步。\n    Monitor 所保护的临界区代码，是互斥的执行。一个 Monitor 是一个运行许可，任一个线程进入临界区代码都需要获得这个许可，离开时把许可归还。\n(2)协作。\n    Monitor 提供 Signal 机制:允许正持有许可的线程暂时放弃许可进入阻塞等待状 态，等待其他线程发送 Signal去唤醒;其他拥有许可的线程可以发送 Signal，唤醒正在阻塞等待 的线程，让它可以重新获得许可并启动执行。</code></pre>\n<h4 id=\"三种内置锁的对比\"><a href=\"#三种内置锁的对比\" class=\"headerlink\" title=\"三种内置锁的对比\"></a>三种内置锁的对比</h4><table>\n<thead>\n<tr>\n<th>锁</th>\n<th>优点</th>\n<th>缺点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>偏向锁</td>\n<td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距</td>\n<td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td>\n<td>适用于只有一个线程访问 临界区场景</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td>竞争的线程不会阻塞，提高了程序的响应速度</td>\n<td>抢不到锁的线程会CAS自旋等待，消耗CPU</td>\n<td>锁占用时间短，吞吐量低</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td>线程竞争不使用自旋，不会消耗CPU</td>\n<td>线程阻塞，响应时间缓慢</td>\n<td>锁占用时间较长，吞吐量高</td>\n</tr>\n</tbody></table>\n<h4 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h4><pre><code class=\"textmate\">定义:当多个线程共同操作共享的资源时，线程间通过某种方式互相告 知自己的状态，以避免无效的资源争夺。\n分类:等待-通知、共享内存、管道流。\n1.等待-通知\n    &quot;等待-通知&quot; 是Java中使用最为普遍的线程间通信方式，其最为经典的案例就是 “生产者-消费者”模式。\n2.共享内存\n    通过实现Runnable或内部类的形式，共享同一个变量\n3.管道通信就是使用java.io.PipedInputStream 和 java.io.PipedOutputStream进行通信\n\nwait 方法的原理:\n    首先 JVM 会释放当前线程的对象锁 Monitor 的 Owner 资格;其次 JVM 会 当前线程移入 Monitor 的 WaitSet 队列，而这些操作都和对象锁 Monitor 是相关的。\n    所以，wait 方法必须在 synchronized 同步块的内部使用。在当前线程执行 wait 方法前，必须 通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\nnotify 方法的原理:\n    JVM 从对象锁的 Monitor 的 WaitSet 队列，移动一条线程到其 EntryList 队列，这些操作都与对象锁的 Monitor 有关。\n    所以，notify 方法也必须在 synchronized 同步块的内部使用。在执行 notify 方法前，当前线 程也必须通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\n</code></pre>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><h4 id=\"ABA问题解决方案\"><a href=\"#ABA问题解决方案\" class=\"headerlink\" title=\"ABA问题解决方案\"></a>ABA问题解决方案</h4><pre><code class=\"textmate\">AtomicStampedReference  compareAndSet\nAtomicMarkableReference   \n    AtomicMarkableReference适用只要知道对象是否有被修改过，而不适用于对象被反复修改的 场景。</code></pre>\n<h4 id=\"提高高并发场景下CAS操作性能\"><a href=\"#提高高并发场景下CAS操作性能\" class=\"headerlink\" title=\"提高高并发场景下CAS操作性能\"></a>提高高并发场景下CAS操作性能</h4><pre><code class=\"textmate\">LongAdder 以空间换时间的方式提升高并发场景下 CAS 操作性能\n    LongAdder 的实现思路，与 ConcurrentHashMap 中分段锁基本原理非常相似，本质上，都是不同的线程在不同的单元上进行操作，这样减少了线程竞争，提高了并发效率</code></pre>\n<h3 id=\"可见性和缓存一致性\"><a href=\"#可见性和缓存一致性\" class=\"headerlink\" title=\"可见性和缓存一致性\"></a>可见性和缓存一致性</h3><pre><code class=\"textmate\">1. 总线锁\n    效率低，开销大\n2. 缓存锁\n     MESI 协议，保证缓存一致性\n     缓存一致性:缓存一致性机制就整体来说，是当某块CPU对缓存中的数据进行操作了之后， 就通知其他 CPU 放弃储存在它们内部的缓存，或者从主内存中重新读取\n\n    CPU 对 Cache 副 本如何与主存内容保持一致有几种写入方式可供选择，主要的写入方式有以下两种\n    1)Write-through(直写模式)  更新低一级缓存和存储器，数据写入速度慢\n    2)Write-back(回写模式)  只写入缓存，发现数据有变动，才将数据更新到存储器</code></pre>\n<h4 id=\"MESI协议解释\"><a href=\"#MESI协议解释\" class=\"headerlink\" title=\"MESI协议解释\"></a>MESI协议解释</h4><pre><code class=\"textmate\">M: 被修改(Modified)\nE: 独享的(Exclusive)\nS: 共享的(Shared)\nI: 无效的(Invalid)</code></pre>\n<h4 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h4><pre><code class=\"textmate\">As-if-Serial规则： 不管如何重排序，都必须保证代码在单线程下的运行正确。\n\n扩展:\n    JIT 是 Just In Time 的缩写, 也就是“即时编译器”。JVM 读入“.class” 文件的字 节码后，默认情况下是解释执行的。但是对于运行频率很高(如&gt;5000 次)的字节码， JVM 采用了 JIT 技术，将直接编译为机器指令，以提高性能。</code></pre>\n<h4 id=\"硬件层面的内存屏障\"><a href=\"#硬件层面的内存屏障\" class=\"headerlink\" title=\"硬件层面的内存屏障\"></a>硬件层面的内存屏障</h4><pre><code class=\"texxtmate\">1. 硬件层的内存屏障定义\n    内存屏障(Memory Barrier)又称内存栅栏(Memory Fences)，是让一个 CPU 高速缓存的内 存状态对其他 CPU 内核可见的一项技术，也是一项保障跨 CPU 内核有序执行指令的技术。\n    硬件层常用的内存屏障分为三种:读屏障(Load Barrier)、写屏障(Store Barrier)、全屏障 (Full Barrier)。\n\n2.作用\n    1).阻止屏障两侧的指令重排序\n    2).强制让高速缓存的数据失效</code></pre>\n<h4 id=\"JMM-Java内存模型\"><a href=\"#JMM-Java内存模型\" class=\"headerlink\" title=\"JMM(Java内存模型)\"></a>JMM(Java内存模型)</h4><blockquote>\n<p>JMM 并不像 JVM 内存结构一样是真实存在的运行实体，更多体现为一种规范和规则</p>\n</blockquote>\n<pre><code class=\"textmate\">1.核心的价值在于解决可见性和有序性。\n2.JMM的另一大价值，在于能屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证最终的一致。\n\nJava 内存模型的规定:\n    (1)所有变量存储在主内存中。 \n    (2)每个线程都有自己的工作内存，且对变量的操作都是在工作内存中进行。 \n    (3)不同线程之间无法直接访问彼此工作内存中的变量，要想访问只能通过主内存来传递。\n\nvolatile内存屏障操作\n    LoadLoad、LoadStore、StoreStore、StoreLoad\n\nHappens-Before(先行发生)规则</code></pre>\n<h2 id=\"显式锁\"><a href=\"#显式锁\" class=\"headerlink\" title=\"显式锁\"></a>显式锁</h2><h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><pre><code class=\"textmate\">Lock锁对比Java内置锁\n1.可中断获取锁\n2.可非阻塞获取锁\n3.可限时抢锁</code></pre>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><pre><code class=\"textmate\">1)“可重入”含义:表示该锁能够支持一个线程对资源的重复加锁，也就是说，一个线程 可以多次进入同一个锁所同步的临界区代码块。比如，同一线程在外层函数获得锁后，在内层函 数能再次获取该锁，甚至多次抢占到同一把锁。\n2)“独占”含义:在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能等待， 只有拥有锁的线程释放了锁后，其他的线程才能够获取锁。</code></pre>\n<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><blockquote>\n<p> Lock代替了synchronized方法和语句的使用，而Condition代替了对象监视器方法的使用</p>\n</blockquote>\n<pre><code class=\"textmate\">Condition实例本质上绑定到一个锁。要获取特定Lock实例的Condition实例，请使用其newCondition()方法。\n\n基于显示锁进行“等待-通知”方式的线程间通信接口\nCondition 的“等待-通知”方法和 Object 的“等待-通知”方法的语义等效关系为:\n    - Condition 类的 awiat 方法和 Object 类的 wait 方法等效。\n    - Condition 类的 signal 方法和 Object 类的 notify 方法等效。\n    - Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效。\nCondition 对象的 signal(通知)方法和同一个对象的 await(等待)方法是一一配对使用的， 也就是说，一个 Condition 对象的 signal(或 signalAll)方法，不能去唤醒其他 Condition 对象上的 await 线程。</code></pre>\n<h3 id=\"LockSupport\"><a href=\"#LockSupport\" class=\"headerlink\" title=\"LockSupport\"></a>LockSupport</h3><blockquote>\n<p>LockSupport 是 JUC 提供的一线程阻塞与唤醒的工具类，该工具类可以让线程在任意位置阻 塞和唤醒，其所有的方法都是静态方法。</p>\n</blockquote>\n<ul>\n<li><p>LockSupport.park()和 Thread.sleep()的区别</p>\n<pre><code class=\"textmate\">从功能上说，LockSupport.park()与 Thread.sleep()方法类似，都是让线程阻塞，二者的区别如下:\n(1)Thread.sleep()没法从外部唤醒，只能自己醒过来;而被LockSupport.park()方法阻塞的线程可以通过调用LockSupport.unpark()方法去唤醒。\n(2)Thread.sleep()方法声明了 InterruptedException 中断异常，这是一个受检异常，调用者需要捕获这个异常或者再抛出;而使用 LockSupport.park()方法时，不需要捕获中断异常。\n(3)LockSupport.park()方法、Thread.sleep()方法所阻塞的线程，当被阻塞线程的 Thread.interrup(t方法被调用时，被阻塞线程都会响应线程的中断信号，唤醒线程的执行。不同的是， 二者对中断信号的响应的方式不同。LockSupport.park( )方法不会抛出InterruptedException异常， 仅仅设置了线程的中断标志;而Thread.sleep()方法还会抛出InterruptedException 异常。\n(4)与 Thread.sleep()相比，使用 LockSupport.park()能更精准、更加灵活的阻塞、唤醒指定 线程。\n(5)Thread.sleep()本身就是一个 Native 方法;LockSupport.park()并不是一个 Native 方法，只是调用了一个Unsafe 类的Native方法(名字也叫 park)去实现。\n(6)LockSupport.park()方法还允许设置一个 Blocker 对象，主要用来给监视工具或诊断工具 确定线程受阻塞的原因。</code></pre>\n</li>\n<li><p>LockSupport.park( )与 Object.wait()的区别</p>\n<pre><code class=\"textmate\">LockSupport.park()与 Object.wait()方法也类似，都是让线程阻塞，二者的区别如下:\n(1)Object.wait()方法需要在synchronized块中执行;而LockSupport.park()可以在任意地方执行。\n(2)当被阻塞线程被中断时，Object.wait()方法抛出了中断异常，调用者需要捕获或者再抛出;当被阻塞线程被中断时，LockSupport.park()不会抛出异常，使用时不需要处理中断异常。\n(3)线程如果在Object.wait()执行之前去执行Object.notify()，会抛出 IllegalMonitorStateException异常，是不被允许的;而线程如果在LockSupport.park()执行之前去执行LockSupport.unPark()，不会抛出任何异常，是被允许的。</code></pre>\n</li>\n</ul>\n<h3 id=\"显式锁分类\"><a href=\"#显式锁分类\" class=\"headerlink\" title=\"显式锁分类\"></a>显式锁分类</h3><pre><code class=\"textmate\">1. 可重入锁与不可重入锁\n    可重入: 递归锁，同一个线程可重复获取当前对象的锁\n    不可重入: 同一时间，只有一个线程能持有对象的锁\n2. 悲观锁和乐观锁\n    悲观锁: 每次操作都会加锁\n    乐观锁: 基于AQS实现的锁都是乐观锁，操作不会加锁，采取在写时先读出当前版本号，然后加锁操作(失败则重复该操作)\n    悲观锁适用于写多读少的场景，遇到高并发写时性能高；乐观锁用于读多写少的情况\n3. 公平锁和非公平锁\n    公平锁就是保障了各个线程获取锁都是按照顺序来的，先到的线程先获取锁，抢锁成功的次序体现为 FIFO(先进先出)顺序\n4. 可中断锁和不可中断锁\n    在抢锁过程中能通过某些方法去终止抢占过程，那就是可中断锁，否则就是不可 中断锁。\n5. 共享锁和独占锁\n    “独占锁”指的是每次只能有一个线程能持有的锁。\n    “共享锁”允许多个线程同时获取锁，容许线程并发进入临界区。\n\n其他\n    CAS自旋锁可能会导致&quot;总线风暴&quot;，CLH 自旋锁(基于队列(具体为单向链表)排队的一种自旋锁),避免了总线风暴\n    AQS是CLH的一个变种\n</code></pre>\n<h3 id=\"高并发设计模式\"><a href=\"#高并发设计模式\" class=\"headerlink\" title=\"高并发设计模式\"></a>高并发设计模式</h3><pre><code class=\"textmate\">1.安全的单例模式\n2.Master-Worker模式\n3.ForkJoin模式\n4.生产者消费者模式\n5.Future模式</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高并发相关\"><a href=\"#高并发相关\" class=\"headerlink\" title=\"高并发相关\"></a>高并发相关</h1><blockquote>\n<p>高并发相关书籍总结文档</p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h4 id=\"进程的结构\"><a href=\"#进程的结构\" class=\"headerlink\" title=\"进程的结构\"></a>进程的结构</h4><blockquote>\n<p>由程序段、数据端和进程控制块组成</p>\n</blockquote>\n<pre><code class=\"textmate\">线程的大致结构\n线程描述信息、程序计数器和栈内存组成\n\n区别\n1.进程是进程代码段的一次顺序执行流程，一个进程有一个或多个线程组成\n2.线程是CPU调度最小单位；进项是操作系统分配资源的最小单位。\n3.线程从进程的内部演进而来。\n4.进程之间相互独立；进程中的各个线程不完全独立，共享进程的方法区内存、堆内存、系统资源等\n5.切换速度不同： 线程上下文切换比进程上下文切换速度快。</code></pre>\n<h4 id=\"Java线程和OS线程关系\"><a href=\"#Java线程和OS线程关系\" class=\"headerlink\" title=\"Java线程和OS线程关系\"></a>Java线程和OS线程关系</h4><pre><code class=\"textmate\">一对一模型，缺点是创建一个用户线程也要创建一个内核线程，开销大</code></pre>\n<h4 id=\"Java线程底层实现\"><a href=\"#Java线程底层实现\" class=\"headerlink\" title=\"Java线程底层实现\"></a>Java线程底层实现</h4><pre><code class=\"textmate\">Windows上采用Win32 API实现\nUNIX和Linux采用Pthread( POSIX标准的扩展，提供用户级或内核级库)</code></pre>\n<h4 id=\"JDK创建Linux线程源码\"><a href=\"#JDK创建Linux线程源码\" class=\"headerlink\" title=\"JDK创建Linux线程源码\"></a>JDK创建Linux线程源码</h4><pre><code class=\"textmate\">src/hotspot/os/linux/os_linux.cpp</code></pre>\n<h4 id=\"创建线程的方式\"><a href=\"#创建线程的方式\" class=\"headerlink\" title=\"创建线程的方式\"></a>创建线程的方式</h4><pre><code class=\"textmate\">Thread/Runnable/FutureTask/线程池(ThreadPoolExecutor)\n\nSynchronousQueued(同步队列)\n必须有take线程在阻塞等待，offer操作才能成功；否则会为新任务开一条新线程去执行\n\n关闭线程池方法\nshutdown/shutdownNow/awaitTermination</code></pre>\n<h4 id=\"确定线程池的线程数\"><a href=\"#确定线程池的线程数\" class=\"headerlink\" title=\"确定线程池的线程数\"></a>确定线程池的线程数</h4><pre><code class=\"textmate\">分类：\nIO密集型   最佳线程数 = CPU核心线程的2倍\nCPU密集型  最佳线程数 = CPU核心线程数量\n混合型     最佳线程数 = ((线程等待时间+线程 CPU 时间)/线程 CPU 时间 )* CPU 核数 = 最佳线程数目 =(线程等待时间与线程 CPU 时间之比 + 1)* CPU 核数</code></pre>\n<h4 id=\"Java对象的三个部分\"><a href=\"#Java对象的三个部分\" class=\"headerlink\" title=\"Java对象的三个部分\"></a>Java对象的三个部分</h4><pre><code class=\"textmate\">1.对象头\n对象头包括三个字段，\nMark Word(标记字)，用于存储自身运行时的数据 例如 GC 标志位、哈希码、锁状态等信息。\nClass Pointer(类对象指针)，用于存放方法区 Class 对象的地址，虚拟机通 过这个指针来确定这个对象是哪个类的实例。\nArray Length(数组长度)。如果对象是一个 Java 数组，那么此字段必须有， 用于记录数组长度的数据;如果对象不是一个 Java 数组，那么此字段不存在，所以这是一个可选 字段。\n\n2.对象体\n对象体包含了对象的实例变量(成员变量)。用于成员属性值，包括父类的成员属性值。这 部分内存按 4 字节对齐。\n\n3.对齐字节\n对齐字节也叫做填充对齐，其作用是用来保证 Java 对象在所占内存字节数为 8 的倍数(8N bytes)。HotSpot VM 的内存管理要求对象起始地址必须是 8 字节的整数倍。对象头本身是 8 的 倍数，当对象的实例变量数据不是 8 的倍数，便需要填充数据来保证 8 字节的对齐。</code></pre>\n<h4 id=\"对象结构中的核心字段作用\"><a href=\"#对象结构中的核心字段作用\" class=\"headerlink\" title=\"对象结构中的核心字段作用\"></a>对象结构中的核心字段作用</h4><pre><code class=\"textmate\">(1)Mark Word(标记字)字段主要用来表示对象的线程锁状态，另外还可以用来配合 GC、 存放该对象的 hashCode。\n(2)Class Pointer(类对象指针)字段是一个指向方法区中 Class 信息的指针，意味着该对象 可随时知道自己是哪个 Class 的实例。\n(3)Array Length(数组长度)字段也占用 32 位(在 32 位 JVM 中)的字节，这是可选的， 只有当本对象是一个数组对象时才会有这个部分。\n(4)对象体用于保存对象属性值，是对象的主体部分，占用的内存空间大小取决于对象的属 性数量和类型。\n(5)对齐字节并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。当对象实 例数据部分没有对齐(8 字节的整数倍)时，就需要通过对齐填充来补全。</code></pre>\n<h4 id=\"对象结构中的字段长度\"><a href=\"#对象结构中的字段长度\" class=\"headerlink\" title=\"对象结构中的字段长度\"></a>对象结构中的字段长度</h4><pre><code class=\"textmate\">Mark Word、Class Pointer、Array Length 等字段的长度，都与 JVM 的位数有关。Mark Word 的长度为 JVM 的一个 Word(字)大小，也就是说 32 位 JVM 的 Mark Word 为 32 位，64 位 JVM 为 64 位。Class Pointer(类对象指针)字段的长度也为 JVM 的一个 Word(字)大小，即 32 位的 JVM为32位，64位的JVM为64位。\n所以，在 32 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 32 位的;在 64 位 JVM 虚拟机中，Mark Word 和 Class Pointer 这两部分都是 64 位的。\n对于对象指针而言，如果 JVM 中对象数量过多，使用 64 位的指针将浪费大量内存，通过简 单统计，64 位的 JVM 将会比 32 位的 JVM 多耗费 50%的内存。为了节约内存可以使用选项 +UseCompressedOops 开启指针压缩。选项 UseCompressedOops 中的 Oop 部分为 Ordinary object pointer 普通对象指针的缩写。\n\n如果开启 UseCompressedOops 选项，以下类型的指针将从 64 位压缩至 32 位:\n1.Class 对象的属性指针(即静态变量)\n2.Object 对象的属性指针(即成员变量)\n3.普通对象数组的元素指针\n当然，也不是所有的指针都会压缩，一些特殊类型的指针不会压缩，比如指向 PermGen(永 久代)的 Class 对象指针(JDK8 中指向元空间的 Class 对象指针)、本地变量、堆栈元素、入参、返 回值和 NULL 指针等。</code></pre>\n<h4 id=\"JOL\"><a href=\"#JOL\" class=\"headerlink\" title=\"JOL\"></a>JOL</h4><pre><code class=\"textmate\">JOL 全称为 Java Object Layout，是分析 JVM 中对象的结构布局的工具，该工具大量使用了 Unsafe、JVMTI 来解码内部布局情况，其分析结果相对比较精准的。要使用 JOL 工具，先引入 Maven 的依赖坐标:\n&lt;!--Java Object Layout --&gt; \n&lt;dependency&gt;\n    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt; \n    &lt;artifactId&gt;jol-core&lt;/artifactId&gt; \n    &lt;version&gt;0.11&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<h4 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h4><blockquote>\n<p>偏向锁、轻量级锁、重量级锁</p>\n</blockquote>\n<h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><pre><code class=\"textmate\">偏向锁的核心原理是:\n    如果不存在线程竞争的一个线程获得了锁，那么锁就进入偏向状态， 此时 Mark Word 的结构变为偏向锁结构，锁对象的锁标志位(lock)被改为 01，偏向标志位 (biased_lock)被改为 1，然后线程的 ID 记录在锁对象的 Mark Word 中(使用 CAS 操作完成)以后该线程获取锁的时，判断一下线程 ID 和标志位，就可以直接进入同步块，连 CAS 操作都不 需要，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。\n偏向锁的主要作用:\n    消除无竞争情况下的同步原语，进一步提升程序性能，所在于没有锁竞 争的场合，偏向锁有很好的优化效果。但是，一旦有第二条线程需要竞争锁，那么偏向模式立即 结束，进入轻量级锁的状态。\n偏向锁的缺点:\n    如果锁对象时常被多条线程竞争，那偏向锁就是多余的，并且其撤销的过程 会带来一些性能开销。</code></pre>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><pre><code class=\"textmate\">轻量锁存在的目的是尽可能不用动用操作系统层面的互斥锁，因为那个性能会比较差，轻量级锁是一种自旋锁；\n轻量级锁主要有两种:\n    (1)普通自旋锁，\n        所谓普通自旋锁，就是指当有线程来竞争锁时，抢锁线程会在原地循环等待，而不是被阻塞，直到那个占有锁的线程释放锁之后，这个抢锁线程就可以马上获得锁的。默认情况下，自旋的次数为 10 次，用户可以通过-XX:PreBlockSpin 选项来进行更改。\n    (2)自适应自旋锁。\n        所谓自适应自旋锁，就是等待线程空循环的自旋次数并非是固定的，而是会动态着根据实际 情况来改变自旋等待的次数，自旋次数由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定\nJDK1.6 的轻量级锁使用的是普通自旋锁，且需要使用 -XX:+UseSpinning 选 项手工开启。JDK1.7 后，轻量级锁使用自适应自旋锁，JVM 启动时自动开启，且自 旋时间由 JVM 自动控制。</code></pre>\n<h4 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h4><pre><code class=\"textmate\">JVM 中每个对象都会有一个监视器，监视器和对象一起创建、销毁\nMonitor 是一种同步工具，也可以说是一种同步机制，主要特点是:\n(1)同步。\n    Monitor 所保护的临界区代码，是互斥的执行。一个 Monitor 是一个运行许可，任一个线程进入临界区代码都需要获得这个许可，离开时把许可归还。\n(2)协作。\n    Monitor 提供 Signal 机制:允许正持有许可的线程暂时放弃许可进入阻塞等待状 态，等待其他线程发送 Signal去唤醒;其他拥有许可的线程可以发送 Signal，唤醒正在阻塞等待 的线程，让它可以重新获得许可并启动执行。</code></pre>\n<h4 id=\"三种内置锁的对比\"><a href=\"#三种内置锁的对比\" class=\"headerlink\" title=\"三种内置锁的对比\"></a>三种内置锁的对比</h4><table>\n<thead>\n<tr>\n<th>锁</th>\n<th>优点</th>\n<th>缺点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>偏向锁</td>\n<td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距</td>\n<td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td>\n<td>适用于只有一个线程访问 临界区场景</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td>竞争的线程不会阻塞，提高了程序的响应速度</td>\n<td>抢不到锁的线程会CAS自旋等待，消耗CPU</td>\n<td>锁占用时间短，吞吐量低</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td>线程竞争不使用自旋，不会消耗CPU</td>\n<td>线程阻塞，响应时间缓慢</td>\n<td>锁占用时间较长，吞吐量高</td>\n</tr>\n</tbody></table>\n<h4 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h4><pre><code class=\"textmate\">定义:当多个线程共同操作共享的资源时，线程间通过某种方式互相告 知自己的状态，以避免无效的资源争夺。\n分类:等待-通知、共享内存、管道流。\n1.等待-通知\n    &quot;等待-通知&quot; 是Java中使用最为普遍的线程间通信方式，其最为经典的案例就是 “生产者-消费者”模式。\n2.共享内存\n    通过实现Runnable或内部类的形式，共享同一个变量\n3.管道通信就是使用java.io.PipedInputStream 和 java.io.PipedOutputStream进行通信\n\nwait 方法的原理:\n    首先 JVM 会释放当前线程的对象锁 Monitor 的 Owner 资格;其次 JVM 会 当前线程移入 Monitor 的 WaitSet 队列，而这些操作都和对象锁 Monitor 是相关的。\n    所以，wait 方法必须在 synchronized 同步块的内部使用。在当前线程执行 wait 方法前，必须 通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\nnotify 方法的原理:\n    JVM 从对象锁的 Monitor 的 WaitSet 队列，移动一条线程到其 EntryList 队列，这些操作都与对象锁的 Monitor 有关。\n    所以，notify 方法也必须在 synchronized 同步块的内部使用。在执行 notify 方法前，当前线 程也必须通过 synchronized 方法成为对象锁的 Monitor 的 Owner。\n</code></pre>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><h4 id=\"ABA问题解决方案\"><a href=\"#ABA问题解决方案\" class=\"headerlink\" title=\"ABA问题解决方案\"></a>ABA问题解决方案</h4><pre><code class=\"textmate\">AtomicStampedReference  compareAndSet\nAtomicMarkableReference   \n    AtomicMarkableReference适用只要知道对象是否有被修改过，而不适用于对象被反复修改的 场景。</code></pre>\n<h4 id=\"提高高并发场景下CAS操作性能\"><a href=\"#提高高并发场景下CAS操作性能\" class=\"headerlink\" title=\"提高高并发场景下CAS操作性能\"></a>提高高并发场景下CAS操作性能</h4><pre><code class=\"textmate\">LongAdder 以空间换时间的方式提升高并发场景下 CAS 操作性能\n    LongAdder 的实现思路，与 ConcurrentHashMap 中分段锁基本原理非常相似，本质上，都是不同的线程在不同的单元上进行操作，这样减少了线程竞争，提高了并发效率</code></pre>\n<h3 id=\"可见性和缓存一致性\"><a href=\"#可见性和缓存一致性\" class=\"headerlink\" title=\"可见性和缓存一致性\"></a>可见性和缓存一致性</h3><pre><code class=\"textmate\">1. 总线锁\n    效率低，开销大\n2. 缓存锁\n     MESI 协议，保证缓存一致性\n     缓存一致性:缓存一致性机制就整体来说，是当某块CPU对缓存中的数据进行操作了之后， 就通知其他 CPU 放弃储存在它们内部的缓存，或者从主内存中重新读取\n\n    CPU 对 Cache 副 本如何与主存内容保持一致有几种写入方式可供选择，主要的写入方式有以下两种\n    1)Write-through(直写模式)  更新低一级缓存和存储器，数据写入速度慢\n    2)Write-back(回写模式)  只写入缓存，发现数据有变动，才将数据更新到存储器</code></pre>\n<h4 id=\"MESI协议解释\"><a href=\"#MESI协议解释\" class=\"headerlink\" title=\"MESI协议解释\"></a>MESI协议解释</h4><pre><code class=\"textmate\">M: 被修改(Modified)\nE: 独享的(Exclusive)\nS: 共享的(Shared)\nI: 无效的(Invalid)</code></pre>\n<h4 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h4><pre><code class=\"textmate\">As-if-Serial规则： 不管如何重排序，都必须保证代码在单线程下的运行正确。\n\n扩展:\n    JIT 是 Just In Time 的缩写, 也就是“即时编译器”。JVM 读入“.class” 文件的字 节码后，默认情况下是解释执行的。但是对于运行频率很高(如&gt;5000 次)的字节码， JVM 采用了 JIT 技术，将直接编译为机器指令，以提高性能。</code></pre>\n<h4 id=\"硬件层面的内存屏障\"><a href=\"#硬件层面的内存屏障\" class=\"headerlink\" title=\"硬件层面的内存屏障\"></a>硬件层面的内存屏障</h4><pre><code class=\"texxtmate\">1. 硬件层的内存屏障定义\n    内存屏障(Memory Barrier)又称内存栅栏(Memory Fences)，是让一个 CPU 高速缓存的内 存状态对其他 CPU 内核可见的一项技术，也是一项保障跨 CPU 内核有序执行指令的技术。\n    硬件层常用的内存屏障分为三种:读屏障(Load Barrier)、写屏障(Store Barrier)、全屏障 (Full Barrier)。\n\n2.作用\n    1).阻止屏障两侧的指令重排序\n    2).强制让高速缓存的数据失效</code></pre>\n<h4 id=\"JMM-Java内存模型\"><a href=\"#JMM-Java内存模型\" class=\"headerlink\" title=\"JMM(Java内存模型)\"></a>JMM(Java内存模型)</h4><blockquote>\n<p>JMM 并不像 JVM 内存结构一样是真实存在的运行实体，更多体现为一种规范和规则</p>\n</blockquote>\n<pre><code class=\"textmate\">1.核心的价值在于解决可见性和有序性。\n2.JMM的另一大价值，在于能屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证最终的一致。\n\nJava 内存模型的规定:\n    (1)所有变量存储在主内存中。 \n    (2)每个线程都有自己的工作内存，且对变量的操作都是在工作内存中进行。 \n    (3)不同线程之间无法直接访问彼此工作内存中的变量，要想访问只能通过主内存来传递。\n\nvolatile内存屏障操作\n    LoadLoad、LoadStore、StoreStore、StoreLoad\n\nHappens-Before(先行发生)规则</code></pre>\n<h2 id=\"显式锁\"><a href=\"#显式锁\" class=\"headerlink\" title=\"显式锁\"></a>显式锁</h2><h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><pre><code class=\"textmate\">Lock锁对比Java内置锁\n1.可中断获取锁\n2.可非阻塞获取锁\n3.可限时抢锁</code></pre>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><pre><code class=\"textmate\">1)“可重入”含义:表示该锁能够支持一个线程对资源的重复加锁，也就是说，一个线程 可以多次进入同一个锁所同步的临界区代码块。比如，同一线程在外层函数获得锁后，在内层函 数能再次获取该锁，甚至多次抢占到同一把锁。\n2)“独占”含义:在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能等待， 只有拥有锁的线程释放了锁后，其他的线程才能够获取锁。</code></pre>\n<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><blockquote>\n<p> Lock代替了synchronized方法和语句的使用，而Condition代替了对象监视器方法的使用</p>\n</blockquote>\n<pre><code class=\"textmate\">Condition实例本质上绑定到一个锁。要获取特定Lock实例的Condition实例，请使用其newCondition()方法。\n\n基于显示锁进行“等待-通知”方式的线程间通信接口\nCondition 的“等待-通知”方法和 Object 的“等待-通知”方法的语义等效关系为:\n    - Condition 类的 awiat 方法和 Object 类的 wait 方法等效。\n    - Condition 类的 signal 方法和 Object 类的 notify 方法等效。\n    - Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效。\nCondition 对象的 signal(通知)方法和同一个对象的 await(等待)方法是一一配对使用的， 也就是说，一个 Condition 对象的 signal(或 signalAll)方法，不能去唤醒其他 Condition 对象上的 await 线程。</code></pre>\n<h3 id=\"LockSupport\"><a href=\"#LockSupport\" class=\"headerlink\" title=\"LockSupport\"></a>LockSupport</h3><blockquote>\n<p>LockSupport 是 JUC 提供的一线程阻塞与唤醒的工具类，该工具类可以让线程在任意位置阻 塞和唤醒，其所有的方法都是静态方法。</p>\n</blockquote>\n<ul>\n<li><p>LockSupport.park()和 Thread.sleep()的区别</p>\n<pre><code class=\"textmate\">从功能上说，LockSupport.park()与 Thread.sleep()方法类似，都是让线程阻塞，二者的区别如下:\n(1)Thread.sleep()没法从外部唤醒，只能自己醒过来;而被LockSupport.park()方法阻塞的线程可以通过调用LockSupport.unpark()方法去唤醒。\n(2)Thread.sleep()方法声明了 InterruptedException 中断异常，这是一个受检异常，调用者需要捕获这个异常或者再抛出;而使用 LockSupport.park()方法时，不需要捕获中断异常。\n(3)LockSupport.park()方法、Thread.sleep()方法所阻塞的线程，当被阻塞线程的 Thread.interrup(t方法被调用时，被阻塞线程都会响应线程的中断信号，唤醒线程的执行。不同的是， 二者对中断信号的响应的方式不同。LockSupport.park( )方法不会抛出InterruptedException异常， 仅仅设置了线程的中断标志;而Thread.sleep()方法还会抛出InterruptedException 异常。\n(4)与 Thread.sleep()相比，使用 LockSupport.park()能更精准、更加灵活的阻塞、唤醒指定 线程。\n(5)Thread.sleep()本身就是一个 Native 方法;LockSupport.park()并不是一个 Native 方法，只是调用了一个Unsafe 类的Native方法(名字也叫 park)去实现。\n(6)LockSupport.park()方法还允许设置一个 Blocker 对象，主要用来给监视工具或诊断工具 确定线程受阻塞的原因。</code></pre>\n</li>\n<li><p>LockSupport.park( )与 Object.wait()的区别</p>\n<pre><code class=\"textmate\">LockSupport.park()与 Object.wait()方法也类似，都是让线程阻塞，二者的区别如下:\n(1)Object.wait()方法需要在synchronized块中执行;而LockSupport.park()可以在任意地方执行。\n(2)当被阻塞线程被中断时，Object.wait()方法抛出了中断异常，调用者需要捕获或者再抛出;当被阻塞线程被中断时，LockSupport.park()不会抛出异常，使用时不需要处理中断异常。\n(3)线程如果在Object.wait()执行之前去执行Object.notify()，会抛出 IllegalMonitorStateException异常，是不被允许的;而线程如果在LockSupport.park()执行之前去执行LockSupport.unPark()，不会抛出任何异常，是被允许的。</code></pre>\n</li>\n</ul>\n<h3 id=\"显式锁分类\"><a href=\"#显式锁分类\" class=\"headerlink\" title=\"显式锁分类\"></a>显式锁分类</h3><pre><code class=\"textmate\">1. 可重入锁与不可重入锁\n    可重入: 递归锁，同一个线程可重复获取当前对象的锁\n    不可重入: 同一时间，只有一个线程能持有对象的锁\n2. 悲观锁和乐观锁\n    悲观锁: 每次操作都会加锁\n    乐观锁: 基于AQS实现的锁都是乐观锁，操作不会加锁，采取在写时先读出当前版本号，然后加锁操作(失败则重复该操作)\n    悲观锁适用于写多读少的场景，遇到高并发写时性能高；乐观锁用于读多写少的情况\n3. 公平锁和非公平锁\n    公平锁就是保障了各个线程获取锁都是按照顺序来的，先到的线程先获取锁，抢锁成功的次序体现为 FIFO(先进先出)顺序\n4. 可中断锁和不可中断锁\n    在抢锁过程中能通过某些方法去终止抢占过程，那就是可中断锁，否则就是不可 中断锁。\n5. 共享锁和独占锁\n    “独占锁”指的是每次只能有一个线程能持有的锁。\n    “共享锁”允许多个线程同时获取锁，容许线程并发进入临界区。\n\n其他\n    CAS自旋锁可能会导致&quot;总线风暴&quot;，CLH 自旋锁(基于队列(具体为单向链表)排队的一种自旋锁),避免了总线风暴\n    AQS是CLH的一个变种\n</code></pre>\n<h3 id=\"高并发设计模式\"><a href=\"#高并发设计模式\" class=\"headerlink\" title=\"高并发设计模式\"></a>高并发设计模式</h3><pre><code class=\"textmate\">1.安全的单例模式\n2.Master-Worker模式\n3.ForkJoin模式\n4.生产者消费者模式\n5.Future模式</code></pre>\n"},{"title":"ThreadPool详解","description":"线程池","date":"2021-02-09T06:12:45.000Z","_content":"\n#### 构造方法签名\n```textmate\nThreadPoolExecutor(int corePoolSize,\n        int maximumPoolSize,\n        long keepAliveTime,\n        TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,\n        ThreadFactory threadFactory,\n        RejectedExecutionHandler handler)\n        \ncorePoolSize - 池中所保存的线程数，包括空闲线程。\nmaximumPoolSize - 池中允许的最大线程数。\nkeepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\nunit - keepAliveTime参数的时间单位。\nworkQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\nthreadFactory - 执行程序创建新线程时使用的工厂。\nhandler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。\n```\n\n#### 官方封装好的线程池\n```textmate\nThreadPoolExecutor是Executors类的底层实现。\n\n1. newSingleThreadExecutor（单个后台线程）\n    创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。\n    此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n2.newFixedThreadPool（固定大小线程池）\n    创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，\n    如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n3. newCachedThreadPool（无界线程池，可以进行自动线程回收）\n    创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，\n    那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。\n    此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n4.newScheduledThreadPool\n    创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。\n```\n\n#### 排队策略\n```textmate\n排队有三种通用策略：\n\n1.直接提交\n    工作队列的默认选项是 SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，\n    则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。\n    直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n    \n2.无界队列。\n    使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。\n    这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，\n    适合于使用无界队列；例如，在 Web页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n3.有界队列。\n    当使用有限的 maximumPoolSizes时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。\n    队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。\n    如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU使用率较高，\n    但是可能遇到不可接受的调度开销，这样也会降低吞吐量。\n```\n\n#### BlockingQueue的选择\n```textmate\n例子一：使用直接提交策略，也即SynchronousQueue。\n    首先SynchronousQueue是无界的，也就是说他存数任务的能力是没有限制的，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加。\n\n例子二：使用无界队列策略，即LinkedBlockingQueue\n    corePoolSize大小的线程数会一直运行，忙完当前的，就从队列中拿任务开始运行。要防止任务疯长，比如任务运行的实行比较长\n\n例子三：有界队列，使用ArrayBlockingQueue。\n    这个是最为复杂的使用，所以JDK不推荐使用。与上面的相比，最大的特点便是可以防止资源耗尽的情况发生。假设，所有的任务都永远无法执行完。\n    对于首先来的A,B来说直接运行，接下来，如果来了C,D，他们会被放到queue中，如果接下来再来E,F，则增加线程运行E，F。但是如果再来任务，队列无法再接受了，\n    线程数也到达最大的限制了，所以就会使用拒绝策略来处理。\n```\n\n#### 拒绝策略\n```textmate\n在ThreadPoolExecutor中已经默认包含了4中拒绝策略\n1.CallerRunsPolicy\n    线程调用运行该任务的 execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n             r.run();\n         }\n    }\n这个策略显然不想放弃执行任务。但是由于池中已经没有任何资源了，那么就直接使用调用该execute的线程本身来执行。\n\n2.AbortPolicy\n    处理程序遭到拒绝将抛出运行时RejectedExecutionException\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n       throw new RejectedExecutionException();\n    }\n    这种策略直接抛出异常，丢弃任务。\n\n3.DiscardPolicy\n    不能执行的任务将被删除\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {}\n    这种策略和AbortPolicy几乎一样，也是丢弃任务，只不过他不抛出异常。\n\n4.DiscardOldestPolicy\n    如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            e.getQueue().poll();\n            e.execute(r);\n        }\n    }\n    该策略就稍微复杂一些，在pool没有关闭的前提下首先丢掉缓存在队列中的最早的任务，然后重新尝试运行该任务。这个策略需要适当小心。\n    设想:如果其他线程都还在运行，那么新来任务踢掉旧任务，缓存在queue中，再来一个任务又会踢掉queue中最老任务。\n```\n\n#### 总结\n```textmate\n总结：\nkeepAliveTime和maximumPoolSize及BlockingQueue的类型均有关系。如果BlockingQueue是无界的，那么永远不会触发maximumPoolSize，自然keepAliveTime也就没有了意义。\n反之，如果核心数较小，有界BlockingQueue数值又较小，同时keepAliveTime又设的很小，如果任务频繁，那么系统就会频繁的申请回收线程\n```\n\n#### 配置计算公式\n```textmate\n为了使CPU达到期望使用率，线程池的最优大小为\n线程个数 = cpu个数 * cpu利用率 * （1+ IO处理时间 / CPU处理时间)\n```\n","source":"_posts/backend/java/thread/threadPool.md","raw":"---\ntitle: ThreadPool详解\ndescription: 线程池\ndate: 2021-02-09 14:12:45\ntags:\n- 线程池\ncategories:\n- 后端\n- 线程池\n---\n\n#### 构造方法签名\n```textmate\nThreadPoolExecutor(int corePoolSize,\n        int maximumPoolSize,\n        long keepAliveTime,\n        TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,\n        ThreadFactory threadFactory,\n        RejectedExecutionHandler handler)\n        \ncorePoolSize - 池中所保存的线程数，包括空闲线程。\nmaximumPoolSize - 池中允许的最大线程数。\nkeepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\nunit - keepAliveTime参数的时间单位。\nworkQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\nthreadFactory - 执行程序创建新线程时使用的工厂。\nhandler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。\n```\n\n#### 官方封装好的线程池\n```textmate\nThreadPoolExecutor是Executors类的底层实现。\n\n1. newSingleThreadExecutor（单个后台线程）\n    创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。\n    此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n2.newFixedThreadPool（固定大小线程池）\n    创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，\n    如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n3. newCachedThreadPool（无界线程池，可以进行自动线程回收）\n    创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，\n    那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。\n    此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n4.newScheduledThreadPool\n    创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。\n```\n\n#### 排队策略\n```textmate\n排队有三种通用策略：\n\n1.直接提交\n    工作队列的默认选项是 SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，\n    则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。\n    直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n    \n2.无界队列。\n    使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。\n    这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，\n    适合于使用无界队列；例如，在 Web页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n3.有界队列。\n    当使用有限的 maximumPoolSizes时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。\n    队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。\n    如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU使用率较高，\n    但是可能遇到不可接受的调度开销，这样也会降低吞吐量。\n```\n\n#### BlockingQueue的选择\n```textmate\n例子一：使用直接提交策略，也即SynchronousQueue。\n    首先SynchronousQueue是无界的，也就是说他存数任务的能力是没有限制的，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加。\n\n例子二：使用无界队列策略，即LinkedBlockingQueue\n    corePoolSize大小的线程数会一直运行，忙完当前的，就从队列中拿任务开始运行。要防止任务疯长，比如任务运行的实行比较长\n\n例子三：有界队列，使用ArrayBlockingQueue。\n    这个是最为复杂的使用，所以JDK不推荐使用。与上面的相比，最大的特点便是可以防止资源耗尽的情况发生。假设，所有的任务都永远无法执行完。\n    对于首先来的A,B来说直接运行，接下来，如果来了C,D，他们会被放到queue中，如果接下来再来E,F，则增加线程运行E，F。但是如果再来任务，队列无法再接受了，\n    线程数也到达最大的限制了，所以就会使用拒绝策略来处理。\n```\n\n#### 拒绝策略\n```textmate\n在ThreadPoolExecutor中已经默认包含了4中拒绝策略\n1.CallerRunsPolicy\n    线程调用运行该任务的 execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n             r.run();\n         }\n    }\n这个策略显然不想放弃执行任务。但是由于池中已经没有任何资源了，那么就直接使用调用该execute的线程本身来执行。\n\n2.AbortPolicy\n    处理程序遭到拒绝将抛出运行时RejectedExecutionException\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n       throw new RejectedExecutionException();\n    }\n    这种策略直接抛出异常，丢弃任务。\n\n3.DiscardPolicy\n    不能执行的任务将被删除\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {}\n    这种策略和AbortPolicy几乎一样，也是丢弃任务，只不过他不抛出异常。\n\n4.DiscardOldestPolicy\n    如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            e.getQueue().poll();\n            e.execute(r);\n        }\n    }\n    该策略就稍微复杂一些，在pool没有关闭的前提下首先丢掉缓存在队列中的最早的任务，然后重新尝试运行该任务。这个策略需要适当小心。\n    设想:如果其他线程都还在运行，那么新来任务踢掉旧任务，缓存在queue中，再来一个任务又会踢掉queue中最老任务。\n```\n\n#### 总结\n```textmate\n总结：\nkeepAliveTime和maximumPoolSize及BlockingQueue的类型均有关系。如果BlockingQueue是无界的，那么永远不会触发maximumPoolSize，自然keepAliveTime也就没有了意义。\n反之，如果核心数较小，有界BlockingQueue数值又较小，同时keepAliveTime又设的很小，如果任务频繁，那么系统就会频繁的申请回收线程\n```\n\n#### 配置计算公式\n```textmate\n为了使CPU达到期望使用率，线程池的最优大小为\n线程个数 = cpu个数 * cpu利用率 * （1+ IO处理时间 / CPU处理时间)\n```\n","slug":"backend/java/thread/threadPool","published":1,"updated":"2021-02-09T06:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyryb006njrnvbmmrhor8","content":"<h4 id=\"构造方法签名\"><a href=\"#构造方法签名\" class=\"headerlink\" title=\"构造方法签名\"></a>构造方法签名</h4><pre><code class=\"textmate\">ThreadPoolExecutor(int corePoolSize,\n        int maximumPoolSize,\n        long keepAliveTime,\n        TimeUnit unit,\n        BlockingQueue&lt;Runnable&gt; workQueue,\n        ThreadFactory threadFactory,\n        RejectedExecutionHandler handler)\n\ncorePoolSize - 池中所保存的线程数，包括空闲线程。\nmaximumPoolSize - 池中允许的最大线程数。\nkeepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\nunit - keepAliveTime参数的时间单位。\nworkQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\nthreadFactory - 执行程序创建新线程时使用的工厂。\nhandler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</code></pre>\n<h4 id=\"官方封装好的线程池\"><a href=\"#官方封装好的线程池\" class=\"headerlink\" title=\"官方封装好的线程池\"></a>官方封装好的线程池</h4><pre><code class=\"textmate\">ThreadPoolExecutor是Executors类的底层实现。\n\n1. newSingleThreadExecutor（单个后台线程）\n    创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。\n    此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n2.newFixedThreadPool（固定大小线程池）\n    创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，\n    如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n3. newCachedThreadPool（无界线程池，可以进行自动线程回收）\n    创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，\n    那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。\n    此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n4.newScheduledThreadPool\n    创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</code></pre>\n<h4 id=\"排队策略\"><a href=\"#排队策略\" class=\"headerlink\" title=\"排队策略\"></a>排队策略</h4><pre><code class=\"textmate\">排队有三种通用策略：\n\n1.直接提交\n    工作队列的默认选项是 SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，\n    则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。\n    直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n2.无界队列。\n    使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。\n    这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，\n    适合于使用无界队列；例如，在 Web页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n3.有界队列。\n    当使用有限的 maximumPoolSizes时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。\n    队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。\n    如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU使用率较高，\n    但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</code></pre>\n<h4 id=\"BlockingQueue的选择\"><a href=\"#BlockingQueue的选择\" class=\"headerlink\" title=\"BlockingQueue的选择\"></a>BlockingQueue的选择</h4><pre><code class=\"textmate\">例子一：使用直接提交策略，也即SynchronousQueue。\n    首先SynchronousQueue是无界的，也就是说他存数任务的能力是没有限制的，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加。\n\n例子二：使用无界队列策略，即LinkedBlockingQueue\n    corePoolSize大小的线程数会一直运行，忙完当前的，就从队列中拿任务开始运行。要防止任务疯长，比如任务运行的实行比较长\n\n例子三：有界队列，使用ArrayBlockingQueue。\n    这个是最为复杂的使用，所以JDK不推荐使用。与上面的相比，最大的特点便是可以防止资源耗尽的情况发生。假设，所有的任务都永远无法执行完。\n    对于首先来的A,B来说直接运行，接下来，如果来了C,D，他们会被放到queue中，如果接下来再来E,F，则增加线程运行E，F。但是如果再来任务，队列无法再接受了，\n    线程数也到达最大的限制了，所以就会使用拒绝策略来处理。</code></pre>\n<h4 id=\"拒绝策略\"><a href=\"#拒绝策略\" class=\"headerlink\" title=\"拒绝策略\"></a>拒绝策略</h4><pre><code class=\"textmate\">在ThreadPoolExecutor中已经默认包含了4中拒绝策略\n1.CallerRunsPolicy\n    线程调用运行该任务的 execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;\n        if (!e.isShutdown()) &#123;\n             r.run();\n         &#125;\n    &#125;\n这个策略显然不想放弃执行任务。但是由于池中已经没有任何资源了，那么就直接使用调用该execute的线程本身来执行。\n\n2.AbortPolicy\n    处理程序遭到拒绝将抛出运行时RejectedExecutionException\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;\n       throw new RejectedExecutionException();\n    &#125;\n    这种策略直接抛出异常，丢弃任务。\n\n3.DiscardPolicy\n    不能执行的任务将被删除\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;&#125;\n    这种策略和AbortPolicy几乎一样，也是丢弃任务，只不过他不抛出异常。\n\n4.DiscardOldestPolicy\n    如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;\n        if (!e.isShutdown()) &#123;\n            e.getQueue().poll();\n            e.execute(r);\n        &#125;\n    &#125;\n    该策略就稍微复杂一些，在pool没有关闭的前提下首先丢掉缓存在队列中的最早的任务，然后重新尝试运行该任务。这个策略需要适当小心。\n    设想:如果其他线程都还在运行，那么新来任务踢掉旧任务，缓存在queue中，再来一个任务又会踢掉queue中最老任务。</code></pre>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code class=\"textmate\">总结：\nkeepAliveTime和maximumPoolSize及BlockingQueue的类型均有关系。如果BlockingQueue是无界的，那么永远不会触发maximumPoolSize，自然keepAliveTime也就没有了意义。\n反之，如果核心数较小，有界BlockingQueue数值又较小，同时keepAliveTime又设的很小，如果任务频繁，那么系统就会频繁的申请回收线程</code></pre>\n<h4 id=\"配置计算公式\"><a href=\"#配置计算公式\" class=\"headerlink\" title=\"配置计算公式\"></a>配置计算公式</h4><pre><code class=\"textmate\">为了使CPU达到期望使用率，线程池的最优大小为\n线程个数 = cpu个数 * cpu利用率 * （1+ IO处理时间 / CPU处理时间)</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"构造方法签名\"><a href=\"#构造方法签名\" class=\"headerlink\" title=\"构造方法签名\"></a>构造方法签名</h4><pre><code class=\"textmate\">ThreadPoolExecutor(int corePoolSize,\n        int maximumPoolSize,\n        long keepAliveTime,\n        TimeUnit unit,\n        BlockingQueue&lt;Runnable&gt; workQueue,\n        ThreadFactory threadFactory,\n        RejectedExecutionHandler handler)\n\ncorePoolSize - 池中所保存的线程数，包括空闲线程。\nmaximumPoolSize - 池中允许的最大线程数。\nkeepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\nunit - keepAliveTime参数的时间单位。\nworkQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\nthreadFactory - 执行程序创建新线程时使用的工厂。\nhandler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</code></pre>\n<h4 id=\"官方封装好的线程池\"><a href=\"#官方封装好的线程池\" class=\"headerlink\" title=\"官方封装好的线程池\"></a>官方封装好的线程池</h4><pre><code class=\"textmate\">ThreadPoolExecutor是Executors类的底层实现。\n\n1. newSingleThreadExecutor（单个后台线程）\n    创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。\n    此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n2.newFixedThreadPool（固定大小线程池）\n    创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，\n    如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n3. newCachedThreadPool（无界线程池，可以进行自动线程回收）\n    创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，\n    那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。\n    此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n4.newScheduledThreadPool\n    创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</code></pre>\n<h4 id=\"排队策略\"><a href=\"#排队策略\" class=\"headerlink\" title=\"排队策略\"></a>排队策略</h4><pre><code class=\"textmate\">排队有三种通用策略：\n\n1.直接提交\n    工作队列的默认选项是 SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，\n    则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。\n    直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n2.无界队列。\n    使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。\n    这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，\n    适合于使用无界队列；例如，在 Web页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n3.有界队列。\n    当使用有限的 maximumPoolSizes时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。\n    队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。\n    如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU使用率较高，\n    但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</code></pre>\n<h4 id=\"BlockingQueue的选择\"><a href=\"#BlockingQueue的选择\" class=\"headerlink\" title=\"BlockingQueue的选择\"></a>BlockingQueue的选择</h4><pre><code class=\"textmate\">例子一：使用直接提交策略，也即SynchronousQueue。\n    首先SynchronousQueue是无界的，也就是说他存数任务的能力是没有限制的，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加。\n\n例子二：使用无界队列策略，即LinkedBlockingQueue\n    corePoolSize大小的线程数会一直运行，忙完当前的，就从队列中拿任务开始运行。要防止任务疯长，比如任务运行的实行比较长\n\n例子三：有界队列，使用ArrayBlockingQueue。\n    这个是最为复杂的使用，所以JDK不推荐使用。与上面的相比，最大的特点便是可以防止资源耗尽的情况发生。假设，所有的任务都永远无法执行完。\n    对于首先来的A,B来说直接运行，接下来，如果来了C,D，他们会被放到queue中，如果接下来再来E,F，则增加线程运行E，F。但是如果再来任务，队列无法再接受了，\n    线程数也到达最大的限制了，所以就会使用拒绝策略来处理。</code></pre>\n<h4 id=\"拒绝策略\"><a href=\"#拒绝策略\" class=\"headerlink\" title=\"拒绝策略\"></a>拒绝策略</h4><pre><code class=\"textmate\">在ThreadPoolExecutor中已经默认包含了4中拒绝策略\n1.CallerRunsPolicy\n    线程调用运行该任务的 execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;\n        if (!e.isShutdown()) &#123;\n             r.run();\n         &#125;\n    &#125;\n这个策略显然不想放弃执行任务。但是由于池中已经没有任何资源了，那么就直接使用调用该execute的线程本身来执行。\n\n2.AbortPolicy\n    处理程序遭到拒绝将抛出运行时RejectedExecutionException\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;\n       throw new RejectedExecutionException();\n    &#125;\n    这种策略直接抛出异常，丢弃任务。\n\n3.DiscardPolicy\n    不能执行的任务将被删除\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;&#125;\n    这种策略和AbortPolicy几乎一样，也是丢弃任务，只不过他不抛出异常。\n\n4.DiscardOldestPolicy\n    如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;\n        if (!e.isShutdown()) &#123;\n            e.getQueue().poll();\n            e.execute(r);\n        &#125;\n    &#125;\n    该策略就稍微复杂一些，在pool没有关闭的前提下首先丢掉缓存在队列中的最早的任务，然后重新尝试运行该任务。这个策略需要适当小心。\n    设想:如果其他线程都还在运行，那么新来任务踢掉旧任务，缓存在queue中，再来一个任务又会踢掉queue中最老任务。</code></pre>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code class=\"textmate\">总结：\nkeepAliveTime和maximumPoolSize及BlockingQueue的类型均有关系。如果BlockingQueue是无界的，那么永远不会触发maximumPoolSize，自然keepAliveTime也就没有了意义。\n反之，如果核心数较小，有界BlockingQueue数值又较小，同时keepAliveTime又设的很小，如果任务频繁，那么系统就会频繁的申请回收线程</code></pre>\n<h4 id=\"配置计算公式\"><a href=\"#配置计算公式\" class=\"headerlink\" title=\"配置计算公式\"></a>配置计算公式</h4><pre><code class=\"textmate\">为了使CPU达到期望使用率，线程池的最优大小为\n线程个数 = cpu个数 * cpu利用率 * （1+ IO处理时间 / CPU处理时间)</code></pre>\n"},{"title":"SpringFramework源码学习","date":"2021-07-26T07:05:00.000Z","_content":"\n### StartDemo\n```java\npublic class StartDemo {\n   public static void main(String[] args) {\n      ApplicationContext context =\n            new AnnotationConfigApplicationContext(\"com.my.config\");\n      TestConfig testConfig = context.getBean(TestConfig.class);\n      System.out.println(\"==========>main\");\n      System.out.println(testConfig.getValue());\n   }\n}\n```\n### 关键类\n- AnnotationConfigApplicationContext\n```textmate\n根据包扫描对象\n```\n- RootBeanDefinition\n```textmate\n记录扫描到的类的具体信息(描述类)\n```\n- BeanFactoryPostProcessor\n```textmate\n接口，可自定义参与类初始化过程逻辑\n\t工厂钩子，允许自定义修改应用程序上下文的 bean 定义，调整上下文底层 bean 工厂的 bean 属性值。\n\tBeanFactoryPostProcessor是在spring容器加载了bean的定义文件之后，在bean实例化之前执行的。接口方法的入参是ConfigurrableListableBeanFactory，使用该参数，可以获取到相关bean的定义信息\n```\n- BeanPostProcessor\n```textmate\n后置处理器父类，有很多子类；不同子类提供了不同的实现方法，参与到bean初始化过程中\n\t例：AutowiredAnnotationBeanPostProcessor\n\t可以在spring容器实例化bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。\n\tBeanPostProcessor的执行顺序是在BeanFactoryPostProcessor之后。\n\t内置实现: \n\torg.springframework.context.annotation.CommonAnnotationBeanPostProcessor：支持@Resource注解的注入\n    org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor：支持@Required注解的注入\n    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor：支持@Autowired注解的注入\n\n```\n### 简易流程\n```textmate\n生命周期 加载 -> 实例化 -> 初始化 -> 使用 -> 销毁\nscan -> beanPorcessor(描述bean信息) -> 放到 configMap 中 -> refresh -> 通过bean工厂实例化类 -> 放到单例池中\n```\n### AnnotationConfigApplicationContext详解\n- 类图\n  ![类图](https://gitee.com/im-fan/fan-pic/raw/master/images/springframework-bean-uml.png)\n- 流程图\n  ![执行流程](https://gitee.com/im-fan/fan-pic/raw/master/images/spring-start-process.png)\n\n\n### 解决循环依赖\n- [疯狂创客圈(转)](https://www.cnblogs.com/crazymakercircle/p/14465630.html)\n- 主要流程图\n  ![spring解决循环依赖流程(转)](https://gitee.com/im-fan/fan-pic/raw/master/images/spring-cycle-refrence.png)\n","source":"_posts/backend/spring/framework/springframework-2.md","raw":"---\ntitle: SpringFramework源码学习\ndate: 2021-07-26 15:05:00\ntags:\n- SpringFramework\ncategories:\n- 后端\n- 框架\n---\n\n### StartDemo\n```java\npublic class StartDemo {\n   public static void main(String[] args) {\n      ApplicationContext context =\n            new AnnotationConfigApplicationContext(\"com.my.config\");\n      TestConfig testConfig = context.getBean(TestConfig.class);\n      System.out.println(\"==========>main\");\n      System.out.println(testConfig.getValue());\n   }\n}\n```\n### 关键类\n- AnnotationConfigApplicationContext\n```textmate\n根据包扫描对象\n```\n- RootBeanDefinition\n```textmate\n记录扫描到的类的具体信息(描述类)\n```\n- BeanFactoryPostProcessor\n```textmate\n接口，可自定义参与类初始化过程逻辑\n\t工厂钩子，允许自定义修改应用程序上下文的 bean 定义，调整上下文底层 bean 工厂的 bean 属性值。\n\tBeanFactoryPostProcessor是在spring容器加载了bean的定义文件之后，在bean实例化之前执行的。接口方法的入参是ConfigurrableListableBeanFactory，使用该参数，可以获取到相关bean的定义信息\n```\n- BeanPostProcessor\n```textmate\n后置处理器父类，有很多子类；不同子类提供了不同的实现方法，参与到bean初始化过程中\n\t例：AutowiredAnnotationBeanPostProcessor\n\t可以在spring容器实例化bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。\n\tBeanPostProcessor的执行顺序是在BeanFactoryPostProcessor之后。\n\t内置实现: \n\torg.springframework.context.annotation.CommonAnnotationBeanPostProcessor：支持@Resource注解的注入\n    org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor：支持@Required注解的注入\n    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor：支持@Autowired注解的注入\n\n```\n### 简易流程\n```textmate\n生命周期 加载 -> 实例化 -> 初始化 -> 使用 -> 销毁\nscan -> beanPorcessor(描述bean信息) -> 放到 configMap 中 -> refresh -> 通过bean工厂实例化类 -> 放到单例池中\n```\n### AnnotationConfigApplicationContext详解\n- 类图\n  ![类图](https://gitee.com/im-fan/fan-pic/raw/master/images/springframework-bean-uml.png)\n- 流程图\n  ![执行流程](https://gitee.com/im-fan/fan-pic/raw/master/images/spring-start-process.png)\n\n\n### 解决循环依赖\n- [疯狂创客圈(转)](https://www.cnblogs.com/crazymakercircle/p/14465630.html)\n- 主要流程图\n  ![spring解决循环依赖流程(转)](https://gitee.com/im-fan/fan-pic/raw/master/images/spring-cycle-refrence.png)\n","slug":"backend/spring/framework/springframework-2","published":1,"updated":"2021-08-19T01:41:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyryb006pjrnv9su585rn","content":"<h3 id=\"StartDemo\"><a href=\"#StartDemo\" class=\"headerlink\" title=\"StartDemo\"></a>StartDemo</h3><pre><code class=\"java\">public class StartDemo &#123;\n   public static void main(String[] args) &#123;\n      ApplicationContext context =\n            new AnnotationConfigApplicationContext(&quot;com.my.config&quot;);\n      TestConfig testConfig = context.getBean(TestConfig.class);\n      System.out.println(&quot;==========&gt;main&quot;);\n      System.out.println(testConfig.getValue());\n   &#125;\n&#125;</code></pre>\n<h3 id=\"关键类\"><a href=\"#关键类\" class=\"headerlink\" title=\"关键类\"></a>关键类</h3><ul>\n<li>AnnotationConfigApplicationContext<pre><code class=\"textmate\">根据包扫描对象</code></pre>\n</li>\n<li>RootBeanDefinition<pre><code class=\"textmate\">记录扫描到的类的具体信息(描述类)</code></pre>\n</li>\n<li>BeanFactoryPostProcessor<pre><code class=\"textmate\">接口，可自定义参与类初始化过程逻辑\n  工厂钩子，允许自定义修改应用程序上下文的 bean 定义，调整上下文底层 bean 工厂的 bean 属性值。\n  BeanFactoryPostProcessor是在spring容器加载了bean的定义文件之后，在bean实例化之前执行的。接口方法的入参是ConfigurrableListableBeanFactory，使用该参数，可以获取到相关bean的定义信息</code></pre>\n</li>\n<li>BeanPostProcessor<pre><code class=\"textmate\">后置处理器父类，有很多子类；不同子类提供了不同的实现方法，参与到bean初始化过程中\n  例：AutowiredAnnotationBeanPostProcessor\n  可以在spring容器实例化bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。\n  BeanPostProcessor的执行顺序是在BeanFactoryPostProcessor之后。\n  内置实现: \n  org.springframework.context.annotation.CommonAnnotationBeanPostProcessor：支持@Resource注解的注入\n  org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor：支持@Required注解的注入\n  org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor：支持@Autowired注解的注入\n</code></pre>\n</li>\n</ul>\n<pre><code>### 简易流程\n```textmate\n生命周期 加载 -&gt; 实例化 -&gt; 初始化 -&gt; 使用 -&gt; 销毁\nscan -&gt; beanPorcessor(描述bean信息) -&gt; 放到 configMap 中 -&gt; refresh -&gt; 通过bean工厂实例化类 -&gt; 放到单例池中</code></pre>\n<h3 id=\"AnnotationConfigApplicationContext详解\"><a href=\"#AnnotationConfigApplicationContext详解\" class=\"headerlink\" title=\"AnnotationConfigApplicationContext详解\"></a>AnnotationConfigApplicationContext详解</h3><ul>\n<li>类图<br><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/springframework-bean-uml.png\" alt=\"类图\"></li>\n<li>流程图<br><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/spring-start-process.png\" alt=\"执行流程\"></li>\n</ul>\n<h3 id=\"解决循环依赖\"><a href=\"#解决循环依赖\" class=\"headerlink\" title=\"解决循环依赖\"></a>解决循环依赖</h3><ul>\n<li><a href=\"https://www.cnblogs.com/crazymakercircle/p/14465630.html\">疯狂创客圈(转)</a></li>\n<li>主要流程图<br><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/spring-cycle-refrence.png\" alt=\"spring解决循环依赖流程(转)\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"StartDemo\"><a href=\"#StartDemo\" class=\"headerlink\" title=\"StartDemo\"></a>StartDemo</h3><pre><code class=\"java\">public class StartDemo &#123;\n   public static void main(String[] args) &#123;\n      ApplicationContext context =\n            new AnnotationConfigApplicationContext(&quot;com.my.config&quot;);\n      TestConfig testConfig = context.getBean(TestConfig.class);\n      System.out.println(&quot;==========&gt;main&quot;);\n      System.out.println(testConfig.getValue());\n   &#125;\n&#125;</code></pre>\n<h3 id=\"关键类\"><a href=\"#关键类\" class=\"headerlink\" title=\"关键类\"></a>关键类</h3><ul>\n<li>AnnotationConfigApplicationContext<pre><code class=\"textmate\">根据包扫描对象</code></pre>\n</li>\n<li>RootBeanDefinition<pre><code class=\"textmate\">记录扫描到的类的具体信息(描述类)</code></pre>\n</li>\n<li>BeanFactoryPostProcessor<pre><code class=\"textmate\">接口，可自定义参与类初始化过程逻辑\n  工厂钩子，允许自定义修改应用程序上下文的 bean 定义，调整上下文底层 bean 工厂的 bean 属性值。\n  BeanFactoryPostProcessor是在spring容器加载了bean的定义文件之后，在bean实例化之前执行的。接口方法的入参是ConfigurrableListableBeanFactory，使用该参数，可以获取到相关bean的定义信息</code></pre>\n</li>\n<li>BeanPostProcessor<pre><code class=\"textmate\">后置处理器父类，有很多子类；不同子类提供了不同的实现方法，参与到bean初始化过程中\n  例：AutowiredAnnotationBeanPostProcessor\n  可以在spring容器实例化bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。\n  BeanPostProcessor的执行顺序是在BeanFactoryPostProcessor之后。\n  内置实现: \n  org.springframework.context.annotation.CommonAnnotationBeanPostProcessor：支持@Resource注解的注入\n  org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor：支持@Required注解的注入\n  org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor：支持@Autowired注解的注入\n</code></pre>\n</li>\n</ul>\n<pre><code>### 简易流程\n```textmate\n生命周期 加载 -&gt; 实例化 -&gt; 初始化 -&gt; 使用 -&gt; 销毁\nscan -&gt; beanPorcessor(描述bean信息) -&gt; 放到 configMap 中 -&gt; refresh -&gt; 通过bean工厂实例化类 -&gt; 放到单例池中</code></pre>\n<h3 id=\"AnnotationConfigApplicationContext详解\"><a href=\"#AnnotationConfigApplicationContext详解\" class=\"headerlink\" title=\"AnnotationConfigApplicationContext详解\"></a>AnnotationConfigApplicationContext详解</h3><ul>\n<li>类图<br><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/springframework-bean-uml.png\" alt=\"类图\"></li>\n<li>流程图<br><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/spring-start-process.png\" alt=\"执行流程\"></li>\n</ul>\n<h3 id=\"解决循环依赖\"><a href=\"#解决循环依赖\" class=\"headerlink\" title=\"解决循环依赖\"></a>解决循环依赖</h3><ul>\n<li><a href=\"https://www.cnblogs.com/crazymakercircle/p/14465630.html\">疯狂创客圈(转)</a></li>\n<li>主要流程图<br><img src=\"https://gitee.com/im-fan/fan-pic/raw/master/images/spring-cycle-refrence.png\" alt=\"spring解决循环依赖流程(转)\"></li>\n</ul>\n"},{"title":"SpringFramework源码编译","date":"2021-06-26T12:00:00.000Z","_content":"\n## SpringFramework5.2.x编译步骤(Mac下)\n### 使用工具\n- jdk1.8\n- Spring-Framework5.2.x 源码\n- Gradle 5.6.4\n- Idea2021\n\n### Gradle安装配置(编译工具)\n- [Gradle官网](https://gradle.org/)\n- [下载页面](https://gradle.org/releases/)\n\n#### 方式一、压缩包(推荐)\n> 建议下载源码中标识的gradle版本(源码gradle/wrapper/gradle-wrapper.properties中)\n```textmate\n1.下载压缩包，解压至~/software/文件夹下\n2.设置环境变量\n   echo $SHELL 先查看当前shell\n   /bin/bash 则修改 ~/.bash_profile 文件\n   /bin/zsh 则修改 ~/.zshrc 文件\n   添加以下配置:\n        export GRADLE_HOME=/Users/mac/software/gradle\n        export PATH=$PATH:$GRADLE_HOME/bin\n    source ~/.zshrc 或 source ~/.bash_profile 刷新\n3.验证安装\n  gradle -v\n```\n- 添加Gradle配置\n```groovy\nallprojects{\n   repositories {\n       def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'\n       all { ArtifactRepository repo ->\n           if(repo instanceof MavenArtifactRepository){\n               def url = repo.url.toString()\n               if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n                   project.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n                   remove repo\n               }\n           }\n       }\n       maven {\n           url REPOSITORY_URL\n       }\n   }\n}\n```\n\n#### 方式二、brew安装\n> 可能不是你想要的版本，注意！！！\n```shell\nbrew install gradle\n```\n\n#### 方式三、旧版本升级命令(没试过)\n```shell\n./gradlew wrapper --gradle-version=7.1 --distribution-type=bin\n```\n\n### Idea安装配置Gradle\n```textmate\n1.搜索并安装插件 \n    菜单: Preferences -> Plugins\n    插件名(2个): Gradle / Gradle Extension\n2.配置\n    菜单: Preferences -> Build -> Build Tools -> Gradle\n    配置项: 设置Gradle user home(仓库目录)\n```\n\n### Idea编译项目\n```textmate\n1.导入\n   File -> Open -> 打开 Spring-Framework5.2x源码中 build.gradle\n2.等待编译完成\n   正常情况下一次编译通过，不熟悉gradle的话建议先不要改 settings.gradle 和 build.gradle 内容，否则会编译失败；\n3.其他\n   出现其他异常先参考源码中 import-into-XXX.md 文档\n```\n\n### 新建项目测试\n- 1.新建模块my-demo，类型选Gradle\n- 2.将新建的模块加到项目中(idea自动新增)\n```textmate\nsettings.gradle 中新增 include 'my-demo'\n```\n- 3.引入模块\n```groovy\n// my-demo/build.gradle中引入模块\ndependencies 下新增 compile(project(\":spring-context\"))\n```\n- 4.新建配置类及测试代码\n```java\n//配置类\n//如果注解引入失败，则在\n@Component\npublic class TestConfig {\n}\n\n//测试类，打印成功则说明编译成功\npublic class StartDemo {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\"com.my.config\");\n        System.out.println(context.getBean(TestConfig.class));\n    }\n}\n```\n","source":"_posts/backend/spring/framework/springframework-1.md","raw":"---\ntitle: SpringFramework源码编译\ndate: 2021-06-26 20:00:00\ntags:\n- SpringFramework \ncategories:\n- 后端  \n- 框架\n---\n\n## SpringFramework5.2.x编译步骤(Mac下)\n### 使用工具\n- jdk1.8\n- Spring-Framework5.2.x 源码\n- Gradle 5.6.4\n- Idea2021\n\n### Gradle安装配置(编译工具)\n- [Gradle官网](https://gradle.org/)\n- [下载页面](https://gradle.org/releases/)\n\n#### 方式一、压缩包(推荐)\n> 建议下载源码中标识的gradle版本(源码gradle/wrapper/gradle-wrapper.properties中)\n```textmate\n1.下载压缩包，解压至~/software/文件夹下\n2.设置环境变量\n   echo $SHELL 先查看当前shell\n   /bin/bash 则修改 ~/.bash_profile 文件\n   /bin/zsh 则修改 ~/.zshrc 文件\n   添加以下配置:\n        export GRADLE_HOME=/Users/mac/software/gradle\n        export PATH=$PATH:$GRADLE_HOME/bin\n    source ~/.zshrc 或 source ~/.bash_profile 刷新\n3.验证安装\n  gradle -v\n```\n- 添加Gradle配置\n```groovy\nallprojects{\n   repositories {\n       def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'\n       all { ArtifactRepository repo ->\n           if(repo instanceof MavenArtifactRepository){\n               def url = repo.url.toString()\n               if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {\n                   project.logger.lifecycle \"Repository ${repo.url} replaced by $REPOSITORY_URL.\"\n                   remove repo\n               }\n           }\n       }\n       maven {\n           url REPOSITORY_URL\n       }\n   }\n}\n```\n\n#### 方式二、brew安装\n> 可能不是你想要的版本，注意！！！\n```shell\nbrew install gradle\n```\n\n#### 方式三、旧版本升级命令(没试过)\n```shell\n./gradlew wrapper --gradle-version=7.1 --distribution-type=bin\n```\n\n### Idea安装配置Gradle\n```textmate\n1.搜索并安装插件 \n    菜单: Preferences -> Plugins\n    插件名(2个): Gradle / Gradle Extension\n2.配置\n    菜单: Preferences -> Build -> Build Tools -> Gradle\n    配置项: 设置Gradle user home(仓库目录)\n```\n\n### Idea编译项目\n```textmate\n1.导入\n   File -> Open -> 打开 Spring-Framework5.2x源码中 build.gradle\n2.等待编译完成\n   正常情况下一次编译通过，不熟悉gradle的话建议先不要改 settings.gradle 和 build.gradle 内容，否则会编译失败；\n3.其他\n   出现其他异常先参考源码中 import-into-XXX.md 文档\n```\n\n### 新建项目测试\n- 1.新建模块my-demo，类型选Gradle\n- 2.将新建的模块加到项目中(idea自动新增)\n```textmate\nsettings.gradle 中新增 include 'my-demo'\n```\n- 3.引入模块\n```groovy\n// my-demo/build.gradle中引入模块\ndependencies 下新增 compile(project(\":spring-context\"))\n```\n- 4.新建配置类及测试代码\n```java\n//配置类\n//如果注解引入失败，则在\n@Component\npublic class TestConfig {\n}\n\n//测试类，打印成功则说明编译成功\npublic class StartDemo {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\"com.my.config\");\n        System.out.println(context.getBean(TestConfig.class));\n    }\n}\n```\n","slug":"backend/spring/framework/springframework-1","published":1,"updated":"2021-08-19T01:36:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyryc006rjrnv1s6q2n97","content":"<h2 id=\"SpringFramework5-2-x编译步骤-Mac下\"><a href=\"#SpringFramework5-2-x编译步骤-Mac下\" class=\"headerlink\" title=\"SpringFramework5.2.x编译步骤(Mac下)\"></a>SpringFramework5.2.x编译步骤(Mac下)</h2><h3 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h3><ul>\n<li>jdk1.8</li>\n<li>Spring-Framework5.2.x 源码</li>\n<li>Gradle 5.6.4</li>\n<li>Idea2021</li>\n</ul>\n<h3 id=\"Gradle安装配置-编译工具\"><a href=\"#Gradle安装配置-编译工具\" class=\"headerlink\" title=\"Gradle安装配置(编译工具)\"></a>Gradle安装配置(编译工具)</h3><ul>\n<li><a href=\"https://gradle.org/\">Gradle官网</a></li>\n<li><a href=\"https://gradle.org/releases/\">下载页面</a></li>\n</ul>\n<h4 id=\"方式一、压缩包-推荐\"><a href=\"#方式一、压缩包-推荐\" class=\"headerlink\" title=\"方式一、压缩包(推荐)\"></a>方式一、压缩包(推荐)</h4><blockquote>\n<p>建议下载源码中标识的gradle版本(源码gradle/wrapper/gradle-wrapper.properties中)</p>\n</blockquote>\n<pre><code class=\"textmate\">1.下载压缩包，解压至~/software/文件夹下\n2.设置环境变量\n   echo $SHELL 先查看当前shell\n   /bin/bash 则修改 ~/.bash_profile 文件\n   /bin/zsh 则修改 ~/.zshrc 文件\n   添加以下配置:\n        export GRADLE_HOME=/Users/mac/software/gradle\n        export PATH=$PATH:$GRADLE_HOME/bin\n    source ~/.zshrc 或 source ~/.bash_profile 刷新\n3.验证安装\n  gradle -v</code></pre>\n<ul>\n<li>添加Gradle配置<pre><code class=\"groovy\">allprojects&#123;\n repositories &#123;\n     def REPOSITORY_URL = &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;\n     all &#123; ArtifactRepository repo -&gt;\n         if(repo instanceof MavenArtifactRepository)&#123;\n             def url = repo.url.toString()\n             if (url.startsWith(&#39;https://repo1.maven.org/maven2&#39;) || url.startsWith(&#39;https://jcenter.bintray.com/&#39;)) &#123;\n                 project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;\n                 remove repo\n             &#125;\n         &#125;\n     &#125;\n     maven &#123;\n         url REPOSITORY_URL\n     &#125;\n &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"方式二、brew安装\"><a href=\"#方式二、brew安装\" class=\"headerlink\" title=\"方式二、brew安装\"></a>方式二、brew安装</h4><blockquote>\n<p>可能不是你想要的版本，注意！！！</p>\n</blockquote>\n<pre><code class=\"shell\">brew install gradle</code></pre>\n<h4 id=\"方式三、旧版本升级命令-没试过\"><a href=\"#方式三、旧版本升级命令-没试过\" class=\"headerlink\" title=\"方式三、旧版本升级命令(没试过)\"></a>方式三、旧版本升级命令(没试过)</h4><pre><code class=\"shell\">./gradlew wrapper --gradle-version=7.1 --distribution-type=bin</code></pre>\n<h3 id=\"Idea安装配置Gradle\"><a href=\"#Idea安装配置Gradle\" class=\"headerlink\" title=\"Idea安装配置Gradle\"></a>Idea安装配置Gradle</h3><pre><code class=\"textmate\">1.搜索并安装插件 \n    菜单: Preferences -&gt; Plugins\n    插件名(2个): Gradle / Gradle Extension\n2.配置\n    菜单: Preferences -&gt; Build -&gt; Build Tools -&gt; Gradle\n    配置项: 设置Gradle user home(仓库目录)</code></pre>\n<h3 id=\"Idea编译项目\"><a href=\"#Idea编译项目\" class=\"headerlink\" title=\"Idea编译项目\"></a>Idea编译项目</h3><pre><code class=\"textmate\">1.导入\n   File -&gt; Open -&gt; 打开 Spring-Framework5.2x源码中 build.gradle\n2.等待编译完成\n   正常情况下一次编译通过，不熟悉gradle的话建议先不要改 settings.gradle 和 build.gradle 内容，否则会编译失败；\n3.其他\n   出现其他异常先参考源码中 import-into-XXX.md 文档</code></pre>\n<h3 id=\"新建项目测试\"><a href=\"#新建项目测试\" class=\"headerlink\" title=\"新建项目测试\"></a>新建项目测试</h3><ul>\n<li>1.新建模块my-demo，类型选Gradle</li>\n<li>2.将新建的模块加到项目中(idea自动新增)<pre><code class=\"textmate\">settings.gradle 中新增 include &#39;my-demo&#39;</code></pre>\n</li>\n<li>3.引入模块<pre><code class=\"groovy\">// my-demo/build.gradle中引入模块\ndependencies 下新增 compile(project(&quot;:spring-context&quot;))</code></pre>\n</li>\n<li>4.新建配置类及测试代码<pre><code class=\"java\">//配置类\n//如果注解引入失败，则在\n@Component\npublic class TestConfig &#123;\n&#125;\n</code></pre>\n</li>\n</ul>\n<p>//测试类，打印成功则说明编译成功<br>public class StartDemo {<br>    public static void main(String[] args) {<br>        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(“com.my.config”);<br>        System.out.println(context.getBean(TestConfig.class));<br>    }<br>}</p>\n<pre><code></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SpringFramework5-2-x编译步骤-Mac下\"><a href=\"#SpringFramework5-2-x编译步骤-Mac下\" class=\"headerlink\" title=\"SpringFramework5.2.x编译步骤(Mac下)\"></a>SpringFramework5.2.x编译步骤(Mac下)</h2><h3 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h3><ul>\n<li>jdk1.8</li>\n<li>Spring-Framework5.2.x 源码</li>\n<li>Gradle 5.6.4</li>\n<li>Idea2021</li>\n</ul>\n<h3 id=\"Gradle安装配置-编译工具\"><a href=\"#Gradle安装配置-编译工具\" class=\"headerlink\" title=\"Gradle安装配置(编译工具)\"></a>Gradle安装配置(编译工具)</h3><ul>\n<li><a href=\"https://gradle.org/\">Gradle官网</a></li>\n<li><a href=\"https://gradle.org/releases/\">下载页面</a></li>\n</ul>\n<h4 id=\"方式一、压缩包-推荐\"><a href=\"#方式一、压缩包-推荐\" class=\"headerlink\" title=\"方式一、压缩包(推荐)\"></a>方式一、压缩包(推荐)</h4><blockquote>\n<p>建议下载源码中标识的gradle版本(源码gradle/wrapper/gradle-wrapper.properties中)</p>\n</blockquote>\n<pre><code class=\"textmate\">1.下载压缩包，解压至~/software/文件夹下\n2.设置环境变量\n   echo $SHELL 先查看当前shell\n   /bin/bash 则修改 ~/.bash_profile 文件\n   /bin/zsh 则修改 ~/.zshrc 文件\n   添加以下配置:\n        export GRADLE_HOME=/Users/mac/software/gradle\n        export PATH=$PATH:$GRADLE_HOME/bin\n    source ~/.zshrc 或 source ~/.bash_profile 刷新\n3.验证安装\n  gradle -v</code></pre>\n<ul>\n<li>添加Gradle配置<pre><code class=\"groovy\">allprojects&#123;\n repositories &#123;\n     def REPOSITORY_URL = &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;\n     all &#123; ArtifactRepository repo -&gt;\n         if(repo instanceof MavenArtifactRepository)&#123;\n             def url = repo.url.toString()\n             if (url.startsWith(&#39;https://repo1.maven.org/maven2&#39;) || url.startsWith(&#39;https://jcenter.bintray.com/&#39;)) &#123;\n                 project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;\n                 remove repo\n             &#125;\n         &#125;\n     &#125;\n     maven &#123;\n         url REPOSITORY_URL\n     &#125;\n &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"方式二、brew安装\"><a href=\"#方式二、brew安装\" class=\"headerlink\" title=\"方式二、brew安装\"></a>方式二、brew安装</h4><blockquote>\n<p>可能不是你想要的版本，注意！！！</p>\n</blockquote>\n<pre><code class=\"shell\">brew install gradle</code></pre>\n<h4 id=\"方式三、旧版本升级命令-没试过\"><a href=\"#方式三、旧版本升级命令-没试过\" class=\"headerlink\" title=\"方式三、旧版本升级命令(没试过)\"></a>方式三、旧版本升级命令(没试过)</h4><pre><code class=\"shell\">./gradlew wrapper --gradle-version=7.1 --distribution-type=bin</code></pre>\n<h3 id=\"Idea安装配置Gradle\"><a href=\"#Idea安装配置Gradle\" class=\"headerlink\" title=\"Idea安装配置Gradle\"></a>Idea安装配置Gradle</h3><pre><code class=\"textmate\">1.搜索并安装插件 \n    菜单: Preferences -&gt; Plugins\n    插件名(2个): Gradle / Gradle Extension\n2.配置\n    菜单: Preferences -&gt; Build -&gt; Build Tools -&gt; Gradle\n    配置项: 设置Gradle user home(仓库目录)</code></pre>\n<h3 id=\"Idea编译项目\"><a href=\"#Idea编译项目\" class=\"headerlink\" title=\"Idea编译项目\"></a>Idea编译项目</h3><pre><code class=\"textmate\">1.导入\n   File -&gt; Open -&gt; 打开 Spring-Framework5.2x源码中 build.gradle\n2.等待编译完成\n   正常情况下一次编译通过，不熟悉gradle的话建议先不要改 settings.gradle 和 build.gradle 内容，否则会编译失败；\n3.其他\n   出现其他异常先参考源码中 import-into-XXX.md 文档</code></pre>\n<h3 id=\"新建项目测试\"><a href=\"#新建项目测试\" class=\"headerlink\" title=\"新建项目测试\"></a>新建项目测试</h3><ul>\n<li>1.新建模块my-demo，类型选Gradle</li>\n<li>2.将新建的模块加到项目中(idea自动新增)<pre><code class=\"textmate\">settings.gradle 中新增 include &#39;my-demo&#39;</code></pre>\n</li>\n<li>3.引入模块<pre><code class=\"groovy\">// my-demo/build.gradle中引入模块\ndependencies 下新增 compile(project(&quot;:spring-context&quot;))</code></pre>\n</li>\n<li>4.新建配置类及测试代码<pre><code class=\"java\">//配置类\n//如果注解引入失败，则在\n@Component\npublic class TestConfig &#123;\n&#125;\n</code></pre>\n</li>\n</ul>\n<p>//测试类，打印成功则说明编译成功<br>public class StartDemo {<br>    public static void main(String[] args) {<br>        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(“com.my.config”);<br>        System.out.println(context.getBean(TestConfig.class));<br>    }<br>}</p>\n<pre><code></code></pre>\n"},{"title":"对象转换工具-MapStruct","description":"对象转换","date":"2020-10-02T07:51:46.000Z","_content":"\n\n## MapStruct\n[MapStruct](http://mapstruct.org/)是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。\n生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。\n\n### 如何接入MapStruct\n\n- [官网文档](http://mapstruct.org/documentation/installation/)\n\nIDEA Support: https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\n\n\n### Java Bean属性拷贝性能对比\n\nget/set >= [MapStruct](http://mapstruct.org/) > [JMapper](https://jmapper-framework.github.io/jmapper-core/)  >  [\"beanCopier(cglib)\"](https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java) > Orika > ModelMapper > Spring BeanUtils > Dozer > Apache BeanUtils\n  \n性能对比数据来源：\n - https://www.baeldung.com/java-performance-mapping-frameworks\n - https://java.libhunt.com/categories/337-bean-mapping\n \n说明：\n- get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。\n- beanCopier 性能较高，属性名和类型有较高的匹配要求。\n- MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。\n- Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。\n- Spring BeanUtils 性能一般，只能支持相关名称的拷贝。\n- Dozer 性能差，使用简单，编写xml不方便。\n- Apache BeanUtils 性能差。\n    \n### demo\n\n实例代码:\n```java\n/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = \"spring\",uses = {DateHandWritten.class})\n@Mapper(\n        uses = {DateHandWritten.class, UserNameHandWritten.class},\n        imports = {LocalDateUtil.class}\n        )\npublic interface PersonMapper {\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings({\n            //@Mapping(source = \"name\",target = \"name\",ignore = true),\n            @Mapping(target = \"birthExpressionFormat\", expression = \"java(LocalDateUtil.getDateNow().toString())\"),\n            @Mapping(source = \"name\",target = \"address.name\"),\n            @Mapping(source = \"price\",target = \"price\",numberFormat = \"#.00\"),\n            @Mapping(source = \"birthDate\",target = \"birthDateFormat\",dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    })\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = \"toDto\")\n    List<PersonDto> toDtos(List<Person> person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = \"toDto\")\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n}\n\n/**定义自定义转换规则*/\npublic class DateHandWritten {\n\n    public String asString(Date date) {\n        return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n            .format( date ) : null;\n    }\n\n    public Date asDate(String date) {\n        try {\n            return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n                .parse( date ) : null;\n        }\n        catch ( ParseException e ) {\n            throw new RuntimeException( e );\n        }\n    }\n}\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten {\n\n    public String asUsername(String username) {\n        return  \"被修改后的name\";\n    } \n}\n\n/***使用实例*/\npublic class MapStructTest {\n\n    @Test\n    public void personTest(){\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * {\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573411245,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:31 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}\n        * */\n    }\n\n    @Test\n    public void personListTest(){\n        Person person = buildPerson();\n        List<PersonDto> personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [{\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573439123,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:59 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}]\n        * */\n    }\n\n    private Person buildPerson(){\n        Address a = new Address();\n        a.setName(\"demo\");\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(\"中国人\").addresses(Lists.newArrayList(a)).build();\n    }\n}\n\n```\n### 实现原理\n在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。\n","source":"_posts/backend/java/utils/convert/map-struct.md","raw":"---\ntitle: 对象转换工具-MapStruct\ndescription: 对象转换\ndate: 2020-10-02 15:51:46\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n\n## MapStruct\n[MapStruct](http://mapstruct.org/)是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。\n生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。\n\n### 如何接入MapStruct\n\n- [官网文档](http://mapstruct.org/documentation/installation/)\n\nIDEA Support: https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\n\n\n### Java Bean属性拷贝性能对比\n\nget/set >= [MapStruct](http://mapstruct.org/) > [JMapper](https://jmapper-framework.github.io/jmapper-core/)  >  [\"beanCopier(cglib)\"](https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java) > Orika > ModelMapper > Spring BeanUtils > Dozer > Apache BeanUtils\n  \n性能对比数据来源：\n - https://www.baeldung.com/java-performance-mapping-frameworks\n - https://java.libhunt.com/categories/337-bean-mapping\n \n说明：\n- get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。\n- beanCopier 性能较高，属性名和类型有较高的匹配要求。\n- MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。\n- Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。\n- Spring BeanUtils 性能一般，只能支持相关名称的拷贝。\n- Dozer 性能差，使用简单，编写xml不方便。\n- Apache BeanUtils 性能差。\n    \n### demo\n\n实例代码:\n```java\n/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = \"spring\",uses = {DateHandWritten.class})\n@Mapper(\n        uses = {DateHandWritten.class, UserNameHandWritten.class},\n        imports = {LocalDateUtil.class}\n        )\npublic interface PersonMapper {\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings({\n            //@Mapping(source = \"name\",target = \"name\",ignore = true),\n            @Mapping(target = \"birthExpressionFormat\", expression = \"java(LocalDateUtil.getDateNow().toString())\"),\n            @Mapping(source = \"name\",target = \"address.name\"),\n            @Mapping(source = \"price\",target = \"price\",numberFormat = \"#.00\"),\n            @Mapping(source = \"birthDate\",target = \"birthDateFormat\",dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    })\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = \"toDto\")\n    List<PersonDto> toDtos(List<Person> person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = \"toDto\")\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n}\n\n/**定义自定义转换规则*/\npublic class DateHandWritten {\n\n    public String asString(Date date) {\n        return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n            .format( date ) : null;\n    }\n\n    public Date asDate(String date) {\n        try {\n            return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n                .parse( date ) : null;\n        }\n        catch ( ParseException e ) {\n            throw new RuntimeException( e );\n        }\n    }\n}\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten {\n\n    public String asUsername(String username) {\n        return  \"被修改后的name\";\n    } \n}\n\n/***使用实例*/\npublic class MapStructTest {\n\n    @Test\n    public void personTest(){\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * {\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573411245,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:31 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}\n        * */\n    }\n\n    @Test\n    public void personListTest(){\n        Person person = buildPerson();\n        List<PersonDto> personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [{\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573439123,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:59 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}]\n        * */\n    }\n\n    private Person buildPerson(){\n        Address a = new Address();\n        a.setName(\"demo\");\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(\"中国人\").addresses(Lists.newArrayList(a)).build();\n    }\n}\n\n```\n### 实现原理\n在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。\n","slug":"backend/java/utils/convert/map-struct","published":1,"updated":"2021-03-20T06:38:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyryc006sjrnv9rwf4ef7","content":"<h2 id=\"MapStruct\"><a href=\"#MapStruct\" class=\"headerlink\" title=\"MapStruct\"></a>MapStruct</h2><p><a href=\"http://mapstruct.org/\">MapStruct</a>是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。<br>生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。</p>\n<h3 id=\"如何接入MapStruct\"><a href=\"#如何接入MapStruct\" class=\"headerlink\" title=\"如何接入MapStruct\"></a>如何接入MapStruct</h3><ul>\n<li><a href=\"http://mapstruct.org/documentation/installation/\">官网文档</a></li>\n</ul>\n<p>IDEA Support: <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\">https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions</a></p>\n<h3 id=\"Java-Bean属性拷贝性能对比\"><a href=\"#Java-Bean属性拷贝性能对比\" class=\"headerlink\" title=\"Java Bean属性拷贝性能对比\"></a>Java Bean属性拷贝性能对比</h3><p>get/set &gt;= <a href=\"http://mapstruct.org/\">MapStruct</a> &gt; <a href=\"https://jmapper-framework.github.io/jmapper-core/\">JMapper</a>  &gt;  <a href=\"https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java\">“beanCopier(cglib)”</a> &gt; Orika &gt; ModelMapper &gt; Spring BeanUtils &gt; Dozer &gt; Apache BeanUtils</p>\n<p>性能对比数据来源：</p>\n<ul>\n<li><a href=\"https://www.baeldung.com/java-performance-mapping-frameworks\">https://www.baeldung.com/java-performance-mapping-frameworks</a></li>\n<li><a href=\"https://java.libhunt.com/categories/337-bean-mapping\">https://java.libhunt.com/categories/337-bean-mapping</a></li>\n</ul>\n<p>说明：</p>\n<ul>\n<li>get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。</li>\n<li>beanCopier 性能较高，属性名和类型有较高的匹配要求。</li>\n<li>MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。</li>\n<li>Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。</li>\n<li>Spring BeanUtils 性能一般，只能支持相关名称的拷贝。</li>\n<li>Dozer 性能差，使用简单，编写xml不方便。</li>\n<li>Apache BeanUtils 性能差。</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>实例代码:</p>\n<pre><code class=\"java\">/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = &quot;spring&quot;,uses = &#123;DateHandWritten.class&#125;)\n@Mapper(\n        uses = &#123;DateHandWritten.class, UserNameHandWritten.class&#125;,\n        imports = &#123;LocalDateUtil.class&#125;\n        )\npublic interface PersonMapper &#123;\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings(&#123;\n            //@Mapping(source = &quot;name&quot;,target = &quot;name&quot;,ignore = true),\n            @Mapping(target = &quot;birthExpressionFormat&quot;, expression = &quot;java(LocalDateUtil.getDateNow().toString())&quot;),\n            @Mapping(source = &quot;name&quot;,target = &quot;address.name&quot;),\n            @Mapping(source = &quot;price&quot;,target = &quot;price&quot;,numberFormat = &quot;#.00&quot;),\n            @Mapping(source = &quot;birthDate&quot;,target = &quot;birthDateFormat&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)\n    &#125;)\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = &quot;toDto&quot;)\n    List&lt;PersonDto&gt; toDtos(List&lt;Person&gt; person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = &quot;toDto&quot;)\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n&#125;\n\n/**定义自定义转换规则*/\npublic class DateHandWritten &#123;\n\n    public String asString(Date date) &#123;\n        return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n            .format( date ) : null;\n    &#125;\n\n    public Date asDate(String date) &#123;\n        try &#123;\n            return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n                .parse( date ) : null;\n        &#125;\n        catch ( ParseException e ) &#123;\n            throw new RuntimeException( e );\n        &#125;\n    &#125;\n&#125;\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten &#123;\n\n    public String asUsername(String username) &#123;\n        return  &quot;被修改后的name&quot;;\n    &#125; \n&#125;\n\n/***使用实例*/\npublic class MapStructTest &#123;\n\n    @Test\n    public void personTest()&#123;\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * &#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573411245,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:31 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;\n        * */\n    &#125;\n\n    @Test\n    public void personListTest()&#123;\n        Person person = buildPerson();\n        List&lt;PersonDto&gt; personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [&#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573439123,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:59 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;]\n        * */\n    &#125;\n\n    private Person buildPerson()&#123;\n        Address a = new Address();\n        a.setName(&quot;demo&quot;);\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(&quot;中国人&quot;).addresses(Lists.newArrayList(a)).build();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MapStruct\"><a href=\"#MapStruct\" class=\"headerlink\" title=\"MapStruct\"></a>MapStruct</h2><p><a href=\"http://mapstruct.org/\">MapStruct</a>是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。<br>生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。</p>\n<h3 id=\"如何接入MapStruct\"><a href=\"#如何接入MapStruct\" class=\"headerlink\" title=\"如何接入MapStruct\"></a>如何接入MapStruct</h3><ul>\n<li><a href=\"http://mapstruct.org/documentation/installation/\">官网文档</a></li>\n</ul>\n<p>IDEA Support: <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\">https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions</a></p>\n<h3 id=\"Java-Bean属性拷贝性能对比\"><a href=\"#Java-Bean属性拷贝性能对比\" class=\"headerlink\" title=\"Java Bean属性拷贝性能对比\"></a>Java Bean属性拷贝性能对比</h3><p>get/set &gt;= <a href=\"http://mapstruct.org/\">MapStruct</a> &gt; <a href=\"https://jmapper-framework.github.io/jmapper-core/\">JMapper</a>  &gt;  <a href=\"https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java\">“beanCopier(cglib)”</a> &gt; Orika &gt; ModelMapper &gt; Spring BeanUtils &gt; Dozer &gt; Apache BeanUtils</p>\n<p>性能对比数据来源：</p>\n<ul>\n<li><a href=\"https://www.baeldung.com/java-performance-mapping-frameworks\">https://www.baeldung.com/java-performance-mapping-frameworks</a></li>\n<li><a href=\"https://java.libhunt.com/categories/337-bean-mapping\">https://java.libhunt.com/categories/337-bean-mapping</a></li>\n</ul>\n<p>说明：</p>\n<ul>\n<li>get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。</li>\n<li>beanCopier 性能较高，属性名和类型有较高的匹配要求。</li>\n<li>MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。</li>\n<li>Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。</li>\n<li>Spring BeanUtils 性能一般，只能支持相关名称的拷贝。</li>\n<li>Dozer 性能差，使用简单，编写xml不方便。</li>\n<li>Apache BeanUtils 性能差。</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>实例代码:</p>\n<pre><code class=\"java\">/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = &quot;spring&quot;,uses = &#123;DateHandWritten.class&#125;)\n@Mapper(\n        uses = &#123;DateHandWritten.class, UserNameHandWritten.class&#125;,\n        imports = &#123;LocalDateUtil.class&#125;\n        )\npublic interface PersonMapper &#123;\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings(&#123;\n            //@Mapping(source = &quot;name&quot;,target = &quot;name&quot;,ignore = true),\n            @Mapping(target = &quot;birthExpressionFormat&quot;, expression = &quot;java(LocalDateUtil.getDateNow().toString())&quot;),\n            @Mapping(source = &quot;name&quot;,target = &quot;address.name&quot;),\n            @Mapping(source = &quot;price&quot;,target = &quot;price&quot;,numberFormat = &quot;#.00&quot;),\n            @Mapping(source = &quot;birthDate&quot;,target = &quot;birthDateFormat&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)\n    &#125;)\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = &quot;toDto&quot;)\n    List&lt;PersonDto&gt; toDtos(List&lt;Person&gt; person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = &quot;toDto&quot;)\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n&#125;\n\n/**定义自定义转换规则*/\npublic class DateHandWritten &#123;\n\n    public String asString(Date date) &#123;\n        return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n            .format( date ) : null;\n    &#125;\n\n    public Date asDate(String date) &#123;\n        try &#123;\n            return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n                .parse( date ) : null;\n        &#125;\n        catch ( ParseException e ) &#123;\n            throw new RuntimeException( e );\n        &#125;\n    &#125;\n&#125;\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten &#123;\n\n    public String asUsername(String username) &#123;\n        return  &quot;被修改后的name&quot;;\n    &#125; \n&#125;\n\n/***使用实例*/\npublic class MapStructTest &#123;\n\n    @Test\n    public void personTest()&#123;\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * &#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573411245,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:31 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;\n        * */\n    &#125;\n\n    @Test\n    public void personListTest()&#123;\n        Person person = buildPerson();\n        List&lt;PersonDto&gt; personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [&#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573439123,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:59 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;]\n        * */\n    &#125;\n\n    private Person buildPerson()&#123;\n        Address a = new Address();\n        a.setName(&quot;demo&quot;);\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(&quot;中国人&quot;).addresses(Lists.newArrayList(a)).build();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。</p>\n"},{"title":"对象转换工具-Orika","description":"对象转换","date":"2021-03-20T06:15:00.000Z","_content":"\n## Orika\n- [官方文档](http://orika-mapper.github.io/orika-docs/)\n\n### 提供的能力\n```textmate\nOrika为开发者提供了如下功能：\n1.映射复杂的、深层次结构性对象。\n2.通过将嵌套属性映射到顶级属性，“拉平”或“展开”对象。\n3.自动创建映射，并且在部分或所有映射上自定义。\n4.创建转换器，以完全控制对象图中的任何特定对象集合的映射——按类型，甚至是通过特定的属性名。\n5.处理代理或增强对象（如Hibernate或各种模拟框架）\n6.用一个配置应用双向映射。\n7.为一个目标抽象类或接口映射到具体的实现类。\n8.映射POJO属性到Lists, Arrays, and Maps。\n```\n\n### 配置\n#### pom引用\n```textmate\n<!-- 方式一(推荐) -->\n<dependency>\n    <groupId>net.rakugakibox.spring.boot</groupId>\n    <artifactId>orika-spring-boot-starter</artifactId>\n    <version>1.9.0</version>\n</dependency>\n\n<!-- 方式二，需要在项目中加入配置类 -->\n<dependency>\n    <groupId>ma.glasnost.orika</groupId>\n    <artifactId>orika-core</artifactId>\n    <version>1.5.4</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n#### 方式二所需配置类(可选)\n```java\n/**\n * 可自定义转换规则\n * **/\n@Configuration\npublic class MapperFactoryAware {\n\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    @PostConstruct\n    public void init(){\n        mapperFactory.getConverterFactory().registerConverter(new BooleanConvert());\n    }\n\n    /** Boolean <=> Integer 互转 **/\n    private class BooleanConvert extends BidirectionalConverter<Boolean,Integer>{\n\n        @Override\n        public Integer convertTo(Boolean source, Type<Integer> destinationType, MappingContext mappingContext) {\n            return source ? 1 : 0;\n        }\n\n        @Override\n        public Boolean convertFrom(Integer source, Type<Boolean> destinationType, MappingContext mappingContext) {\n            return source == 1;\n        }\n    }\n}\n```\n\n### 案例\n#### 基础测试类\n```java\n// dto对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfoDTO {\n\n    private String userId;\n    private String userName;\n    private String createTime;\n    private List<String> ids;\n    private String dtoName;\n    private Integer sex;\n}\n\n// po对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfo {\n\n    private Integer userId;\n    private String userName;\n    private Date createTime;\n    private List<Integer> ids;\n    private String poName;\n    private Boolean sex;\n}\n```\n\n#### 简易demo(更多用法参考官方文档)\n```java\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n        classes = DemoApplication.class)\npublic class ConvertTest{\n\n    @Autowired\n    private MapperFacade mapperFacade;\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    //简易案例，属性名相同，类型不同\n    @Test\n    public void testSimple(){\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(\"aaaa\")\n                .createTime(new Date())\n                .build();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(\"po 2 dto =====> {}\", JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(\"dto 2 po =====> {}\", JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List<UserInfo> pos = new ArrayList<>();\n        pos.add(userInfo);\n        List<UserInfoDTO> dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(pos));\n\n    }\n\n    //属性名不同，需要先在mapperFactory中设置，然后获取到mapperFacade再使用\n    @Test\n    public void testDiff(){\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(\"aaaa\")\n                .createTime(new Date())\n                .poName(\"this is po\")\n                .build();\n\n        //不同字段互转\n        mapperFactory.classMap(UserInfo.class, UserInfoDTO.class)\n                .field(\"poName\", \"dtoName\")\n                .byDefault()\n                .register();\n        MapperFacade mapperFacade = mapperFactory.getMapperFacade();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(\"po 2 dto =====> {}\", JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(\"dto 2 po =====> {}\", JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List<UserInfo> pos = new ArrayList<>();\n        pos.add(userInfo);\n        List<UserInfoDTO> dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(pos));\n    }\n}\n```\n\n#### 执行结果\n```textmate\ntestSimple 执行结果:\n-po 2 dto =====> {\"createTime\":\"Wed Jun 02 10:11:51 CST 2021\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}\n-dto 2 po =====> {\"createTime\":1622650311000,\"ids\":[1002,1003,1004,1005],\"userId\":10001,\"userName\":\"aaaa\"}\n-pos 2 dtos =====> [{\"createTime\":\"Wed Jun 02 10:11:51 CST 2021\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}]\n-pos 2 dtos =====> [{\"createTime\":1622650311000,\"ids\":[1002,1003,1004,1005],\"userId\":10001,\"userName\":\"aaaa\"}]\n\ntestDiff 执行结果:\npo 2 dto =====> {\"createTime\":\"Sat Mar 20 14:30:46 CST 2021\",\"dtoName\":\"this is po\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}\ndto 2 po =====> {\"createTime\":1616272246000,\"ids\":[1002,1003,1004,1005],\"poName\":\"this is po\",\"userId\":10001,\"userName\":\"aaaa\"}\npos 2 dtos =====> [{\"createTime\":\"Sat Mar 20 14:30:46 CST 2021\",\"dtoName\":\"this is po\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}]\npos 2 dtos =====> [{\"createTime\":1616272246000,\"ids\":[1002,1003,1004,1005],\"poName\":\"this is po\",\"userId\":10001,\"userName\":\"aaaa\"}]\n```\n","source":"_posts/backend/java/utils/convert/orika.md","raw":"---\ntitle: 对象转换工具-Orika\ndescription: 对象转换\ndate: 2021-03-20 14:15:00\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n## Orika\n- [官方文档](http://orika-mapper.github.io/orika-docs/)\n\n### 提供的能力\n```textmate\nOrika为开发者提供了如下功能：\n1.映射复杂的、深层次结构性对象。\n2.通过将嵌套属性映射到顶级属性，“拉平”或“展开”对象。\n3.自动创建映射，并且在部分或所有映射上自定义。\n4.创建转换器，以完全控制对象图中的任何特定对象集合的映射——按类型，甚至是通过特定的属性名。\n5.处理代理或增强对象（如Hibernate或各种模拟框架）\n6.用一个配置应用双向映射。\n7.为一个目标抽象类或接口映射到具体的实现类。\n8.映射POJO属性到Lists, Arrays, and Maps。\n```\n\n### 配置\n#### pom引用\n```textmate\n<!-- 方式一(推荐) -->\n<dependency>\n    <groupId>net.rakugakibox.spring.boot</groupId>\n    <artifactId>orika-spring-boot-starter</artifactId>\n    <version>1.9.0</version>\n</dependency>\n\n<!-- 方式二，需要在项目中加入配置类 -->\n<dependency>\n    <groupId>ma.glasnost.orika</groupId>\n    <artifactId>orika-core</artifactId>\n    <version>1.5.4</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n#### 方式二所需配置类(可选)\n```java\n/**\n * 可自定义转换规则\n * **/\n@Configuration\npublic class MapperFactoryAware {\n\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    @PostConstruct\n    public void init(){\n        mapperFactory.getConverterFactory().registerConverter(new BooleanConvert());\n    }\n\n    /** Boolean <=> Integer 互转 **/\n    private class BooleanConvert extends BidirectionalConverter<Boolean,Integer>{\n\n        @Override\n        public Integer convertTo(Boolean source, Type<Integer> destinationType, MappingContext mappingContext) {\n            return source ? 1 : 0;\n        }\n\n        @Override\n        public Boolean convertFrom(Integer source, Type<Boolean> destinationType, MappingContext mappingContext) {\n            return source == 1;\n        }\n    }\n}\n```\n\n### 案例\n#### 基础测试类\n```java\n// dto对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfoDTO {\n\n    private String userId;\n    private String userName;\n    private String createTime;\n    private List<String> ids;\n    private String dtoName;\n    private Integer sex;\n}\n\n// po对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfo {\n\n    private Integer userId;\n    private String userName;\n    private Date createTime;\n    private List<Integer> ids;\n    private String poName;\n    private Boolean sex;\n}\n```\n\n#### 简易demo(更多用法参考官方文档)\n```java\n@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n        classes = DemoApplication.class)\npublic class ConvertTest{\n\n    @Autowired\n    private MapperFacade mapperFacade;\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    //简易案例，属性名相同，类型不同\n    @Test\n    public void testSimple(){\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(\"aaaa\")\n                .createTime(new Date())\n                .build();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(\"po 2 dto =====> {}\", JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(\"dto 2 po =====> {}\", JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List<UserInfo> pos = new ArrayList<>();\n        pos.add(userInfo);\n        List<UserInfoDTO> dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(pos));\n\n    }\n\n    //属性名不同，需要先在mapperFactory中设置，然后获取到mapperFacade再使用\n    @Test\n    public void testDiff(){\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(\"aaaa\")\n                .createTime(new Date())\n                .poName(\"this is po\")\n                .build();\n\n        //不同字段互转\n        mapperFactory.classMap(UserInfo.class, UserInfoDTO.class)\n                .field(\"poName\", \"dtoName\")\n                .byDefault()\n                .register();\n        MapperFacade mapperFacade = mapperFactory.getMapperFacade();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(\"po 2 dto =====> {}\", JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(\"dto 2 po =====> {}\", JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List<UserInfo> pos = new ArrayList<>();\n        pos.add(userInfo);\n        List<UserInfoDTO> dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(\"pos 2 dtos =====> {}\", JSON.toJSONString(pos));\n    }\n}\n```\n\n#### 执行结果\n```textmate\ntestSimple 执行结果:\n-po 2 dto =====> {\"createTime\":\"Wed Jun 02 10:11:51 CST 2021\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}\n-dto 2 po =====> {\"createTime\":1622650311000,\"ids\":[1002,1003,1004,1005],\"userId\":10001,\"userName\":\"aaaa\"}\n-pos 2 dtos =====> [{\"createTime\":\"Wed Jun 02 10:11:51 CST 2021\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}]\n-pos 2 dtos =====> [{\"createTime\":1622650311000,\"ids\":[1002,1003,1004,1005],\"userId\":10001,\"userName\":\"aaaa\"}]\n\ntestDiff 执行结果:\npo 2 dto =====> {\"createTime\":\"Sat Mar 20 14:30:46 CST 2021\",\"dtoName\":\"this is po\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}\ndto 2 po =====> {\"createTime\":1616272246000,\"ids\":[1002,1003,1004,1005],\"poName\":\"this is po\",\"userId\":10001,\"userName\":\"aaaa\"}\npos 2 dtos =====> [{\"createTime\":\"Sat Mar 20 14:30:46 CST 2021\",\"dtoName\":\"this is po\",\"ids\":[\"1002\",\"1003\",\"1004\",\"1005\"],\"userId\":\"10001\",\"userName\":\"aaaa\"}]\npos 2 dtos =====> [{\"createTime\":1616272246000,\"ids\":[1002,1003,1004,1005],\"poName\":\"this is po\",\"userId\":10001,\"userName\":\"aaaa\"}]\n```\n","slug":"backend/java/utils/convert/orika","published":1,"updated":"2021-06-02T02:12:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzxkyryc006wjrnv8odlaier","content":"<h2 id=\"Orika\"><a href=\"#Orika\" class=\"headerlink\" title=\"Orika\"></a>Orika</h2><ul>\n<li><a href=\"http://orika-mapper.github.io/orika-docs/\">官方文档</a></li>\n</ul>\n<h3 id=\"提供的能力\"><a href=\"#提供的能力\" class=\"headerlink\" title=\"提供的能力\"></a>提供的能力</h3><pre><code class=\"textmate\">Orika为开发者提供了如下功能：\n1.映射复杂的、深层次结构性对象。\n2.通过将嵌套属性映射到顶级属性，“拉平”或“展开”对象。\n3.自动创建映射，并且在部分或所有映射上自定义。\n4.创建转换器，以完全控制对象图中的任何特定对象集合的映射——按类型，甚至是通过特定的属性名。\n5.处理代理或增强对象（如Hibernate或各种模拟框架）\n6.用一个配置应用双向映射。\n7.为一个目标抽象类或接口映射到具体的实现类。\n8.映射POJO属性到Lists, Arrays, and Maps。</code></pre>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"pom引用\"><a href=\"#pom引用\" class=\"headerlink\" title=\"pom引用\"></a>pom引用</h4><pre><code class=\"textmate\">&lt;!-- 方式一(推荐) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;net.rakugakibox.spring.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;orika-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;1.9.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- 方式二，需要在项目中加入配置类 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;ma.glasnost.orika&lt;/groupId&gt;\n    &lt;artifactId&gt;orika-core&lt;/artifactId&gt;\n    &lt;version&gt;1.5.4&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n&lt;/dependency&gt;</code></pre>\n<h4 id=\"方式二所需配置类-可选\"><a href=\"#方式二所需配置类-可选\" class=\"headerlink\" title=\"方式二所需配置类(可选)\"></a>方式二所需配置类(可选)</h4><pre><code class=\"java\">/**\n * 可自定义转换规则\n * **/\n@Configuration\npublic class MapperFactoryAware &#123;\n\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    @PostConstruct\n    public void init()&#123;\n        mapperFactory.getConverterFactory().registerConverter(new BooleanConvert());\n    &#125;\n\n    /** Boolean &lt;=&gt; Integer 互转 **/\n    private class BooleanConvert extends BidirectionalConverter&lt;Boolean,Integer&gt;&#123;\n\n        @Override\n        public Integer convertTo(Boolean source, Type&lt;Integer&gt; destinationType, MappingContext mappingContext) &#123;\n            return source ? 1 : 0;\n        &#125;\n\n        @Override\n        public Boolean convertFrom(Integer source, Type&lt;Boolean&gt; destinationType, MappingContext mappingContext) &#123;\n            return source == 1;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><h4 id=\"基础测试类\"><a href=\"#基础测试类\" class=\"headerlink\" title=\"基础测试类\"></a>基础测试类</h4><pre><code class=\"java\">// dto对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfoDTO &#123;\n\n    private String userId;\n    private String userName;\n    private String createTime;\n    private List&lt;String&gt; ids;\n    private String dtoName;\n    private Integer sex;\n&#125;\n\n// po对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfo &#123;\n\n    private Integer userId;\n    private String userName;\n    private Date createTime;\n    private List&lt;Integer&gt; ids;\n    private String poName;\n    private Boolean sex;\n&#125;</code></pre>\n<h4 id=\"简易demo-更多用法参考官方文档\"><a href=\"#简易demo-更多用法参考官方文档\" class=\"headerlink\" title=\"简易demo(更多用法参考官方文档)\"></a>简易demo(更多用法参考官方文档)</h4><pre><code class=\"java\">@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n        classes = DemoApplication.class)\npublic class ConvertTest&#123;\n\n    @Autowired\n    private MapperFacade mapperFacade;\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    //简易案例，属性名相同，类型不同\n    @Test\n    public void testSimple()&#123;\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(&quot;aaaa&quot;)\n                .createTime(new Date())\n                .build();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(&quot;po 2 dto =====&gt; &#123;&#125;&quot;, JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(&quot;dto 2 po =====&gt; &#123;&#125;&quot;, JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List&lt;UserInfo&gt; pos = new ArrayList&lt;&gt;();\n        pos.add(userInfo);\n        List&lt;UserInfoDTO&gt; dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(pos));\n\n    &#125;\n\n    //属性名不同，需要先在mapperFactory中设置，然后获取到mapperFacade再使用\n    @Test\n    public void testDiff()&#123;\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(&quot;aaaa&quot;)\n                .createTime(new Date())\n                .poName(&quot;this is po&quot;)\n                .build();\n\n        //不同字段互转\n        mapperFactory.classMap(UserInfo.class, UserInfoDTO.class)\n                .field(&quot;poName&quot;, &quot;dtoName&quot;)\n                .byDefault()\n                .register();\n        MapperFacade mapperFacade = mapperFactory.getMapperFacade();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(&quot;po 2 dto =====&gt; &#123;&#125;&quot;, JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(&quot;dto 2 po =====&gt; &#123;&#125;&quot;, JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List&lt;UserInfo&gt; pos = new ArrayList&lt;&gt;();\n        pos.add(userInfo);\n        List&lt;UserInfoDTO&gt; dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(pos));\n    &#125;\n&#125;</code></pre>\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><pre><code class=\"textmate\">testSimple 执行结果:\n-po 2 dto =====&gt; &#123;&quot;createTime&quot;:&quot;Wed Jun 02 10:11:51 CST 2021&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;\n-dto 2 po =====&gt; &#123;&quot;createTime&quot;:1622650311000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;\n-pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:&quot;Wed Jun 02 10:11:51 CST 2021&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;]\n-pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:1622650311000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;]\n\ntestDiff 执行结果:\npo 2 dto =====&gt; &#123;&quot;createTime&quot;:&quot;Sat Mar 20 14:30:46 CST 2021&quot;,&quot;dtoName&quot;:&quot;this is po&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;\ndto 2 po =====&gt; &#123;&quot;createTime&quot;:1616272246000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;poName&quot;:&quot;this is po&quot;,&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;\npos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:&quot;Sat Mar 20 14:30:46 CST 2021&quot;,&quot;dtoName&quot;:&quot;this is po&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;]\npos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:1616272246000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;poName&quot;:&quot;this is po&quot;,&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;]</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Orika\"><a href=\"#Orika\" class=\"headerlink\" title=\"Orika\"></a>Orika</h2><ul>\n<li><a href=\"http://orika-mapper.github.io/orika-docs/\">官方文档</a></li>\n</ul>\n<h3 id=\"提供的能力\"><a href=\"#提供的能力\" class=\"headerlink\" title=\"提供的能力\"></a>提供的能力</h3><pre><code class=\"textmate\">Orika为开发者提供了如下功能：\n1.映射复杂的、深层次结构性对象。\n2.通过将嵌套属性映射到顶级属性，“拉平”或“展开”对象。\n3.自动创建映射，并且在部分或所有映射上自定义。\n4.创建转换器，以完全控制对象图中的任何特定对象集合的映射——按类型，甚至是通过特定的属性名。\n5.处理代理或增强对象（如Hibernate或各种模拟框架）\n6.用一个配置应用双向映射。\n7.为一个目标抽象类或接口映射到具体的实现类。\n8.映射POJO属性到Lists, Arrays, and Maps。</code></pre>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"pom引用\"><a href=\"#pom引用\" class=\"headerlink\" title=\"pom引用\"></a>pom引用</h4><pre><code class=\"textmate\">&lt;!-- 方式一(推荐) --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;net.rakugakibox.spring.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;orika-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;1.9.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- 方式二，需要在项目中加入配置类 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;ma.glasnost.orika&lt;/groupId&gt;\n    &lt;artifactId&gt;orika-core&lt;/artifactId&gt;\n    &lt;version&gt;1.5.4&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n&lt;/dependency&gt;</code></pre>\n<h4 id=\"方式二所需配置类-可选\"><a href=\"#方式二所需配置类-可选\" class=\"headerlink\" title=\"方式二所需配置类(可选)\"></a>方式二所需配置类(可选)</h4><pre><code class=\"java\">/**\n * 可自定义转换规则\n * **/\n@Configuration\npublic class MapperFactoryAware &#123;\n\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    @PostConstruct\n    public void init()&#123;\n        mapperFactory.getConverterFactory().registerConverter(new BooleanConvert());\n    &#125;\n\n    /** Boolean &lt;=&gt; Integer 互转 **/\n    private class BooleanConvert extends BidirectionalConverter&lt;Boolean,Integer&gt;&#123;\n\n        @Override\n        public Integer convertTo(Boolean source, Type&lt;Integer&gt; destinationType, MappingContext mappingContext) &#123;\n            return source ? 1 : 0;\n        &#125;\n\n        @Override\n        public Boolean convertFrom(Integer source, Type&lt;Boolean&gt; destinationType, MappingContext mappingContext) &#123;\n            return source == 1;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><h4 id=\"基础测试类\"><a href=\"#基础测试类\" class=\"headerlink\" title=\"基础测试类\"></a>基础测试类</h4><pre><code class=\"java\">// dto对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfoDTO &#123;\n\n    private String userId;\n    private String userName;\n    private String createTime;\n    private List&lt;String&gt; ids;\n    private String dtoName;\n    private Integer sex;\n&#125;\n\n// po对象\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserInfo &#123;\n\n    private Integer userId;\n    private String userName;\n    private Date createTime;\n    private List&lt;Integer&gt; ids;\n    private String poName;\n    private Boolean sex;\n&#125;</code></pre>\n<h4 id=\"简易demo-更多用法参考官方文档\"><a href=\"#简易demo-更多用法参考官方文档\" class=\"headerlink\" title=\"简易demo(更多用法参考官方文档)\"></a>简易demo(更多用法参考官方文档)</h4><pre><code class=\"java\">@Slf4j\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n        classes = DemoApplication.class)\npublic class ConvertTest&#123;\n\n    @Autowired\n    private MapperFacade mapperFacade;\n    @Autowired\n    private MapperFactory mapperFactory;\n\n    //简易案例，属性名相同，类型不同\n    @Test\n    public void testSimple()&#123;\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(&quot;aaaa&quot;)\n                .createTime(new Date())\n                .build();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(&quot;po 2 dto =====&gt; &#123;&#125;&quot;, JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(&quot;dto 2 po =====&gt; &#123;&#125;&quot;, JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List&lt;UserInfo&gt; pos = new ArrayList&lt;&gt;();\n        pos.add(userInfo);\n        List&lt;UserInfoDTO&gt; dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(pos));\n\n    &#125;\n\n    //属性名不同，需要先在mapperFactory中设置，然后获取到mapperFacade再使用\n    @Test\n    public void testDiff()&#123;\n        UserInfo userInfo = UserInfo.builder()\n                .userId(10001)\n                .ids(Arrays.asList(1002,1003,1004,1005))\n                .userName(&quot;aaaa&quot;)\n                .createTime(new Date())\n                .poName(&quot;this is po&quot;)\n                .build();\n\n        //不同字段互转\n        mapperFactory.classMap(UserInfo.class, UserInfoDTO.class)\n                .field(&quot;poName&quot;, &quot;dtoName&quot;)\n                .byDefault()\n                .register();\n        MapperFacade mapperFacade = mapperFactory.getMapperFacade();\n\n        //po 2 dto\n        UserInfoDTO result = mapperFacade.map(userInfo, UserInfoDTO.class);\n        log.info(&quot;po 2 dto =====&gt; &#123;&#125;&quot;, JSON.toJSONString(result));\n\n        //dto 2 po\n        UserInfo info = mapperFacade.map(result, UserInfo.class);\n        log.info(&quot;dto 2 po =====&gt; &#123;&#125;&quot;, JSON.toJSONString(info));\n\n        // pos 2 dtos\n        List&lt;UserInfo&gt; pos = new ArrayList&lt;&gt;();\n        pos.add(userInfo);\n        List&lt;UserInfoDTO&gt; dtos = mapperFacade.mapAsList(pos,UserInfoDTO.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(dtos));\n\n        // pos 2 dtos\n        pos = mapperFacade.mapAsList(dtos, UserInfo.class);\n        log.info(&quot;pos 2 dtos =====&gt; &#123;&#125;&quot;, JSON.toJSONString(pos));\n    &#125;\n&#125;</code></pre>\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><pre><code class=\"textmate\">testSimple 执行结果:\n-po 2 dto =====&gt; &#123;&quot;createTime&quot;:&quot;Wed Jun 02 10:11:51 CST 2021&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;\n-dto 2 po =====&gt; &#123;&quot;createTime&quot;:1622650311000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;\n-pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:&quot;Wed Jun 02 10:11:51 CST 2021&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;]\n-pos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:1622650311000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;]\n\ntestDiff 执行结果:\npo 2 dto =====&gt; &#123;&quot;createTime&quot;:&quot;Sat Mar 20 14:30:46 CST 2021&quot;,&quot;dtoName&quot;:&quot;this is po&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;\ndto 2 po =====&gt; &#123;&quot;createTime&quot;:1616272246000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;poName&quot;:&quot;this is po&quot;,&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;\npos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:&quot;Sat Mar 20 14:30:46 CST 2021&quot;,&quot;dtoName&quot;:&quot;this is po&quot;,&quot;ids&quot;:[&quot;1002&quot;,&quot;1003&quot;,&quot;1004&quot;,&quot;1005&quot;],&quot;userId&quot;:&quot;10001&quot;,&quot;userName&quot;:&quot;aaaa&quot;&#125;]\npos 2 dtos =====&gt; [&#123;&quot;createTime&quot;:1616272246000,&quot;ids&quot;:[1002,1003,1004,1005],&quot;poName&quot;:&quot;this is po&quot;,&quot;userId&quot;:10001,&quot;userName&quot;:&quot;aaaa&quot;&#125;]</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckzxkyrxk0001jrnvaw4vfx61","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyrxt000tjrnvegmoft34"},{"post_id":"ckzxkyrxk0001jrnvaw4vfx61","category_id":"ckzxkyrxq000ijrnvboyrft96","_id":"ckzxkyrxt000xjrnvdvuc9e8g"},{"post_id":"ckzxkyrxn0007jrnv3xfu5msn","category_id":"ckzxkyrxr000njrnv50i8fp3c","_id":"ckzxkyrxt0010jrnvbx337szl"},{"post_id":"ckzxkyrxo000bjrnv4fq57h7x","category_id":"ckzxkyrxt000ujrnvcsp4cipd","_id":"ckzxkyrxu0016jrnvg4ra7pre"},{"post_id":"ckzxkyrxl0002jrnv9n5x955v","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyrxv001djrnvbahe3ztl"},{"post_id":"ckzxkyrxl0002jrnv9n5x955v","category_id":"ckzxkyrxu0011jrnv98ee1uye","_id":"ckzxkyrxv001hjrnv54h900fo"},{"post_id":"ckzxkyrxo000cjrnv3wpk8opo","category_id":"ckzxkyrxu0018jrnv1uuahlbt","_id":"ckzxkyrxw001ljrnvh3yzg5sf"},{"post_id":"ckzxkyrxv001cjrnv36xz7gdn","category_id":"ckzxkyrxr000njrnv50i8fp3c","_id":"ckzxkyrxx001ojrnv9rlubp5c"},{"post_id":"ckzxkyrxv001gjrnv2f38g6qt","category_id":"ckzxkyrxr000njrnv50i8fp3c","_id":"ckzxkyrxx001rjrnvfzvig1d7"},{"post_id":"ckzxkyrxp000fjrnv5lgecla7","category_id":"ckzxkyrxu0018jrnv1uuahlbt","_id":"ckzxkyrxy001ujrnv69j6e1p1"},{"post_id":"ckzxkyrxm0005jrnvht5cgha2","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyrxy001zjrnv3o8096ec"},{"post_id":"ckzxkyrxm0005jrnvht5cgha2","category_id":"ckzxkyrxw001kjrnv55oiecq7","_id":"ckzxkyrxy0021jrnvc9i6df2p"},{"post_id":"ckzxkyrxp000hjrnv5nxb0a5l","category_id":"ckzxkyrxu0018jrnv1uuahlbt","_id":"ckzxkyrxz0026jrnvccdmenj5"},{"post_id":"ckzxkyrxq000kjrnveyza2yja","category_id":"ckzxkyrxu0018jrnv1uuahlbt","_id":"ckzxkyrxz002ajrnvg7773iy3"},{"post_id":"ckzxkyrxq000mjrnv9z1xfmnx","category_id":"ckzxkyrxz0025jrnvape7f8qi","_id":"ckzxkyry0002hjrnveqnx2bn4"},{"post_id":"ckzxkyrxz0029jrnv8j5ha5k5","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry0002kjrnv8qgphqmu"},{"post_id":"ckzxkyrxz0029jrnv8j5ha5k5","category_id":"ckzxkyrxu0011jrnv98ee1uye","_id":"ckzxkyry0002ojrnv3h7yfyq0"},{"post_id":"ckzxkyrxz002djrnv3yaw97hl","category_id":"ckzxkyrxu0018jrnv1uuahlbt","_id":"ckzxkyry1002rjrnvfura17kc"},{"post_id":"ckzxkyrxs000qjrnvfrg52y8s","category_id":"ckzxkyrxz0025jrnvape7f8qi","_id":"ckzxkyry1002vjrnv7hi3axjm"},{"post_id":"ckzxkyrxz002ejrnvg5if1my1","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry1002yjrnv122gdub2"},{"post_id":"ckzxkyrxz002ejrnvg5if1my1","category_id":"ckzxkyrxu0011jrnv98ee1uye","_id":"ckzxkyry10031jrnv7kp85hkh"},{"post_id":"ckzxkyrxt000sjrnveh1zb03g","category_id":"ckzxkyrxz0025jrnvape7f8qi","_id":"ckzxkyry20035jrnv6smk5w9o"},{"post_id":"ckzxkyrxt000vjrnv7jtrc4kl","category_id":"ckzxkyrxz0025jrnvape7f8qi","_id":"ckzxkyry30038jrnve4jahiaw"},{"post_id":"ckzxkyrxt000zjrnv2kur0nsa","category_id":"ckzxkyrxz0025jrnvape7f8qi","_id":"ckzxkyry3003cjrnvh4ajbhhe"},{"post_id":"ckzxkyrxu0012jrnv8s9maong","category_id":"ckzxkyrxz0025jrnvape7f8qi","_id":"ckzxkyry3003fjrnv67539s9l"},{"post_id":"ckzxkyrxu0014jrnv2yaca9qb","category_id":"ckzxkyrxz0025jrnvape7f8qi","_id":"ckzxkyry4003jjrnv6oxy1cqy"},{"post_id":"ckzxkyrxu0017jrnv45e51ist","category_id":"ckzxkyry3003ejrnv4s707ygt","_id":"ckzxkyry4003ojrnvau5jbrex"},{"post_id":"ckzxkyrxu001ajrnvd0v09q5i","category_id":"ckzxkyry3003ejrnv4s707ygt","_id":"ckzxkyry4003rjrnvbd8dcphc"},{"post_id":"ckzxkyrxw001jjrnvam3phad9","category_id":"ckzxkyry4003njrnv8m2mc5rz","_id":"ckzxkyry4003vjrnv1h2f32t5"},{"post_id":"ckzxkyrxw001mjrnvfh4hcjq1","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry4003zjrnv0rvnahby"},{"post_id":"ckzxkyrxw001mjrnvfh4hcjq1","category_id":"ckzxkyry4003sjrnvf44f62zh","_id":"ckzxkyry50042jrnvgrp79hrw"},{"post_id":"ckzxkyrxx001qjrnvgowsaqpi","category_id":"ckzxkyry4003wjrnvbqbgexnl","_id":"ckzxkyry50043jrnvfkflf1o5"},{"post_id":"ckzxkyrxx001tjrnv7rwfbmyk","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry50047jrnv5rqvflpy"},{"post_id":"ckzxkyrxx001tjrnv7rwfbmyk","category_id":"ckzxkyry50040jrnv7dyqeoop","_id":"ckzxkyry5004bjrnv059g5ou5"},{"post_id":"ckzxkyrxy001wjrnv1ln26o0j","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry5004djrnv5a1ug6uh"},{"post_id":"ckzxkyrxy001wjrnv1ln26o0j","category_id":"ckzxkyry50044jrnv8tbg5y9k","_id":"ckzxkyry6004gjrnv7j8p7c0o"},{"post_id":"ckzxkyrxy0020jrnvdgqpfus3","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry6004ijrnv76ow53ws"},{"post_id":"ckzxkyrxy0020jrnvdgqpfus3","category_id":"ckzxkyry50049jrnvcc2kf6x3","_id":"ckzxkyry6004kjrnv4t6efto4"},{"post_id":"ckzxkyrxy0023jrnvgk372yv4","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry6004mjrnv9ovo6s3z"},{"post_id":"ckzxkyrxy0023jrnvgk372yv4","category_id":"ckzxkyry50049jrnvcc2kf6x3","_id":"ckzxkyry6004ojrnvcnq06x1h"},{"post_id":"ckzxkyrxz0027jrnv7e221old","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry6004qjrnv9mhs3tkd"},{"post_id":"ckzxkyrxz0027jrnv7e221old","category_id":"ckzxkyry50040jrnv7dyqeoop","_id":"ckzxkyry6004tjrnv2lf61osp"},{"post_id":"ckzxkyry0002jjrnvhbq71wt4","category_id":"ckzxkyry6004ljrnvaqmpfx3t","_id":"ckzxkyry6004xjrnv5uqqfjba"},{"post_id":"ckzxkyry0002ljrnvcbgya1um","category_id":"ckzxkyry6004ljrnvaqmpfx3t","_id":"ckzxkyry70050jrnv9ezl1cv1"},{"post_id":"ckzxkyry0002pjrnvdpkfgppf","category_id":"ckzxkyry6004ljrnvaqmpfx3t","_id":"ckzxkyry70054jrnv44y918z9"},{"post_id":"ckzxkyry1002sjrnvccce4spi","category_id":"ckzxkyry6004ljrnvaqmpfx3t","_id":"ckzxkyry70059jrnv5b2m03ar"},{"post_id":"ckzxkyry1002wjrnvbnlt4ysg","category_id":"ckzxkyry6004ljrnvaqmpfx3t","_id":"ckzxkyry7005bjrnv4l5w19l0"},{"post_id":"ckzxkyry1002zjrnv2m6yel1a","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry7005gjrnva4r9a0tc"},{"post_id":"ckzxkyry1002zjrnv2m6yel1a","category_id":"ckzxkyry70058jrnv9w4ygdzz","_id":"ckzxkyry7005jjrnv5y1z2pdk"},{"post_id":"ckzxkyry10033jrnv5er97ry5","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry8005ljrnv043cbsrd"},{"post_id":"ckzxkyry10033jrnv5er97ry5","category_id":"ckzxkyry7005djrnvek9q1bgt","_id":"ckzxkyry8005ojrnv29zv3q4t"},{"post_id":"ckzxkyry20036jrnvdarfd48g","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry8005rjrnveznyec2r"},{"post_id":"ckzxkyry20036jrnvdarfd48g","category_id":"ckzxkyry7005ijrnve1xre3h2","_id":"ckzxkyry8005tjrnvh9whbkn7"},{"post_id":"ckzxkyry3003ajrnvf9vz8nk1","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry8005vjrnv2av4e7rn"},{"post_id":"ckzxkyry3003ajrnvf9vz8nk1","category_id":"ckzxkyry7005djrnvek9q1bgt","_id":"ckzxkyry8005yjrnvaq26ho91"},{"post_id":"ckzxkyry3003djrnv3ezh39ia","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry80060jrnvgo1zh4zc"},{"post_id":"ckzxkyry3003djrnv3ezh39ia","category_id":"ckzxkyry8005qjrnv1svi7rfg","_id":"ckzxkyry90062jrnvak4l1oxd"},{"post_id":"ckzxkyry3003gjrnvdor7db8p","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyry90064jrnv1h8747g4"},{"post_id":"ckzxkyry3003gjrnvdor7db8p","category_id":"ckzxkyry7005djrnvek9q1bgt","_id":"ckzxkyry90066jrnvam0t3wa4"},{"post_id":"ckzxkyryb006pjrnv9su585rn","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryc006xjrnv80b08l59"},{"post_id":"ckzxkyryb006pjrnv9su585rn","category_id":"ckzxkyrxu0011jrnv98ee1uye","_id":"ckzxkyryd006zjrnv1p7fee75"},{"post_id":"ckzxkyryc006rjrnv1s6q2n97","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryd0072jrnv4el46kao"},{"post_id":"ckzxkyryc006rjrnv1s6q2n97","category_id":"ckzxkyrxu0011jrnv98ee1uye","_id":"ckzxkyryd0074jrnvagbkf7jy"},{"post_id":"ckzxkyryb006mjrnv1m1t2iwu","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryd0076jrnv94hf3nrd"},{"post_id":"ckzxkyryb006mjrnv1m1t2iwu","category_id":"ckzxkyryc006qjrnv7j2r85rx","_id":"ckzxkyryd0078jrnv6k5r1fu9"},{"post_id":"ckzxkyryc006sjrnv9rwf4ef7","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryd0079jrnvb9qjcvfg"},{"post_id":"ckzxkyryc006sjrnv9rwf4ef7","category_id":"ckzxkyry7005djrnvek9q1bgt","_id":"ckzxkyryd007bjrnv53kqbb3n"},{"post_id":"ckzxkyryc006wjrnv8odlaier","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryd007cjrnvey9i5zho"},{"post_id":"ckzxkyryc006wjrnv8odlaier","category_id":"ckzxkyry7005djrnvek9q1bgt","_id":"ckzxkyryd007djrnvglr33ker"},{"post_id":"ckzxkyryb006njrnvbmmrhor8","category_id":"ckzxkyrxm0003jrnvh9cxcjxo","_id":"ckzxkyryd007ejrnv9e1whfy7"},{"post_id":"ckzxkyryb006njrnvbmmrhor8","category_id":"ckzxkyryc006ujrnv75sw9k86","_id":"ckzxkyryd007fjrnvazf230nx"}],"PostTag":[{"post_id":"ckzxkyrxk0001jrnvaw4vfx61","tag_id":"ckzxkyrxm0004jrnv2os04f7d","_id":"ckzxkyrxo000ajrnvgj4f53zb"},{"post_id":"ckzxkyrxl0002jrnv9n5x955v","tag_id":"ckzxkyrxn0009jrnv9v497o5i","_id":"ckzxkyrxp000gjrnv81nr8afx"},{"post_id":"ckzxkyrxm0005jrnvht5cgha2","tag_id":"ckzxkyrxp000ejrnv6aacgaq9","_id":"ckzxkyrxq000ljrnva0so7119"},{"post_id":"ckzxkyrxq000kjrnveyza2yja","tag_id":"ckzxkyrxp000ejrnv6aacgaq9","_id":"ckzxkyrxr000ojrnvcp7eei3k"},{"post_id":"ckzxkyrxn0007jrnv3xfu5msn","tag_id":"ckzxkyrxq000jjrnv311u4diy","_id":"ckzxkyrxt000rjrnvc6f79fa6"},{"post_id":"ckzxkyrxo000bjrnv4fq57h7x","tag_id":"ckzxkyrxr000pjrnv4f5v1ns1","_id":"ckzxkyrxt000yjrnvacqg3mdk"},{"post_id":"ckzxkyrxo000cjrnv3wpk8opo","tag_id":"ckzxkyrxt000wjrnvc1cqhpnc","_id":"ckzxkyrxu0015jrnvfih925ki"},{"post_id":"ckzxkyrxp000fjrnv5lgecla7","tag_id":"ckzxkyrxu0013jrnv7bsdc22r","_id":"ckzxkyrxv001bjrnv0v1x0ubj"},{"post_id":"ckzxkyrxp000hjrnv5nxb0a5l","tag_id":"ckzxkyrxu0019jrnv7ryk9n3f","_id":"ckzxkyrxw001ijrnvhszadqwd"},{"post_id":"ckzxkyrxq000mjrnv9z1xfmnx","tag_id":"ckzxkyrxv001fjrnvg8zr8dbz","_id":"ckzxkyrxx001pjrnv77js6rs9"},{"post_id":"ckzxkyrxs000qjrnvfrg52y8s","tag_id":"ckzxkyrxx001njrnvgw8qgyys","_id":"ckzxkyrxy001xjrnvek2a00nf"},{"post_id":"ckzxkyrxt000sjrnveh1zb03g","tag_id":"ckzxkyrxy001vjrnvb4e7cd34","_id":"ckzxkyrxy0024jrnv2nsy8cky"},{"post_id":"ckzxkyrxt000vjrnv7jtrc4kl","tag_id":"ckzxkyrxy0022jrnvfoj4cpur","_id":"ckzxkyrxz002bjrnvds5gba4l"},{"post_id":"ckzxkyrxt000zjrnv2kur0nsa","tag_id":"ckzxkyrxz0028jrnv2dfz4y8h","_id":"ckzxkyry0002ijrnvgbp2d2k1"},{"post_id":"ckzxkyrxu0012jrnv8s9maong","tag_id":"ckzxkyry0002fjrnv28yrdzsy","_id":"ckzxkyry1002qjrnv8r9zgj60"},{"post_id":"ckzxkyrxu0014jrnv2yaca9qb","tag_id":"ckzxkyry0002mjrnvg07xg50w","_id":"ckzxkyry1002xjrnvdwlxfuo5"},{"post_id":"ckzxkyrxu0017jrnv45e51ist","tag_id":"ckzxkyry1002tjrnv4zb71zd2","_id":"ckzxkyry20034jrnv6u9kfzw8"},{"post_id":"ckzxkyrxu001ajrnvd0v09q5i","tag_id":"ckzxkyry1002tjrnv4zb71zd2","_id":"ckzxkyry3003bjrnv6ti8bmn8"},{"post_id":"ckzxkyrxv001cjrnv36xz7gdn","tag_id":"ckzxkyry30039jrnv82s1fbdw","_id":"ckzxkyry3003ijrnv4vgz2bve"},{"post_id":"ckzxkyrxv001gjrnv2f38g6qt","tag_id":"ckzxkyry3003hjrnvbrsn1md4","_id":"ckzxkyry4003mjrnvhr3b9a4i"},{"post_id":"ckzxkyrxw001jjrnvam3phad9","tag_id":"ckzxkyry4003ljrnv8snwcjme","_id":"ckzxkyry4003qjrnv7msn80c8"},{"post_id":"ckzxkyrxw001mjrnvfh4hcjq1","tag_id":"ckzxkyry4003pjrnv094l8guf","_id":"ckzxkyry4003ujrnvblye2q0e"},{"post_id":"ckzxkyrxx001qjrnvgowsaqpi","tag_id":"ckzxkyry3003hjrnvbrsn1md4","_id":"ckzxkyry4003yjrnv6nk882wz"},{"post_id":"ckzxkyrxx001tjrnv7rwfbmyk","tag_id":"ckzxkyry4003xjrnvaa3p57do","_id":"ckzxkyry50046jrnv7ixsb82d"},{"post_id":"ckzxkyrxx001tjrnv7rwfbmyk","tag_id":"ckzxkyry50041jrnv43pb5hh9","_id":"ckzxkyry50048jrnv4ud59vdr"},{"post_id":"ckzxkyrxy001wjrnv1ln26o0j","tag_id":"ckzxkyry50045jrnv06mwfn6j","_id":"ckzxkyry5004cjrnvfkrg3c0o"},{"post_id":"ckzxkyrxy0020jrnvdgqpfus3","tag_id":"ckzxkyry5004ajrnvf4m58gzu","_id":"ckzxkyry6004pjrnvecv7eq1l"},{"post_id":"ckzxkyrxy0020jrnvdgqpfus3","tag_id":"ckzxkyry5004fjrnvecn4boha","_id":"ckzxkyry6004sjrnvar9y4jzb"},{"post_id":"ckzxkyrxy0020jrnvdgqpfus3","tag_id":"ckzxkyry6004jjrnvff7ua3qv","_id":"ckzxkyry6004vjrnv79u421s7"},{"post_id":"ckzxkyrxy0023jrnvgk372yv4","tag_id":"ckzxkyry6004njrnv0pb71lt3","_id":"ckzxkyry70052jrnv4b63b8dx"},{"post_id":"ckzxkyrxy0023jrnvgk372yv4","tag_id":"ckzxkyry6004jjrnvff7ua3qv","_id":"ckzxkyry70055jrnv8eza0k6k"},{"post_id":"ckzxkyrxy0023jrnvgk372yv4","tag_id":"ckzxkyry6004yjrnv99ixhsa9","_id":"ckzxkyry70057jrnv3p0ibtwz"},{"post_id":"ckzxkyrxz0027jrnv7e221old","tag_id":"ckzxkyry4003xjrnvaa3p57do","_id":"ckzxkyry7005cjrnv3zy27w06"},{"post_id":"ckzxkyrxz0027jrnv7e221old","tag_id":"ckzxkyry70056jrnv5q2kh2ju","_id":"ckzxkyry7005ejrnvh2sybv6o"},{"post_id":"ckzxkyrxz0029jrnv8j5ha5k5","tag_id":"ckzxkyry7005ajrnv77j5djhv","_id":"ckzxkyry7005hjrnv9cyg5whk"},{"post_id":"ckzxkyrxz002djrnv3yaw97hl","tag_id":"ckzxkyry7005fjrnvapgxgucu","_id":"ckzxkyry8005mjrnvbuxjetuj"},{"post_id":"ckzxkyrxz002ejrnvg5if1my1","tag_id":"ckzxkyry8005kjrnv5segdlks","_id":"ckzxkyry8005sjrnvg3hh8q0a"},{"post_id":"ckzxkyry0002jjrnvhbq71wt4","tag_id":"ckzxkyry8005pjrnvbxbkfeid","_id":"ckzxkyry8005xjrnv1yx3f175"},{"post_id":"ckzxkyry0002ljrnvcbgya1um","tag_id":"ckzxkyry8005ujrnv631c3swo","_id":"ckzxkyry90061jrnvfhda82c0"},{"post_id":"ckzxkyry0002pjrnvdpkfgppf","tag_id":"ckzxkyry8005zjrnv9g1b2ap2","_id":"ckzxkyry90065jrnv5kn84hr8"},{"post_id":"ckzxkyry1002sjrnvccce4spi","tag_id":"ckzxkyry90063jrnv2wmia7lo","_id":"ckzxkyry90068jrnv3pww5s19"},{"post_id":"ckzxkyry1002wjrnvbnlt4ysg","tag_id":"ckzxkyry8005pjrnvbxbkfeid","_id":"ckzxkyry9006ajrnv3vnxdfcb"},{"post_id":"ckzxkyry1002zjrnv2m6yel1a","tag_id":"ckzxkyry90069jrnvajdm68pv","_id":"ckzxkyrya006cjrnvfkcd5tzy"},{"post_id":"ckzxkyry10033jrnv5er97ry5","tag_id":"ckzxkyry9006bjrnv72re6j4t","_id":"ckzxkyrya006ejrnv6cokaxg9"},{"post_id":"ckzxkyry20036jrnvdarfd48g","tag_id":"ckzxkyrya006djrnv4lptfu42","_id":"ckzxkyrya006gjrnva74u5uhg"},{"post_id":"ckzxkyry3003ajrnvf9vz8nk1","tag_id":"ckzxkyry9006bjrnv72re6j4t","_id":"ckzxkyrya006ijrnvf4sthcy9"},{"post_id":"ckzxkyry3003djrnv3ezh39ia","tag_id":"ckzxkyrya006hjrnvabnphjin","_id":"ckzxkyrya006kjrnv6j5m0ew0"},{"post_id":"ckzxkyry3003gjrnvdor7db8p","tag_id":"ckzxkyry9006bjrnv72re6j4t","_id":"ckzxkyrya006ljrnv08owgzog"},{"post_id":"ckzxkyryb006mjrnv1m1t2iwu","tag_id":"ckzxkyryb006ojrnveq2g8vtu","_id":"ckzxkyryc006vjrnvbm5tdwf6"},{"post_id":"ckzxkyryc006sjrnv9rwf4ef7","tag_id":"ckzxkyry9006bjrnv72re6j4t","_id":"ckzxkyryd006yjrnv8fq85qpv"},{"post_id":"ckzxkyryc006wjrnv8odlaier","tag_id":"ckzxkyry9006bjrnv72re6j4t","_id":"ckzxkyryd0071jrnvda1w2jld"},{"post_id":"ckzxkyryb006njrnvbmmrhor8","tag_id":"ckzxkyryc006tjrnv54vv74vi","_id":"ckzxkyryd0073jrnv7uqbh4lb"},{"post_id":"ckzxkyryb006pjrnv9su585rn","tag_id":"ckzxkyryd0070jrnvhzixc3j5","_id":"ckzxkyryd0077jrnvc4nodlm1"},{"post_id":"ckzxkyryc006rjrnv1s6q2n97","tag_id":"ckzxkyryd0070jrnvhzixc3j5","_id":"ckzxkyryd007ajrnveero0o9g"}],"Tag":[{"name":"java","_id":"ckzxkyrxm0004jrnv2os04f7d"},{"name":"多数据源","_id":"ckzxkyrxn0009jrnv9v497o5i"},{"name":"oauth2","_id":"ckzxkyrxp000ejrnv6aacgaq9"},{"name":"总结","_id":"ckzxkyrxq000jjrnv311u4diy"},{"name":"vue","_id":"ckzxkyrxr000pjrnv4f5v1ns1"},{"name":"COLA","_id":"ckzxkyrxt000wjrnvc1cqhpnc"},{"name":"设计模式","_id":"ckzxkyrxu0013jrnv7bsdc22r"},{"name":"DDD","_id":"ckzxkyrxu0019jrnv7ryk9n3f"},{"name":"arthas","_id":"ckzxkyrxv001fjrnvg8zr8dbz"},{"name":"devops","_id":"ckzxkyrxx001njrnvgw8qgyys"},{"name":"docker","_id":"ckzxkyrxy001vjrnvb4e7cd34"},{"name":"skywalking","_id":"ckzxkyrxy0022jrnvfoj4cpur"},{"name":"istio","_id":"ckzxkyrxz0028jrnv2dfz4y8h"},{"name":"ldap","_id":"ckzxkyry0002fjrnv28yrdzsy"},{"name":"nginx","_id":"ckzxkyry0002mjrnvg07xg50w"},{"name":"tool","_id":"ckzxkyry1002tjrnv4zb71zd2"},{"name":"常用语","_id":"ckzxkyry30039jrnv82s1fbdw"},{"name":"思维","_id":"ckzxkyry3003hjrnvbrsn1md4"},{"name":"test","_id":"ckzxkyry4003ljrnv8snwcjme"},{"name":"三方集成","_id":"ckzxkyry4003pjrnv094l8guf"},{"name":"message","_id":"ckzxkyry4003xjrnvaa3p57do"},{"name":"kafka","_id":"ckzxkyry50041jrnv43pb5hh9"},{"name":"接口文档","_id":"ckzxkyry50045jrnv06mwfn6j"},{"name":"nacos","_id":"ckzxkyry5004ajrnvf4m58gzu"},{"name":"动态配置","_id":"ckzxkyry5004fjrnvecn4boha"},{"name":"注册中心","_id":"ckzxkyry6004jjrnvff7ua3qv"},{"name":"zookeeper","_id":"ckzxkyry6004njrnv0pb71lt3"},{"name":"分布式锁","_id":"ckzxkyry6004yjrnv99ixhsa9"},{"name":"rocketmq","_id":"ckzxkyry70056jrnv5q2kh2ju"},{"name":"gateway","_id":"ckzxkyry7005ajrnv77j5djhv"},{"name":"技术文档","_id":"ckzxkyry7005fjrnvapgxgucu"},{"name":"springboot","_id":"ckzxkyry8005kjrnv5segdlks"},{"name":"mysql","_id":"ckzxkyry8005pjrnvbxbkfeid"},{"name":"canal","_id":"ckzxkyry8005ujrnv631c3swo"},{"name":"es","_id":"ckzxkyry8005zjrnv9g1b2ap2"},{"name":"cache","_id":"ckzxkyry90063jrnv2wmia7lo"},{"name":"项目编译","_id":"ckzxkyry90069jrnvajdm68pv"},{"name":"utils","_id":"ckzxkyry9006bjrnv72re6j4t"},{"name":"数据结构与算法","_id":"ckzxkyrya006djrnv4lptfu42"},{"name":"io","_id":"ckzxkyrya006hjrnvabnphjin"},{"name":"高并发","_id":"ckzxkyryb006ojrnveq2g8vtu"},{"name":"线程池","_id":"ckzxkyryc006tjrnv54vv74vi"},{"name":"SpringFramework","_id":"ckzxkyryd0070jrnvhzixc3j5"}]}}