{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/moon.jpg","path":"img/moon.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/road.png","path":"img/road.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/ddd/ddd-framework.png","path":"img/ddd/ddd-framework.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/ddd/four-color.png","path":"img/ddd/four-color.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/design-model/design-model-type.jpg","path":"img/design-model/design-model-type.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/uml/uml-line.png","path":"img/uml/uml-line.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/uml/uml.png","path":"img/uml/uml.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/3-hexo/.gitignore","hash":"86a50fa08e69cab561892aa5edef24f9081bbde1","modified":1601438273648},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1601438273648},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1601438273649},{"_id":"themes/3-hexo/README.md","hash":"a9704a2f258df66cdd4f1ff4c96be972c7052e78","modified":1601445159210},{"_id":"themes/3-hexo/_config.yml","hash":"371280fac4aebb8e3779853f71f517df6f1d42f9","modified":1608973905315},{"_id":"themes/3-hexo/languages/en.yml","hash":"53ae29ae1237fc7822df85a6d2f8da6f0078625e","modified":1601438273650},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"d2c6d86fe2ff03e6ee9bbc16dff8efe5b47ac297","modified":1601438273650},{"_id":"themes/3-hexo/layout/index.ejs","hash":"80c70add8883741a70678ed55ee021cf98a212c9","modified":1603186032574},{"_id":"themes/3-hexo/layout/indexs.md","hash":"23e1a09a69b8c0cd86a8b7182661751b91c4c968","modified":1605579370600},{"_id":"themes/3-hexo/layout/post.ejs","hash":"e1f635d2822b98035e690a5da9b7c7b9d96bc34b","modified":1603185928942},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1601438273656},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"2afeac04cbcfdb4c876345a10121f059417b1d46","modified":1601619971212},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1601438273651},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1601438273651},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"97dab221e6150880caa89baabb82854c98fc5b79","modified":1601619823671},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1601438273653},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"ed479aa9affee3b02a76da06de45a7c40a97a706","modified":1601518976507},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1601438273653},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"a734c26d86da6697003ed27672c1b9b82b216c82","modified":1601438273653},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"d0b84370ca81c3baa02a05613ff040003acd2985","modified":1601438273654},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1601438273654},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1601438273654},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"3f9d91215ff36a6bcdaaf86e5b028dafc5a6a6fc","modified":1601438273655},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"1251a2f965984eb605376be0ca4cf2a40c8c63c3","modified":1601455224432},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1601438273655},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1601438273655},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"134c6a0a3db0d8a6d28a957574918bfa5185b79b","modified":1601623118813},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1601438273669},{"_id":"themes/3-hexo/source/css/style.styl","hash":"8a533bbcf602209a077bc3001481b205d39ab1b4","modified":1601445003509},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1601438273675},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1601438273676},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1601438273678},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1601438273678},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1601438273678},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1601438273678},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1601438273689},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1601438273689},{"_id":"themes/3-hexo/source/js/script.js","hash":"03fc06177b47fd6bac7ae393f9712c726272467b","modified":1601438273689},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1601438273690},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1601438273690},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1601438273651},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1601438273651},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1601438273651},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1601438273652},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1601438273652},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1601438273657},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"c76773b96860940083baf16470b7b80ac098e645","modified":1601438273652},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1601438273657},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1601438273658},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"cb6d7cc1ba37bdffd248c61fd6b8b26ce44b9ee5","modified":1601622673195},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"49a66e262d8f5196a14c4a30fd752dced69e6140","modified":1601454359137},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"13b0174ac8f7dded790c160266bac10a0a4b579f","modified":1601522192666},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"2848081c36377b47ff87686f7464a624bd991b88","modified":1601623438225},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1601438273661},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1601438273662},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"b0c4397ff8258b4de121ae7f4993dad1cef44f30","modified":1601622829618},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1601438273663},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1601438273663},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1601438273664},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1601438273664},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1601438273665},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1601438273665},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1601438273667},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1601438273667},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1601438273667},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1601438273668},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1601438273670},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1601438273670},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1601438273670},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1601438273671},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1601438273671},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1601438273671},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1601438273671},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1601438273672},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1601438273672},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1601438273672},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1601438273672},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1601438273672},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1601438273672},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1601438273673},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1601438273673},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1601438273673},{"_id":"themes/3-hexo/source/img/ddd/four-color.png","hash":"40cae7376e963aa4e978055a81c301a7179ed0a7","modified":1606919368214},{"_id":"themes/3-hexo/source/img/uml/uml-line.png","hash":"e8c82f1b6afb89bb14abef8e8492eefc6a56a42b","modified":1608895018241},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1601438273681},{"_id":"themes/3-hexo/source/img/moon.jpg","hash":"21c3a55fea9ba6648719007bdd988928e4cec911","modified":1601520694288},{"_id":"themes/3-hexo/source/img/design-model/design-model-type.jpg","hash":"16f2174838bbf81a207117a7cbdb7e12a7448d9d","modified":1608954099772},{"_id":"themes/3-hexo/source/img/uml/uml.png","hash":"11754a8f76a759f2d798dfe8a73fad9468c45012","modified":1608894989251},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1601438273688},{"_id":"source/_drafts/idea.md","hash":"9f1aa0e886624b2819994c9937d43e03b3bb1ad1","modified":1606456356453},{"_id":"source/_posts/framework/cola.md","hash":"ea06932180e3336fd5976980a744fcdfba67feae","modified":1608020699493},{"_id":"source/_drafts/oauth2.md","hash":"a86b84d046726ed3ed79afeb540c62b194b3dce3","modified":1604812329843},{"_id":"source/_posts/framework/ddd.md","hash":"cfd3c84a1a0592b249aa9dd0b81b1b5678829fd1","modified":1608971981019},{"_id":"source/_posts/framework/design-model.md","hash":"54ce9cf78ad9f4527e5a116d9256a1c6fb7463e3","modified":1608954840721},{"_id":"source/_posts/framework/oauth2.md","hash":"55d19c8621ec93adf17228bec579822d571f28f3","modified":1608970412222},{"_id":"source/_posts/thinking/ali-words.md","hash":"0ea3d5ac37088fcf37fd09b5b4aaddc3b223f565","modified":1608971184426},{"_id":"source/_posts/thinking/book.md","hash":"f4022a03f1c743fa6f0e35f1c1b55acf194d86c6","modified":1604500635778},{"_id":"source/_posts/tools/hexo.md","hash":"52a6e1e12b9ced2e4538d33bc179d03034690c68","modified":1608972996444},{"_id":"source/_posts/tools/software.md","hash":"bc4e4f8092be69aa89bdea72fd7527b92047671c","modified":1603187139143},{"_id":"source/_posts/backend/database/mysql-other.md","hash":"224af5bcd33cb5b277568fd6472c1a5606c17c96","modified":1608972640135},{"_id":"source/_posts/backend/service/zookeeper.md","hash":"4b3cd7258f27e3bcebc9af6725b1188262ed76da","modified":1608971458326},{"_id":"source/_posts/framework/design/uml.md","hash":"d67fb93bb4f988cf27d544b8245a0620cd298fd2","modified":1608970885749},{"_id":"source/_posts/backend/database/canal.md","hash":"abddc0c7482787b3dbcfad12b3b6930c34b85d9f","modified":1608972292133},{"_id":"source/_posts/backend/java/utils/excel.md","hash":"ec9c89a70d7fd7f83fd6a9b4ebd260fa142bd7a8","modified":1608971735306},{"_id":"source/_posts/backend/java/utils/map-struct.md","hash":"b89b15abbcecda4f79947675ec2cad9de1a97f41","modified":1604811156808},{"_id":"source/_posts/backend/java/utils/mybatis-plus.md","hash":"552146ca86f25f4d697ec90cd0c52cec9d77382e","modified":1607573007002},{"_id":"source/_posts/backend/java/utils/swagger.md","hash":"7bf8a21e0606f08341c69caa2001dda24f830c05","modified":1608971131533},{"_id":"themes/3-hexo/source/img/ddd/ddd-framework.png","hash":"4044ccda34b32aea7feb45e38c00a849ed400d3c","modified":1608279088749},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"a75ead28e6a1fab2a006cc7332ca2d2e868ce8e1","modified":1601438273686},{"_id":"themes/3-hexo/source/img/road.png","hash":"dbca25351cc63ca6feb690dd368f58e8d71543ba","modified":1601450845821},{"_id":"public/search.xml","hash":"ed726a368621ee658bb805f2e871e3297a7169a8","modified":1608973943972},{"_id":"public/2020/12/25/framework/design/uml/index.html","hash":"e4862f40f670ca77fda52248adaab017f1b2f803","modified":1608973943972},{"_id":"public/2020/12/15/framework/cola/index.html","hash":"debb526a93c2e423c6c11378b75cd6787f6439fe","modified":1608973943972},{"_id":"public/2020/12/10/backend/java/utils/mybatis-plus/index.html","hash":"d83dd3f2cdb173b9b70ef294e1fda0ab7871c9bb","modified":1608973943972},{"_id":"public/2020/11/17/framework/oauth2/index.html","hash":"f7f6678da2c1404c38a880d8bd2f6b4818f3c499","modified":1608973943972},{"_id":"public/2020/11/11/backend/java/utils/swagger/index.html","hash":"1609a21f89695ce5db4a9f3a5e5e1a1838761161","modified":1608973943972},{"_id":"public/2020/11/04/thinking/ali-words/index.html","hash":"3279a970dbc9023779c492642ac55422c420fd35","modified":1608973943972},{"_id":"public/2020/10/29/backend/service/zookeeper/index.html","hash":"ebc7ea8d798e978f4983d868690b667cffa7d546","modified":1608973943972},{"_id":"public/2020/10/20/backend/java/utils/excel/index.html","hash":"2064c8ca9d16fe083bc9ec9e3fd8980026deb373","modified":1608973943972},{"_id":"public/2020/10/09/framework/ddd/index.html","hash":"c572942d86571163bc976df01e87603dd1f4402a","modified":1608973943972},{"_id":"public/2020/10/02/backend/database/canal/index.html","hash":"def38e9f7f4f54af6caaa3fbe8cf760eb517416e","modified":1608973943972},{"_id":"public/2020/10/02/backend/database/mysql-other/index.html","hash":"31dc3b9220baca2dbe5c3fea0d5bb8694d4bcf8c","modified":1608973943972},{"_id":"public/2020/10/02/backend/java/utils/map-struct/index.html","hash":"750b5be1c920cce3b2c78b27fe4d536eaaafd1a3","modified":1608973943972},{"_id":"public/2020/10/02/framework/design-model/index.html","hash":"eb836168215557c61308c407de8ac51fab99a0d2","modified":1608973943972},{"_id":"public/2020/10/02/thinking/book/index.html","hash":"2b809e63fce05339c16570b815bd8b735b8df794","modified":1608973943972},{"_id":"public/2020/10/02/tools/software/index.html","hash":"4925727cfab3492ebb9d2509e7ce874198ffeacc","modified":1608973943972},{"_id":"public/2020/09/30/tools/hexo/index.html","hash":"5a9858f159d53afc37524be6b9a6bca61506f8d5","modified":1608973943972},{"_id":"public/categories/后端/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/架构/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/思考/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/其他/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/服务搭建/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/数据库/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/设计图/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/后端/工具/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/思考/常用语/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/思考/阅读/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/其他/博客工具/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/categories/其他/软件/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/page/2/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/2020/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/2020/page/2/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/2020/09/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/2020/10/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/2020/11/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/archives/2020/12/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/page/2/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/oauth2/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/COLA/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/DDD/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/常用语/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/思维/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/tool/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/canal/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/mysql/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/zookeeper/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/uml/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/类图/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/utils/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/tags/设计模式/index.html","hash":"a65d554ce7948558dd2be1f983665f0943f5b46d","modified":1608973943972},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1608973943972},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1608973943972},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1608973943972},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1608973943972},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1608973943972},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1608973943972},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1608973943972},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1608973943972},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1608973943972},{"_id":"public/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1608973943972},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1608973943972},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1608973943972},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1608973943972},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1608973943972},{"_id":"public/img/ddd/four-color.png","hash":"40cae7376e963aa4e978055a81c301a7179ed0a7","modified":1608973943972},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1608973943972},{"_id":"public/img/uml/uml-line.png","hash":"e8c82f1b6afb89bb14abef8e8492eefc6a56a42b","modified":1608973943972},{"_id":"public/img/uml/uml.png","hash":"11754a8f76a759f2d798dfe8a73fad9468c45012","modified":1608973943972},{"_id":"public/img/moon.jpg","hash":"21c3a55fea9ba6648719007bdd988928e4cec911","modified":1608973943972},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1608973943972},{"_id":"public/css/mobile.css","hash":"da7d75b7602c18d5ab1c9fe36dfad7bf68d4268e","modified":1608973943972},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1608973943972},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1608973943972},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1608973943972},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1608973943972},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1608973943972},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1608973943972},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1608973943972},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1608973943972},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1608973943972},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1608973943972},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1608973943972},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1608973943972},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1608973943972},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1608973943972},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1608973943972},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1608973943972},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1608973943972},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1608973943972},{"_id":"public/css/style.css","hash":"6b1e70cafc6c9a339b09ee7951ffbcc67c2ea45a","modified":1608973943972},{"_id":"public/img/design-model/design-model-type.jpg","hash":"16f2174838bbf81a207117a7cbdb7e12a7448d9d","modified":1608973943972},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1608973943972},{"_id":"public/js/script.js","hash":"03fc06177b47fd6bac7ae393f9712c726272467b","modified":1608973943972},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1608973943972},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1608973943972},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1608973943972},{"_id":"public/img/ddd/ddd-framework.png","hash":"4044ccda34b32aea7feb45e38c00a849ed400d3c","modified":1608973943972},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1608973943972},{"_id":"public/img/road.png","hash":"dbca25351cc63ca6feb690dd368f58e8d71543ba","modified":1608973943972},{"_id":"public/js/gitalk.js","hash":"a75ead28e6a1fab2a006cc7332ca2d2e868ce8e1","modified":1608973943972}],"Category":[{"name":"后端","_id":"ckj5hjl2t0003j49k6p764m4w"},{"name":"架构","_id":"ckj5hjl2z0008j49k73c34gxo"},{"name":"安全","parent":"ckj5hjl2t0003j49k6p764m4w","_id":"ckj5hjl3e000pj49kbiuw82le"},{"name":"思考","_id":"ckj5hjl3h000wj49k8mne8vcz"},{"name":"其他","_id":"ckj5hjl3n0016j49kcgacf89f"},{"name":"数据库","_id":"ckj5hjl3p001cj49kam4w7m7c"},{"name":"服务搭建","_id":"ckj5hjl3s001ij49k9h5w61jz"},{"name":"设计图","_id":"ckj5hjl3t001mj49kco0kfp70"},{"name":"工具","parent":"ckj5hjl2t0003j49k6p764m4w","_id":"ckj5hjl3v001qj49kapgt7594"},{"name":"常用语","parent":"ckj5hjl3h000wj49k8mne8vcz","_id":"ckj5hjl3z001yj49kfaaegkq5"},{"name":"阅读","parent":"ckj5hjl3h000wj49k8mne8vcz","_id":"ckj5hjl420025j49kca4jhgns"},{"name":"博客工具","parent":"ckj5hjl3n0016j49kcgacf89f","_id":"ckj5hjl430029j49kbccghvml"},{"name":"软件","parent":"ckj5hjl3n0016j49kcgacf89f","_id":"ckj5hjl44002cj49kd64123a0"}],"Data":[],"Page":[],"Post":[{"_content":"### idea无限试用(2020.1.4可用，其他不知道)\n- mac\n```shell script\n#!/bin/sh\n# reset jetbrains ide evals\n\nOS_NAME=$(uname -s)\nJB_PRODUCTS=\"IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode\"\n\nif [ $OS_NAME == \"Darwin\" ]; then\n\techo 'macOS:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/Library/Preferences/${PRD}*/eval\n    \trm -rf ~/Library/Application\\ Support/JetBrains/${PRD}*/eval\n\tdone\nelif [ $OS_NAME == \"Linux\" ]; then\n\techo 'Linux:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/.${PRD}*/config/eval\n\tdone\nelse\n\techo 'unsupport'\n\texit\nfi\n\necho 'done.'\n```\n\n- windows\n```shell script\nSet oShell = CreateObject(\"WScript.Shell\")\nSet oFS = CreateObject(\"Scripting.FileSystemObject\")\nsHomeFolder = oShell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\nsJBDataFolder = oShell.ExpandEnvironmentStrings(\"%APPDATA%\") + \"\\JetBrains\"\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = \"\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*\"\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n\tbMatch = re.Test(file.Name)\n    If Not bMatch Then\n\t\tExit Sub\n\tEnd If\n\n\tIf oFS.FolderExists(sEvalPath) Then\n\t\toFS.DeleteFolder sEvalPath, True \n\tEnd If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n\tFor Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n    \tremoveEval oFile, sHomeFolder + \"\\\" + oFile.Name + \"\\config\\eval\"\n\tNext\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n\tFor Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n\t    removeEval oFile, sJBDataFolder + \"\\\" + oFile.Name + \"\\eval\"\n\tNext\nEnd If\n\nMsgBox \"done\"\n```","source":"_drafts/idea.md","raw":"### idea无限试用(2020.1.4可用，其他不知道)\n- mac\n```shell script\n#!/bin/sh\n# reset jetbrains ide evals\n\nOS_NAME=$(uname -s)\nJB_PRODUCTS=\"IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode\"\n\nif [ $OS_NAME == \"Darwin\" ]; then\n\techo 'macOS:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/Library/Preferences/${PRD}*/eval\n    \trm -rf ~/Library/Application\\ Support/JetBrains/${PRD}*/eval\n\tdone\nelif [ $OS_NAME == \"Linux\" ]; then\n\techo 'Linux:'\n\n\tfor PRD in $JB_PRODUCTS; do\n    \trm -rf ~/.${PRD}*/config/eval\n\tdone\nelse\n\techo 'unsupport'\n\texit\nfi\n\necho 'done.'\n```\n\n- windows\n```shell script\nSet oShell = CreateObject(\"WScript.Shell\")\nSet oFS = CreateObject(\"Scripting.FileSystemObject\")\nsHomeFolder = oShell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\nsJBDataFolder = oShell.ExpandEnvironmentStrings(\"%APPDATA%\") + \"\\JetBrains\"\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = \"\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*\"\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n\tbMatch = re.Test(file.Name)\n    If Not bMatch Then\n\t\tExit Sub\n\tEnd If\n\n\tIf oFS.FolderExists(sEvalPath) Then\n\t\toFS.DeleteFolder sEvalPath, True \n\tEnd If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n\tFor Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n    \tremoveEval oFile, sHomeFolder + \"\\\" + oFile.Name + \"\\config\\eval\"\n\tNext\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n\tFor Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n\t    removeEval oFile, sJBDataFolder + \"\\\" + oFile.Name + \"\\eval\"\n\tNext\nEnd If\n\nMsgBox \"done\"\n```","slug":"idea","published":0,"date":"2020-11-27T05:50:47.273Z","updated":"2020-11-27T05:52:36.453Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl2i0000j49kd7qj6x4o","content":"<h3 id=\"idea无限试用-2020-1-4可用，其他不知道\"><a href=\"#idea无限试用-2020-1-4可用，其他不知道\" class=\"headerlink\" title=\"idea无限试用(2020.1.4可用，其他不知道)\"></a>idea无限试用(2020.1.4可用，其他不知道)</h3><ul>\n<li>mac<pre><code class=\"shell\">#!/bin/sh\n# reset jetbrains ide evals\n</code></pre>\n</li>\n</ul>\n<p>OS_NAME=$(uname -s)<br>JB_PRODUCTS=”IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode”</p>\n<p>if [ $OS_NAME == “Darwin” ]; then<br>    echo ‘macOS:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/Library/Preferences/$&#123;PRD&#125;*/eval\n    rm -rf ~/Library/Application\\ Support/JetBrains/$&#123;PRD&#125;*/eval\ndone</code></pre>\n<p>elif [ $OS_NAME == “Linux” ]; then<br>    echo ‘Linux:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/.$&#123;PRD&#125;*/config/eval\ndone</code></pre>\n<p>else<br>    echo ‘unsupport’<br>    exit<br>fi</p>\n<p>echo ‘done.’</p>\n<pre><code>\n- windows\n```shell script\nSet oShell = CreateObject(&quot;WScript.Shell&quot;)\nSet oFS = CreateObject(&quot;Scripting.FileSystemObject&quot;)\nsHomeFolder = oShell.ExpandEnvironmentStrings(&quot;%USERPROFILE%&quot;)\nsJBDataFolder = oShell.ExpandEnvironmentStrings(&quot;%APPDATA%&quot;) + &quot;\\JetBrains&quot;\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = &quot;\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*&quot;\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n    bMatch = re.Test(file.Name)\n    If Not bMatch Then\n        Exit Sub\n    End If\n\n    If oFS.FolderExists(sEvalPath) Then\n        oFS.DeleteFolder sEvalPath, True \n    End If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n    For Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n        removeEval oFile, sHomeFolder + &quot;\\&quot; + oFile.Name + &quot;\\config\\eval&quot;\n    Next\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n    For Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n        removeEval oFile, sJBDataFolder + &quot;\\&quot; + oFile.Name + &quot;\\eval&quot;\n    Next\nEnd If\n\nMsgBox &quot;done&quot;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"idea无限试用-2020-1-4可用，其他不知道\"><a href=\"#idea无限试用-2020-1-4可用，其他不知道\" class=\"headerlink\" title=\"idea无限试用(2020.1.4可用，其他不知道)\"></a>idea无限试用(2020.1.4可用，其他不知道)</h3><ul>\n<li>mac<pre><code class=\"shell\">#!/bin/sh\n# reset jetbrains ide evals\n</code></pre>\n</li>\n</ul>\n<p>OS_NAME=$(uname -s)<br>JB_PRODUCTS=”IntelliJIdea CLion PhpStorm GoLand PyCharm WebStorm Rider DataGrip RubyMine AppCode”</p>\n<p>if [ $OS_NAME == “Darwin” ]; then<br>    echo ‘macOS:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/Library/Preferences/$&#123;PRD&#125;*/eval\n    rm -rf ~/Library/Application\\ Support/JetBrains/$&#123;PRD&#125;*/eval\ndone</code></pre>\n<p>elif [ $OS_NAME == “Linux” ]; then<br>    echo ‘Linux:’</p>\n<pre><code>for PRD in $JB_PRODUCTS; do\n    rm -rf ~/.$&#123;PRD&#125;*/config/eval\ndone</code></pre>\n<p>else<br>    echo ‘unsupport’<br>    exit<br>fi</p>\n<p>echo ‘done.’</p>\n<pre><code>\n- windows\n```shell script\nSet oShell = CreateObject(&quot;WScript.Shell&quot;)\nSet oFS = CreateObject(&quot;Scripting.FileSystemObject&quot;)\nsHomeFolder = oShell.ExpandEnvironmentStrings(&quot;%USERPROFILE%&quot;)\nsJBDataFolder = oShell.ExpandEnvironmentStrings(&quot;%APPDATA%&quot;) + &quot;\\JetBrains&quot;\n\nSet re = New RegExp\nre.Global     = True\nre.IgnoreCase = True\nre.Pattern    = &quot;\\.?(IntelliJIdea|GoLand|CLion|PyCharm|DataGrip|RubyMine|AppCode|PhpStorm|WebStorm|Rider).*&quot;\n\nSub removeEval(ByVal file, ByVal sEvalPath)\n    bMatch = re.Test(file.Name)\n    If Not bMatch Then\n        Exit Sub\n    End If\n\n    If oFS.FolderExists(sEvalPath) Then\n        oFS.DeleteFolder sEvalPath, True \n    End If\nEnd Sub\n\nIf oFS.FolderExists(sHomeFolder) Then\n    For Each oFile In oFS.GetFolder(sHomeFolder).SubFolders\n        removeEval oFile, sHomeFolder + &quot;\\&quot; + oFile.Name + &quot;\\config\\eval&quot;\n    Next\nEnd If\n\nIf oFS.FolderExists(sJBDataFolder) Then\n    For Each oFile In oFS.GetFolder(sJBDataFolder).SubFolders\n        removeEval oFile, sJBDataFolder + &quot;\\&quot; + oFile.Name + &quot;\\eval&quot;\n    Next\nEnd If\n\nMsgBox &quot;done&quot;</code></pre>\n"},{"title":"Oauth2","description":"鉴权框架","date":"2020-11-08T02:37:12.000Z","_content":"\n### 安全框架\n- [SpringSecurity](https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security)\n- [Oauth2](https://oauth.net/2/)\n- [LDAP](http://www.ldap.org.cn/)\n\n","source":"_drafts/oauth2.md","raw":"---\ntitle: Oauth2\ndescription: 鉴权框架 \ndate: 2020-11-08 10:37:12\ntags:\n- oauth2\ncategories:\n- 后端\n- 安全\n---\n\n### 安全框架\n- [SpringSecurity](https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security)\n- [Oauth2](https://oauth.net/2/)\n- [LDAP](http://www.ldap.org.cn/)\n\n","slug":"oauth2","published":0,"updated":"2020-11-08T05:12:09.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl2p0001j49ka06g7pkb","content":"<h3 id=\"安全框架\"><a href=\"#安全框架\" class=\"headerlink\" title=\"安全框架\"></a>安全框架</h3><ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security\">SpringSecurity</a></li>\n<li><a href=\"https://oauth.net/2/\">Oauth2</a></li>\n<li><a href=\"http://www.ldap.org.cn/\">LDAP</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安全框架\"><a href=\"#安全框架\" class=\"headerlink\" title=\"安全框架\"></a>安全框架</h3><ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/#what-is-acegi-security\">SpringSecurity</a></li>\n<li><a href=\"https://oauth.net/2/\">Oauth2</a></li>\n<li><a href=\"http://www.ldap.org.cn/\">LDAP</a></li>\n</ul>\n"},{"title":"COLA","description":"COLA-整洁面向对象分层架构","date":"2020-12-15T08:24:00.000Z","_content":"\n### 相关网址\n- [COLA 4.0](https://github.com/alibaba/COLA)\n- [COLA 4.0：应用架构的最佳实践](https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app)","source":"_posts/framework/cola.md","raw":"---\ntitle: COLA\ndescription: COLA-整洁面向对象分层架构\n#top: 1\ndate: 2020-12-15 16:24:00\ntags:\n- COLA\ncategories:\n- 架构\n---\n\n### 相关网址\n- [COLA 4.0](https://github.com/alibaba/COLA)\n- [COLA 4.0：应用架构的最佳实践](https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app)","slug":"framework/cola","published":1,"updated":"2020-12-15T08:24:59.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl2r0002j49kem345fvq","content":"<h3 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h3><ul>\n<li><a href=\"https://github.com/alibaba/COLA\">COLA 4.0</a></li>\n<li><a href=\"https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app\">COLA 4.0：应用架构的最佳实践</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h3><ul>\n<li><a href=\"https://github.com/alibaba/COLA\">COLA 4.0</a></li>\n<li><a href=\"https://blog.csdn.net/significantfrank/article/details/110934799?utm_source=app\">COLA 4.0：应用架构的最佳实践</a></li>\n</ul>\n"},{"title":"DDD-领域驱动设计","description":"DDD-领域驱动设计","date":"2020-10-09T08:51:54.000Z","_content":"\n- [有赞DDD实践](https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw)\n- [DDD设计](https://www.processon.com/view/5e55d17ee4b069f82a120d06#map)\n\n### 方法论\n```textmate\n六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，\n```\n\n#### 六边形架构\n- [起源文章](http://alistair.cockburn.us/Hexagonal+architecture)\n- [相关文章&demo](https://www.jianshu.com/p/c6bb08d9c613)\n- 摘要\n```textmate\n六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。\n```\n\n#### 洋葱架构\n- [在洋葱(Onion)架构中实现领域驱动设计](https://www.infoq.cn/article/2014/11/ddd-onion-architecture)\n- 摘要\n```textmate\n层级关系\n    Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n    核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n    领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n    API 层是领域层的入口，它使用领域中的术语和对象。\n    基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。\n```\n\n#### 整洁架构\n- [阿里云-架构整洁之道](https://www.jianshu.com/p/b296ceea673b)\n\n#### 开源框架\n- cola4 \n- DDDLib  \n- Koala\n\n#### 四色原型-需求分析利器\n<img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n```textmate\n概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。\n```\n#### 标准项目模块解释\n```textmate\n1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块\n```\n\n### DDD核心概念\n- 实体\n- 值对象\n- 聚合\n- 仓储\n- 工厂\n- 仓储\n```textmate\n实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法\n```\n\n- DDD架构图\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n#### 识别领域服务\n```textmate\n主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。\n```\n\n#### 仓储相关\n- CQRS\n```textmate\n将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS\n```\n","source":"_posts/framework/ddd.md","raw":"---\ntitle: DDD-领域驱动设计\ndescription: DDD-领域驱动设计\n#top: 1\ndate: 2020-10-09 16:51:54\ntags:\n- DDD\ncategories:\n- 架构\n---\n\n- [有赞DDD实践](https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw)\n- [DDD设计](https://www.processon.com/view/5e55d17ee4b069f82a120d06#map)\n\n### 方法论\n```textmate\n六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，\n```\n\n#### 六边形架构\n- [起源文章](http://alistair.cockburn.us/Hexagonal+architecture)\n- [相关文章&demo](https://www.jianshu.com/p/c6bb08d9c613)\n- 摘要\n```textmate\n六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。\n```\n\n#### 洋葱架构\n- [在洋葱(Onion)架构中实现领域驱动设计](https://www.infoq.cn/article/2014/11/ddd-onion-architecture)\n- 摘要\n```textmate\n层级关系\n    Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n    核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n    领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n    API 层是领域层的入口，它使用领域中的术语和对象。\n    基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。\n```\n\n#### 整洁架构\n- [阿里云-架构整洁之道](https://www.jianshu.com/p/b296ceea673b)\n\n#### 开源框架\n- cola4 \n- DDDLib  \n- Koala\n\n#### 四色原型-需求分析利器\n<img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n```textmate\n概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。\n```\n#### 标准项目模块解释\n```textmate\n1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块\n```\n\n### DDD核心概念\n- 实体\n- 值对象\n- 聚合\n- 仓储\n- 工厂\n- 仓储\n```textmate\n实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法\n```\n\n- DDD架构图\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n#### 识别领域服务\n```textmate\n主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。\n```\n\n#### 仓储相关\n- CQRS\n```textmate\n将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS\n```\n","slug":"framework/ddd","published":1,"updated":"2020-12-26T08:39:41.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl2w0005j49kfxqz90qe","content":"<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw\">有赞DDD实践</a></li>\n<li><a href=\"https://www.processon.com/view/5e55d17ee4b069f82a120d06#map\">DDD设计</a></li>\n</ul>\n<h3 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h3><pre><code class=\"textmate\">六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，</code></pre>\n<h4 id=\"六边形架构\"><a href=\"#六边形架构\" class=\"headerlink\" title=\"六边形架构\"></a>六边形架构</h4><ul>\n<li><a href=\"http://alistair.cockburn.us/Hexagonal+architecture\">起源文章</a></li>\n<li><a href=\"https://www.jianshu.com/p/c6bb08d9c613\">相关文章&amp;demo</a></li>\n<li>摘要<pre><code class=\"textmate\">六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。</code></pre>\n</li>\n</ul>\n<h4 id=\"洋葱架构\"><a href=\"#洋葱架构\" class=\"headerlink\" title=\"洋葱架构\"></a>洋葱架构</h4><ul>\n<li><a href=\"https://www.infoq.cn/article/2014/11/ddd-onion-architecture\">在洋葱(Onion)架构中实现领域驱动设计</a></li>\n<li>摘要<pre><code class=\"textmate\">层级关系\n  Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n  核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n  领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n  API 层是领域层的入口，它使用领域中的术语和对象。\n  基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。</code></pre>\n</li>\n</ul>\n<h4 id=\"整洁架构\"><a href=\"#整洁架构\" class=\"headerlink\" title=\"整洁架构\"></a>整洁架构</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/b296ceea673b\">阿里云-架构整洁之道</a></li>\n</ul>\n<h4 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h4><ul>\n<li>cola4 </li>\n<li>DDDLib  </li>\n<li>Koala</li>\n</ul>\n<h4 id=\"四色原型-需求分析利器\"><a href=\"#四色原型-需求分析利器\" class=\"headerlink\" title=\"四色原型-需求分析利器\"></a>四色原型-需求分析利器</h4><img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n<pre><code class=\"textmate\">概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。</code></pre>\n<h4 id=\"标准项目模块解释\"><a href=\"#标准项目模块解释\" class=\"headerlink\" title=\"标准项目模块解释\"></a>标准项目模块解释</h4><pre><code class=\"textmate\">1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块</code></pre>\n<h3 id=\"DDD核心概念\"><a href=\"#DDD核心概念\" class=\"headerlink\" title=\"DDD核心概念\"></a>DDD核心概念</h3><ul>\n<li><p>实体</p>\n</li>\n<li><p>值对象</p>\n</li>\n<li><p>聚合</p>\n</li>\n<li><p>仓储</p>\n</li>\n<li><p>工厂</p>\n</li>\n<li><p>仓储</p>\n<pre><code class=\"textmate\">实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法</code></pre>\n</li>\n<li><p>DDD架构图</p>\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n</li>\n</ul>\n<h4 id=\"识别领域服务\"><a href=\"#识别领域服务\" class=\"headerlink\" title=\"识别领域服务\"></a>识别领域服务</h4><pre><code class=\"textmate\">主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。</code></pre>\n<h4 id=\"仓储相关\"><a href=\"#仓储相关\" class=\"headerlink\" title=\"仓储相关\"></a>仓储相关</h4><ul>\n<li>CQRS<pre><code class=\"textmate\">将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/9eGZZ2wsZoaCVRy0oKt0iw\">有赞DDD实践</a></li>\n<li><a href=\"https://www.processon.com/view/5e55d17ee4b069f82a120d06#map\">DDD设计</a></li>\n</ul>\n<h3 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h3><pre><code class=\"textmate\">六边形架构、洋葱架构、整洁架构、四色原型\nSIDE-EFFECT-FREE模式被称为无副作用模式，熟悉函数时编程的朋友都知道，严格的函数就是一个无副作用的函数，对于一个给定的输入，总是返回固定的结果，通常查询功能就是一个函数，命令功能就不是一个函数，它通常会执行某些修改。\n在DDD架构中，通常会将查询和命令操作分开，我们称之为CQRS(命令查询的责任分离Command Query Responsibility Segregation)，具体落地时，是否将Command和Query分开成两个项目可以看情况决定，大多数情况下放在一个项目可以提高业务内聚性，</code></pre>\n<h4 id=\"六边形架构\"><a href=\"#六边形架构\" class=\"headerlink\" title=\"六边形架构\"></a>六边形架构</h4><ul>\n<li><a href=\"http://alistair.cockburn.us/Hexagonal+architecture\">起源文章</a></li>\n<li><a href=\"https://www.jianshu.com/p/c6bb08d9c613\">相关文章&amp;demo</a></li>\n<li>摘要<pre><code class=\"textmate\">六角架构的初衷是：\n允许应用程序同样由用户，程序，自动化测试或批处理脚本驱动，并与最终的运行时设备和数据库隔离开发和测试。</code></pre>\n</li>\n</ul>\n<h4 id=\"洋葱架构\"><a href=\"#洋葱架构\" class=\"headerlink\" title=\"洋葱架构\"></a>洋葱架构</h4><ul>\n<li><a href=\"https://www.infoq.cn/article/2014/11/ddd-onion-architecture\">在洋葱(Onion)架构中实现领域驱动设计</a></li>\n<li>摘要<pre><code class=\"textmate\">层级关系\n  Core ) Domain ) API ) Infrastructure )\n洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。\n  核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块,包含任何技术层面的概念\n  领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的\n  API 层是领域层的入口，它使用领域中的术语和对象。\n  基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。</code></pre>\n</li>\n</ul>\n<h4 id=\"整洁架构\"><a href=\"#整洁架构\" class=\"headerlink\" title=\"整洁架构\"></a>整洁架构</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/b296ceea673b\">阿里云-架构整洁之道</a></li>\n</ul>\n<h4 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h4><ul>\n<li>cola4 </li>\n<li>DDDLib  </li>\n<li>Koala</li>\n</ul>\n<h4 id=\"四色原型-需求分析利器\"><a href=\"#四色原型-需求分析利器\" class=\"headerlink\" title=\"四色原型-需求分析利器\"></a>四色原型-需求分析利器</h4><img src=\"https://im-fan.gitee.io/img/ddd/four-color.png\"/>\n\n<pre><code class=\"textmate\">概念\n    “四色原型”是在使用UML建模的时候，把实体分为四类，并标注不同的颜色的一种建模方法。\n    用一句话来概括四色原型就是：一个什么样的人或物品以某种角色在某个时刻或某段时间内参与某个活动。其中“什么样的”就是DESC，“人或物品”就是PPT,”角色”就是ROLE,而“某个时刻或某个时间段内的某个活动”就是MI。\n    四色原型”有一个规则：就是MI（事件）不能与PPT（事物）直接打交道，必须通过ROLE（角色）来打交道。例如：只有买家才能下订单，订单只能通过买家与用户关联\n四色建模法包括\n    时标型（Moment-Interval）对象：具有可追溯性的记录运营或管理数据的时刻或时段对象，用粉红色表示\n    PPT（Party/Place/Thing）对象：代表参与到流程中的参与方/地点/物，用绿色表示\n    角色（Role）对象：在时标型对象与 PPT 对象（通常是参与方）之间参与的角色，用黄色表示\n    描述（Description）对象：对 PPT 对象的一种补充描述，用蓝色表示\n四色原型法设计领域模型的步骤：\n    1.根据需求，采用四色原型分析法建立一个初步的领域模型；\n    2.进一步分析领域模型，识别出哪些是实体，哪些是值对象，哪些是领域服务；\n    3.对实体、值对象进行关联和聚合，提炼出聚合边界和聚合根；\n    4.为聚合根设计仓储（一般情况下，一个聚合分配一个仓储），同时，思考实体、值对象的创建方式，是通过工厂创建，还是直接通过构造函数；\n    5.走查需求场景，验证设计的领域模型的合理性。</code></pre>\n<h4 id=\"标准项目模块解释\"><a href=\"#标准项目模块解释\" class=\"headerlink\" title=\"标准项目模块解释\"></a>标准项目模块解释</h4><pre><code class=\"textmate\">1.Interface \n    对外提供服务，包括Controller、防腐层-facade、对象转换-assembler、出参入参对象-dto\n2.Application \n    应用层,包括服务层-service(主要作用是操作 聚合根+仓储)\n3.Domain\n    领域层,包括领域对象-entity(主要业务逻辑，可以理解为对象封装操作)、领域服务-EntityService(不属于任何一个领域对象的其他业务或复杂业务逻辑)、值对象-ValueObjects 领域事件-DomainEvent、仓储接口定义-repository\n4.Infrastructure\n    基础设施层,包括持久化设置-PersistenceFacilities(仓储实现)、工具类等；支持以上模块</code></pre>\n<h3 id=\"DDD核心概念\"><a href=\"#DDD核心概念\" class=\"headerlink\" title=\"DDD核心概念\"></a>DDD核心概念</h3><ul>\n<li><p>实体</p>\n</li>\n<li><p>值对象</p>\n</li>\n<li><p>聚合</p>\n</li>\n<li><p>仓储</p>\n</li>\n<li><p>工厂</p>\n</li>\n<li><p>仓储</p>\n<pre><code class=\"textmate\">实体(Entities):具有唯一标识的对象\n值对象(Value Objects): 无需唯一标识的对象\n领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物\n聚合/聚合根(Aggregates,Aggregate Roots): 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary\n工厂(Factories): 创建复杂对象,隐藏创建细节\n仓储(Repository): 提供查找和持久化对象的方法</code></pre>\n</li>\n<li><p>DDD架构图</p>\n<img src=\"https://im-fan.gitee.io/img/ddd/ddd-framework.png\"/>\n\n</li>\n</ul>\n<h4 id=\"识别领域服务\"><a href=\"#识别领域服务\" class=\"headerlink\" title=\"识别领域服务\"></a>识别领域服务</h4><pre><code class=\"textmate\">主要看它是否满足以下三个特征：\n    1. 服务执行的操作代表了一个领域概念，这个领域概念无法自然地隶属于一个实体或者值对象。\n    2. 被执行的操作涉及到领域中的其他的对象。\n    3. 操作是无状态的。</code></pre>\n<h4 id=\"仓储相关\"><a href=\"#仓储相关\" class=\"headerlink\" title=\"仓储相关\"></a>仓储相关</h4><ul>\n<li>CQRS<pre><code class=\"textmate\">将查询单独划分为应用系统的一个分支，将修改（命令）单独划分为另外一个分支来操作领域对象。这是DDD的另外一种模式，英文简写：CQRS</code></pre>\n</li>\n</ul>\n"},{"title":"OAuth2学习笔记","description":"oauth2","date":"2020-11-17T01:58:26.000Z","_content":"\n- [参考demo](https://github.com/lexburner/oauth2-demo)\n- [OAuth2 RFC6749中文翻译](https://colobu.com/2017/04/28/oauth2-rfc6749/)\n- [理解OAuth 2.0-阮一峰](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n- [文档对应demo](https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2)\n\n#### 框架相关\n- OAuth2\n```\n解释：\n    OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n    如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n    1、用户打开客户端，客户端要求授权。\n    2、用户同意客户端授权。\n    3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n    4、授权服务器对客户端进行认证后，同意发放令牌。\n    5、客户端使用令牌，向资源服务器申请资源。\n    6、资源服务器确认令牌，向客户端开放资源。\n```\n- LDAP\n```\n解释：\n    LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n    浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n    LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n    用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n    1、连接到LDAP服务器。\n    2、绑定到LDAP服务器。\n    3、在LDAP服务器上执行所需要的操作。\n    4、释放LDAP服务器的连接。\n```\n- [CAS(Central Authentication Service-中央式认证服务)](https://www.cnblogs.com/lihuidu/p/6495247.html)\n```\nSSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。\n```\n- 适用场景\n```\nOAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。\n```\n\n#### 授权模式\n- 授权码模式（authorization code）\n```\n功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与\"服务提供商\"的认证服务器进行互动。\n```\n- 简化模式（implicit）\n\n- 密码模式（resource owner password credentials）\n- 客户端模式（client credentials）\n\n- 主要配置\n```\nOauth2ServerConfig\nWebSecurityConfigurer\n```\n\n#### 不同授权模式请求\n- 授权码模式(在浏览器中访问接口)\n```\n配置项：需要将返回地址添加到client中\n    clients.redirectUris(\"http://www.baidu.com\")\n    GET http://localhost:8200/oauth/authorize?response_type=code&client_id=client_1&redirect_uri=http://www.baidu.com&state=123\n所需参数解释\n    response_type：表示授权类型，必选项，此处的值固定为\"code\"\n    client_id：表示客户端的ID，必选项\n    redirect_uri：表示重定向URI，可选项\n    scope：表示申请的权限范围，可选项\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- 简化模式(在浏览器中访问接口)\n```\n请求地址\n    GET http://localhost:8200/oauth/authorize?response_type=token&client_id=client_1&redirect_uri=http://www.baidu.com&state=123&scope=select\n参数解释：\n    response_type：表示授权类型，此处的值固定为\"token\"，必选项。\n    client_id：表示客户端的ID，必选项。\n    redirect_uri：表示重定向的URI，可选项。\n    scope：表示权限范围，可选项。\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- password方式获取toke\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=password&scope=select&client_id=client_1&client_secret=123456&username=user_1&password=123456\n返回信息\n    {\n        \"access_token\": \"39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43021,\n        \"scope\": \"select\"\n    }\n参数解释\n    grant_type：表示授权类型，此处的值固定为\"password\"，必选项。\n    username：表示用户名，必选项。\n    password：表示用户的密码，必选项。\n    scope：表示权限范围，可选项。\n```\n\n- client方式获取access_token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=client_credentials&scope=select&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"17fc17a9-83b2-41c3-8621-c727d8329bbd\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 42400,\n        \"scope\": \"select\"\n    }\n参数解释\n    granttype：表示授权类型，此处的值固定为\"clientcredentials\"，必选项。\n    scope：表示权限范围，可选项。\n```\n\n\n- 刷新token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=refresh_token&refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"e0e64627-f157-4718-81f0-069ca21549ad\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43199,\n        \"scope\": \"select\"\n    }\n```\n\n#### 请求业务接口\n- 请求接口\n```\n配置拦截：\n    HttpSecurity中配置 http.antMatchers(\"/user/**\").authenticated()\n使用client方式获取的access_token\n    GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回\n```","source":"_posts/framework/oauth2.md","raw":"---\ntitle: OAuth2学习笔记\ndescription: oauth2\ndate: 2020-11-17 09:58:26\ntags:\n- oauth2\ncategories:\n- 架构\n---\n\n- [参考demo](https://github.com/lexburner/oauth2-demo)\n- [OAuth2 RFC6749中文翻译](https://colobu.com/2017/04/28/oauth2-rfc6749/)\n- [理解OAuth 2.0-阮一峰](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n- [文档对应demo](https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2)\n\n#### 框架相关\n- OAuth2\n```\n解释：\n    OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n    如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n    1、用户打开客户端，客户端要求授权。\n    2、用户同意客户端授权。\n    3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n    4、授权服务器对客户端进行认证后，同意发放令牌。\n    5、客户端使用令牌，向资源服务器申请资源。\n    6、资源服务器确认令牌，向客户端开放资源。\n```\n- LDAP\n```\n解释：\n    LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n    浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n    LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n    用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n    1、连接到LDAP服务器。\n    2、绑定到LDAP服务器。\n    3、在LDAP服务器上执行所需要的操作。\n    4、释放LDAP服务器的连接。\n```\n- [CAS(Central Authentication Service-中央式认证服务)](https://www.cnblogs.com/lihuidu/p/6495247.html)\n```\nSSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。\n```\n- 适用场景\n```\nOAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。\n```\n\n#### 授权模式\n- 授权码模式（authorization code）\n```\n功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与\"服务提供商\"的认证服务器进行互动。\n```\n- 简化模式（implicit）\n\n- 密码模式（resource owner password credentials）\n- 客户端模式（client credentials）\n\n- 主要配置\n```\nOauth2ServerConfig\nWebSecurityConfigurer\n```\n\n#### 不同授权模式请求\n- 授权码模式(在浏览器中访问接口)\n```\n配置项：需要将返回地址添加到client中\n    clients.redirectUris(\"http://www.baidu.com\")\n    GET http://localhost:8200/oauth/authorize?response_type=code&client_id=client_1&redirect_uri=http://www.baidu.com&state=123\n所需参数解释\n    response_type：表示授权类型，必选项，此处的值固定为\"code\"\n    client_id：表示客户端的ID，必选项\n    redirect_uri：表示重定向URI，可选项\n    scope：表示申请的权限范围，可选项\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- 简化模式(在浏览器中访问接口)\n```\n请求地址\n    GET http://localhost:8200/oauth/authorize?response_type=token&client_id=client_1&redirect_uri=http://www.baidu.com&state=123&scope=select\n参数解释：\n    response_type：表示授权类型，此处的值固定为\"token\"，必选项。\n    client_id：表示客户端的ID，必选项。\n    redirect_uri：表示重定向的URI，可选项。\n    scope：表示权限范围，可选项。\n    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n```\n\n- password方式获取toke\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=password&scope=select&client_id=client_1&client_secret=123456&username=user_1&password=123456\n返回信息\n    {\n        \"access_token\": \"39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43021,\n        \"scope\": \"select\"\n    }\n参数解释\n    grant_type：表示授权类型，此处的值固定为\"password\"，必选项。\n    username：表示用户名，必选项。\n    password：表示用户的密码，必选项。\n    scope：表示权限范围，可选项。\n```\n\n- client方式获取access_token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=client_credentials&scope=select&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"17fc17a9-83b2-41c3-8621-c727d8329bbd\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 42400,\n        \"scope\": \"select\"\n    }\n参数解释\n    granttype：表示授权类型，此处的值固定为\"clientcredentials\"，必选项。\n    scope：表示权限范围，可选项。\n```\n\n\n- 刷新token\n```\n请求地址\n    POST http://localhost:8200/oauth/token?grant_type=refresh_token&refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&client_id=client_2&client_secret=123456\n返回信息\n    {\n        \"access_token\": \"e0e64627-f157-4718-81f0-069ca21549ad\",\n        \"token_type\": \"bearer\",\n        \"refresh_token\": \"396e6c5e-9d79-420a-8b25-945098b10c82\",\n        \"expires_in\": 43199,\n        \"scope\": \"select\"\n    }\n```\n\n#### 请求业务接口\n- 请求接口\n```\n配置拦截：\n    HttpSecurity中配置 http.antMatchers(\"/user/**\").authenticated()\n使用client方式获取的access_token\n    GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回\n```","slug":"framework/oauth2","published":1,"updated":"2020-12-26T08:13:32.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl2x0006j49k5c2o35r0","content":"<ul>\n<li><a href=\"https://github.com/lexburner/oauth2-demo\">参考demo</a></li>\n<li><a href=\"https://colobu.com/2017/04/28/oauth2-rfc6749/\">OAuth2 RFC6749中文翻译</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">理解OAuth 2.0-阮一峰</a></li>\n<li><a href=\"https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2\">文档对应demo</a></li>\n</ul>\n<h4 id=\"框架相关\"><a href=\"#框架相关\" class=\"headerlink\" title=\"框架相关\"></a>框架相关</h4><ul>\n<li>OAuth2<pre><code>解释：\n  OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n  如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n  1、用户打开客户端，客户端要求授权。\n  2、用户同意客户端授权。\n  3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n  4、授权服务器对客户端进行认证后，同意发放令牌。\n  5、客户端使用令牌，向资源服务器申请资源。\n  6、资源服务器确认令牌，向客户端开放资源。</code></pre>\n</li>\n<li>LDAP<pre><code>解释：\n  LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n  浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n  LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n  用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n  1、连接到LDAP服务器。\n  2、绑定到LDAP服务器。\n  3、在LDAP服务器上执行所需要的操作。\n  4、释放LDAP服务器的连接。</code></pre>\n</li>\n<li><a href=\"https://www.cnblogs.com/lihuidu/p/6495247.html\">CAS(Central Authentication Service-中央式认证服务)</a><pre><code>SSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</code></pre>\n</li>\n<li>适用场景<pre><code>OAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。</code></pre>\n</li>\n</ul>\n<h4 id=\"授权模式\"><a href=\"#授权模式\" class=\"headerlink\" title=\"授权模式\"></a>授权模式</h4><ul>\n<li><p>授权码模式（authorization code）</p>\n<pre><code>功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与&quot;服务提供商&quot;的认证服务器进行互动。</code></pre>\n</li>\n<li><p>简化模式（implicit）</p>\n</li>\n<li><p>密码模式（resource owner password credentials）</p>\n</li>\n<li><p>客户端模式（client credentials）</p>\n</li>\n<li><p>主要配置</p>\n<pre><code>Oauth2ServerConfig\nWebSecurityConfigurer</code></pre>\n</li>\n</ul>\n<h4 id=\"不同授权模式请求\"><a href=\"#不同授权模式请求\" class=\"headerlink\" title=\"不同授权模式请求\"></a>不同授权模式请求</h4><ul>\n<li><p>授权码模式(在浏览器中访问接口)</p>\n<pre><code>配置项：需要将返回地址添加到client中\n  clients.redirectUris(&quot;http://www.baidu.com&quot;)\n  GET http://localhost:8200/oauth/authorize?response_type=code&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123\n所需参数解释\n  response_type：表示授权类型，必选项，此处的值固定为&quot;code&quot;\n  client_id：表示客户端的ID，必选项\n  redirect_uri：表示重定向URI，可选项\n  scope：表示申请的权限范围，可选项\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>简化模式(在浏览器中访问接口)</p>\n<pre><code>请求地址\n  GET http://localhost:8200/oauth/authorize?response_type=token&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123&amp;scope=select\n参数解释：\n  response_type：表示授权类型，此处的值固定为&quot;token&quot;，必选项。\n  client_id：表示客户端的ID，必选项。\n  redirect_uri：表示重定向的URI，可选项。\n  scope：表示权限范围，可选项。\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>password方式获取toke</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=password&amp;scope=select&amp;client_id=client_1&amp;client_secret=123456&amp;username=user_1&amp;password=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43021,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  grant_type：表示授权类型，此处的值固定为&quot;password&quot;，必选项。\n  username：表示用户名，必选项。\n  password：表示用户的密码，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n<li><p>client方式获取access_token</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=client_credentials&amp;scope=select&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;17fc17a9-83b2-41c3-8621-c727d8329bbd&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;expires_in&quot;: 42400,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  granttype：表示授权类型，此处的值固定为&quot;clientcredentials&quot;，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n</ul>\n<ul>\n<li>刷新token<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=refresh_token&amp;refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;e0e64627-f157-4718-81f0-069ca21549ad&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43199,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"请求业务接口\"><a href=\"#请求业务接口\" class=\"headerlink\" title=\"请求业务接口\"></a>请求业务接口</h4><ul>\n<li>请求接口<pre><code>配置拦截：\n  HttpSecurity中配置 http.antMatchers(&quot;/user/**&quot;).authenticated()\n使用client方式获取的access_token\n  GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://github.com/lexburner/oauth2-demo\">参考demo</a></li>\n<li><a href=\"https://colobu.com/2017/04/28/oauth2-rfc6749/\">OAuth2 RFC6749中文翻译</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">理解OAuth 2.0-阮一峰</a></li>\n<li><a href=\"https://github.com/im-fan/my-project/tree/release/1.0/my-oauth2\">文档对应demo</a></li>\n</ul>\n<h4 id=\"框架相关\"><a href=\"#框架相关\" class=\"headerlink\" title=\"框架相关\"></a>框架相关</h4><ul>\n<li>OAuth2<pre><code>解释：\n  OAuth 2.0是一个关于授权的开放网络协议，它允许用户让第三方网站访问该用户在某一网站上存储的信息和资源，\n  如账户信息，照片，联系人等，而不需要给第三方网站提供某一网站上的账户和密码。\n流程：\n  1、用户打开客户端，客户端要求授权。\n  2、用户同意客户端授权。\n  3、客户端使用上一步提供的授权，向服务器授权层申请令牌。\n  4、授权服务器对客户端进行认证后，同意发放令牌。\n  5、客户端使用令牌，向资源服务器申请资源。\n  6、资源服务器确认令牌，向客户端开放资源。</code></pre>\n</li>\n<li>LDAP<pre><code>解释：\n  LDAP是一种基于轻量目录访问协议，全称是Lightweight Directory Access Protocol，是由一个为查询、\n  浏览和搜索而优化的数据库构成，它成树状结构组织数据，类似文件目录一样。\n  LDAP单点登录认证主要是改变原有的认证策略，使得需要的软件都通过LDAP服务器进行认证，在统一身份认证后，\n  用户的所有信息都存储在AD Server中，终端用户在需要使用公司内部服务的时候，都需要通过AD服务器进行认证。\n登录流程：\n  1、连接到LDAP服务器。\n  2、绑定到LDAP服务器。\n  3、在LDAP服务器上执行所需要的操作。\n  4、释放LDAP服务器的连接。</code></pre>\n</li>\n<li><a href=\"https://www.cnblogs.com/lihuidu/p/6495247.html\">CAS(Central Authentication Service-中央式认证服务)</a><pre><code>SSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。\nCAS即Central Authentication Service模型（中央式认证服务），该协议是为应用提供可信身份认证的单点登录系统，最初是由耶鲁大学开发的。\nCAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</code></pre>\n</li>\n<li>适用场景<pre><code>OAuth协议能广泛应用于互联网中，基于大企业的巨大用户量，能减少小网站的注册推广成本，并且能做到更加便捷的资源共享。\nLDAP协议适用于企业用户使用，通过LDAP协议，能较好地管理员工在公司各系统之间的授权与访问。\nCAS模型，作为权威机构开发的系统，具有很好的兼容性与安全性，广泛应用于各大高校等大型组织，能很好地完成大量系统的对接与大量人员的使用。</code></pre>\n</li>\n</ul>\n<h4 id=\"授权模式\"><a href=\"#授权模式\" class=\"headerlink\" title=\"授权模式\"></a>授权模式</h4><ul>\n<li><p>授权码模式（authorization code）</p>\n<pre><code>功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与&quot;服务提供商&quot;的认证服务器进行互动。</code></pre>\n</li>\n<li><p>简化模式（implicit）</p>\n</li>\n<li><p>密码模式（resource owner password credentials）</p>\n</li>\n<li><p>客户端模式（client credentials）</p>\n</li>\n<li><p>主要配置</p>\n<pre><code>Oauth2ServerConfig\nWebSecurityConfigurer</code></pre>\n</li>\n</ul>\n<h4 id=\"不同授权模式请求\"><a href=\"#不同授权模式请求\" class=\"headerlink\" title=\"不同授权模式请求\"></a>不同授权模式请求</h4><ul>\n<li><p>授权码模式(在浏览器中访问接口)</p>\n<pre><code>配置项：需要将返回地址添加到client中\n  clients.redirectUris(&quot;http://www.baidu.com&quot;)\n  GET http://localhost:8200/oauth/authorize?response_type=code&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123\n所需参数解释\n  response_type：表示授权类型，必选项，此处的值固定为&quot;code&quot;\n  client_id：表示客户端的ID，必选项\n  redirect_uri：表示重定向URI，可选项\n  scope：表示申请的权限范围，可选项\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>简化模式(在浏览器中访问接口)</p>\n<pre><code>请求地址\n  GET http://localhost:8200/oauth/authorize?response_type=token&amp;client_id=client_1&amp;redirect_uri=http://www.baidu.com&amp;state=123&amp;scope=select\n参数解释：\n  response_type：表示授权类型，此处的值固定为&quot;token&quot;，必选项。\n  client_id：表示客户端的ID，必选项。\n  redirect_uri：表示重定向的URI，可选项。\n  scope：表示权限范围，可选项。\n  state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</code></pre>\n</li>\n<li><p>password方式获取toke</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=password&amp;scope=select&amp;client_id=client_1&amp;client_secret=123456&amp;username=user_1&amp;password=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;39be5ea6-fdcd-4b15-a4dd-1f3dbaf8fc63&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43021,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  grant_type：表示授权类型，此处的值固定为&quot;password&quot;，必选项。\n  username：表示用户名，必选项。\n  password：表示用户的密码，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n<li><p>client方式获取access_token</p>\n<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=client_credentials&amp;scope=select&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;17fc17a9-83b2-41c3-8621-c727d8329bbd&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;expires_in&quot;: 42400,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;\n参数解释\n  granttype：表示授权类型，此处的值固定为&quot;clientcredentials&quot;，必选项。\n  scope：表示权限范围，可选项。</code></pre>\n</li>\n</ul>\n<ul>\n<li>刷新token<pre><code>请求地址\n  POST http://localhost:8200/oauth/token?grant_type=refresh_token&amp;refresh_token=396e6c5e-9d79-420a-8b25-945098b10c82&amp;client_id=client_2&amp;client_secret=123456\n返回信息\n  &#123;\n      &quot;access_token&quot;: &quot;e0e64627-f157-4718-81f0-069ca21549ad&quot;,\n      &quot;token_type&quot;: &quot;bearer&quot;,\n      &quot;refresh_token&quot;: &quot;396e6c5e-9d79-420a-8b25-945098b10c82&quot;,\n      &quot;expires_in&quot;: 43199,\n      &quot;scope&quot;: &quot;select&quot;\n  &#125;</code></pre>\n</li>\n</ul>\n<h4 id=\"请求业务接口\"><a href=\"#请求业务接口\" class=\"headerlink\" title=\"请求业务接口\"></a>请求业务接口</h4><ul>\n<li>请求接口<pre><code>配置拦截：\n  HttpSecurity中配置 http.antMatchers(&quot;/user/**&quot;).authenticated()\n使用client方式获取的access_token\n  GET http://localhost:8200/user/info?access_token=d8f47460-c0a6-4247-9f87-1712bae5325e\n接口可正常返回</code></pre>\n</li>\n</ul>\n"},{"title":"互联网常用语记录","description":"常用语记录","date":"2020-11-04T14:31:24.000Z","_content":" \n### 二字动词\n```textmate\n复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、\n```\n\n### 二字名词\n```textmate\n漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点\n```\n\n### 三字名词\n```textmate\n颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快\n```\n\n### 四字名词\n```textmate\n生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障\n```","source":"_posts/thinking/ali-words.md","raw":"---\ntitle: 互联网常用语记录\ndescription: 常用语记录\ndate: 2020-11-04 22:31:24\ntags: 常用语\ncategories:\n- 思考\n- 常用语\n---\n \n### 二字动词\n```textmate\n复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、\n```\n\n### 二字名词\n```textmate\n漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点\n```\n\n### 三字名词\n```textmate\n颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快\n```\n\n### 四字名词\n```textmate\n生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障\n```","slug":"thinking/ali-words","published":1,"updated":"2020-12-26T08:26:24.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl2y0007j49k8npwc0rd","content":"<h3 id=\"二字动词\"><a href=\"#二字动词\" class=\"headerlink\" title=\"二字动词\"></a>二字动词</h3><pre><code class=\"textmate\">复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、</code></pre>\n<h3 id=\"二字名词\"><a href=\"#二字名词\" class=\"headerlink\" title=\"二字名词\"></a>二字名词</h3><pre><code class=\"textmate\">漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点</code></pre>\n<h3 id=\"三字名词\"><a href=\"#三字名词\" class=\"headerlink\" title=\"三字名词\"></a>三字名词</h3><pre><code class=\"textmate\">颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快</code></pre>\n<h3 id=\"四字名词\"><a href=\"#四字名词\" class=\"headerlink\" title=\"四字名词\"></a>四字名词</h3><pre><code class=\"textmate\">生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"二字动词\"><a href=\"#二字动词\" class=\"headerlink\" title=\"二字动词\"></a>二字动词</h3><pre><code class=\"textmate\">复盘、赋能、沉淀、倒逼、落地、串联、协同、反哺、兼容、\n包装、重组、履约、响应、量化、发力、布局、联动、开拓、\n细分、梳理、输出、加速、共建、支撑、融合、聚合、解耦、\n集成、对齐、对标、对焦、抓手、拆解、拉通、抽象、摸索、\n提炼、打通、打透、吃透、迁移、分发、分层、分装、穿梭、\n辐射、围绕、复用、渗透、扩展、</code></pre>\n<h3 id=\"二字名词\"><a href=\"#二字名词\" class=\"headerlink\" title=\"二字名词\"></a>二字名词</h3><pre><code class=\"textmate\">漏斗、中台、闭环、打法、拉通、纽带、矩阵、刺激、\n规模、场景、聚焦、维度、格局、形态、生态、话术、\n体系、认知、玩法、体感、感知、调性、心智、战役、\n合力、心力、赛道、因子、模型、载体、横向、通道、\n补位、链路、试点</code></pre>\n<h3 id=\"三字名词\"><a href=\"#三字名词\" class=\"headerlink\" title=\"三字名词\"></a>三字名词</h3><pre><code class=\"textmate\">颗粒度、感知度、方法论、组合拳、引爆点、点线面、\n精细化、差异化、平台化、结构化、影响力、耦合性、\n易用性、一致性、端到端、短平快</code></pre>\n<h3 id=\"四字名词\"><a href=\"#四字名词\" class=\"headerlink\" title=\"四字名词\"></a>四字名词</h3><pre><code class=\"textmate\">生命周期、价值转化、强化认知、资源倾斜、完善逻辑、\n抽离透传、复用打法、商业价值、商业模式、快速响应、\n定性定量、关键链路、去中心化、结果导向、垂直领域、\n如何收口、归因分析、体验度量、信息屏障</code></pre>\n"},{"title":"阅读","description":"思考 阅读","date":"2020-10-02T06:44:10.000Z","_content":"\n\n- **网址**\n  - [结构化思维](https://www.toutiao.com/i6619057728725729800/)","source":"_posts/thinking/book.md","raw":"---\ntitle: 阅读\ndescription: 思考 阅读\ndate: 2020-10-02 14:44:10\ntags:\n- 思维\ncategories:\n- 思考\n- 阅读\n---\n\n\n- **网址**\n  - [结构化思维](https://www.toutiao.com/i6619057728725729800/)","slug":"thinking/book","published":1,"updated":"2020-11-04T14:37:15.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl30000bj49kcd383coj","content":"<ul>\n<li><strong>网址</strong><ul>\n<li><a href=\"https://www.toutiao.com/i6619057728725729800/\">结构化思维</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>网址</strong><ul>\n<li><a href=\"https://www.toutiao.com/i6619057728725729800/\">结构化思维</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hexo搭建博客","date":"2020-09-30T06:51:20.000Z","_content":"\n> 记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网\n\n\n### 相关链接\n- [Hexo官网](https://hexo.io/zh-cn/)\n- [官网主题](https://hexo.io/themes/)\n- [3-hexo主题](https://github.com/yelog/hexo-theme-3-hexo)\n- [3-hexo主题相关文档](https://yelog.org/2017/03/13/3-hexo-logs/)\n\n### 准备环境\n> mac用户推荐先安装Homebrew，通过Homebrew安装一下软件\n- [Homebrew](https://brew.sh/)\n- 安装Git\n- 安装Node.js\n\n### 安装Hexo\n```textmate\nnpm install -g hexo-cli\n```\n\n### 创建项目\n```shell\n注：my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install\n```\n\n### 项目结构\n\n- 目录\n```textmate\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n- 目录介绍\n\n```textmate\n1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n### 配置主题\n- [官网主题](https://hexo.io/themes/)\n- 本博客使用的主题 [3-hexo](https://github.com/yelog/hexo-theme-3-hexo)\n\n```textmate\n1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者\n```\n\n### 写作\n- 常用文档命令\n\n```textmate\n1.新建文档\nhexo new [layout] <title>\n\n2.新建草稿文档\nhexo new [layout] <title>\n\n3.草稿<->发布\nhexo publish [layout] <title>\n```\n- 参数介绍\n|参数|值|作用|生成文件的路径|\n|-|-|-|-|\n|layout|post|正式发表的文章|source/_posts|\n|layout|page|静态页面|source|\n|layout|draft|草稿|source/_drafts|\n|title|-|文章标题&文件名|-|\n\n- 文档头部信息格式\n\n```textmate\n---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---\n```\n\n- 文档头部信息解释\n\n|参数|作用|\n|-|-|\n|title|\t网站标题|\n|subtitle|\t网站副标题|\n|description|\t网站描述|\n|tags|标签，可多个|\n|categories|分类菜单，可定义多级|\n|keywords|\t网站的关键词。支援多个关键词。|\n|author|\t您的名字|\n|language|\t网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。|\n|timezone|\t网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。|\n\n### 运行&发布\n- 本地运行\n```textmate\nnpm run server\n```\n- 编译&部署\n```textmate\nhexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可\n```\n","source":"_posts/tools/hexo.md","raw":"---\ntitle: Hexo搭建博客\ndate: 2020-09-30 14:51:20\ntags: \n- tool\ncategories: \n- 其他\n- 博客工具\n---\n\n> 记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网\n\n\n### 相关链接\n- [Hexo官网](https://hexo.io/zh-cn/)\n- [官网主题](https://hexo.io/themes/)\n- [3-hexo主题](https://github.com/yelog/hexo-theme-3-hexo)\n- [3-hexo主题相关文档](https://yelog.org/2017/03/13/3-hexo-logs/)\n\n### 准备环境\n> mac用户推荐先安装Homebrew，通过Homebrew安装一下软件\n- [Homebrew](https://brew.sh/)\n- 安装Git\n- 安装Node.js\n\n### 安装Hexo\n```textmate\nnpm install -g hexo-cli\n```\n\n### 创建项目\n```shell\n注：my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install\n```\n\n### 项目结构\n\n- 目录\n```textmate\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n- 目录介绍\n\n```textmate\n1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。\n```\n### 配置主题\n- [官网主题](https://hexo.io/themes/)\n- 本博客使用的主题 [3-hexo](https://github.com/yelog/hexo-theme-3-hexo)\n\n```textmate\n1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者\n```\n\n### 写作\n- 常用文档命令\n\n```textmate\n1.新建文档\nhexo new [layout] <title>\n\n2.新建草稿文档\nhexo new [layout] <title>\n\n3.草稿<->发布\nhexo publish [layout] <title>\n```\n- 参数介绍\n|参数|值|作用|生成文件的路径|\n|-|-|-|-|\n|layout|post|正式发表的文章|source/_posts|\n|layout|page|静态页面|source|\n|layout|draft|草稿|source/_drafts|\n|title|-|文章标题&文件名|-|\n\n- 文档头部信息格式\n\n```textmate\n---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---\n```\n\n- 文档头部信息解释\n\n|参数|作用|\n|-|-|\n|title|\t网站标题|\n|subtitle|\t网站副标题|\n|description|\t网站描述|\n|tags|标签，可多个|\n|categories|分类菜单，可定义多级|\n|keywords|\t网站的关键词。支援多个关键词。|\n|author|\t您的名字|\n|language|\t网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。|\n|timezone|\t网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。|\n\n### 运行&发布\n- 本地运行\n```textmate\nnpm run server\n```\n- 编译&部署\n```textmate\nhexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可\n```\n","slug":"tools/hexo","published":1,"updated":"2020-12-26T08:56:36.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl31000dj49k76nogdy5","content":"<blockquote>\n<p>记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://hexo.io/zh-cn/\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo主题</a></li>\n<li><a href=\"https://yelog.org/2017/03/13/3-hexo-logs/\">3-hexo主题相关文档</a></li>\n</ul>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><blockquote>\n<p>mac用户推荐先安装Homebrew，通过Homebrew安装一下软件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://brew.sh/\">Homebrew</a></li>\n<li>安装Git</li>\n<li>安装Node.js</li>\n</ul>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><pre><code class=\"textmate\">npm install -g hexo-cli</code></pre>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code class=\"shell\">注：my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install</code></pre>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><ul>\n<li><p>目录</p>\n<pre><code class=\"textmate\">.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes</code></pre>\n</li>\n<li><p>目录介绍</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。</code></pre>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><ul>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li>本博客使用的主题 <a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo</a></li>\n</ul>\n<pre><code class=\"textmate\">1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者</code></pre>\n<h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><ul>\n<li>常用文档命令</li>\n</ul>\n<pre><code class=\"textmate\">1.新建文档\nhexo new [layout] &lt;title&gt;\n\n2.新建草稿文档\nhexo new [layout] &lt;title&gt;\n\n3.草稿&lt;-&gt;发布\nhexo publish [layout] &lt;title&gt;</code></pre>\n<ul>\n<li><p>参数介绍</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n<th>作用</th>\n<th>生成文件的路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>post</td>\n<td>正式发表的文章</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>page</td>\n<td>静态页面</td>\n<td>source</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>draft</td>\n<td>草稿</td>\n<td>source/_drafts</td>\n</tr>\n<tr>\n<td>title</td>\n<td>-</td>\n<td>文章标题&amp;文件名</td>\n<td>-</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>文档头部信息格式</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---</code></pre>\n<ul>\n<li>文档头部信息解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签，可多个</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类菜单，可定义多级</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>网站的关键词。支援多个关键词。</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td>\n</tr>\n</tbody></table>\n<h3 id=\"运行-amp-发布\"><a href=\"#运行-amp-发布\" class=\"headerlink\" title=\"运行&amp;发布\"></a>运行&amp;发布</h3><ul>\n<li>本地运行<pre><code class=\"textmate\">npm run server</code></pre>\n</li>\n<li>编译&amp;部署<pre><code class=\"textmate\">hexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录本博客搭建步骤，适用于Mac/Linux系统，详细介绍及其他系统请参照Hexo官网</p>\n</blockquote>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><a href=\"https://hexo.io/zh-cn/\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo主题</a></li>\n<li><a href=\"https://yelog.org/2017/03/13/3-hexo-logs/\">3-hexo主题相关文档</a></li>\n</ul>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><blockquote>\n<p>mac用户推荐先安装Homebrew，通过Homebrew安装一下软件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://brew.sh/\">Homebrew</a></li>\n<li>安装Git</li>\n<li>安装Node.js</li>\n</ul>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><pre><code class=\"textmate\">npm install -g hexo-cli</code></pre>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code class=\"shell\">注：my-hexo - 项目名/项目文件夹名\nhexo init my-hexo\ncd my-hexo\nnpm install</code></pre>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><ul>\n<li><p>目录</p>\n<pre><code class=\"textmate\">.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes</code></pre>\n</li>\n<li><p>目录介绍</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1._config.yml\n网站的 配置 信息，您可以在此配置大部分的参数\n2.package.json\n应用程序的信息。\n3.scaffolds\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n4.source\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n5.themes\n主题 文件夹。Hexo 会根据主题来生成静态页面。</code></pre>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><ul>\n<li><a href=\"https://hexo.io/themes/\">官网主题</a></li>\n<li>本博客使用的主题 <a href=\"https://github.com/yelog/hexo-theme-3-hexo\">3-hexo</a></li>\n</ul>\n<pre><code class=\"textmate\">1.项目根目录下执行(下载其他主题，修改为themes/xxx即可)\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n2.修改配置\n修改hexo根目录的_config.yml，theme: 3-hexo\n3.主题更新\ncd themes/3-hexo\ngit pull\n\n在此感谢提供主题的作者</code></pre>\n<h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><ul>\n<li>常用文档命令</li>\n</ul>\n<pre><code class=\"textmate\">1.新建文档\nhexo new [layout] &lt;title&gt;\n\n2.新建草稿文档\nhexo new [layout] &lt;title&gt;\n\n3.草稿&lt;-&gt;发布\nhexo publish [layout] &lt;title&gt;</code></pre>\n<ul>\n<li><p>参数介绍</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n<th>作用</th>\n<th>生成文件的路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>post</td>\n<td>正式发表的文章</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>page</td>\n<td>静态页面</td>\n<td>source</td>\n</tr>\n<tr>\n<td>layout</td>\n<td>draft</td>\n<td>草稿</td>\n<td>source/_drafts</td>\n</tr>\n<tr>\n<td>title</td>\n<td>-</td>\n<td>文章标题&amp;文件名</td>\n<td>-</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>文档头部信息格式</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">---\ntitle: Java\ndate: 2020-09-30 14:51:20\ntags: \n- Java\ncategories: \n- Java\n- 笔记\n---</code></pre>\n<ul>\n<li>文档头部信息解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签，可多个</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类菜单，可定义多级</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>网站的关键词。支援多个关键词。</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td>\n</tr>\n</tbody></table>\n<h3 id=\"运行-amp-发布\"><a href=\"#运行-amp-发布\" class=\"headerlink\" title=\"运行&amp;发布\"></a>运行&amp;发布</h3><ul>\n<li>本地运行<pre><code class=\"textmate\">npm run server</code></pre>\n</li>\n<li>编译&amp;部署<pre><code class=\"textmate\">hexo clean \nhexo generate\n编译后会生成public文件夹，部署gitpage可以直接指定public为资源文件夹即可</code></pre>\n</li>\n</ul>\n"},{"title":"软件推荐","date":"2020-10-02T06:34:06.000Z","_content":"\n\n### Mac软件&工具网站\n|主要功能|软件名|相关网址|\n|-|-|-|\n|图片编辑器|PixelStyle||\n|视频播放|IINA||\n|录屏软件|LICEcap||\n|文件比较|Beyond Compare||\n|Markdown编辑工具|Haroopad||\n|Mac包管理工具|Homebrew||\n|Mac破解软件||https://xclient.info|","source":"_posts/tools/software.md","raw":"---\ntitle: 软件推荐\ndate: 2020-10-02 14:34:06\ntags: \n- tool\ncategories:\n- 其他\n- 软件\n---\n\n\n### Mac软件&工具网站\n|主要功能|软件名|相关网址|\n|-|-|-|\n|图片编辑器|PixelStyle||\n|视频播放|IINA||\n|录屏软件|LICEcap||\n|文件比较|Beyond Compare||\n|Markdown编辑工具|Haroopad||\n|Mac包管理工具|Homebrew||\n|Mac破解软件||https://xclient.info|","slug":"tools/software","published":1,"updated":"2020-10-20T09:45:39.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl36000gj49kf78e79c6","content":"<h3 id=\"Mac软件-amp-工具网站\"><a href=\"#Mac软件-amp-工具网站\" class=\"headerlink\" title=\"Mac软件&amp;工具网站\"></a>Mac软件&amp;工具网站</h3><table>\n<thead>\n<tr>\n<th>主要功能</th>\n<th>软件名</th>\n<th>相关网址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>图片编辑器</td>\n<td>PixelStyle</td>\n<td></td>\n</tr>\n<tr>\n<td>视频播放</td>\n<td>IINA</td>\n<td></td>\n</tr>\n<tr>\n<td>录屏软件</td>\n<td>LICEcap</td>\n<td></td>\n</tr>\n<tr>\n<td>文件比较</td>\n<td>Beyond Compare</td>\n<td></td>\n</tr>\n<tr>\n<td>Markdown编辑工具</td>\n<td>Haroopad</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac包管理工具</td>\n<td>Homebrew</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac破解软件</td>\n<td></td>\n<td><a href=\"https://xclient.info/\">https://xclient.info</a></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Mac软件-amp-工具网站\"><a href=\"#Mac软件-amp-工具网站\" class=\"headerlink\" title=\"Mac软件&amp;工具网站\"></a>Mac软件&amp;工具网站</h3><table>\n<thead>\n<tr>\n<th>主要功能</th>\n<th>软件名</th>\n<th>相关网址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>图片编辑器</td>\n<td>PixelStyle</td>\n<td></td>\n</tr>\n<tr>\n<td>视频播放</td>\n<td>IINA</td>\n<td></td>\n</tr>\n<tr>\n<td>录屏软件</td>\n<td>LICEcap</td>\n<td></td>\n</tr>\n<tr>\n<td>文件比较</td>\n<td>Beyond Compare</td>\n<td></td>\n</tr>\n<tr>\n<td>Markdown编辑工具</td>\n<td>Haroopad</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac包管理工具</td>\n<td>Homebrew</td>\n<td></td>\n</tr>\n<tr>\n<td>Mac破解软件</td>\n<td></td>\n<td><a href=\"https://xclient.info/\">https://xclient.info</a></td>\n</tr>\n</tbody></table>\n"},{"title":"Canal服务搭建","date":"2020-10-02T07:51:46.000Z","_content":"\n### 相关网址\n- [官网](https://github.com/alibaba/canal/wiki/Home)\n- [快速开始](https://github.com/alibaba/canal/wiki/QuickStart)\n- [Release下载](https://github.com/alibaba/canal/releases)\n- [Docker镜像地址](https://hub.docker.com/r/canal/canal-server/tags/)\n- [Canal Admin QuickStart](https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart)\n- [Canal Client Example](https://github.com/alibaba/canal/wiki/ClientExample)\n\n### 直接部署\n#### 准备\n```textmate\n1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs\n```\n\n### Docker搭建步骤\n> docker方式部署,注意配置时mysql的IP地址\n#### 准备\n```textmate\n1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example\n```\n\n#### 启动命令\n```textmate\n1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx\n```\n\n#### CanalAdmin配置\n\n- 1.集群配置\n```yaml\n#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441\n```\n\n- 2.Server管理\n```textmate\nServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110\n```\n\n- 3.Instance管理\n```textmate\n注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置\n```\n\n#### 一个Canal服务读取多个MySQL实例(docker中操作)\n```textmate\n1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181\n```\n\n### 参考配置(基础版，其他配置参考官网)\n\n- canal.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181\n```\n\n- instance.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false\n```\n\n#### 常见问题\n- 服务都启动成功，客户端拉不到变更日志\n```textmate\n注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(\"sap_system\\\\..*,user_center\\\\..*\")\n```\n\n- 一个Canal-Service,多个client，运行时报错\n```textmate\n改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题\n```","source":"_posts/backend/database/canal.md","raw":"---\ntitle: Canal服务搭建\ndate: 2020-10-02 15:51:46\ntags: \n- canal\ncategories: \n- 数据库\n---\n\n### 相关网址\n- [官网](https://github.com/alibaba/canal/wiki/Home)\n- [快速开始](https://github.com/alibaba/canal/wiki/QuickStart)\n- [Release下载](https://github.com/alibaba/canal/releases)\n- [Docker镜像地址](https://hub.docker.com/r/canal/canal-server/tags/)\n- [Canal Admin QuickStart](https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart)\n- [Canal Client Example](https://github.com/alibaba/canal/wiki/ClientExample)\n\n### 直接部署\n#### 准备\n```textmate\n1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs\n```\n\n### Docker搭建步骤\n> docker方式部署,注意配置时mysql的IP地址\n#### 准备\n```textmate\n1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example\n```\n\n#### 启动命令\n```textmate\n1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx\n```\n\n#### CanalAdmin配置\n\n- 1.集群配置\n```yaml\n#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441\n```\n\n- 2.Server管理\n```textmate\nServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110\n```\n\n- 3.Instance管理\n```textmate\n注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置\n```\n\n#### 一个Canal服务读取多个MySQL实例(docker中操作)\n```textmate\n1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181\n```\n\n### 参考配置(基础版，其他配置参考官网)\n\n- canal.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181\n```\n\n- instance.properties\n```yaml\n# 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false\n```\n\n#### 常见问题\n- 服务都启动成功，客户端拉不到变更日志\n```textmate\n注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(\"sap_system\\\\..*,user_center\\\\..*\")\n```\n\n- 一个Canal-Service,多个client，运行时报错\n```textmate\n改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题\n```","slug":"backend/database/canal","published":1,"updated":"2020-12-26T08:44:52.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl37000ij49k8byrgmfz","content":"<h3 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h3><ul>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Home\">官网</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/QuickStart\">快速开始</a></li>\n<li><a href=\"https://github.com/alibaba/canal/releases\">Release下载</a></li>\n<li><a href=\"https://hub.docker.com/r/canal/canal-server/tags/\">Docker镜像地址</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart\">Canal Admin QuickStart</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/ClientExample\">Canal Client Example</a></li>\n</ul>\n<h3 id=\"直接部署\"><a href=\"#直接部署\" class=\"headerlink\" title=\"直接部署\"></a>直接部署</h3><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><pre><code class=\"textmate\">1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&amp;配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs</code></pre>\n<h3 id=\"Docker搭建步骤\"><a href=\"#Docker搭建步骤\" class=\"headerlink\" title=\"Docker搭建步骤\"></a>Docker搭建步骤</h3><blockquote>\n<p>docker方式部署,注意配置时mysql的IP地址</p>\n</blockquote>\n<h4 id=\"准备-1\"><a href=\"#准备-1\" class=\"headerlink\" title=\"准备\"></a>准备</h4><pre><code class=\"textmate\">1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example</code></pre>\n<h4 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h4><pre><code class=\"textmate\">1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx</code></pre>\n<h4 id=\"CanalAdmin配置\"><a href=\"#CanalAdmin配置\" class=\"headerlink\" title=\"CanalAdmin配置\"></a>CanalAdmin配置</h4><ul>\n<li><p>1.集群配置</p>\n<pre><code class=\"yaml\">#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441</code></pre>\n</li>\n<li><p>2.Server管理</p>\n<pre><code class=\"textmate\">ServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110</code></pre>\n</li>\n<li><p>3.Instance管理</p>\n<pre><code class=\"textmate\">注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置</code></pre>\n</li>\n</ul>\n<h4 id=\"一个Canal服务读取多个MySQL实例-docker中操作\"><a href=\"#一个Canal服务读取多个MySQL实例-docker中操作\" class=\"headerlink\" title=\"一个Canal服务读取多个MySQL实例(docker中操作)\"></a>一个Canal服务读取多个MySQL实例(docker中操作)</h4><pre><code class=\"textmate\">1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181</code></pre>\n<h3 id=\"参考配置-基础版，其他配置参考官网\"><a href=\"#参考配置-基础版，其他配置参考官网\" class=\"headerlink\" title=\"参考配置(基础版，其他配置参考官网)\"></a>参考配置(基础版，其他配置参考官网)</h3><ul>\n<li><p>canal.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181</code></pre>\n</li>\n<li><p>instance.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false</code></pre>\n</li>\n</ul>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ul>\n<li><p>服务都启动成功，客户端拉不到变更日志</p>\n<pre><code class=\"textmate\">注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(&quot;sap_system\\\\..*,user_center\\\\..*&quot;)</code></pre>\n</li>\n<li><p>一个Canal-Service,多个client，运行时报错</p>\n<pre><code class=\"textmate\">改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h3><ul>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Home\">官网</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/QuickStart\">快速开始</a></li>\n<li><a href=\"https://github.com/alibaba/canal/releases\">Release下载</a></li>\n<li><a href=\"https://hub.docker.com/r/canal/canal-server/tags/\">Docker镜像地址</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/Canal-Admin-QuickStart\">Canal Admin QuickStart</a></li>\n<li><a href=\"https://github.com/alibaba/canal/wiki/ClientExample\">Canal Client Example</a></li>\n</ul>\n<h3 id=\"直接部署\"><a href=\"#直接部署\" class=\"headerlink\" title=\"直接部署\"></a>直接部署</h3><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><pre><code class=\"textmate\">1.下载安装包(点击上面Release)\n    这里用1.1.4版本,下载 canal.deployer-1.1.4.tar.gz(主要程序) 和 canal.admin-1.1.4.tar.gz(管理程序)\n\n2.解压&amp;配置\n    mkdir canal-deployer\n    mkdir canal-admin\n    tar -zxvf canal.deployer-1.1.4.tar.gz -C canal-deployer\n    tar -zxvg canal.admin-1.1.4.tar.gz -C canal-admin\n    修改 canal-deployer/conf 中 canal.properties(参考 快速开始，或参考底部配置)\n\n3.修改Instance配置\n    cd cd canal-deployer/conf/example/instance.properties\n    参考官网或底部instance.peroperties配置\n\n4.多Instance - 可选\n    cd canal-deployer/conf\n    cp -R example example2\n    修改example2中配置\n\n5.配置canal-admin\n    初始化数据脚本，脚本所在位置 canal-admin/conf/canal_manager.sql\n    修改配置，配置所在位置 canal-admin/conf/application.yml\n    修改其中的数据库配置、端口号、用户名密码等-可选\n\n6.启动\n    6-1.canal-admin启动( 访问链接 localhost:80 )\n        sh ./canal-admin/bin/startup.sh\n    6-2.canal-server启动\n        sh ./canal-deployer/bin/startup.sh\n    6-3.日志所在文件夹\n        cd canal-deployer/logs</code></pre>\n<h3 id=\"Docker搭建步骤\"><a href=\"#Docker搭建步骤\" class=\"headerlink\" title=\"Docker搭建步骤\"></a>Docker搭建步骤</h3><blockquote>\n<p>docker方式部署,注意配置时mysql的IP地址</p>\n</blockquote>\n<h4 id=\"准备-1\"><a href=\"#准备-1\" class=\"headerlink\" title=\"准备\"></a>准备</h4><pre><code class=\"textmate\">1.mysql\n  需要确认mysql已开启binlog设置\n2.拉取canal-server镜像\n  docker pull canal/canal-server:v1.1.4\n3.下载docker启动脚本\n   wget https://github.com/alibaba/canal/blob/master/docker/run.sh\n4.修改启动脚本中数据库配置\n5.下载canal-admin包,修改配置(或者复制run.sh并修改启动命令，启动canal-admin)-可选\n   wget https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.admin-1.1.4.tar.gz\n   mkdir canal-admin\n   tar -zxvf canal.admin-1.1.4.tar.gz -C canal-admin\n   修改conf/application.yml中数据库配置\n   初始化mysql脚本，conf/canal_manager.sql\n6.canal-client\n   参考 Canal Client Example</code></pre>\n<h4 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h4><pre><code class=\"textmate\">1.canal-server\n   运行 sh run.sh 会出现提示，复制提示后运行\n2.canal-admin\n   sh bin/startup.sh\n3.启动程序(canal-client)\n    成功后会打印出empty count : xx</code></pre>\n<h4 id=\"CanalAdmin配置\"><a href=\"#CanalAdmin配置\" class=\"headerlink\" title=\"CanalAdmin配置\"></a>CanalAdmin配置</h4><ul>\n<li><p>1.集群配置</p>\n<pre><code class=\"yaml\">#集群名-local\n#zk地址-127.0.0.1:2181 (可以不搭建zk)\n#以下为配置项\n# register ip\ncanal.register.ip =\n# canal admin config\ncanal.admin.manager = 127.0.0.1:8089\ncanal.admin.port = 11110\ncanal.admin.user = admin\ncanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441</code></pre>\n</li>\n<li><p>2.Server管理</p>\n<pre><code class=\"textmate\">ServerIP-127.0.0.1 (同一集群下server ip不能重复)\nadmin端口号-11110</code></pre>\n</li>\n<li><p>3.Instance管理</p>\n<pre><code class=\"textmate\">注意：Instance名称要与cancal-server容器中文件夹一致，默认有example\nInstance配置项参考官网或底部配置</code></pre>\n</li>\n</ul>\n<h4 id=\"一个Canal服务读取多个MySQL实例-docker中操作\"><a href=\"#一个Canal服务读取多个MySQL实例-docker中操作\" class=\"headerlink\" title=\"一个Canal服务读取多个MySQL实例(docker中操作)\"></a>一个Canal服务读取多个MySQL实例(docker中操作)</h4><pre><code class=\"textmate\">1.进入canal容器内部关闭服务(不关闭复制会导致写入db2失败)\n    docker exec -it canal-server bash\n    ./stop.sh\n2.复制一份Instatnce配置(注意确认example2中文件权限与example中是否一样)\n    cd canal-server/conf\n    cp -R example example2\n3.Canal Admin中添加新配置\n    Instance名称-example2\n4.集成zookeeper\n    修改canal-server/conf/下配置canal.properties\n    canal.register.ip = zk服务器IP\n    canal.zkServers = zk服务器IP:2181</code></pre>\n<h3 id=\"参考配置-基础版，其他配置参考官网\"><a href=\"#参考配置-基础版，其他配置参考官网\" class=\"headerlink\" title=\"参考配置(基础版，其他配置参考官网)\"></a>参考配置(基础版，其他配置参考官网)</h3><ul>\n<li><p>canal.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置\n# canal地址\ncanal.register.ip = zk所在地址\n# zk配置，如果有用到则配置，没用到则保留默认设置\ncanal.admin.register.auto = true\ncanal.admin.register.cluster = 192.168.154.231:2181\ncanal.zkServers = 192.168.154.231:2181</code></pre>\n</li>\n<li><p>instance.properties</p>\n<pre><code class=\"yaml\"># 用以下配置项是需要修改的，其他默认配置项保留原来设置(example2配置同下)\n# 数据库配置\ncanal.instance.master.address= 数据库IP:端口号\ncanal.instance.dbUsername = 用户名 \ncanal.instance.dbPassword = 密码\ncanal.instance.defaultDatabaseName = 要监控的库名，不设置则监听当前实例下所有库\ncanal.instance.connectionCharset = UTF-8\ncanal.instance.tsdb.enable=false</code></pre>\n</li>\n</ul>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ul>\n<li><p>服务都启动成功，客户端拉不到变更日志</p>\n<pre><code class=\"textmate\">注意客户端中 canalConnector.subscribe() 中设置项，设置了值则服务中配置的过滤条件不生效\n参考配置 canalConnector.subscribe(&quot;sap_system\\\\..*,user_center\\\\..*&quot;)</code></pre>\n</li>\n<li><p>一个Canal-Service,多个client，运行时报错</p>\n<pre><code class=\"textmate\">改为一个canal一个client，原因是多个client同时提交ack时，可能会存在重复提交的问题</code></pre>\n</li>\n</ul>\n"},{"title":"MySQL相关","date":"2020-10-02T07:51:46.000Z","_content":"\n### 存储引擎区别\n\n- 查看数据库支持的存储引擎\n```sql\nshow engines;\n```\n\n类型 | 磁盘文件 | 特性 | 适用场景\n---|--- | --- | --- |\nFEDERATED||用来访问远程表存储引擎|访问远程表\nMRG_MYISAM||把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表|可以用分区表替换merge表|\nMyISAM|.MDY数据)<br/> .MYI(索引)|主要的非实物处理存储引擎|\nBLACKHOLE||丢弃写操作，读操作返回空内容|\nCSV|.CSV(数据)<br/>.CSM(元数据)|存储数据时，会以逗号作为数据项之间的分割符号|不支持索引，数据存在为普通文本文件\nMEMORY||置于内存的表|\nARCHIVE||用于数据存档(行插入后不能再修改)|数据归档，大批量存储后不修改\nInnoDB|.ibd(数据&索引)|具备外键支持功能的事务处理引擎|\nPERFORMANCE_SCHEMA||用于监视MySQL服务器|\nNDB||集群存储引擎||\n|TokuDB||存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB|\n\n\n### 建表语句\n```sql\n1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST('2019-8-01' as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;\n```\n\n### Cast类型强制转换\n```sql\n语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n\n```\n\n### 新建分区表\n- 示例\n```sql\ncreate table user_bak (\n id int(11) UNSIGNED AUTO_INCREMENT ,\n `name` varchar(200) DEFAULT null COMMENT '名称',\n rand_num int(11) DEFAULT NULL COMMENT '随机数',\n birthday datetime default null comment '生日',\n PRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n\tPARTITION p0 VALUES less THAN (20),\n\tPARTITION p1 VALUES less THAN (40),\n\tPARTITION p2 VALUES less THAN (60),\n\tPARTITION p3 VALUES less THAN (80),\n\tPARTITION p4 VALUES less THAN MAXVALUE\n);\n```\n\n- 注意点\n\n```textmate\n1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建\n```\n\n- 常见异常\n\n```textmate\n1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中\n```\n\n### 子查询\n```sql\n-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n>= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY & SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = 'eee')\n```\n\n### FullText全文搜索\n- 全文搜索类型\n\n```textmate\n1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索\n```\n- 创建索引需要满足的条件\n\n```textmate\n1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)\n```\n\n- 语法\n\n```sql\n-- 自然语言\nselect *,match(`name`) against('good boy') \nas 'percentage' from `user` where match(`name`) against('good boy');\n\n-- 布尔模式\nselect *,match(`name`) against('good boy' in boolean MODE) as 'percentage' from `user` where match(`name`) against('good boy' in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against('\"good boy\"' in boolean MODE) as 'percentage' from `user` where match(`name`) against('\"good boy\"' in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against('good boy' with query expansion) as 'percentage' from `user` where match(`name`) against('good boy'  with query expansion);\n```\n\n- 修改查询字符长度\n\n```textmate\n1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;\n```\n\n## 字符集\n### 有字符集有关的系统设置\n```yaml\ncharacter_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集\n```\n\n### 空间值\n```textmate\nOpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)\n```\n\n### 模糊匹配查询\n```textmate\n1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n\n```\n\n### 新建用户后授权\n```sql\n-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY '密码';\ngrant all privileges on jwgateway.* to '用户名'@'%' identified by '密码';\nselect * from mysql.user;\n```","source":"_posts/backend/database/mysql-other.md","raw":"---\ntitle: MySQL相关\ndate: 2020-10-02 15:51:46\ntags: \n- mysql\ncategories: \n- 数据库\n---\n\n### 存储引擎区别\n\n- 查看数据库支持的存储引擎\n```sql\nshow engines;\n```\n\n类型 | 磁盘文件 | 特性 | 适用场景\n---|--- | --- | --- |\nFEDERATED||用来访问远程表存储引擎|访问远程表\nMRG_MYISAM||把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表|可以用分区表替换merge表|\nMyISAM|.MDY数据)<br/> .MYI(索引)|主要的非实物处理存储引擎|\nBLACKHOLE||丢弃写操作，读操作返回空内容|\nCSV|.CSV(数据)<br/>.CSM(元数据)|存储数据时，会以逗号作为数据项之间的分割符号|不支持索引，数据存在为普通文本文件\nMEMORY||置于内存的表|\nARCHIVE||用于数据存档(行插入后不能再修改)|数据归档，大批量存储后不修改\nInnoDB|.ibd(数据&索引)|具备外键支持功能的事务处理引擎|\nPERFORMANCE_SCHEMA||用于监视MySQL服务器|\nNDB||集群存储引擎||\n|TokuDB||存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB|\n\n\n### 建表语句\n```sql\n1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST('2019-8-01' as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;\n```\n\n### Cast类型强制转换\n```sql\n语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n\n```\n\n### 新建分区表\n- 示例\n```sql\ncreate table user_bak (\n id int(11) UNSIGNED AUTO_INCREMENT ,\n `name` varchar(200) DEFAULT null COMMENT '名称',\n rand_num int(11) DEFAULT NULL COMMENT '随机数',\n birthday datetime default null comment '生日',\n PRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n\tPARTITION p0 VALUES less THAN (20),\n\tPARTITION p1 VALUES less THAN (40),\n\tPARTITION p2 VALUES less THAN (60),\n\tPARTITION p3 VALUES less THAN (80),\n\tPARTITION p4 VALUES less THAN MAXVALUE\n);\n```\n\n- 注意点\n\n```textmate\n1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建\n```\n\n- 常见异常\n\n```textmate\n1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中\n```\n\n### 子查询\n```sql\n-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n>= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY & SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = 'eee')\n```\n\n### FullText全文搜索\n- 全文搜索类型\n\n```textmate\n1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索\n```\n- 创建索引需要满足的条件\n\n```textmate\n1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)\n```\n\n- 语法\n\n```sql\n-- 自然语言\nselect *,match(`name`) against('good boy') \nas 'percentage' from `user` where match(`name`) against('good boy');\n\n-- 布尔模式\nselect *,match(`name`) against('good boy' in boolean MODE) as 'percentage' from `user` where match(`name`) against('good boy' in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against('\"good boy\"' in boolean MODE) as 'percentage' from `user` where match(`name`) against('\"good boy\"' in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against('good boy' with query expansion) as 'percentage' from `user` where match(`name`) against('good boy'  with query expansion);\n```\n\n- 修改查询字符长度\n\n```textmate\n1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;\n```\n\n## 字符集\n### 有字符集有关的系统设置\n```yaml\ncharacter_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集\n```\n\n### 空间值\n```textmate\nOpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)\n```\n\n### 模糊匹配查询\n```textmate\n1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n\n```\n\n### 新建用户后授权\n```sql\n-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY '密码';\ngrant all privileges on jwgateway.* to '用户名'@'%' identified by '密码';\nselect * from mysql.user;\n```","slug":"backend/database/mysql-other","published":1,"updated":"2020-12-26T08:50:40.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl3b000mj49kereu6ltx","content":"<h3 id=\"存储引擎区别\"><a href=\"#存储引擎区别\" class=\"headerlink\" title=\"存储引擎区别\"></a>存储引擎区别</h3><ul>\n<li>查看数据库支持的存储引擎<pre><code class=\"sql\">show engines;</code></pre>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>磁盘文件</th>\n<th>特性</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FEDERATED</td>\n<td></td>\n<td>用来访问远程表存储引擎</td>\n<td>访问远程表</td>\n</tr>\n<tr>\n<td>MRG_MYISAM</td>\n<td></td>\n<td>把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表</td>\n<td>可以用分区表替换merge表</td>\n</tr>\n<tr>\n<td>MyISAM</td>\n<td>.MDY数据)<br/> .MYI(索引)</td>\n<td>主要的非实物处理存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>BLACKHOLE</td>\n<td></td>\n<td>丢弃写操作，读操作返回空内容</td>\n<td></td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>.CSV(数据)<br/>.CSM(元数据)</td>\n<td>存储数据时，会以逗号作为数据项之间的分割符号</td>\n<td>不支持索引，数据存在为普通文本文件</td>\n</tr>\n<tr>\n<td>MEMORY</td>\n<td></td>\n<td>置于内存的表</td>\n<td></td>\n</tr>\n<tr>\n<td>ARCHIVE</td>\n<td></td>\n<td>用于数据存档(行插入后不能再修改)</td>\n<td>数据归档，大批量存储后不修改</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>.ibd(数据&amp;索引)</td>\n<td>具备外键支持功能的事务处理引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>PERFORMANCE_SCHEMA</td>\n<td></td>\n<td>用于监视MySQL服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>NDB</td>\n<td></td>\n<td>集群存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>TokuDB</td>\n<td></td>\n<td>存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB</td>\n</tr>\n</tbody></table>\n<h3 id=\"建表语句\"><a href=\"#建表语句\" class=\"headerlink\" title=\"建表语句\"></a>建表语句</h3><pre><code class=\"sql\">1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST(&#39;2019-8-01&#39; as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;</code></pre>\n<h3 id=\"Cast类型强制转换\"><a href=\"#Cast类型强制转换\" class=\"headerlink\" title=\"Cast类型强制转换\"></a>Cast类型强制转换</h3><pre><code class=\"sql\">语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n</code></pre>\n<h3 id=\"新建分区表\"><a href=\"#新建分区表\" class=\"headerlink\" title=\"新建分区表\"></a>新建分区表</h3><ul>\n<li><p>示例</p>\n<pre><code class=\"sql\">create table user_bak (\nid int(11) UNSIGNED AUTO_INCREMENT ,\n`name` varchar(200) DEFAULT null COMMENT &#39;名称&#39;,\nrand_num int(11) DEFAULT NULL COMMENT &#39;随机数&#39;,\nbirthday datetime default null comment &#39;生日&#39;,\nPRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n  PARTITION p0 VALUES less THAN (20),\n  PARTITION p1 VALUES less THAN (40),\n  PARTITION p2 VALUES less THAN (60),\n  PARTITION p3 VALUES less THAN (80),\n  PARTITION p4 VALUES less THAN MAXVALUE\n);</code></pre>\n</li>\n<li><p>注意点</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建</code></pre>\n<ul>\n<li>常见异常</li>\n</ul>\n<pre><code class=\"textmate\">1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中</code></pre>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><pre><code class=\"sql\">-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n&gt;= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY &amp; SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = &#39;eee&#39;)</code></pre>\n<h3 id=\"FullText全文搜索\"><a href=\"#FullText全文搜索\" class=\"headerlink\" title=\"FullText全文搜索\"></a>FullText全文搜索</h3><ul>\n<li>全文搜索类型</li>\n</ul>\n<pre><code class=\"textmate\">1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索</code></pre>\n<ul>\n<li>创建索引需要满足的条件</li>\n</ul>\n<pre><code class=\"textmate\">1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)</code></pre>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"sql\">-- 自然语言\nselect *,match(`name`) against(&#39;good boy&#39;) \nas &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;);\n\n-- 布尔模式\nselect *,match(`name`) against(&#39;good boy&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39; in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against(&#39;good boy&#39; with query expansion) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;  with query expansion);</code></pre>\n<ul>\n<li>修改查询字符长度</li>\n</ul>\n<pre><code class=\"textmate\">1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;</code></pre>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><h3 id=\"有字符集有关的系统设置\"><a href=\"#有字符集有关的系统设置\" class=\"headerlink\" title=\"有字符集有关的系统设置\"></a>有字符集有关的系统设置</h3><pre><code class=\"yaml\">character_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集</code></pre>\n<h3 id=\"空间值\"><a href=\"#空间值\" class=\"headerlink\" title=\"空间值\"></a>空间值</h3><pre><code class=\"textmate\">OpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)</code></pre>\n<h3 id=\"模糊匹配查询\"><a href=\"#模糊匹配查询\" class=\"headerlink\" title=\"模糊匹配查询\"></a>模糊匹配查询</h3><pre><code class=\"textmate\">1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n</code></pre>\n<h3 id=\"新建用户后授权\"><a href=\"#新建用户后授权\" class=\"headerlink\" title=\"新建用户后授权\"></a>新建用户后授权</h3><pre><code class=\"sql\">-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY &#39;密码&#39;;\ngrant all privileges on jwgateway.* to &#39;用户名&#39;@&#39;%&#39; identified by &#39;密码&#39;;\nselect * from mysql.user;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"存储引擎区别\"><a href=\"#存储引擎区别\" class=\"headerlink\" title=\"存储引擎区别\"></a>存储引擎区别</h3><ul>\n<li>查看数据库支持的存储引擎<pre><code class=\"sql\">show engines;</code></pre>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>磁盘文件</th>\n<th>特性</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FEDERATED</td>\n<td></td>\n<td>用来访问远程表存储引擎</td>\n<td>访问远程表</td>\n</tr>\n<tr>\n<td>MRG_MYISAM</td>\n<td></td>\n<td>把多个MyISAM表合并为一个逻辑单元；查询一个表时，相当与查询其所有成员表</td>\n<td>可以用分区表替换merge表</td>\n</tr>\n<tr>\n<td>MyISAM</td>\n<td>.MDY数据)<br/> .MYI(索引)</td>\n<td>主要的非实物处理存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>BLACKHOLE</td>\n<td></td>\n<td>丢弃写操作，读操作返回空内容</td>\n<td></td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>.CSV(数据)<br/>.CSM(元数据)</td>\n<td>存储数据时，会以逗号作为数据项之间的分割符号</td>\n<td>不支持索引，数据存在为普通文本文件</td>\n</tr>\n<tr>\n<td>MEMORY</td>\n<td></td>\n<td>置于内存的表</td>\n<td></td>\n</tr>\n<tr>\n<td>ARCHIVE</td>\n<td></td>\n<td>用于数据存档(行插入后不能再修改)</td>\n<td>数据归档，大批量存储后不修改</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>.ibd(数据&amp;索引)</td>\n<td>具备外键支持功能的事务处理引擎</td>\n<td></td>\n</tr>\n<tr>\n<td>PERFORMANCE_SCHEMA</td>\n<td></td>\n<td>用于监视MySQL服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>NDB</td>\n<td></td>\n<td>集群存储引擎</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>TokuDB</td>\n<td></td>\n<td>存储速度快，查询速度略慢与InnoDB,支持事务等，未来替代InnoDB</td>\n</tr>\n</tbody></table>\n<h3 id=\"建表语句\"><a href=\"#建表语句\" class=\"headerlink\" title=\"建表语句\"></a>建表语句</h3><pre><code class=\"sql\">1.表结构完全复制\ncreate table user_bak LIKE user;\n\n2.使用某些字段建表\ncreate table user_bak select now() as time ;\n\n3.建表时字段值强制转换\ncreate table user_bak select CAST(&#39;2019-8-01&#39; as UNSIGNED) as time;\n\n4.临时表\n解释：只对当前会话有效，有同名表则原表隐藏不可见，会话结束自动清除\ncreate temporary table user_bak  like user;\ndrop temporary table user_bak;</code></pre>\n<h3 id=\"Cast类型强制转换\"><a href=\"#Cast类型强制转换\" class=\"headerlink\" title=\"Cast类型强制转换\"></a>Cast类型强制转换</h3><pre><code class=\"sql\">语法: \n    Cast(字段名 as 转换的类型 )\n\n支持的类型:\n    CHAR[(N)] 字符型 \n    DATE 日期型\n    DATETIME 日期和时间型\n    DECIMAL float型\n    SIGNED int\n    TIME 时间型\n\n场景:\n    1.解决utf8字符查询时传入表情符，导致报错；\n</code></pre>\n<h3 id=\"新建分区表\"><a href=\"#新建分区表\" class=\"headerlink\" title=\"新建分区表\"></a>新建分区表</h3><ul>\n<li><p>示例</p>\n<pre><code class=\"sql\">create table user_bak (\nid int(11) UNSIGNED AUTO_INCREMENT ,\n`name` varchar(200) DEFAULT null COMMENT &#39;名称&#39;,\nrand_num int(11) DEFAULT NULL COMMENT &#39;随机数&#39;,\nbirthday datetime default null comment &#39;生日&#39;,\nPRIMARY KEY (`id`,rand_num)\n) ENGINE = INNODB partition by RANGE (rand_num)\n(\n  PARTITION p0 VALUES less THAN (20),\n  PARTITION p1 VALUES less THAN (40),\n  PARTITION p2 VALUES less THAN (60),\n  PARTITION p3 VALUES less THAN (80),\n  PARTITION p4 VALUES less THAN MAXVALUE\n);</code></pre>\n</li>\n<li><p>注意点</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.PRIMARY必须包含分区的字段\n2.不能单独创建分区，建表时就要创建</code></pre>\n<ul>\n<li>常见异常</li>\n</ul>\n<pre><code class=\"textmate\">1.ERROR 1064  不能单独创建分区\n解决：建表时就要把分区创建好\n\n2.ERROR 1503 主键必须包含分区函数中所有列\n解决：创建分区的字段必须放在主键索引中</code></pre>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><pre><code class=\"sql\">-- 1.ALL - 查询返回单个结果,类似in操作\nselect * from user_bak where (id) \n&gt;= ALL(select id from user_bak where id = 10)\n\n-- 2.ANY &amp; SUM -效果一样,类似or操作\nselect * from user_bak where (name,id) \n= SOME(select name,id from user_bak where id = 1 or name = &#39;eee&#39;)</code></pre>\n<h3 id=\"FullText全文搜索\"><a href=\"#FullText全文搜索\" class=\"headerlink\" title=\"FullText全文搜索\"></a>FullText全文搜索</h3><ul>\n<li>全文搜索类型</li>\n</ul>\n<pre><code class=\"textmate\">1.自然语言搜索-搜索包含匹配词的信息\n2.布尔模式搜索-\n3.查询扩展搜索</code></pre>\n<ul>\n<li>创建索引需要满足的条件</li>\n</ul>\n<pre><code class=\"textmate\">1.表类型为MyISAM,version5.6以后引入了对InnoDB支持\n2.字段类型只能是char/varchar/text类型\n3.全文搜索会自动忽略掉常用词(在记录中出现几率为50%以上)-验证可以查出来\n4.停用词会被过滤掉(the/after/other等)\n5.少于4个字符会被忽略，查不出来(默认4-84个字符范围，可更改)</code></pre>\n<ul>\n<li>语法</li>\n</ul>\n<pre><code class=\"sql\">-- 自然语言\nselect *,match(`name`) against(&#39;good boy&#39;) \nas &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;);\n\n-- 布尔模式\nselect *,match(`name`) against(&#39;good boy&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39; in boolean MODE);\n\n-- 内容顺序完全匹配\nselect *,match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;&quot;good boy&quot;&#39; in boolean MODE);\n\n-- 扩展查询\nselect *,match(`name`) against(&#39;good boy&#39; with query expansion) as &#39;percentage&#39; from `user` where match(`name`) against(&#39;good boy&#39;  with query expansion);</code></pre>\n<ul>\n<li>修改查询字符长度</li>\n</ul>\n<pre><code class=\"textmate\">1.my.cnf文件中ft_min_word_len\n2.重建FullText索引或者快速修复\nrepair table table_name quick;</code></pre>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><h3 id=\"有字符集有关的系统设置\"><a href=\"#有字符集有关的系统设置\" class=\"headerlink\" title=\"有字符集有关的系统设置\"></a>有字符集有关的系统设置</h3><pre><code class=\"yaml\">character_set_system 用于存储的字符集\ncharacter_set_server 服务器默认字符集\ncollation_server  系统排序规则\ncharacter_set_database 数据库字符集\ncollation_database  数据库排序规则\ncharacter_set_client 客户端向服务器发送SQL时使用的字符集\ncharacter_set_result 表示服务器返回结果时使用的字符集\ncharacter_set_connection 连接时使用的字符串\ncharacter_set_filesystem 文件系统字符集</code></pre>\n<h3 id=\"空间值\"><a href=\"#空间值\" class=\"headerlink\" title=\"空间值\"></a>空间值</h3><pre><code class=\"textmate\">OpenGIS规范\npoint 类型值,只支持InnoDB/MyISAM/NDB/ARCHIVE引擎\npoint(xxxx,xxxx)</code></pre>\n<h3 id=\"模糊匹配查询\"><a href=\"#模糊匹配查询\" class=\"headerlink\" title=\"模糊匹配查询\"></a>模糊匹配查询</h3><pre><code class=\"textmate\">1.like\n    % 匹配任意数量的字符序列\n    _ 只能匹配单个字符\n    \\%  \\_  转义\n2.REGEXP-正则查询\n</code></pre>\n<h3 id=\"新建用户后授权\"><a href=\"#新建用户后授权\" class=\"headerlink\" title=\"新建用户后授权\"></a>新建用户后授权</h3><pre><code class=\"sql\">-- %表示所有IP可连接\nCREATE USER `用户名`@`%` IDENTIFIED BY &#39;密码&#39;;\ngrant all privileges on jwgateway.* to &#39;用户名&#39;@&#39;%&#39; identified by &#39;密码&#39;;\nselect * from mysql.user;</code></pre>\n"},{"title":"Zookeeper搭建","date":"2020-10-29T07:40:46.000Z","_content":"\n\n### 相关链接\n> [官网](https://zookeeper.apache.org/releases.html)\n\n### 注意事项\n```textmate\n1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用\n```\n\n### 单机部署步骤\n```textmate\n1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001>myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status\n```\n\n### zookeeper数据查看工具\n> [下载地址](https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip)\n- 使用\n\n```textmate\n1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &\n3.左上角连接按钮，输入zk地址并连接\n```\n\n### 常见问题\n- 启动报ClassNotFound\n```textmate\n重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的\n```\n\n- 启动失败\n\n```textmate\n1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启\n```\n","source":"_posts/backend/service/zookeeper.md","raw":"---\ntitle: Zookeeper搭建\ndate: 2020-10-29 15:40:46\ntags: \n- zookeeper\ncategories: \n- 服务搭建\n---\n\n\n### 相关链接\n> [官网](https://zookeeper.apache.org/releases.html)\n\n### 注意事项\n```textmate\n1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用\n```\n\n### 单机部署步骤\n```textmate\n1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001>myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status\n```\n\n### zookeeper数据查看工具\n> [下载地址](https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip)\n- 使用\n\n```textmate\n1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &\n3.左上角连接按钮，输入zk地址并连接\n```\n\n### 常见问题\n- 启动报ClassNotFound\n```textmate\n重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的\n```\n\n- 启动失败\n\n```textmate\n1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启\n```\n","slug":"backend/service/zookeeper","published":1,"updated":"2020-12-26T08:30:58.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl3d000oj49kffja8zjz","content":"<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p><a href=\"https://zookeeper.apache.org/releases.html\">官网</a></p>\n</blockquote>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><pre><code class=\"textmate\">1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用</code></pre>\n<h3 id=\"单机部署步骤\"><a href=\"#单机部署步骤\" class=\"headerlink\" title=\"单机部署步骤\"></a>单机部署步骤</h3><pre><code class=\"textmate\">1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001&gt;myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status</code></pre>\n<h3 id=\"zookeeper数据查看工具\"><a href=\"#zookeeper数据查看工具\" class=\"headerlink\" title=\"zookeeper数据查看工具\"></a>zookeeper数据查看工具</h3><blockquote>\n<p><a href=\"https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip\">下载地址</a></p>\n</blockquote>\n<ul>\n<li>使用</li>\n</ul>\n<pre><code class=\"textmate\">1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &amp;\n3.左上角连接按钮，输入zk地址并连接</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li><p>启动报ClassNotFound</p>\n<pre><code class=\"textmate\">重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的</code></pre>\n</li>\n<li><p>启动失败</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p><a href=\"https://zookeeper.apache.org/releases.html\">官网</a></p>\n</blockquote>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><pre><code class=\"textmate\">1.下载 xxx-bin.tar.gz包(这种是编译好的)，否则启动时会提示找不到Class\n2.启动时注意端口号是否已经被占用</code></pre>\n<h3 id=\"单机部署步骤\"><a href=\"#单机部署步骤\" class=\"headerlink\" title=\"单机部署步骤\"></a>单机部署步骤</h3><pre><code class=\"textmate\">1.解压文件\n    tar -zxvf xxx-bin.tar.gz zookeeper\n\n2.修改配置\n    cd zookeeper/conf\n    cp zoo_sample.cfg zoo.cfg\n    vim zoo.cfg\n    修改以下配置项\n        dataDir= xxx/dataDir\n        dataLogDir= xxx/logs/zookeeper\n3.新增配置\n    cd xxx/dataDir\n    echo 1001&gt;myid\n4.启动\n    cd zookeeper/bin\n    ./zkServer.sh start / restart / stop / status</code></pre>\n<h3 id=\"zookeeper数据查看工具\"><a href=\"#zookeeper数据查看工具\" class=\"headerlink\" title=\"zookeeper数据查看工具\"></a>zookeeper数据查看工具</h3><blockquote>\n<p><a href=\"https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip\">下载地址</a></p>\n</blockquote>\n<ul>\n<li>使用</li>\n</ul>\n<pre><code class=\"textmate\">1.解压后进入build文件夹\n2.运行jar\n    nohup java -jar zookeeper-dev-ZooInspector.jar &amp;\n3.左上角连接按钮，输入zk地址并连接</code></pre>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li><p>启动报ClassNotFound</p>\n<pre><code class=\"textmate\">重新下载zookeeper包，注意是xxxx-bin.tar.gz这种的</code></pre>\n</li>\n<li><p>启动失败</p>\n</li>\n</ul>\n<pre><code class=\"textmate\">1.检查配置的文件夹路径和权限是否正常\n2.检查zookeeper是否已经被启动\n    ps -ef | grep zookeeper\n    kill进程\n3.删除 dataDir 和 dataLogDir 路径下 version-2 文件夹后重启</code></pre>\n"},{"title":"UML类图","description":"UML类图","date":"2020-12-25T10:57:00.000Z","_content":"### 常用元素\n```textmate\n1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法\n```\n\n### 常见的几种关系\n```textmate\n1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。\n```\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n### 示例-标识了所有关系\n<img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n","source":"_posts/framework/design/uml.md","raw":"---\ntitle: UML类图\ndescription: UML类图\n#top: 1\ndate: 2020-12-25 18:57\ntags:\n- uml\n- 类图\ncategories:\n- 设计图\n---\n### 常用元素\n```textmate\n1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法\n```\n\n### 常见的几种关系\n```textmate\n1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。\n```\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n### 示例-标识了所有关系\n<img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n","slug":"framework/design/uml","published":1,"updated":"2020-12-26T08:21:25.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl3f000sj49k6pvz89e8","content":"<h3 id=\"常用元素\"><a href=\"#常用元素\" class=\"headerlink\" title=\"常用元素\"></a>常用元素</h3><pre><code class=\"textmate\">1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法</code></pre>\n<h3 id=\"常见的几种关系\"><a href=\"#常见的几种关系\" class=\"headerlink\" title=\"常见的几种关系\"></a>常见的几种关系</h3><pre><code class=\"textmate\">1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。</code></pre>\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n<h3 id=\"示例-标识了所有关系\"><a href=\"#示例-标识了所有关系\" class=\"headerlink\" title=\"示例-标识了所有关系\"></a>示例-标识了所有关系</h3><img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用元素\"><a href=\"#常用元素\" class=\"headerlink\" title=\"常用元素\"></a>常用元素</h3><pre><code class=\"textmate\">1.类\n  用三层矩形框表示，第一层类名及解释(斜体表示抽象类)、第二层字段和属性、第三层方法\n  前面的符号，‘+’表示public，‘-’表示private，‘#’表示protected。\n2.接口\n  用两层矩形框表示，第一层接口名及解释、第二层方法</code></pre>\n<h3 id=\"常见的几种关系\"><a href=\"#常见的几种关系\" class=\"headerlink\" title=\"常见的几种关系\"></a>常见的几种关系</h3><pre><code class=\"textmate\">1.泛化(Generalization)\n    表示继承。是is-a的关系。 用 空心三角箭头+实线 表示，箭头指向继承的类\n2.依赖(Dependency)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现. 空心三角箭头+虚线 箭头指向接口\n3.关联(Association)\n    描述类与类之间的连接，是has­-a的关系。它使一个类知道另一个类的属性和方法; 实心三角箭头+实线，两边关联则有两个箭头\n4.聚合(Aggregation)\n    是整体与部分的关系，且部分可以离开整体而单独存在。空心菱形+实线，菱形指向整体\n5.组合(Composition)\n    是整体与部分的关系，但部分不能离开整体而单独存在。实心菱形+实线，菱形指向整体\n6. 实现(Realization)\n    是一种类与接口的关系，表示类是接口所有特征和行为的实现。空心三角箭头+虚线，箭头指向接口\n\n基数: 线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用‘n’来表示。关联、聚合、组合是有基数的。</code></pre>\n<img src=\"https://im-fan.gitee.io/img/uml/uml-line.png\" width=\"500\" height=\"300\"/>\n\n<h3 id=\"示例-标识了所有关系\"><a href=\"#示例-标识了所有关系\" class=\"headerlink\" title=\"示例-标识了所有关系\"></a>示例-标识了所有关系</h3><img src=\"https://im-fan.gitee.io/img/uml/uml.png\"/>\n"},{"title":"EasyExcel使用遇到的问题","description":"excel","date":"2020-10-20T09:22:53.000Z","_content":"\n### 导出设置标题格式\n- TitleHandler\n```java\npublic class TitleHandler implements CellWriteHandler{\n\n    //操作列\n    private List<Integer> columnIndexs;\n    //颜色\n    private Short colorIndex;\n\n    public TitleHandler(List<Integer> columnIndexs, Short colorIndex) {\n        this.columnIndexs = columnIndexs;\n        this.colorIndex = colorIndex;\n    }\n\n    @Override\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n        if(isHead){\n            // 设置列宽\n            Sheet sheet = writeSheetHolder.getSheet();\n            sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n            writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n            Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n            // 设置标题字体样式\n            WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n            WriteFont headWriteFont = new WriteFont();\n            headWriteFont.setFontName(\"宋体\");\n            headWriteFont.setFontHeightInPoints((short)14);\n            headWriteFont.setBold(true);\n            if (CollectionUtils.isNotEmpty(columnIndexs) &&\n                    colorIndex != null &&\n                    columnIndexs.contains(cell.getColumnIndex())) {\n                // 设置字体颜色\n                headWriteFont.setColor(colorIndex);\n            }\n            headWriteCellStyle.setWriteFont(headWriteFont);\n            headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n            CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n            cell.setCellStyle(cellStyle);\n        }\n    }\n}\n```\n\n- ExcelUtils\n```java\npublic class ExcelUtils {\n    /** 导出Excel **/\n    public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                   List data, HttpServletResponse response,\n                                   CellWriteHandler... cellWriteHandlers) throws IOException {\n        response.setContentType(\"application/vnd.ms-excel\");\n        response.setCharacterEncoding(\"utf-8\");\n        fileName = URLEncoder.encode(fileName, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n\n        // 列标题的策略\n        WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n        // 单元格策略\n        WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n        // 初始化表格样式\n        HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n        ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n                .sheet(sheetName)\n                .registerWriteHandler(horizontalCellStyleStrategy);\n\n        if (null != cellWriteHandlers && cellWriteHandlers.length > 0) {\n            for (int i = 0; i < cellWriteHandlers.length; i++) {\n                excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n            }\n        }\n        // 开始导出\n        excelWriterSheetBuilder.doWrite(data);\n    }\n}\n```\n- 使用\n```java\n/** 导出excel模板**/\npublic void exportTemplate(List<Integer> ids,HttpServletResponse response){\n    try {\n        List<XXX> result = getByIds(ids);\n\n        // 指定标红色的列\n        List<Integer> columns = Arrays.asList(0,1,2,3);\n\n        TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n        ExcelUtils.exportExcel(\"文件名\",\"sheet名称\",\n                XXX.class,result,response,titleHandler);\n    } catch (IOException e) {\n        log.warn(\"导出失败,error={}\",e);\n    }\n}\n```\n\n### 设置中文文件名\n\n```java\n// 代码中添加\nresponse.setContentType(\"application/vnd.ms-excel;charset=UTF-8\");\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n```\n\n### 导出失败返回错误信息\n```java\n// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(\"application/json\");\nresponse.setCharacterEncoding(\"utf-8\");\ntry {\n    response.getWriter().println(result);\n} catch (IOException ioException) {\n    log.warn(\"业务异常  msg={}\",ioException);\n}\n```\n\n### 常见错误\n#### 导出成功但是后台日志报类型转换异常\n```textmate\n错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可\n```\n","source":"_posts/backend/java/utils/excel.md","raw":"---\ntitle: EasyExcel使用遇到的问题\ndescription: excel\ndate: 2020-10-20 17:22:53\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n### 导出设置标题格式\n- TitleHandler\n```java\npublic class TitleHandler implements CellWriteHandler{\n\n    //操作列\n    private List<Integer> columnIndexs;\n    //颜色\n    private Short colorIndex;\n\n    public TitleHandler(List<Integer> columnIndexs, Short colorIndex) {\n        this.columnIndexs = columnIndexs;\n        this.colorIndex = colorIndex;\n    }\n\n    @Override\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n\n    }\n\n    @Override\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\n        if(isHead){\n            // 设置列宽\n            Sheet sheet = writeSheetHolder.getSheet();\n            sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n            writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n            Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n            // 设置标题字体样式\n            WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n            WriteFont headWriteFont = new WriteFont();\n            headWriteFont.setFontName(\"宋体\");\n            headWriteFont.setFontHeightInPoints((short)14);\n            headWriteFont.setBold(true);\n            if (CollectionUtils.isNotEmpty(columnIndexs) &&\n                    colorIndex != null &&\n                    columnIndexs.contains(cell.getColumnIndex())) {\n                // 设置字体颜色\n                headWriteFont.setColor(colorIndex);\n            }\n            headWriteCellStyle.setWriteFont(headWriteFont);\n            headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n            CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n            cell.setCellStyle(cellStyle);\n        }\n    }\n}\n```\n\n- ExcelUtils\n```java\npublic class ExcelUtils {\n    /** 导出Excel **/\n    public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                   List data, HttpServletResponse response,\n                                   CellWriteHandler... cellWriteHandlers) throws IOException {\n        response.setContentType(\"application/vnd.ms-excel\");\n        response.setCharacterEncoding(\"utf-8\");\n        fileName = URLEncoder.encode(fileName, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n\n        // 列标题的策略\n        WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n        // 单元格策略\n        WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n        // 初始化表格样式\n        HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n        ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n                .sheet(sheetName)\n                .registerWriteHandler(horizontalCellStyleStrategy);\n\n        if (null != cellWriteHandlers && cellWriteHandlers.length > 0) {\n            for (int i = 0; i < cellWriteHandlers.length; i++) {\n                excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n            }\n        }\n        // 开始导出\n        excelWriterSheetBuilder.doWrite(data);\n    }\n}\n```\n- 使用\n```java\n/** 导出excel模板**/\npublic void exportTemplate(List<Integer> ids,HttpServletResponse response){\n    try {\n        List<XXX> result = getByIds(ids);\n\n        // 指定标红色的列\n        List<Integer> columns = Arrays.asList(0,1,2,3);\n\n        TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n        ExcelUtils.exportExcel(\"文件名\",\"sheet名称\",\n                XXX.class,result,response,titleHandler);\n    } catch (IOException e) {\n        log.warn(\"导出失败,error={}\",e);\n    }\n}\n```\n\n### 设置中文文件名\n\n```java\n// 代码中添加\nresponse.setContentType(\"application/vnd.ms-excel;charset=UTF-8\");\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n```\n\n### 导出失败返回错误信息\n```java\n// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(\"application/json\");\nresponse.setCharacterEncoding(\"utf-8\");\ntry {\n    response.getWriter().println(result);\n} catch (IOException ioException) {\n    log.warn(\"业务异常  msg={}\",ioException);\n}\n```\n\n### 常见错误\n#### 导出成功但是后台日志报类型转换异常\n```textmate\n错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可\n```\n","slug":"backend/java/utils/excel","published":1,"updated":"2020-12-26T08:35:35.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl3g000uj49kfrsmhwol","content":"<h3 id=\"导出设置标题格式\"><a href=\"#导出设置标题格式\" class=\"headerlink\" title=\"导出设置标题格式\"></a>导出设置标题格式</h3><ul>\n<li><p>TitleHandler</p>\n<pre><code class=\"java\">public class TitleHandler implements CellWriteHandler&#123;\n\n  //操作列\n  private List&lt;Integer&gt; columnIndexs;\n  //颜色\n  private Short colorIndex;\n\n  public TitleHandler(List&lt;Integer&gt; columnIndexs, Short colorIndex) &#123;\n      this.columnIndexs = columnIndexs;\n      this.colorIndex = colorIndex;\n  &#125;\n\n  @Override\n  public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n      if(isHead)&#123;\n          // 设置列宽\n          Sheet sheet = writeSheetHolder.getSheet();\n          sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n          writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n          Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n          // 设置标题字体样式\n          WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n          WriteFont headWriteFont = new WriteFont();\n          headWriteFont.setFontName(&quot;宋体&quot;);\n          headWriteFont.setFontHeightInPoints((short)14);\n          headWriteFont.setBold(true);\n          if (CollectionUtils.isNotEmpty(columnIndexs) &amp;&amp;\n                  colorIndex != null &amp;&amp;\n                  columnIndexs.contains(cell.getColumnIndex())) &#123;\n              // 设置字体颜色\n              headWriteFont.setColor(colorIndex);\n          &#125;\n          headWriteCellStyle.setWriteFont(headWriteFont);\n          headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n          CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n          cell.setCellStyle(cellStyle);\n      &#125;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>ExcelUtils</p>\n<pre><code class=\"java\">public class ExcelUtils &#123;\n  /** 导出Excel **/\n  public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                 List data, HttpServletResponse response,\n                                 CellWriteHandler... cellWriteHandlers) throws IOException &#123;\n      response.setContentType(&quot;application/vnd.ms-excel&quot;);\n      response.setCharacterEncoding(&quot;utf-8&quot;);\n      fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);\n      response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);\n\n      // 列标题的策略\n      WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n      // 单元格策略\n      WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n      // 初始化表格样式\n      HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n      ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n              .sheet(sheetName)\n              .registerWriteHandler(horizontalCellStyleStrategy);\n\n      if (null != cellWriteHandlers &amp;&amp; cellWriteHandlers.length &gt; 0) &#123;\n          for (int i = 0; i &lt; cellWriteHandlers.length; i++) &#123;\n              excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n          &#125;\n      &#125;\n      // 开始导出\n      excelWriterSheetBuilder.doWrite(data);\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>使用</p>\n<pre><code class=\"java\">/** 导出excel模板**/\npublic void exportTemplate(List&lt;Integer&gt; ids,HttpServletResponse response)&#123;\n  try &#123;\n      List&lt;XXX&gt; result = getByIds(ids);\n\n      // 指定标红色的列\n      List&lt;Integer&gt; columns = Arrays.asList(0,1,2,3);\n\n      TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n      ExcelUtils.exportExcel(&quot;文件名&quot;,&quot;sheet名称&quot;,\n              XXX.class,result,response,titleHandler);\n  &#125; catch (IOException e) &#123;\n      log.warn(&quot;导出失败,error=&#123;&#125;&quot;,e);\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"设置中文文件名\"><a href=\"#设置中文文件名\" class=\"headerlink\" title=\"设置中文文件名\"></a>设置中文文件名</h3><pre><code class=\"java\">// 代码中添加\nresponse.setContentType(&quot;application/vnd.ms-excel;charset=UTF-8&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\nresponse.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</code></pre>\n<h3 id=\"导出失败返回错误信息\"><a href=\"#导出失败返回错误信息\" class=\"headerlink\" title=\"导出失败返回错误信息\"></a>导出失败返回错误信息</h3><pre><code class=\"java\">// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(&quot;application/json&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\ntry &#123;\n    response.getWriter().println(result);\n&#125; catch (IOException ioException) &#123;\n    log.warn(&quot;业务异常  msg=&#123;&#125;&quot;,ioException);\n&#125;</code></pre>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><h4 id=\"导出成功但是后台日志报类型转换异常\"><a href=\"#导出成功但是后台日志报类型转换异常\" class=\"headerlink\" title=\"导出成功但是后台日志报类型转换异常\"></a>导出成功但是后台日志报类型转换异常</h4><pre><code class=\"textmate\">错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"导出设置标题格式\"><a href=\"#导出设置标题格式\" class=\"headerlink\" title=\"导出设置标题格式\"></a>导出设置标题格式</h3><ul>\n<li><p>TitleHandler</p>\n<pre><code class=\"java\">public class TitleHandler implements CellWriteHandler&#123;\n\n  //操作列\n  private List&lt;Integer&gt; columnIndexs;\n  //颜色\n  private Short colorIndex;\n\n  public TitleHandler(List&lt;Integer&gt; columnIndexs, Short colorIndex) &#123;\n      this.columnIndexs = columnIndexs;\n      this.colorIndex = colorIndex;\n  &#125;\n\n  @Override\n  public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDataConverted(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n\n  &#125;\n\n  @Override\n  public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) &#123;\n      if(isHead)&#123;\n          // 设置列宽\n          Sheet sheet = writeSheetHolder.getSheet();\n          sheet.setColumnWidth(cell.getColumnIndex(), 20 * 256);\n          writeSheetHolder.getSheet().getRow(0).setHeight((short)(3*256));\n          Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\n\n          // 设置标题字体样式\n          WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n          WriteFont headWriteFont = new WriteFont();\n          headWriteFont.setFontName(&quot;宋体&quot;);\n          headWriteFont.setFontHeightInPoints((short)14);\n          headWriteFont.setBold(true);\n          if (CollectionUtils.isNotEmpty(columnIndexs) &amp;&amp;\n                  colorIndex != null &amp;&amp;\n                  columnIndexs.contains(cell.getColumnIndex())) &#123;\n              // 设置字体颜色\n              headWriteFont.setColor(colorIndex);\n          &#125;\n          headWriteCellStyle.setWriteFont(headWriteFont);\n          headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());\n          CellStyle cellStyle = StyleUtil.buildHeadCellStyle(workbook, headWriteCellStyle);\n          cell.setCellStyle(cellStyle);\n      &#125;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>ExcelUtils</p>\n<pre><code class=\"java\">public class ExcelUtils &#123;\n  /** 导出Excel **/\n  public static void exportExcel(String fileName, String sheetName,Class clazz,\n                                 List data, HttpServletResponse response,\n                                 CellWriteHandler... cellWriteHandlers) throws IOException &#123;\n      response.setContentType(&quot;application/vnd.ms-excel&quot;);\n      response.setCharacterEncoding(&quot;utf-8&quot;);\n      fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);\n      response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);\n\n      // 列标题的策略\n      WriteCellStyle headWriteCellStyle = new WriteCellStyle();\n      // 单元格策略\n      WriteCellStyle contentWriteCellStyle = new WriteCellStyle();\n      // 初始化表格样式\n      HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);\n\n      ExcelWriterSheetBuilder excelWriterSheetBuilder = EasyExcel.write(response.getOutputStream(), clazz)\n              .sheet(sheetName)\n              .registerWriteHandler(horizontalCellStyleStrategy);\n\n      if (null != cellWriteHandlers &amp;&amp; cellWriteHandlers.length &gt; 0) &#123;\n          for (int i = 0; i &lt; cellWriteHandlers.length; i++) &#123;\n              excelWriterSheetBuilder.registerWriteHandler(cellWriteHandlers[i]);\n          &#125;\n      &#125;\n      // 开始导出\n      excelWriterSheetBuilder.doWrite(data);\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>使用</p>\n<pre><code class=\"java\">/** 导出excel模板**/\npublic void exportTemplate(List&lt;Integer&gt; ids,HttpServletResponse response)&#123;\n  try &#123;\n      List&lt;XXX&gt; result = getByIds(ids);\n\n      // 指定标红色的列\n      List&lt;Integer&gt; columns = Arrays.asList(0,1,2,3);\n\n      TitleHandler titleHandler = new TitleHandler(columns, IndexedColors.RED.index);\n      ExcelUtils.exportExcel(&quot;文件名&quot;,&quot;sheet名称&quot;,\n              XXX.class,result,response,titleHandler);\n  &#125; catch (IOException e) &#123;\n      log.warn(&quot;导出失败,error=&#123;&#125;&quot;,e);\n  &#125;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"设置中文文件名\"><a href=\"#设置中文文件名\" class=\"headerlink\" title=\"设置中文文件名\"></a>设置中文文件名</h3><pre><code class=\"java\">// 代码中添加\nresponse.setContentType(&quot;application/vnd.ms-excel;charset=UTF-8&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\nresponse.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</code></pre>\n<h3 id=\"导出失败返回错误信息\"><a href=\"#导出失败返回错误信息\" class=\"headerlink\" title=\"导出失败返回错误信息\"></a>导出失败返回错误信息</h3><pre><code class=\"java\">// 重写响应信息数据类型\nresponse.reset();\nresponse.setContentType(&quot;application/json&quot;);\nresponse.setCharacterEncoding(&quot;utf-8&quot;);\ntry &#123;\n    response.getWriter().println(result);\n&#125; catch (IOException ioException) &#123;\n    log.warn(&quot;业务异常  msg=&#123;&#125;&quot;,ioException);\n&#125;</code></pre>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><h4 id=\"导出成功但是后台日志报类型转换异常\"><a href=\"#导出成功但是后台日志报类型转换异常\" class=\"headerlink\" title=\"导出成功但是后台日志报类型转换异常\"></a>导出成功但是后台日志报类型转换异常</h4><pre><code class=\"textmate\">错误日志\n    No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n    org.springframework.http.converter.HttpMessageNotWritableException: No converter for [class com.hzrys.dashboard.common.result.R] with preset Content-Type &#39;application/vnd.ms-excel;charset=utf-8&#39;\n原因\n    导出方法不能有返回值，导出文件时会设置相应头为文件格式；如果有返回值，则就会出现数据转换异常的错误\n解决方法\n    修改Controller中方法，改为 void 即可</code></pre>\n"},{"title":"MapStruct","description":"MapStruct","date":"2020-10-02T07:51:46.000Z","_content":"\n\n## MapStruct\n[MapStruct](http://mapstruct.org/)是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。\n生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。\n\n### 如何接入MapStruct\n\n```xml\nmaidao-commons 已经完成对[MapStruct 的mvn依赖](http://mapstruct.org/documentation/installation/)，并解决了与swagger2的兼容问题。\n<dependency>\n    <groupId>com.maidao</groupId>\n    <artifactId>maidao-commons</artifactId>\n</dependency>\n```\n\nIDEA Support: https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\n\n\n### Java Bean属性拷贝性能对比\n\nget/set >= [MapStruct](http://mapstruct.org/) > [JMapper](https://jmapper-framework.github.io/jmapper-core/)  >  [\"beanCopier(cglib)\"](https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java) > Orika > ModelMapper > Spring BeanUtils > Dozer > Apache BeanUtils\n  \n性能对比数据来源：\n - https://www.baeldung.com/java-performance-mapping-frameworks\n - https://java.libhunt.com/categories/337-bean-mapping\n \n说明：\n- get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。\n- beanCopier 性能较高，属性名和类型有较高的匹配要求。\n- MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。\n- Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。\n- Spring BeanUtils 性能一般，只能支持相关名称的拷贝。\n- Dozer 性能差，使用简单，编写xml不方便。\n- Apache BeanUtils 性能差。\n    \n### demo\n\n实例代码:\n```java\n/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = \"spring\",uses = {DateHandWritten.class})\n@Mapper(\n        uses = {DateHandWritten.class, UserNameHandWritten.class},\n        imports = {LocalDateUtil.class}\n        )\npublic interface PersonMapper {\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings({\n            //@Mapping(source = \"name\",target = \"name\",ignore = true),\n            @Mapping(target = \"birthExpressionFormat\", expression = \"java(LocalDateUtil.getDateNow().toString())\"),\n            @Mapping(source = \"name\",target = \"address.name\"),\n            @Mapping(source = \"price\",target = \"price\",numberFormat = \"#.00\"),\n            @Mapping(source = \"birthDate\",target = \"birthDateFormat\",dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    })\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = \"toDto\")\n    List<PersonDto> toDtos(List<Person> person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = \"toDto\")\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n}\n\n/**定义自定义转换规则*/\npublic class DateHandWritten {\n\n    public String asString(Date date) {\n        return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n            .format( date ) : null;\n    }\n\n    public Date asDate(String date) {\n        try {\n            return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n                .parse( date ) : null;\n        }\n        catch ( ParseException e ) {\n            throw new RuntimeException( e );\n        }\n    }\n}\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten {\n\n    public String asUsername(String username) {\n        return  \"被修改后的name\";\n    } \n}\n\n/***使用实例*/\npublic class MapStructTest {\n\n    @Test\n    public void personTest(){\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * {\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573411245,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:31 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}\n        * */\n    }\n\n    @Test\n    public void personListTest(){\n        Person person = buildPerson();\n        List<PersonDto> personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [{\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573439123,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:59 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}]\n        * */\n    }\n\n    private Person buildPerson(){\n        Address a = new Address();\n        a.setName(\"demo\");\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(\"中国人\").addresses(Lists.newArrayList(a)).build();\n    }\n}\n\n```\n### 实现原理\n在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。","source":"_posts/backend/java/utils/map-struct.md","raw":"---\ntitle: MapStruct\ndescription: MapStruct\ndate: 2020-10-02 15:51:46\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n\n## MapStruct\n[MapStruct](http://mapstruct.org/)是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。\n生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。\n\n### 如何接入MapStruct\n\n```xml\nmaidao-commons 已经完成对[MapStruct 的mvn依赖](http://mapstruct.org/documentation/installation/)，并解决了与swagger2的兼容问题。\n<dependency>\n    <groupId>com.maidao</groupId>\n    <artifactId>maidao-commons</artifactId>\n</dependency>\n```\n\nIDEA Support: https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\n\n\n### Java Bean属性拷贝性能对比\n\nget/set >= [MapStruct](http://mapstruct.org/) > [JMapper](https://jmapper-framework.github.io/jmapper-core/)  >  [\"beanCopier(cglib)\"](https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java) > Orika > ModelMapper > Spring BeanUtils > Dozer > Apache BeanUtils\n  \n性能对比数据来源：\n - https://www.baeldung.com/java-performance-mapping-frameworks\n - https://java.libhunt.com/categories/337-bean-mapping\n \n说明：\n- get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。\n- beanCopier 性能较高，属性名和类型有较高的匹配要求。\n- MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。\n- Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。\n- Spring BeanUtils 性能一般，只能支持相关名称的拷贝。\n- Dozer 性能差，使用简单，编写xml不方便。\n- Apache BeanUtils 性能差。\n    \n### demo\n\n实例代码:\n```java\n/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = \"spring\",uses = {DateHandWritten.class})\n@Mapper(\n        uses = {DateHandWritten.class, UserNameHandWritten.class},\n        imports = {LocalDateUtil.class}\n        )\npublic interface PersonMapper {\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings({\n            //@Mapping(source = \"name\",target = \"name\",ignore = true),\n            @Mapping(target = \"birthExpressionFormat\", expression = \"java(LocalDateUtil.getDateNow().toString())\"),\n            @Mapping(source = \"name\",target = \"address.name\"),\n            @Mapping(source = \"price\",target = \"price\",numberFormat = \"#.00\"),\n            @Mapping(source = \"birthDate\",target = \"birthDateFormat\",dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    })\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = \"toDto\")\n    List<PersonDto> toDtos(List<Person> person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = \"toDto\")\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n}\n\n/**定义自定义转换规则*/\npublic class DateHandWritten {\n\n    public String asString(Date date) {\n        return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n            .format( date ) : null;\n    }\n\n    public Date asDate(String date) {\n        try {\n            return date != null ? new SimpleDateFormat( \"yyyy-MM-dd\" )\n                .parse( date ) : null;\n        }\n        catch ( ParseException e ) {\n            throw new RuntimeException( e );\n        }\n    }\n}\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten {\n\n    public String asUsername(String username) {\n        return  \"被修改后的name\";\n    } \n}\n\n/***使用实例*/\npublic class MapStructTest {\n\n    @Test\n    public void personTest(){\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * {\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573411245,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:31 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}\n        * */\n    }\n\n    @Test\n    public void personListTest(){\n        Person person = buildPerson();\n        List<PersonDto> personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [{\"address\":{\"name\":\"被修改后的name\"},\"addresses\":[{\"name\":\"被修改后的name\"}],\"age\":0,\"birthDate\":1555573439123,\"birthDateFormat\":\"2019-04-18\",\"birthExpressionFormat\":\"Thu Apr 18 15:43:59 CST 2019\",\"name\":\"被修改后的name\",\"price\":\"2.35\"}]\n        * */\n    }\n\n    private Person buildPerson(){\n        Address a = new Address();\n        a.setName(\"demo\");\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(\"中国人\").addresses(Lists.newArrayList(a)).build();\n    }\n}\n\n```\n### 实现原理\n在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。","slug":"backend/java/utils/map-struct","published":1,"updated":"2020-11-08T04:52:36.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl3i000xj49k26o02dtf","content":"<h2 id=\"MapStruct\"><a href=\"#MapStruct\" class=\"headerlink\" title=\"MapStruct\"></a>MapStruct</h2><p><a href=\"http://mapstruct.org/\">MapStruct</a>是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。<br>生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。</p>\n<h3 id=\"如何接入MapStruct\"><a href=\"#如何接入MapStruct\" class=\"headerlink\" title=\"如何接入MapStruct\"></a>如何接入MapStruct</h3><pre><code class=\"xml\">maidao-commons 已经完成对[MapStruct 的mvn依赖](http://mapstruct.org/documentation/installation/)，并解决了与swagger2的兼容问题。\n&lt;dependency&gt;\n    &lt;groupId&gt;com.maidao&lt;/groupId&gt;\n    &lt;artifactId&gt;maidao-commons&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<p>IDEA Support: <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\">https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions</a></p>\n<h3 id=\"Java-Bean属性拷贝性能对比\"><a href=\"#Java-Bean属性拷贝性能对比\" class=\"headerlink\" title=\"Java Bean属性拷贝性能对比\"></a>Java Bean属性拷贝性能对比</h3><p>get/set &gt;= <a href=\"http://mapstruct.org/\">MapStruct</a> &gt; <a href=\"https://jmapper-framework.github.io/jmapper-core/\">JMapper</a>  &gt;  <a href=\"https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java\">“beanCopier(cglib)”</a> &gt; Orika &gt; ModelMapper &gt; Spring BeanUtils &gt; Dozer &gt; Apache BeanUtils</p>\n<p>性能对比数据来源：</p>\n<ul>\n<li><a href=\"https://www.baeldung.com/java-performance-mapping-frameworks\">https://www.baeldung.com/java-performance-mapping-frameworks</a></li>\n<li><a href=\"https://java.libhunt.com/categories/337-bean-mapping\">https://java.libhunt.com/categories/337-bean-mapping</a></li>\n</ul>\n<p>说明：</p>\n<ul>\n<li>get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。</li>\n<li>beanCopier 性能较高，属性名和类型有较高的匹配要求。</li>\n<li>MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。</li>\n<li>Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。</li>\n<li>Spring BeanUtils 性能一般，只能支持相关名称的拷贝。</li>\n<li>Dozer 性能差，使用简单，编写xml不方便。</li>\n<li>Apache BeanUtils 性能差。</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>实例代码:</p>\n<pre><code class=\"java\">/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = &quot;spring&quot;,uses = &#123;DateHandWritten.class&#125;)\n@Mapper(\n        uses = &#123;DateHandWritten.class, UserNameHandWritten.class&#125;,\n        imports = &#123;LocalDateUtil.class&#125;\n        )\npublic interface PersonMapper &#123;\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings(&#123;\n            //@Mapping(source = &quot;name&quot;,target = &quot;name&quot;,ignore = true),\n            @Mapping(target = &quot;birthExpressionFormat&quot;, expression = &quot;java(LocalDateUtil.getDateNow().toString())&quot;),\n            @Mapping(source = &quot;name&quot;,target = &quot;address.name&quot;),\n            @Mapping(source = &quot;price&quot;,target = &quot;price&quot;,numberFormat = &quot;#.00&quot;),\n            @Mapping(source = &quot;birthDate&quot;,target = &quot;birthDateFormat&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)\n    &#125;)\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = &quot;toDto&quot;)\n    List&lt;PersonDto&gt; toDtos(List&lt;Person&gt; person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = &quot;toDto&quot;)\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n&#125;\n\n/**定义自定义转换规则*/\npublic class DateHandWritten &#123;\n\n    public String asString(Date date) &#123;\n        return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n            .format( date ) : null;\n    &#125;\n\n    public Date asDate(String date) &#123;\n        try &#123;\n            return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n                .parse( date ) : null;\n        &#125;\n        catch ( ParseException e ) &#123;\n            throw new RuntimeException( e );\n        &#125;\n    &#125;\n&#125;\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten &#123;\n\n    public String asUsername(String username) &#123;\n        return  &quot;被修改后的name&quot;;\n    &#125; \n&#125;\n\n/***使用实例*/\npublic class MapStructTest &#123;\n\n    @Test\n    public void personTest()&#123;\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * &#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573411245,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:31 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;\n        * */\n    &#125;\n\n    @Test\n    public void personListTest()&#123;\n        Person person = buildPerson();\n        List&lt;PersonDto&gt; personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [&#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573439123,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:59 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;]\n        * */\n    &#125;\n\n    private Person buildPerson()&#123;\n        Address a = new Address();\n        a.setName(&quot;demo&quot;);\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(&quot;中国人&quot;).addresses(Lists.newArrayList(a)).build();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MapStruct\"><a href=\"#MapStruct\" class=\"headerlink\" title=\"MapStruct\"></a>MapStruct</h2><p><a href=\"http://mapstruct.org/\">MapStruct</a>是一个代码生成器，它基于约定优于配置方法极大地简化了Java bean类型之间映射的实现。<br>生成的映射代码使用普通方法调用，因此快速，类型安全且易于理解。</p>\n<h3 id=\"如何接入MapStruct\"><a href=\"#如何接入MapStruct\" class=\"headerlink\" title=\"如何接入MapStruct\"></a>如何接入MapStruct</h3><pre><code class=\"xml\">maidao-commons 已经完成对[MapStruct 的mvn依赖](http://mapstruct.org/documentation/installation/)，并解决了与swagger2的兼容问题。\n&lt;dependency&gt;\n    &lt;groupId&gt;com.maidao&lt;/groupId&gt;\n    &lt;artifactId&gt;maidao-commons&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<p>IDEA Support: <a href=\"https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions\">https://plugins.jetbrains.com/plugin/10036-mapstruct-support/versions</a></p>\n<h3 id=\"Java-Bean属性拷贝性能对比\"><a href=\"#Java-Bean属性拷贝性能对比\" class=\"headerlink\" title=\"Java Bean属性拷贝性能对比\"></a>Java Bean属性拷贝性能对比</h3><p>get/set &gt;= <a href=\"http://mapstruct.org/\">MapStruct</a> &gt; <a href=\"https://jmapper-framework.github.io/jmapper-core/\">JMapper</a>  &gt;  <a href=\"https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/beans/BeanCopier.java\">“beanCopier(cglib)”</a> &gt; Orika &gt; ModelMapper &gt; Spring BeanUtils &gt; Dozer &gt; Apache BeanUtils</p>\n<p>性能对比数据来源：</p>\n<ul>\n<li><a href=\"https://www.baeldung.com/java-performance-mapping-frameworks\">https://www.baeldung.com/java-performance-mapping-frameworks</a></li>\n<li><a href=\"https://java.libhunt.com/categories/337-bean-mapping\">https://java.libhunt.com/categories/337-bean-mapping</a></li>\n</ul>\n<p>说明：</p>\n<ul>\n<li>get/set 需要手动编写大量转换代码，代码简洁性差、重复性高和工作量大。</li>\n<li>beanCopier 性能较高，属性名和类型有较高的匹配要求。</li>\n<li>MapStruct 性能较高，在编译阶段，生成Get/Set代码,支持不同属性之间自定义转换。</li>\n<li>Orika 性能较高,支持自定义属性拷贝，性能略差与前两种，当比后面几种高很多。</li>\n<li>Spring BeanUtils 性能一般，只能支持相关名称的拷贝。</li>\n<li>Dozer 性能差，使用简单，编写xml不方便。</li>\n<li>Apache BeanUtils 性能差。</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>实例代码:</p>\n<pre><code class=\"java\">/**\n* 定义对象之间转换Mapper\n * @Mapper 只有在接口加上这个注解， MapStruct 才会去实现该接口\n *     @Mapper\n *     componentModel ：主要是指定实现类的类型，\n *         - default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象\n *         -  spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入\n *     uses 使用用户自定义转换器\n *\n *     http://mapstruct.org/documentation/stable/reference/html/\n */\n//@Mapper(componentModel = &quot;spring&quot;,uses = &#123;DateHandWritten.class&#125;)\n@Mapper(\n        uses = &#123;DateHandWritten.class, UserNameHandWritten.class&#125;,\n        imports = &#123;LocalDateUtil.class&#125;\n        )\npublic interface PersonMapper &#123;\n\n    PersonMapper  INSTANCE  = Mappers.getMapper(PersonMapper.class);\n\n    @Mappings(&#123;\n            //@Mapping(source = &quot;name&quot;,target = &quot;name&quot;,ignore = true),\n            @Mapping(target = &quot;birthExpressionFormat&quot;, expression = &quot;java(LocalDateUtil.getDateNow().toString())&quot;),\n            @Mapping(source = &quot;name&quot;,target = &quot;address.name&quot;),\n            @Mapping(source = &quot;price&quot;,target = &quot;price&quot;,numberFormat = &quot;#.00&quot;),\n            @Mapping(source = &quot;birthDate&quot;,target = &quot;birthDateFormat&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)\n    &#125;)\n    /***\n     * @Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性\n     *     source：源属性\n     *     target：目标属性\n     *     dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat              的日期格式\n     *     ignore: 忽略这个字段\n     * @Mappings：配置多个@Mapping\n     */\n    PersonDto toDto(Person person);\n\n    @InheritConfiguration(name = &quot;toDto&quot;)\n    List&lt;PersonDto&gt; toDtos(List&lt;Person&gt; person);\n\n\n    /*@InheritInverseConfiguration()\n    PersonDto fromDto(Person person);*/\n\n    /**\n     * @InheritConfiguration 用于继承配置\n     * */\n  /*  @InheritConfiguration(name = &quot;toDto&quot;)\n    void update(Person person, @MappingTarget PersonDto personDto);*/\n&#125;\n\n/**定义自定义转换规则*/\npublic class DateHandWritten &#123;\n\n    public String asString(Date date) &#123;\n        return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n            .format( date ) : null;\n    &#125;\n\n    public Date asDate(String date) &#123;\n        try &#123;\n            return date != null ? new SimpleDateFormat( &quot;yyyy-MM-dd&quot; )\n                .parse( date ) : null;\n        &#125;\n        catch ( ParseException e ) &#123;\n            throw new RuntimeException( e );\n        &#125;\n    &#125;\n&#125;\n\n/**定义自定义转换规则*/\npublic class UserNameHandWritten &#123;\n\n    public String asUsername(String username) &#123;\n        return  &quot;被修改后的name&quot;;\n    &#125; \n&#125;\n\n/***使用实例*/\npublic class MapStructTest &#123;\n\n    @Test\n    public void personTest()&#123;\n        Person person = buildPerson();\n        PersonDto personDto = PersonMapper.INSTANCE.toDto(person);\n        System.out.println(JSON.toJSONString(personDto));\n        /**\n        * &#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573411245,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:31 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;\n        * */\n    &#125;\n\n    @Test\n    public void personListTest()&#123;\n        Person person = buildPerson();\n        List&lt;PersonDto&gt; personDtos = PersonMapper.INSTANCE.toDtos(Lists.newArrayList(person));\n        System.out.println(JSON.toJSONString(personDtos));\n        /**\n        * [&#123;&quot;address&quot;:&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;,&quot;addresses&quot;:[&#123;&quot;name&quot;:&quot;被修改后的name&quot;&#125;],&quot;age&quot;:0,&quot;birthDate&quot;:1555573439123,&quot;birthDateFormat&quot;:&quot;2019-04-18&quot;,&quot;birthExpressionFormat&quot;:&quot;Thu Apr 18 15:43:59 CST 2019&quot;,&quot;name&quot;:&quot;被修改后的name&quot;,&quot;price&quot;:&quot;2.35&quot;&#125;]\n        * */\n    &#125;\n\n    private Person buildPerson()&#123;\n        Address a = new Address();\n        a.setName(&quot;demo&quot;);\n        return Person.builder().birthDate(new Date()).price(BigDecimal.valueOf(2.347)).name(&quot;中国人&quot;).addresses(Lists.newArrayList(a)).build();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>在Maven 编译阶段将自动实现PersonMapper的对象属性转换接口,生成PersonMapperImpl文件。</p>\n"},{"title":"MybatisPlus使用笔记","description":"mybatis-plus","date":"2020-12-10T04:00:00.000Z","_content":"\n### 常用配置\n```yaml\n#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\n      id-type: AUTO\n      #字段策略 IGNORED:\"忽略判断\",NOT_NULL:\"非 NULL 判断\"),NOT_EMPTY:\"非空判断\"\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: 'null'\n```\n","source":"_posts/backend/java/utils/mybatis-plus.md","raw":"---\ntitle: MybatisPlus使用笔记\ndescription: mybatis-plus\ndate: 2020-12-10 12:00:00\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n### 常用配置\n```yaml\n#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\n      id-type: AUTO\n      #字段策略 IGNORED:\"忽略判断\",NOT_NULL:\"非 NULL 判断\"),NOT_EMPTY:\"非空判断\"\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: 'null'\n```\n","slug":"backend/java/utils/mybatis-plus","published":1,"updated":"2020-12-10T04:03:27.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl3k0010j49k81b62a8h","content":"<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><pre><code class=\"yaml\">#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:&quot;数据库ID自增&quot;, INPUT:&quot;用户输入ID&quot;, ID_WORKER:&quot;全局唯一ID (数字类型唯一ID)&quot;, UUID:&quot;全局唯一ID UUID&quot;;\n      id-type: AUTO\n      #字段策略 IGNORED:&quot;忽略判断&quot;,NOT_NULL:&quot;非 NULL 判断&quot;),NOT_EMPTY:&quot;非空判断&quot;\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: &#39;null&#39;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><pre><code class=\"yaml\">#mybatis\n# 配置是否打印日志 true-打印  false-不打印\n# paginationInterceptor-true 改为false则分页功能无效\nsql:\n  performanceInterceptor: true\nmybatis-plus:\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体扫描，多个package用逗号或者分号分隔\n  typeAliasesPackage: com.ruoyi.**.domain\n  global-config:\n    #数据库相关配置\n    db-config:\n      #主键类型  AUTO:&quot;数据库ID自增&quot;, INPUT:&quot;用户输入ID&quot;, ID_WORKER:&quot;全局唯一ID (数字类型唯一ID)&quot;, UUID:&quot;全局唯一ID UUID&quot;;\n      id-type: AUTO\n      #字段策略 IGNORED:&quot;忽略判断&quot;,NOT_NULL:&quot;非 NULL 判断&quot;),NOT_EMPTY:&quot;非空判断&quot;\n      field-strategy: NOT_NULL\n      #驼峰下划线转换\n      column-underline: true\n      logic-delete-value: -1\n      logic-not-delete-value: 0\n    banner: false\n  #原生配置\n  configuration:\n    #不加无法打印执行脚本及内容\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n    call-setters-on-nulls: true\n    jdbc-type-for-null: &#39;null&#39;</code></pre>\n"},{"title":"Java解析Swagger文档接口及参数","description":"解析swagger-ui","date":"2020-11-11T11:30:00.000Z","_content":"\n### 相关依赖包\n```xml\n<!--swagger依赖-->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.9.2</version>\n</dependency>\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.9.2</version>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>swagger-bootstrap-ui</artifactId>\n    <version>1.9.6</version>\n</dependency>\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.73</version>\n</dependency>\n\n```\n\n### Swagger文档相关接口\n```textmate\n1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本\n```\n\n### 主要代码\n```java\n/**\n * 加载swagger文档中的接口信息\n * @Date 2020/11/6 11:31\n * @Author fan\n**/\npublic boolean loadSwaggerAPI(Integer lesseeId,String url){\n    try {\n        log.info(\"开始加载Swagger文档,url={}\",url);\n        String result = OkhttpClientUtil.get(url);\n        JSONObject jsonObject = JSON.parseObject(result);\n        if(jsonObject == null){\n            return false;\n        }\n        //移除对象描述信息\n        String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(\"info\"))).get(\"title\");\n        JSONObject paths = (JSONObject) jsonObject.get(\"paths\");\n        JSONObject definitions = (JSONObject) jsonObject.get(\"definitions\");\n        Map<String,JSONObject> paramMap = JSONObject.toJavaObject(definitions,Map.class);\n\n        List<PublicResourceInfo> resourceInfos = new ArrayList<>();\n        for(Map.Entry<String,Object> entry :  paths.entrySet()){\n            String apiUrl = entry.getKey();\n            String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n            JSONObject methodInfo = (JSONObject) entry.getValue();\n\n            for(Map.Entry<String,Object> methodEntry : methodInfo.entrySet()){\n                String requestType = methodEntry.getKey().toUpperCase();\n\n                JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                String apiName = String.valueOf(requestTypeInfo.get(\"summary\"));\n                String moduleName = StringUtils.join((List<String>)requestTypeInfo.get(\"tags\"),\",\");\n\n                PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                resourceInfo.setPlatformNameCn(platform);\n                resourceInfo.setApiPath(apiUrl);\n                resourceInfo.setPerms(perms);\n                resourceInfo.setApiName(apiName);\n                resourceInfo.setRequestType(requestType);\n                resourceInfo.setModuleNameCn(moduleName);\n\n                //解析swagger-ui中的出参入参\n                JSONArray parameterJson = (JSONArray) requestTypeInfo.get(\"parameters\");\n                Object requestParam = null;\n                Map<String,Object> requestParamMap = new HashMap<>();\n                if(parameterJson != null){\n                    for(Object object : parameterJson){\n                        JSONObject schema = (JSONObject) ((JSONObject) object).get(\"schema\");\n                        if (schema != null){\n                            String ref = (String) schema.get(\"$ref\");\n                            requestParam = parseRequestToJson(null,paramMap,ref);\n                        } else {\n                            String mapKey = (String) ((JSONObject) object).get(\"name\");\n                            String type = ((JSONObject) object).getString(\"type\");\n                            Object value = setValueByType(type,null);\n                            requestParamMap.put(mapKey,value);\n                        }\n                    }\n                }\n\n                if(requestParam != null){\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                } else {\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                }\n\n                //返回值类型都用标准类型，不解析其他格式\n                JSONObject response = (JSONObject) requestTypeInfo.get(\"responses\");\n                Object responseResult = null;\n                if(response != null){\n                    JSONObject schema = (JSONObject) ((JSONObject)response.get(\"200\")).get(\"schema\");\n                    if(schema != null){\n                        String ref = (String) schema.get(\"$ref\");\n                        responseResult = parseRequestToJson(null,paramMap,ref);\n                    }\n                }\n                if(responseResult != null){\n                    resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                }\n\n                resourceInfos.add(resourceInfo);\n            }\n        }\n        log.info(\"解析完成=====>{}\",JSONObject.toJSONString(resourceInfos));\n    } catch (IOException e) {\n        log.error(\"加载Swagger文档中接口失败，url={}\",url);\n        return false;\n    }\n    return true;\n}\n\n/**\n * 解析swagger-ui中出参和入参为json\n * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n * @Date 2020/11/11 16:01\n * @Author fan\n**/\nprivate Object parseRequestToJson(Map<String,Integer> forEachCache,Map<String,JSONObject> paramMap, String paramRef){\n    if(StringUtils.isBlank(paramRef)){\n        return \"\";\n    }\n\n    //对象标识\n    String paramKey = paramRef.substring(paramRef.lastIndexOf(\"/\")+1);\n\n    //控制递归次数，同一个对象循环超过1次就返回空\n    if(forEachCache == null){\n        forEachCache = new HashMap<>();\n    }\n    Integer forEachCount = forEachCache.get(paramKey);\n    if(forEachCount != null && forEachCount >= 1){\n        return null;\n    } else {\n        forEachCache.put(paramKey,1);\n    }\n\n    //对象值\n    JSONObject paramJson = paramMap.get(paramKey);\n    JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(\"properties\")));\n\n    Map<String,Object> columnMap = new HashMap<>();\n    for(Map.Entry<String,Object> entry : propertiesJson.entrySet()){\n        String key = entry.getKey();\n        Object value = new JSONObject();\n        JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n        String type = valueJson.getString(\"type\");\n        Object obj = valueJson.get(\"items\");\n\n        if(obj != null){\n            JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n            String ref = (String) property.get(\"$ref\");\n            //有下一级，则递归\n            if(StringUtils.isNotBlank(ref)){\n                value = parseRequestToJson(forEachCache,paramMap,ref);\n            }\n        }\n        value = setValueByType(type,value);\n        columnMap.put(key,value);\n    }\n    return columnMap;\n}\n\n/**  根据参数类型设置value **/\nprivate Object setValueByType(String type,Object value){\n    if(\"array\".equals(type)){\n        JSONArray jsonArray = new JSONArray();\n        if(value == null){\n            value = new JSONObject();\n        }\n        jsonArray.add(value);\n        return JSONArray.toJSONString(jsonArray);\n    }\n    if(\"integer\".equals(type)){\n        return 0;\n    }\n    if(\"boolean\".equals(type)){\n        return true;\n    }\n    if(\"object\".equals(type)){\n        return value;\n    }\n    return \"\";\n}\n```\n","source":"_posts/backend/java/utils/swagger.md","raw":"---\ntitle: Java解析Swagger文档接口及参数\ndescription: 解析swagger-ui\ndate: 2020-11-11 19:30\ntags:\n- utils\ncategories:\n- 后端\n- 工具\n---\n\n### 相关依赖包\n```xml\n<!--swagger依赖-->\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.9.2</version>\n</dependency>\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.9.2</version>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>swagger-bootstrap-ui</artifactId>\n    <version>1.9.6</version>\n</dependency>\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.73</version>\n</dependency>\n\n```\n\n### Swagger文档相关接口\n```textmate\n1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本\n```\n\n### 主要代码\n```java\n/**\n * 加载swagger文档中的接口信息\n * @Date 2020/11/6 11:31\n * @Author fan\n**/\npublic boolean loadSwaggerAPI(Integer lesseeId,String url){\n    try {\n        log.info(\"开始加载Swagger文档,url={}\",url);\n        String result = OkhttpClientUtil.get(url);\n        JSONObject jsonObject = JSON.parseObject(result);\n        if(jsonObject == null){\n            return false;\n        }\n        //移除对象描述信息\n        String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(\"info\"))).get(\"title\");\n        JSONObject paths = (JSONObject) jsonObject.get(\"paths\");\n        JSONObject definitions = (JSONObject) jsonObject.get(\"definitions\");\n        Map<String,JSONObject> paramMap = JSONObject.toJavaObject(definitions,Map.class);\n\n        List<PublicResourceInfo> resourceInfos = new ArrayList<>();\n        for(Map.Entry<String,Object> entry :  paths.entrySet()){\n            String apiUrl = entry.getKey();\n            String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n            JSONObject methodInfo = (JSONObject) entry.getValue();\n\n            for(Map.Entry<String,Object> methodEntry : methodInfo.entrySet()){\n                String requestType = methodEntry.getKey().toUpperCase();\n\n                JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                String apiName = String.valueOf(requestTypeInfo.get(\"summary\"));\n                String moduleName = StringUtils.join((List<String>)requestTypeInfo.get(\"tags\"),\",\");\n\n                PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                resourceInfo.setPlatformNameCn(platform);\n                resourceInfo.setApiPath(apiUrl);\n                resourceInfo.setPerms(perms);\n                resourceInfo.setApiName(apiName);\n                resourceInfo.setRequestType(requestType);\n                resourceInfo.setModuleNameCn(moduleName);\n\n                //解析swagger-ui中的出参入参\n                JSONArray parameterJson = (JSONArray) requestTypeInfo.get(\"parameters\");\n                Object requestParam = null;\n                Map<String,Object> requestParamMap = new HashMap<>();\n                if(parameterJson != null){\n                    for(Object object : parameterJson){\n                        JSONObject schema = (JSONObject) ((JSONObject) object).get(\"schema\");\n                        if (schema != null){\n                            String ref = (String) schema.get(\"$ref\");\n                            requestParam = parseRequestToJson(null,paramMap,ref);\n                        } else {\n                            String mapKey = (String) ((JSONObject) object).get(\"name\");\n                            String type = ((JSONObject) object).getString(\"type\");\n                            Object value = setValueByType(type,null);\n                            requestParamMap.put(mapKey,value);\n                        }\n                    }\n                }\n\n                if(requestParam != null){\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                } else {\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                }\n\n                //返回值类型都用标准类型，不解析其他格式\n                JSONObject response = (JSONObject) requestTypeInfo.get(\"responses\");\n                Object responseResult = null;\n                if(response != null){\n                    JSONObject schema = (JSONObject) ((JSONObject)response.get(\"200\")).get(\"schema\");\n                    if(schema != null){\n                        String ref = (String) schema.get(\"$ref\");\n                        responseResult = parseRequestToJson(null,paramMap,ref);\n                    }\n                }\n                if(responseResult != null){\n                    resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                }\n\n                resourceInfos.add(resourceInfo);\n            }\n        }\n        log.info(\"解析完成=====>{}\",JSONObject.toJSONString(resourceInfos));\n    } catch (IOException e) {\n        log.error(\"加载Swagger文档中接口失败，url={}\",url);\n        return false;\n    }\n    return true;\n}\n\n/**\n * 解析swagger-ui中出参和入参为json\n * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n * @Date 2020/11/11 16:01\n * @Author fan\n**/\nprivate Object parseRequestToJson(Map<String,Integer> forEachCache,Map<String,JSONObject> paramMap, String paramRef){\n    if(StringUtils.isBlank(paramRef)){\n        return \"\";\n    }\n\n    //对象标识\n    String paramKey = paramRef.substring(paramRef.lastIndexOf(\"/\")+1);\n\n    //控制递归次数，同一个对象循环超过1次就返回空\n    if(forEachCache == null){\n        forEachCache = new HashMap<>();\n    }\n    Integer forEachCount = forEachCache.get(paramKey);\n    if(forEachCount != null && forEachCount >= 1){\n        return null;\n    } else {\n        forEachCache.put(paramKey,1);\n    }\n\n    //对象值\n    JSONObject paramJson = paramMap.get(paramKey);\n    JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(\"properties\")));\n\n    Map<String,Object> columnMap = new HashMap<>();\n    for(Map.Entry<String,Object> entry : propertiesJson.entrySet()){\n        String key = entry.getKey();\n        Object value = new JSONObject();\n        JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n        String type = valueJson.getString(\"type\");\n        Object obj = valueJson.get(\"items\");\n\n        if(obj != null){\n            JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n            String ref = (String) property.get(\"$ref\");\n            //有下一级，则递归\n            if(StringUtils.isNotBlank(ref)){\n                value = parseRequestToJson(forEachCache,paramMap,ref);\n            }\n        }\n        value = setValueByType(type,value);\n        columnMap.put(key,value);\n    }\n    return columnMap;\n}\n\n/**  根据参数类型设置value **/\nprivate Object setValueByType(String type,Object value){\n    if(\"array\".equals(type)){\n        JSONArray jsonArray = new JSONArray();\n        if(value == null){\n            value = new JSONObject();\n        }\n        jsonArray.add(value);\n        return JSONArray.toJSONString(jsonArray);\n    }\n    if(\"integer\".equals(type)){\n        return 0;\n    }\n    if(\"boolean\".equals(type)){\n        return true;\n    }\n    if(\"object\".equals(type)){\n        return value;\n    }\n    return \"\";\n}\n```\n","slug":"backend/java/utils/swagger","published":1,"updated":"2020-12-26T08:25:31.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl4a002ij49k6tzb45o2","content":"<h3 id=\"相关依赖包\"><a href=\"#相关依赖包\" class=\"headerlink\" title=\"相关依赖包\"></a>相关依赖包</h3><pre><code class=\"xml\">&lt;!--swagger依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n    &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;\n    &lt;version&gt;1.9.6&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n    &lt;version&gt;1.2.73&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"Swagger文档相关接口\"><a href=\"#Swagger文档相关接口\" class=\"headerlink\" title=\"Swagger文档相关接口\"></a>Swagger文档相关接口</h3><pre><code class=\"textmate\">1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本</code></pre>\n<h3 id=\"主要代码\"><a href=\"#主要代码\" class=\"headerlink\" title=\"主要代码\"></a>主要代码</h3><pre><code class=\"java\">/**\n * 加载swagger文档中的接口信息\n * @Date 2020/11/6 11:31\n * @Author fan\n**/\npublic boolean loadSwaggerAPI(Integer lesseeId,String url)&#123;\n    try &#123;\n        log.info(&quot;开始加载Swagger文档,url=&#123;&#125;&quot;,url);\n        String result = OkhttpClientUtil.get(url);\n        JSONObject jsonObject = JSON.parseObject(result);\n        if(jsonObject == null)&#123;\n            return false;\n        &#125;\n        //移除对象描述信息\n        String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(&quot;info&quot;))).get(&quot;title&quot;);\n        JSONObject paths = (JSONObject) jsonObject.get(&quot;paths&quot;);\n        JSONObject definitions = (JSONObject) jsonObject.get(&quot;definitions&quot;);\n        Map&lt;String,JSONObject&gt; paramMap = JSONObject.toJavaObject(definitions,Map.class);\n\n        List&lt;PublicResourceInfo&gt; resourceInfos = new ArrayList&lt;&gt;();\n        for(Map.Entry&lt;String,Object&gt; entry :  paths.entrySet())&#123;\n            String apiUrl = entry.getKey();\n            String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n            JSONObject methodInfo = (JSONObject) entry.getValue();\n\n            for(Map.Entry&lt;String,Object&gt; methodEntry : methodInfo.entrySet())&#123;\n                String requestType = methodEntry.getKey().toUpperCase();\n\n                JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                String apiName = String.valueOf(requestTypeInfo.get(&quot;summary&quot;));\n                String moduleName = StringUtils.join((List&lt;String&gt;)requestTypeInfo.get(&quot;tags&quot;),&quot;,&quot;);\n\n                PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                resourceInfo.setPlatformNameCn(platform);\n                resourceInfo.setApiPath(apiUrl);\n                resourceInfo.setPerms(perms);\n                resourceInfo.setApiName(apiName);\n                resourceInfo.setRequestType(requestType);\n                resourceInfo.setModuleNameCn(moduleName);\n\n                //解析swagger-ui中的出参入参\n                JSONArray parameterJson = (JSONArray) requestTypeInfo.get(&quot;parameters&quot;);\n                Object requestParam = null;\n                Map&lt;String,Object&gt; requestParamMap = new HashMap&lt;&gt;();\n                if(parameterJson != null)&#123;\n                    for(Object object : parameterJson)&#123;\n                        JSONObject schema = (JSONObject) ((JSONObject) object).get(&quot;schema&quot;);\n                        if (schema != null)&#123;\n                            String ref = (String) schema.get(&quot;$ref&quot;);\n                            requestParam = parseRequestToJson(null,paramMap,ref);\n                        &#125; else &#123;\n                            String mapKey = (String) ((JSONObject) object).get(&quot;name&quot;);\n                            String type = ((JSONObject) object).getString(&quot;type&quot;);\n                            Object value = setValueByType(type,null);\n                            requestParamMap.put(mapKey,value);\n                        &#125;\n                    &#125;\n                &#125;\n\n                if(requestParam != null)&#123;\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                &#125; else &#123;\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                &#125;\n\n                //返回值类型都用标准类型，不解析其他格式\n                JSONObject response = (JSONObject) requestTypeInfo.get(&quot;responses&quot;);\n                Object responseResult = null;\n                if(response != null)&#123;\n                    JSONObject schema = (JSONObject) ((JSONObject)response.get(&quot;200&quot;)).get(&quot;schema&quot;);\n                    if(schema != null)&#123;\n                        String ref = (String) schema.get(&quot;$ref&quot;);\n                        responseResult = parseRequestToJson(null,paramMap,ref);\n                    &#125;\n                &#125;\n                if(responseResult != null)&#123;\n                    resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                &#125;\n\n                resourceInfos.add(resourceInfo);\n            &#125;\n        &#125;\n        log.info(&quot;解析完成=====&gt;&#123;&#125;&quot;,JSONObject.toJSONString(resourceInfos));\n    &#125; catch (IOException e) &#123;\n        log.error(&quot;加载Swagger文档中接口失败，url=&#123;&#125;&quot;,url);\n        return false;\n    &#125;\n    return true;\n&#125;\n\n/**\n * 解析swagger-ui中出参和入参为json\n * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n * @Date 2020/11/11 16:01\n * @Author fan\n**/\nprivate Object parseRequestToJson(Map&lt;String,Integer&gt; forEachCache,Map&lt;String,JSONObject&gt; paramMap, String paramRef)&#123;\n    if(StringUtils.isBlank(paramRef))&#123;\n        return &quot;&quot;;\n    &#125;\n\n    //对象标识\n    String paramKey = paramRef.substring(paramRef.lastIndexOf(&quot;/&quot;)+1);\n\n    //控制递归次数，同一个对象循环超过1次就返回空\n    if(forEachCache == null)&#123;\n        forEachCache = new HashMap&lt;&gt;();\n    &#125;\n    Integer forEachCount = forEachCache.get(paramKey);\n    if(forEachCount != null &amp;&amp; forEachCount &gt;= 1)&#123;\n        return null;\n    &#125; else &#123;\n        forEachCache.put(paramKey,1);\n    &#125;\n\n    //对象值\n    JSONObject paramJson = paramMap.get(paramKey);\n    JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(&quot;properties&quot;)));\n\n    Map&lt;String,Object&gt; columnMap = new HashMap&lt;&gt;();\n    for(Map.Entry&lt;String,Object&gt; entry : propertiesJson.entrySet())&#123;\n        String key = entry.getKey();\n        Object value = new JSONObject();\n        JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n        String type = valueJson.getString(&quot;type&quot;);\n        Object obj = valueJson.get(&quot;items&quot;);\n\n        if(obj != null)&#123;\n            JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n            String ref = (String) property.get(&quot;$ref&quot;);\n            //有下一级，则递归\n            if(StringUtils.isNotBlank(ref))&#123;\n                value = parseRequestToJson(forEachCache,paramMap,ref);\n            &#125;\n        &#125;\n        value = setValueByType(type,value);\n        columnMap.put(key,value);\n    &#125;\n    return columnMap;\n&#125;\n\n/**  根据参数类型设置value **/\nprivate Object setValueByType(String type,Object value)&#123;\n    if(&quot;array&quot;.equals(type))&#123;\n        JSONArray jsonArray = new JSONArray();\n        if(value == null)&#123;\n            value = new JSONObject();\n        &#125;\n        jsonArray.add(value);\n        return JSONArray.toJSONString(jsonArray);\n    &#125;\n    if(&quot;integer&quot;.equals(type))&#123;\n        return 0;\n    &#125;\n    if(&quot;boolean&quot;.equals(type))&#123;\n        return true;\n    &#125;\n    if(&quot;object&quot;.equals(type))&#123;\n        return value;\n    &#125;\n    return &quot;&quot;;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关依赖包\"><a href=\"#相关依赖包\" class=\"headerlink\" title=\"相关依赖包\"></a>相关依赖包</h3><pre><code class=\"xml\">&lt;!--swagger依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n    &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;\n    &lt;version&gt;1.9.6&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n    &lt;version&gt;1.2.73&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"Swagger文档相关接口\"><a href=\"#Swagger文档相关接口\" class=\"headerlink\" title=\"Swagger文档相关接口\"></a>Swagger文档相关接口</h3><pre><code class=\"textmate\">1.接口文档地址\n    https://localhost:8080/swagger-ui.html\n    https://localhost:8080/doc.html\n2.JSON格式接口数据(group参数由项目中swagger配置决定)\n    http://localhost:8080/v2/api-docs?group=V1版本</code></pre>\n<h3 id=\"主要代码\"><a href=\"#主要代码\" class=\"headerlink\" title=\"主要代码\"></a>主要代码</h3><pre><code class=\"java\">/**\n * 加载swagger文档中的接口信息\n * @Date 2020/11/6 11:31\n * @Author fan\n**/\npublic boolean loadSwaggerAPI(Integer lesseeId,String url)&#123;\n    try &#123;\n        log.info(&quot;开始加载Swagger文档,url=&#123;&#125;&quot;,url);\n        String result = OkhttpClientUtil.get(url);\n        JSONObject jsonObject = JSON.parseObject(result);\n        if(jsonObject == null)&#123;\n            return false;\n        &#125;\n        //移除对象描述信息\n        String platform = (String) JSON.parseObject(JSON.toJSONString(jsonObject.get(&quot;info&quot;))).get(&quot;title&quot;);\n        JSONObject paths = (JSONObject) jsonObject.get(&quot;paths&quot;);\n        JSONObject definitions = (JSONObject) jsonObject.get(&quot;definitions&quot;);\n        Map&lt;String,JSONObject&gt; paramMap = JSONObject.toJavaObject(definitions,Map.class);\n\n        List&lt;PublicResourceInfo&gt; resourceInfos = new ArrayList&lt;&gt;();\n        for(Map.Entry&lt;String,Object&gt; entry :  paths.entrySet())&#123;\n            String apiUrl = entry.getKey();\n            String perms = resourceInfoService.buildPermByApiPath(null,apiUrl);\n            JSONObject methodInfo = (JSONObject) entry.getValue();\n\n            for(Map.Entry&lt;String,Object&gt; methodEntry : methodInfo.entrySet())&#123;\n                String requestType = methodEntry.getKey().toUpperCase();\n\n                JSONObject requestTypeInfo = (JSONObject) methodEntry.getValue();\n                String apiName = String.valueOf(requestTypeInfo.get(&quot;summary&quot;));\n                String moduleName = StringUtils.join((List&lt;String&gt;)requestTypeInfo.get(&quot;tags&quot;),&quot;,&quot;);\n\n                PublicResourceInfo resourceInfo = new PublicResourceInfo();\n                resourceInfo.setPlatformNameCn(platform);\n                resourceInfo.setApiPath(apiUrl);\n                resourceInfo.setPerms(perms);\n                resourceInfo.setApiName(apiName);\n                resourceInfo.setRequestType(requestType);\n                resourceInfo.setModuleNameCn(moduleName);\n\n                //解析swagger-ui中的出参入参\n                JSONArray parameterJson = (JSONArray) requestTypeInfo.get(&quot;parameters&quot;);\n                Object requestParam = null;\n                Map&lt;String,Object&gt; requestParamMap = new HashMap&lt;&gt;();\n                if(parameterJson != null)&#123;\n                    for(Object object : parameterJson)&#123;\n                        JSONObject schema = (JSONObject) ((JSONObject) object).get(&quot;schema&quot;);\n                        if (schema != null)&#123;\n                            String ref = (String) schema.get(&quot;$ref&quot;);\n                            requestParam = parseRequestToJson(null,paramMap,ref);\n                        &#125; else &#123;\n                            String mapKey = (String) ((JSONObject) object).get(&quot;name&quot;);\n                            String type = ((JSONObject) object).getString(&quot;type&quot;);\n                            Object value = setValueByType(type,null);\n                            requestParamMap.put(mapKey,value);\n                        &#125;\n                    &#125;\n                &#125;\n\n                if(requestParam != null)&#123;\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParam));\n                &#125; else &#123;\n                    resourceInfo.setRequestParam(JSONObject.toJSONString(requestParamMap));\n                &#125;\n\n                //返回值类型都用标准类型，不解析其他格式\n                JSONObject response = (JSONObject) requestTypeInfo.get(&quot;responses&quot;);\n                Object responseResult = null;\n                if(response != null)&#123;\n                    JSONObject schema = (JSONObject) ((JSONObject)response.get(&quot;200&quot;)).get(&quot;schema&quot;);\n                    if(schema != null)&#123;\n                        String ref = (String) schema.get(&quot;$ref&quot;);\n                        responseResult = parseRequestToJson(null,paramMap,ref);\n                    &#125;\n                &#125;\n                if(responseResult != null)&#123;\n                    resourceInfo.setResponseParam(JSONObject.toJSONString(responseResult));\n                &#125;\n\n                resourceInfos.add(resourceInfo);\n            &#125;\n        &#125;\n        log.info(&quot;解析完成=====&gt;&#123;&#125;&quot;,JSONObject.toJSONString(resourceInfos));\n    &#125; catch (IOException e) &#123;\n        log.error(&quot;加载Swagger文档中接口失败，url=&#123;&#125;&quot;,url);\n        return false;\n    &#125;\n    return true;\n&#125;\n\n/**\n * 解析swagger-ui中出参和入参为json\n * @param paramMap 入参和出参对象map,key-对象标识，value-对象属性及类型json\n * @param paramRef 入参和出参对应的对象信息， 格式: #/definitions/R«PageResultDTO«PublicResourceInfoDTO»»\n * @Date 2020/11/11 16:01\n * @Author fan\n**/\nprivate Object parseRequestToJson(Map&lt;String,Integer&gt; forEachCache,Map&lt;String,JSONObject&gt; paramMap, String paramRef)&#123;\n    if(StringUtils.isBlank(paramRef))&#123;\n        return &quot;&quot;;\n    &#125;\n\n    //对象标识\n    String paramKey = paramRef.substring(paramRef.lastIndexOf(&quot;/&quot;)+1);\n\n    //控制递归次数，同一个对象循环超过1次就返回空\n    if(forEachCache == null)&#123;\n        forEachCache = new HashMap&lt;&gt;();\n    &#125;\n    Integer forEachCount = forEachCache.get(paramKey);\n    if(forEachCount != null &amp;&amp; forEachCount &gt;= 1)&#123;\n        return null;\n    &#125; else &#123;\n        forEachCache.put(paramKey,1);\n    &#125;\n\n    //对象值\n    JSONObject paramJson = paramMap.get(paramKey);\n    JSONObject propertiesJson = JSONObject.parseObject(String.valueOf(paramJson.get(&quot;properties&quot;)));\n\n    Map&lt;String,Object&gt; columnMap = new HashMap&lt;&gt;();\n    for(Map.Entry&lt;String,Object&gt; entry : propertiesJson.entrySet())&#123;\n        String key = entry.getKey();\n        Object value = new JSONObject();\n        JSONObject valueJson = JSONObject.parseObject(String.valueOf(entry.getValue()));\n        String type = valueJson.getString(&quot;type&quot;);\n        Object obj = valueJson.get(&quot;items&quot;);\n\n        if(obj != null)&#123;\n            JSONObject property = JSONObject.parseObject(String.valueOf(obj));\n            String ref = (String) property.get(&quot;$ref&quot;);\n            //有下一级，则递归\n            if(StringUtils.isNotBlank(ref))&#123;\n                value = parseRequestToJson(forEachCache,paramMap,ref);\n            &#125;\n        &#125;\n        value = setValueByType(type,value);\n        columnMap.put(key,value);\n    &#125;\n    return columnMap;\n&#125;\n\n/**  根据参数类型设置value **/\nprivate Object setValueByType(String type,Object value)&#123;\n    if(&quot;array&quot;.equals(type))&#123;\n        JSONArray jsonArray = new JSONArray();\n        if(value == null)&#123;\n            value = new JSONObject();\n        &#125;\n        jsonArray.add(value);\n        return JSONArray.toJSONString(jsonArray);\n    &#125;\n    if(&quot;integer&quot;.equals(type))&#123;\n        return 0;\n    &#125;\n    if(&quot;boolean&quot;.equals(type))&#123;\n        return true;\n    &#125;\n    if(&quot;object&quot;.equals(type))&#123;\n        return value;\n    &#125;\n    return &quot;&quot;;\n&#125;</code></pre>\n"},{"title":"14种常用设计模式","date":"2020-10-02T07:51:46.000Z","_content":"\n> [菜鸟教程](http://www.runoob.com/design-pattern)\n> [设计模式在Spring框架中的良好实践](https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect)\n> [实现的demo](https://github.com/im-fan/my-design-mode.git)\n\n## 基础\n### 设计模式的类型\n<img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n### 设计模式实践的关系\n<img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n### 设计模式的六大原则\n```\n1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n```\n\n## 模式详解\n### 1.策略模式(Strategy)\n```\n定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题\n```\n- 示例图片<br/>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n### 2.简单工厂模式( Simple Factory )\n```\n定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；\n```\n\n### 3.工厂模式( Factory )\n```\n针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品\n```\n\n### 4.抽象工厂模式( Abstract Factory )\n```\nhttps://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n### 5.装饰器模式( Decorator )\n```\n动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n### 6.代理模式( Proxy )\n```\n封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n### 7.模板方法模式( Template )\n```\n1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n### 8.外观模式( Facade )\n```\n为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。\n```\n\n### 9.适配器模式( Adapter )\n```\n将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n### 10.桥接模式( Bridge )\n```\n将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n### 11.建造者模式( Builder )\n```\n使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n### 12.观察者模式( Observer )\n```\n定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n### 13.单例模式( Singleton )\n```\n保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n\t加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n\t优点：第一次调用才初始化，避免内存浪费。\n\t缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n\t优点：没有加锁，执行效率会提高。\n\t缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n\t这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n\t这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n\t这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。\n```\n\n### 14.命令模式( Command )\n```\n将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">","source":"_posts/framework/design-model.md","raw":"---\ntitle: 14种常用设计模式\ndate: 2020-10-02 15:51:46\ntags: \n- 设计模式\ncategories: \n- 架构\n---\n\n> [菜鸟教程](http://www.runoob.com/design-pattern)\n> [设计模式在Spring框架中的良好实践](https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect)\n> [实现的demo](https://github.com/im-fan/my-design-mode.git)\n\n## 基础\n### 设计模式的类型\n<img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n### 设计模式实践的关系\n<img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n### 设计模式的六大原则\n```\n1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n```\n\n## 模式详解\n### 1.策略模式(Strategy)\n```\n定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题\n```\n- 示例图片<br/>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n### 2.简单工厂模式( Simple Factory )\n```\n定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；\n```\n\n### 3.工厂模式( Factory )\n```\n针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品\n```\n\n### 4.抽象工厂模式( Abstract Factory )\n```\nhttps://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n### 5.装饰器模式( Decorator )\n```\n动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n### 6.代理模式( Proxy )\n```\n封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n### 7.模板方法模式( Template )\n```\n1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n### 8.外观模式( Facade )\n```\n为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。\n```\n\n### 9.适配器模式( Adapter )\n```\n将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n### 10.桥接模式( Bridge )\n```\n将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n### 11.建造者模式( Builder )\n```\n使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n### 12.观察者模式( Observer )\n```\n定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。\n```\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n### 13.单例模式( Singleton )\n```\n保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n\t加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n\t优点：第一次调用才初始化，避免内存浪费。\n\t缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n\t优点：没有加锁，执行效率会提高。\n\t缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n\t这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n\t这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n\t这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。\n```\n\n### 14.命令模式( Command )\n```\n将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。\n```\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">","slug":"framework/design-model","published":1,"updated":"2020-12-26T03:54:00.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj5hjl4b002jj49k0ficea2w","content":"<blockquote>\n<p><a href=\"http://www.runoob.com/design-pattern\">菜鸟教程</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect\">设计模式在Spring框架中的良好实践</a><br><a href=\"https://github.com/im-fan/my-design-mode.git\">实现的demo</a></p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h3><img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式实践的关系\"><a href=\"#设计模式实践的关系\" class=\"headerlink\" title=\"设计模式实践的关系\"></a>设计模式实践的关系</h3><img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><pre><code>1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</code></pre>\n<h2 id=\"模式详解\"><a href=\"#模式详解\" class=\"headerlink\" title=\"模式详解\"></a>模式详解</h2><h3 id=\"1-策略模式-Strategy\"><a href=\"#1-策略模式-Strategy\" class=\"headerlink\" title=\"1.策略模式(Strategy)\"></a>1.策略模式(Strategy)</h3><pre><code>定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</code></pre>\n<ul>\n<li>示例图片<br/><img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n</li>\n</ul>\n<h3 id=\"2-简单工厂模式-Simple-Factory\"><a href=\"#2-简单工厂模式-Simple-Factory\" class=\"headerlink\" title=\"2.简单工厂模式( Simple Factory )\"></a>2.简单工厂模式( Simple Factory )</h3><pre><code>定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；</code></pre>\n<h3 id=\"3-工厂模式-Factory\"><a href=\"#3-工厂模式-Factory\" class=\"headerlink\" title=\"3.工厂模式( Factory )\"></a>3.工厂模式( Factory )</h3><pre><code>针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品</code></pre>\n<h3 id=\"4-抽象工厂模式-Abstract-Factory\"><a href=\"#4-抽象工厂模式-Abstract-Factory\" class=\"headerlink\" title=\"4.抽象工厂模式( Abstract Factory )\"></a>4.抽象工厂模式( Abstract Factory )</h3><pre><code>https://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n<h3 id=\"5-装饰器模式-Decorator\"><a href=\"#5-装饰器模式-Decorator\" class=\"headerlink\" title=\"5.装饰器模式( Decorator )\"></a>5.装饰器模式( Decorator )</h3><pre><code>动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n<h3 id=\"6-代理模式-Proxy\"><a href=\"#6-代理模式-Proxy\" class=\"headerlink\" title=\"6.代理模式( Proxy )\"></a>6.代理模式( Proxy )</h3><pre><code>封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n<h3 id=\"7-模板方法模式-Template\"><a href=\"#7-模板方法模式-Template\" class=\"headerlink\" title=\"7.模板方法模式( Template )\"></a>7.模板方法模式( Template )</h3><pre><code>1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n<h3 id=\"8-外观模式-Facade\"><a href=\"#8-外观模式-Facade\" class=\"headerlink\" title=\"8.外观模式( Facade )\"></a>8.外观模式( Facade )</h3><pre><code>为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</code></pre>\n<h3 id=\"9-适配器模式-Adapter\"><a href=\"#9-适配器模式-Adapter\" class=\"headerlink\" title=\"9.适配器模式( Adapter )\"></a>9.适配器模式( Adapter )</h3><pre><code>将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n<h3 id=\"10-桥接模式-Bridge\"><a href=\"#10-桥接模式-Bridge\" class=\"headerlink\" title=\"10.桥接模式( Bridge )\"></a>10.桥接模式( Bridge )</h3><pre><code>将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n<h3 id=\"11-建造者模式-Builder\"><a href=\"#11-建造者模式-Builder\" class=\"headerlink\" title=\"11.建造者模式( Builder )\"></a>11.建造者模式( Builder )</h3><pre><code>使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n<h3 id=\"12-观察者模式-Observer\"><a href=\"#12-观察者模式-Observer\" class=\"headerlink\" title=\"12.观察者模式( Observer )\"></a>12.观察者模式( Observer )</h3><pre><code>定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n<h3 id=\"13-单例模式-Singleton\"><a href=\"#13-单例模式-Singleton\" class=\"headerlink\" title=\"13.单例模式( Singleton )\"></a>13.单例模式( Singleton )</h3><pre><code>保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n    加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n    优点：第一次调用才初始化，避免内存浪费。\n    缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n    优点：没有加锁，执行效率会提高。\n    缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n    这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n    这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n    这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</code></pre>\n<h3 id=\"14-命令模式-Command\"><a href=\"#14-命令模式-Command\" class=\"headerlink\" title=\"14.命令模式( Command )\"></a>14.命令模式( Command )</h3><pre><code>将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"http://www.runoob.com/design-pattern\">菜鸟教程</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4ODQ3NjE2OA==&mid=2247485687&idx=2&sn=d1a405491311488c576197b556d357ec&chksm=ec3c9590db4b1c86a13ff39894dbeead2bbcee738a58da96bcb1bc404b6a948bd1f38312176a&mpshare=1&scene=1&srcid=&sharer_sharetime=1570684867528&sharer_shareid=4c8872b4436b495590f58ccf1453ba58&rd2werd=1#wechat_redirect\">设计模式在Spring框架中的良好实践</a><br><a href=\"https://github.com/im-fan/my-design-mode.git\">实现的demo</a></p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h3><img class=\"magplus\" title=\"设计模式类型\" src=\"https://im-fan.gitee.io/img/design-model/design-model-type.jpg\" alt=\"设计模式类型\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式实践的关系\"><a href=\"#设计模式实践的关系\" class=\"headerlink\" title=\"设计模式实践的关系\"></a>设计模式实践的关系</h3><img class=\"magplus\" title=\"设计模式之间的关系\" src=\"http://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\" width=\"700\" height=\"840\">\n\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><pre><code>1、开闭原则（Open Close Principle）\n    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。\n2、里氏代换原则（Liskov Substitution Principle）\n    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3、依赖倒转原则（Dependence Inversion Principle）\n    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n4、接口隔离原则（Interface Segregation Principle）\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n5、迪米特法则，又称最少知道原则（Demeter Principle）\n    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n6、合成复用原则（Composite Reuse Principle）\n    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</code></pre>\n<h2 id=\"模式详解\"><a href=\"#模式详解\" class=\"headerlink\" title=\"模式详解\"></a>模式详解</h2><h3 id=\"1-策略模式-Strategy\"><a href=\"#1-策略模式-Strategy\" class=\"headerlink\" title=\"1.策略模式(Strategy)\"></a>1.策略模式(Strategy)</h3><pre><code>定义个策略接口，不同的实现类提供不同的具体策略算法，通过context方法确定方法执行时具体执行那个子类的方法，属于行为型模式\n混合使用(https://blog.csdn.net/pengpegV5yaya/article/details/25189253)\n优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。\n注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</code></pre>\n<ul>\n<li>示例图片<br/><img src=\"http://www.runoob.com/wp-content/uploads/2014/08/strategy_pattern_uml_diagram.jpg\" />\n\n</li>\n</ul>\n<h3 id=\"2-简单工厂模式-Simple-Factory\"><a href=\"#2-简单工厂模式-Simple-Factory\" class=\"headerlink\" title=\"2.简单工厂模式( Simple Factory )\"></a>2.简单工厂模式( Simple Factory )</h3><pre><code>定义一个用以创建对象的工厂, 根据不同的条件[传参/反射]生成不同的对象，属于创建型模式\n\n- 优点：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的。\n- 缺点：由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；</code></pre>\n<h3 id=\"3-工厂模式-Factory\"><a href=\"#3-工厂模式-Factory\" class=\"headerlink\" title=\"3.工厂模式( Factory )\"></a>3.工厂模式( Factory )</h3><pre><code>针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。简单工厂是一种产品，工厂是多种产品</code></pre>\n<h3 id=\"4-抽象工厂模式-Abstract-Factory\"><a href=\"#4-抽象工厂模式-Abstract-Factory\" class=\"headerlink\" title=\"4.抽象工厂模式( Abstract Factory )\"></a>4.抽象工厂模式( Abstract Factory )</h3><pre><code>https://blog.csdn.net/hguisu/article/details/7505909\n应对产品族概念而生，属于创建型模式\n\n区别\n简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）\n工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）\n抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）\n\n1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。\n2）简单工厂模式：后来出现工业革命。用户不用去创建车。因为客户有一个工厂来帮他创建.想要什么车，这个工厂就可以建。比如想要宝马车。工厂就创建这个系列的车。即工厂可以创建产品。\n3）工厂方法模式时代：为了满足客户，车品牌越来越多，如宝马、比亚迪等，一个工厂无法创建所有的车型。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是轿车工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。\n4）抽象工厂模式时代：随着客户的要求越来越高，轿车必须配置空调。于是这个工厂开始生产轿车和需要的空调。\n\n最终是客户只要对轿车的销售员说：我要宝马空调车，销售员就直接给他宝马空调车了。而不用自己去创建车.</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式的 UML 图\">\n\n<h3 id=\"5-装饰器模式-Decorator\"><a href=\"#5-装饰器模式-Decorator\" class=\"headerlink\" title=\"5.装饰器模式( Decorator )\"></a>5.装饰器模式( Decorator )</h3><pre><code>动态的给一个对象添加一些额外的功能，属于结构型模式\n优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\n缺点：多层装饰比较复杂。\n使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n注意事项：可代替继承。\n\n其他：下图，RedShapeDecorator extends ShapeDecorator</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/decorator_pattern_uml_diagram.jpg\" alt=\"装饰器模式的UML图\"/>\n\n<h3 id=\"6-代理模式-Proxy\"><a href=\"#6-代理模式-Proxy\" class=\"headerlink\" title=\"6.代理模式( Proxy )\"></a>6.代理模式( Proxy )</h3><pre><code>封装被代理对象并限制外界对被代理对象的访问，属于结构型模式\n关键代码：实现与被代理类组合。\n优点： 1、职责清晰。 2、高扩展性。 3、智能化。\n缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n注意事项：\n1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\n2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\" alt=\"代理模式的UML图\">\n\n<h3 id=\"7-模板方法模式-Template\"><a href=\"#7-模板方法模式-Template\" class=\"headerlink\" title=\"7.模板方法模式( Template )\"></a>7.模板方法模式( Template )</h3><pre><code>1.定义一个操作的算法骨架, 并将一些步骤延迟到子类中\n2.一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。属于行为型模式。\n\n优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n注意事项：为防止恶意操作，一般模板方法都加上 final 关键词，否则扩展类就可以自己实现模板方法。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg\" alt=\"模板模式的 UML 图\">\n\n<h3 id=\"8-外观模式-Facade\"><a href=\"#8-外观模式-Facade\" class=\"headerlink\" title=\"8.外观模式( Facade )\"></a>8.外观模式( Facade )</h3><pre><code>为系统向外界提供一个统一的接口、隐藏系统的复杂性（对使用者来说，只关系需要的结果，不关心怎么实现的）；属于结构型模式\n简单理解：电脑开机关机\n启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘\n关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU\n优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。\n使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。</code></pre>\n<h3 id=\"9-适配器模式-Adapter\"><a href=\"#9-适配器模式-Adapter\" class=\"headerlink\" title=\"9.适配器模式( Adapter )\"></a>9.适配器模式( Adapter )</h3><pre><code>将一个类的接口转换成客户希望的另一个接口。属于结构型模式\n简单理解：用于现有业务维护，整合业务逻辑，根据传入的参数来执行具体某个业务\n优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n缺点：\n1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。\n2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。\n\n使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。\n\n注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201204-adapter.png\" alt=\"适配器模式的UML图\">\n\n<h3 id=\"10-桥接模式-Bridge\"><a href=\"#10-桥接模式-Bridge\" class=\"headerlink\" title=\"10.桥接模式( Bridge )\"></a>10.桥接模式( Bridge )</h3><pre><code>将抽象部分与实现部分分离，使它们都可以独立的变化。属于结构型模式\n\n优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n\n缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n\n使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-bridge.svg\" alt=\"桥接模式的UML图\">\n\n<h3 id=\"11-建造者模式-Builder\"><a href=\"#11-建造者模式-Builder\" class=\"headerlink\" title=\"11.建造者模式( Builder )\"></a>11.建造者模式( Builder )</h3><pre><code>使用多个简单的对象一步一步构建成一个复杂的对象。属于创建型模式\n\n优点： 1、建造者独立，易扩展。 2、便于控制细节风险。\n缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。\n注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-builder-pattern.svg\" alt=\"建造者模式的UML图\">\n\n<h3 id=\"12-观察者模式-Observer\"><a href=\"#12-观察者模式-Observer\" class=\"headerlink\" title=\"12.观察者模式( Observer )\"></a>12.观察者模式( Observer )</h3><pre><code>定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者。观察者模式属于行为型模式。\n\n优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n\n缺点：\n    1、观察者太多时，通知观察者会耗时比较久\n    2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。\n    3、观察者模式仅仅只是知道观察目标发生了变化。\n注意事项：\n    1、JAVA 中已经有了对观察者模式的支持类。\n    2、避免循环引用。\n    3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</code></pre>\n<img src=\"http://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\" alt=\"观察者模式的 UML 图\">\n\n<h3 id=\"13-单例模式-Singleton\"><a href=\"#13-单例模式-Singleton\" class=\"headerlink\" title=\"13.单例模式( Singleton )\"></a>13.单例模式( Singleton )</h3><pre><code>保证一个类仅有一个实例,并提供一个访问它的全局控制点.\n优点：\n1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n2、避免对资源的多重占用（比如写文件操作）。\n   缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n单例模式的几种实现方式\n1.懒汉式，线程不安全\n   不加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作\n2.懒汉式，线程安全\n    加锁 synchronized，方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n    优点：第一次调用才初始化，避免内存浪费。\n    缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n3、饿汉式\n    优点：没有加锁，执行效率会提高。\n    缺点：类加载时就初始化，浪费内存。\n4、双检锁/双重校验锁（DCL，即 double-checked locking）\n    这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n5、登记式/静态内部类\n    这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n6、枚举\n    这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</code></pre>\n<h3 id=\"14-命令模式-Command\"><a href=\"#14-命令模式-Command\" class=\"headerlink\" title=\"14.命令模式( Command )\"></a>14.命令模式( Command )</h3><pre><code>将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化\n优点：\n1、降低了系统耦合度。\n2、新的命令可以很容易添加到系统中去。\n缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</code></pre>\n<img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-command-1.svg\" alt=\"命令模式的 UML 图\">"}],"PostAsset":[],"PostCategory":[{"post_id":"ckj5hjl2r0002j49kem345fvq","category_id":"ckj5hjl2z0008j49k73c34gxo","_id":"ckj5hjl39000kj49kcqjq0lah"},{"post_id":"ckj5hjl2w0005j49kfxqz90qe","category_id":"ckj5hjl2z0008j49k73c34gxo","_id":"ckj5hjl3e000qj49k18w67bvf"},{"post_id":"ckj5hjl2x0006j49k5c2o35r0","category_id":"ckj5hjl2z0008j49k73c34gxo","_id":"ckj5hjl3h000vj49k08n0hdks"},{"post_id":"ckj5hjl2p0001j49ka06g7pkb","category_id":"ckj5hjl2t0003j49k6p764m4w","_id":"ckj5hjl3l0011j49kgu8p92eq"},{"post_id":"ckj5hjl2p0001j49ka06g7pkb","category_id":"ckj5hjl3e000pj49kbiuw82le","_id":"ckj5hjl3m0014j49kb9gy8tmb"},{"post_id":"ckj5hjl37000ij49k8byrgmfz","category_id":"ckj5hjl3p001cj49kam4w7m7c","_id":"ckj5hjl3s001jj49k492l322e"},{"post_id":"ckj5hjl3b000mj49kereu6ltx","category_id":"ckj5hjl3p001cj49kam4w7m7c","_id":"ckj5hjl3t001lj49k6fcqb4jy"},{"post_id":"ckj5hjl3d000oj49kffja8zjz","category_id":"ckj5hjl3s001ij49k9h5w61jz","_id":"ckj5hjl3v001pj49kdwkv4qjo"},{"post_id":"ckj5hjl3f000sj49k6pvz89e8","category_id":"ckj5hjl3t001mj49kco0kfp70","_id":"ckj5hjl3x001uj49kfq2od1i0"},{"post_id":"ckj5hjl3g000uj49kfrsmhwol","category_id":"ckj5hjl2t0003j49k6p764m4w","_id":"ckj5hjl40001zj49k8ajqfr30"},{"post_id":"ckj5hjl3g000uj49kfrsmhwol","category_id":"ckj5hjl3v001qj49kapgt7594","_id":"ckj5hjl410020j49k8gt91sef"},{"post_id":"ckj5hjl3i000xj49k26o02dtf","category_id":"ckj5hjl2t0003j49k6p764m4w","_id":"ckj5hjl410022j49kd762104n"},{"post_id":"ckj5hjl3i000xj49k26o02dtf","category_id":"ckj5hjl3v001qj49kapgt7594","_id":"ckj5hjl420024j49k6j6s7szs"},{"post_id":"ckj5hjl2y0007j49k8npwc0rd","category_id":"ckj5hjl3h000wj49k8mne8vcz","_id":"ckj5hjl430026j49k511fa1uk"},{"post_id":"ckj5hjl2y0007j49k8npwc0rd","category_id":"ckj5hjl3z001yj49kfaaegkq5","_id":"ckj5hjl430027j49k0w6nacde"},{"post_id":"ckj5hjl3k0010j49k81b62a8h","category_id":"ckj5hjl2t0003j49k6p764m4w","_id":"ckj5hjl430028j49k5ngu5a5g"},{"post_id":"ckj5hjl3k0010j49k81b62a8h","category_id":"ckj5hjl3v001qj49kapgt7594","_id":"ckj5hjl43002aj49kf4lrg25v"},{"post_id":"ckj5hjl30000bj49kcd383coj","category_id":"ckj5hjl3h000wj49k8mne8vcz","_id":"ckj5hjl44002bj49khhukgbbh"},{"post_id":"ckj5hjl30000bj49kcd383coj","category_id":"ckj5hjl420025j49kca4jhgns","_id":"ckj5hjl47002dj49kc2pi633v"},{"post_id":"ckj5hjl31000dj49k76nogdy5","category_id":"ckj5hjl3n0016j49kcgacf89f","_id":"ckj5hjl47002ej49k4d9w9kmw"},{"post_id":"ckj5hjl31000dj49k76nogdy5","category_id":"ckj5hjl430029j49kbccghvml","_id":"ckj5hjl48002fj49k8o2fc5dj"},{"post_id":"ckj5hjl36000gj49kf78e79c6","category_id":"ckj5hjl3n0016j49kcgacf89f","_id":"ckj5hjl48002gj49kccb71ifu"},{"post_id":"ckj5hjl36000gj49kf78e79c6","category_id":"ckj5hjl44002cj49kd64123a0","_id":"ckj5hjl48002hj49kbs0q833x"},{"post_id":"ckj5hjl4a002ij49k6tzb45o2","category_id":"ckj5hjl2t0003j49k6p764m4w","_id":"ckj5hjl4d002mj49k4wombntl"},{"post_id":"ckj5hjl4a002ij49k6tzb45o2","category_id":"ckj5hjl3v001qj49kapgt7594","_id":"ckj5hjl4d002nj49kd9l7bdmj"},{"post_id":"ckj5hjl4b002jj49k0ficea2w","category_id":"ckj5hjl2z0008j49k73c34gxo","_id":"ckj5hjl4d002oj49kf9wf7yno"}],"PostTag":[{"post_id":"ckj5hjl2x0006j49k5c2o35r0","tag_id":"ckj5hjl2v0004j49kclcr7w7n","_id":"ckj5hjl30000aj49kgy2yhmdr"},{"post_id":"ckj5hjl2p0001j49ka06g7pkb","tag_id":"ckj5hjl2v0004j49kclcr7w7n","_id":"ckj5hjl31000cj49k7bjydrf2"},{"post_id":"ckj5hjl2r0002j49kem345fvq","tag_id":"ckj5hjl2z0009j49k4hzm9qar","_id":"ckj5hjl37000hj49ke253aymk"},{"post_id":"ckj5hjl2w0005j49kfxqz90qe","tag_id":"ckj5hjl33000fj49kffa3498y","_id":"ckj5hjl3d000nj49kgggtdp3o"},{"post_id":"ckj5hjl2y0007j49k8npwc0rd","tag_id":"ckj5hjl3a000lj49kg6ho1kc4","_id":"ckj5hjl3g000tj49khkix0j67"},{"post_id":"ckj5hjl30000bj49kcd383coj","tag_id":"ckj5hjl3e000rj49kcdw391tt","_id":"ckj5hjl3k000zj49k472f3m7w"},{"post_id":"ckj5hjl31000dj49k76nogdy5","tag_id":"ckj5hjl3j000yj49k31397yao","_id":"ckj5hjl3m0015j49k4da04hl3"},{"post_id":"ckj5hjl36000gj49kf78e79c6","tag_id":"ckj5hjl3j000yj49k31397yao","_id":"ckj5hjl3n0018j49kdetc6w7n"},{"post_id":"ckj5hjl37000ij49k8byrgmfz","tag_id":"ckj5hjl3n0017j49k5jp75kki","_id":"ckj5hjl3o001bj49k3xu52wiq"},{"post_id":"ckj5hjl3b000mj49kereu6ltx","tag_id":"ckj5hjl3o001aj49kddw6a7j9","_id":"ckj5hjl3q001ej49k7wdceuua"},{"post_id":"ckj5hjl3d000oj49kffja8zjz","tag_id":"ckj5hjl3p001dj49k7hwtd942","_id":"ckj5hjl3s001hj49kdubsg8im"},{"post_id":"ckj5hjl3f000sj49k6pvz89e8","tag_id":"ckj5hjl3r001gj49k7zdg9ym8","_id":"ckj5hjl3v001oj49khw9edx0d"},{"post_id":"ckj5hjl3f000sj49k6pvz89e8","tag_id":"ckj5hjl3s001kj49kbp2o7nqg","_id":"ckj5hjl3w001rj49k2ks3hzhq"},{"post_id":"ckj5hjl3g000uj49kfrsmhwol","tag_id":"ckj5hjl3t001nj49k331wf48r","_id":"ckj5hjl3x001tj49k1gcfgfwk"},{"post_id":"ckj5hjl3i000xj49k26o02dtf","tag_id":"ckj5hjl3t001nj49k331wf48r","_id":"ckj5hjl3z001xj49k67179y2y"},{"post_id":"ckj5hjl3k0010j49k81b62a8h","tag_id":"ckj5hjl3t001nj49k331wf48r","_id":"ckj5hjl410021j49kfhn8385z"},{"post_id":"ckj5hjl4a002ij49k6tzb45o2","tag_id":"ckj5hjl3t001nj49k331wf48r","_id":"ckj5hjl4c002kj49k4cz8895l"},{"post_id":"ckj5hjl4b002jj49k0ficea2w","tag_id":"ckj5hjl4c002lj49k3kd4e79f","_id":"ckj5hjl4d002pj49kg3nahzs2"}],"Tag":[{"name":"oauth2","_id":"ckj5hjl2v0004j49kclcr7w7n"},{"name":"COLA","_id":"ckj5hjl2z0009j49k4hzm9qar"},{"name":"DDD","_id":"ckj5hjl33000fj49kffa3498y"},{"name":"常用语","_id":"ckj5hjl3a000lj49kg6ho1kc4"},{"name":"思维","_id":"ckj5hjl3e000rj49kcdw391tt"},{"name":"tool","_id":"ckj5hjl3j000yj49k31397yao"},{"name":"canal","_id":"ckj5hjl3n0017j49k5jp75kki"},{"name":"mysql","_id":"ckj5hjl3o001aj49kddw6a7j9"},{"name":"zookeeper","_id":"ckj5hjl3p001dj49k7hwtd942"},{"name":"uml","_id":"ckj5hjl3r001gj49k7zdg9ym8"},{"name":"类图","_id":"ckj5hjl3s001kj49kbp2o7nqg"},{"name":"utils","_id":"ckj5hjl3t001nj49k331wf48r"},{"name":"设计模式","_id":"ckj5hjl4c002lj49k3kd4e79f"}]}}